/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@asciidoctor/core/dist/browser/asciidoctor.js
var require_asciidoctor = __commonJS({
  "node_modules/@asciidoctor/core/dist/browser/asciidoctor.js"(exports, module) {
    (function(undefined2) {
      var global_object = this, console2;
      if (typeof global !== "undefined") {
        global_object = global;
      }
      if (typeof window !== "undefined") {
        global_object = window;
      }
      if (typeof global_object.console === "object") {
        console2 = global_object.console;
      } else if (global_object.console == null) {
        console2 = global_object.console = {};
      } else {
        console2 = {};
      }
      if (!("log" in console2)) {
        console2.log = function() {
        };
      }
      if (!("warn" in console2)) {
        console2.warn = console2.log;
      }
      if (typeof global_object.Opal !== "undefined") {
        console2.warn("Opal already loaded. Loading twice can cause troubles, please fix your setup.");
        return global_object.Opal;
      }
      var nil2;
      var BasicObject;
      var _Object;
      var Module;
      var Class;
      var Opal2 = this.Opal = {};
      Opal2.global = global_object;
      global_object.Opal = Opal2;
      Opal2.config = {
        missing_require_severity: "error",
        unsupported_features_severity: "warning",
        enable_stack_trace: true
      };
      var $hasOwn = Object.hasOwnProperty;
      var $bind = Function.prototype.bind;
      var $setPrototype = Object.setPrototypeOf;
      var $slice2 = Array.prototype.slice;
      var $splice = Array.prototype.splice;
      var nil_id = 4;
      var unique_id = nil_id;
      Opal2.uid = function() {
        unique_id += 2;
        return unique_id;
      };
      Opal2.id = function(obj) {
        if (obj.$$is_number)
          return obj * 2 + 1;
        if (obj.$$id != null) {
          return obj.$$id;
        }
        ;
        $defineProperty(obj, "$$id", Opal2.uid());
        return obj.$$id;
      };
      Opal2.gvars = {};
      Opal2.exit = function(status) {
        if (Opal2.gvars.DEBUG)
          console2.log("Exited with status " + status);
      };
      Opal2.exceptions = [];
      Opal2.pop_exception = function() {
        Opal2.gvars["!"] = Opal2.exceptions.pop() || nil2;
      };
      Opal2.inspect = function(obj) {
        if (obj === undefined2) {
          return "undefined";
        } else if (obj === null) {
          return "null";
        } else if (!obj.$$class) {
          return obj.toString();
        } else {
          return obj.$inspect();
        }
      };
      function $defineProperty(object, name, initialValue) {
        if (typeof object === "string") {
          object[name] = initialValue;
        } else {
          Object.defineProperty(object, name, {
            value: initialValue,
            enumerable: false,
            configurable: true,
            writable: true
          });
        }
      }
      Opal2.defineProperty = $defineProperty;
      Opal2.slice = $slice2;
      Opal2.truthy = function(val) {
        return val !== nil2 && val != null && (!val.$$is_boolean || val == true);
      };
      Opal2.falsy = function(val) {
        return val === nil2 || val == null || val.$$is_boolean && val == false;
      };
      function const_get_name(cref, name) {
        if (cref)
          return cref.$$const[name];
      }
      function const_lookup_nesting(nesting, name) {
        var i, ii, result2, constant;
        if (nesting.length === 0)
          return;
        for (i = 0, ii = nesting.length; i < ii; i++) {
          constant = nesting[i].$$const[name];
          if (constant != null)
            return constant;
        }
      }
      function const_lookup_ancestors(cref, name) {
        var i, ii, result2, ancestors;
        if (cref == null)
          return;
        ancestors = Opal2.ancestors(cref);
        for (i = 0, ii = ancestors.length; i < ii; i++) {
          if (ancestors[i].$$const && $hasOwn.call(ancestors[i].$$const, name)) {
            return ancestors[i].$$const[name];
          }
        }
      }
      function const_lookup_Object(cref, name) {
        if (cref == null || cref.$$is_module) {
          return const_lookup_ancestors(_Object, name);
        }
      }
      function const_missing(cref, name, skip_missing) {
        if (!skip_missing) {
          return (cref || _Object).$const_missing(name);
        }
      }
      Opal2.const_get_local = function(cref, name, skip_missing) {
        var result2;
        if (cref == null)
          return;
        if (cref === "::")
          cref = _Object;
        if (!cref.$$is_module && !cref.$$is_class) {
          throw new Opal2.TypeError(cref.toString() + " is not a class/module");
        }
        result2 = const_get_name(cref, name);
        if (result2 != null)
          return result2;
        result2 = const_missing(cref, name, skip_missing);
        if (result2 != null)
          return result2;
      };
      Opal2.const_get_qualified = function(cref, name, skip_missing) {
        var result2, cache, cached, current_version = Opal2.const_cache_version;
        if (cref == null)
          return;
        if (cref === "::")
          cref = _Object;
        if (!cref.$$is_module && !cref.$$is_class) {
          throw new Opal2.TypeError(cref.toString() + " is not a class/module");
        }
        if ((cache = cref.$$const_cache) == null) {
          $defineProperty(cref, "$$const_cache", Object.create(null));
          cache = cref.$$const_cache;
        }
        cached = cache[name];
        if (cached == null || cached[0] !== current_version) {
          (result2 = const_get_name(cref, name)) != null || (result2 = const_lookup_ancestors(cref, name)) != null;
          cache[name] = [current_version, result2];
        } else {
          result2 = cached[1];
        }
        return result2 != null ? result2 : const_missing(cref, name, skip_missing);
      };
      Opal2.const_cache_version = 1;
      Opal2.const_get_relative = function(nesting, name, skip_missing) {
        var cref = nesting[0], result2, current_version = Opal2.const_cache_version, cache, cached;
        if ((cache = nesting.$$const_cache) == null) {
          $defineProperty(nesting, "$$const_cache", Object.create(null));
          cache = nesting.$$const_cache;
        }
        cached = cache[name];
        if (cached == null || cached[0] !== current_version) {
          (result2 = const_get_name(cref, name)) != null || (result2 = const_lookup_nesting(nesting, name)) != null || (result2 = const_lookup_ancestors(cref, name)) != null || (result2 = const_lookup_Object(cref, name)) != null;
          cache[name] = [current_version, result2];
        } else {
          result2 = cached[1];
        }
        return result2 != null ? result2 : const_missing(cref, name, skip_missing);
      };
      Opal2.const_set = function(cref, name, value) {
        if (cref == null || cref === "::")
          cref = _Object;
        if (value.$$is_a_module) {
          if (value.$$name == null || value.$$name === nil2)
            value.$$name = name;
          if (value.$$base_module == null)
            value.$$base_module = cref;
        }
        cref.$$const = cref.$$const || Object.create(null);
        cref.$$const[name] = value;
        cref.$$ = cref.$$const;
        Opal2.const_cache_version++;
        if (cref === _Object)
          Opal2[name] = value;
        $defineProperty(cref, name, value);
        return value;
      };
      Opal2.constants = function(cref, inherit) {
        if (inherit == null)
          inherit = true;
        var module2, modules = [cref], module_constants, i, ii, constants = {}, constant;
        if (inherit)
          modules = modules.concat(Opal2.ancestors(cref));
        if (inherit && cref.$$is_module)
          modules = modules.concat([Opal2.Object]).concat(Opal2.ancestors(Opal2.Object));
        for (i = 0, ii = modules.length; i < ii; i++) {
          module2 = modules[i];
          if (cref !== _Object && module2 == _Object)
            break;
          for (constant in module2.$$const) {
            constants[constant] = true;
          }
        }
        return Object.keys(constants);
      };
      Opal2.const_remove = function(cref, name) {
        Opal2.const_cache_version++;
        if (cref.$$const[name] != null) {
          var old2 = cref.$$const[name];
          delete cref.$$const[name];
          return old2;
        }
        if (cref.$$autoload != null && cref.$$autoload[name] != null) {
          delete cref.$$autoload[name];
          return nil2;
        }
        throw Opal2.NameError.$new("constant " + cref + "::" + cref.$name() + " not defined");
      };
      Opal2.allocate_class = function(name, superclass) {
        var klass, constructor;
        if (superclass != null && superclass.$$bridge) {
          constructor = function() {
            var args2 = $slice2.call(arguments), self2 = new ($bind.apply(superclass.$$constructor, [null].concat(args2)))();
            $setPrototype(self2, klass.$$prototype);
            return self2;
          };
        } else {
          constructor = function() {
          };
        }
        if (name) {
          $defineProperty(constructor, "displayName", "::" + name);
        }
        klass = constructor;
        $defineProperty(klass, "$$name", name);
        $defineProperty(klass, "$$constructor", constructor);
        $defineProperty(klass, "$$prototype", constructor.prototype);
        $defineProperty(klass, "$$const", {});
        $defineProperty(klass, "$$is_class", true);
        $defineProperty(klass, "$$is_a_module", true);
        $defineProperty(klass, "$$super", superclass);
        $defineProperty(klass, "$$cvars", {});
        $defineProperty(klass, "$$own_included_modules", []);
        $defineProperty(klass, "$$own_prepended_modules", []);
        $defineProperty(klass, "$$ancestors", []);
        $defineProperty(klass, "$$ancestors_cache_version", null);
        $defineProperty(klass.$$prototype, "$$class", klass);
        if (Opal2.Class) {
          $setPrototype(klass, Opal2.Class.prototype);
        }
        if (superclass != null) {
          $setPrototype(klass.$$prototype, superclass.$$prototype);
          if (superclass.$$meta) {
            Opal2.build_class_singleton_class(klass);
          }
        }
        ;
        return klass;
      };
      function find_existing_class(scope, name) {
        var klass = const_get_name(scope, name);
        if (klass) {
          if (!klass.$$is_class) {
            throw Opal2.TypeError.$new(name + " is not a class");
          }
          return klass;
        }
      }
      function ensureSuperclassMatch(klass, superclass) {
        if (klass.$$super !== superclass) {
          throw Opal2.TypeError.$new("superclass mismatch for class " + klass.$$name);
        }
      }
      Opal2.klass = function(scope, superclass, name) {
        var bridged;
        if (scope == null) {
          scope = _Object;
        } else if (!scope.$$is_class && !scope.$$is_module) {
          scope = scope.$$class;
        }
        if (superclass != null && !superclass.hasOwnProperty("$$is_class")) {
          bridged = superclass;
          superclass = _Object;
        }
        var klass = find_existing_class(scope, name);
        if (klass) {
          if (superclass) {
            ensureSuperclassMatch(klass, superclass);
          }
          return klass;
        }
        if (superclass == null) {
          superclass = _Object;
        }
        klass = Opal2.allocate_class(name, superclass);
        Opal2.const_set(scope, name, klass);
        if (superclass.$inherited) {
          superclass.$inherited(klass);
        }
        if (bridged) {
          Opal2.bridge(bridged, klass);
        }
        return klass;
      };
      Opal2.allocate_module = function(name) {
        var constructor = function() {
        };
        if (name) {
          $defineProperty(constructor, "displayName", name + ".$$constructor");
        }
        var module2 = constructor;
        if (name)
          $defineProperty(constructor, "displayName", name + ".constructor");
        $defineProperty(module2, "$$name", name);
        $defineProperty(module2, "$$prototype", constructor.prototype);
        $defineProperty(module2, "$$const", {});
        $defineProperty(module2, "$$is_module", true);
        $defineProperty(module2, "$$is_a_module", true);
        $defineProperty(module2, "$$cvars", {});
        $defineProperty(module2, "$$iclasses", []);
        $defineProperty(module2, "$$own_included_modules", []);
        $defineProperty(module2, "$$own_prepended_modules", []);
        $defineProperty(module2, "$$ancestors", [module2]);
        $defineProperty(module2, "$$ancestors_cache_version", null);
        $setPrototype(module2, Opal2.Module.prototype);
        return module2;
      };
      function find_existing_module(scope, name) {
        var module2 = const_get_name(scope, name);
        if (module2 == null && scope === _Object)
          module2 = const_lookup_ancestors(_Object, name);
        if (module2) {
          if (!module2.$$is_module && module2 !== _Object) {
            throw Opal2.TypeError.$new(name + " is not a module");
          }
        }
        return module2;
      }
      Opal2.module = function(scope, name) {
        var module2;
        if (scope == null) {
          scope = _Object;
        } else if (!scope.$$is_class && !scope.$$is_module) {
          scope = scope.$$class;
        }
        module2 = find_existing_module(scope, name);
        if (module2) {
          return module2;
        }
        module2 = Opal2.allocate_module(name);
        Opal2.const_set(scope, name, module2);
        return module2;
      };
      Opal2.get_singleton_class = function(object) {
        if (object.$$meta) {
          return object.$$meta;
        }
        if (object.hasOwnProperty("$$is_class")) {
          return Opal2.build_class_singleton_class(object);
        } else if (object.hasOwnProperty("$$is_module")) {
          return Opal2.build_module_singletin_class(object);
        } else {
          return Opal2.build_object_singleton_class(object);
        }
      };
      Opal2.build_class_singleton_class = function(klass) {
        var superclass, meta;
        if (klass.$$meta) {
          return klass.$$meta;
        }
        superclass = klass === BasicObject ? Class : Opal2.get_singleton_class(klass.$$super);
        meta = Opal2.allocate_class(null, superclass, function() {
        });
        $defineProperty(meta, "$$is_singleton", true);
        $defineProperty(meta, "$$singleton_of", klass);
        $defineProperty(klass, "$$meta", meta);
        $setPrototype(klass, meta.$$prototype);
        $defineProperty(klass, "$$class", Opal2.Class);
        return meta;
      };
      Opal2.build_module_singletin_class = function(mod) {
        if (mod.$$meta) {
          return mod.$$meta;
        }
        var meta = Opal2.allocate_class(null, Opal2.Module, function() {
        });
        $defineProperty(meta, "$$is_singleton", true);
        $defineProperty(meta, "$$singleton_of", mod);
        $defineProperty(mod, "$$meta", meta);
        $setPrototype(mod, meta.$$prototype);
        $defineProperty(mod, "$$class", Opal2.Module);
        return meta;
      };
      Opal2.build_object_singleton_class = function(object) {
        var superclass = object.$$class, klass = Opal2.allocate_class(nil2, superclass, function() {
        });
        $defineProperty(klass, "$$is_singleton", true);
        $defineProperty(klass, "$$singleton_of", object);
        delete klass.$$prototype.$$class;
        $defineProperty(object, "$$meta", klass);
        $setPrototype(object, object.$$meta.$$prototype);
        return klass;
      };
      Opal2.is_method = function(prop) {
        return prop[0] === "$" && prop[1] !== "$";
      };
      Opal2.instance_methods = function(mod) {
        var exclude = [], results = [], ancestors = Opal2.ancestors(mod);
        for (var i = 0, l = ancestors.length; i < l; i++) {
          var ancestor = ancestors[i], proto = ancestor.$$prototype;
          if (proto.hasOwnProperty("$$dummy")) {
            proto = proto.$$define_methods_on;
          }
          var props = Object.getOwnPropertyNames(proto);
          for (var j = 0, ll = props.length; j < ll; j++) {
            var prop = props[j];
            if (Opal2.is_method(prop)) {
              var method_name = prop.slice(1), method = proto[prop];
              if (method.$$stub && exclude.indexOf(method_name) === -1) {
                exclude.push(method_name);
              }
              if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {
                results.push(method_name);
              }
            }
          }
        }
        return results;
      };
      Opal2.own_instance_methods = function(mod) {
        var results = [], proto = mod.$$prototype;
        if (proto.hasOwnProperty("$$dummy")) {
          proto = proto.$$define_methods_on;
        }
        var props = Object.getOwnPropertyNames(proto);
        for (var i = 0, length = props.length; i < length; i++) {
          var prop = props[i];
          if (Opal2.is_method(prop)) {
            var method = proto[prop];
            if (!method.$$stub) {
              var method_name = prop.slice(1);
              results.push(method_name);
            }
          }
        }
        return results;
      };
      Opal2.methods = function(obj) {
        return Opal2.instance_methods(Opal2.get_singleton_class(obj));
      };
      Opal2.own_methods = function(obj) {
        return Opal2.own_instance_methods(Opal2.get_singleton_class(obj));
      };
      Opal2.receiver_methods = function(obj) {
        var mod = Opal2.get_singleton_class(obj);
        var singleton_methods = Opal2.own_instance_methods(mod);
        var instance_methods = Opal2.own_instance_methods(mod.$$super);
        return singleton_methods.concat(instance_methods);
      };
      Opal2.class_variables = function(module2) {
        var ancestors = Opal2.ancestors(module2), i, length = ancestors.length, result2 = {};
        for (i = length - 1; i >= 0; i--) {
          var ancestor = ancestors[i];
          for (var cvar in ancestor.$$cvars) {
            result2[cvar] = ancestor.$$cvars[cvar];
          }
        }
        return result2;
      };
      Opal2.class_variable_set = function(module2, name, value) {
        var ancestors = Opal2.ancestors(module2), i, length = ancestors.length;
        for (i = length - 2; i >= 0; i--) {
          var ancestor = ancestors[i];
          if ($hasOwn.call(ancestor.$$cvars, name)) {
            ancestor.$$cvars[name] = value;
            return value;
          }
        }
        module2.$$cvars[name] = value;
        return value;
      };
      function isRoot(proto) {
        return proto.hasOwnProperty("$$iclass") && proto.hasOwnProperty("$$root");
      }
      function own_included_modules(module2) {
        var result2 = [], mod, proto = Object.getPrototypeOf(module2.$$prototype);
        while (proto) {
          if (proto.hasOwnProperty("$$class")) {
            break;
          }
          mod = protoToModule(proto);
          if (mod) {
            result2.push(mod);
          }
          proto = Object.getPrototypeOf(proto);
        }
        return result2;
      }
      function own_prepended_modules(module2) {
        var result2 = [], mod, proto = Object.getPrototypeOf(module2.$$prototype);
        if (module2.$$prototype.hasOwnProperty("$$dummy")) {
          while (proto) {
            if (proto === module2.$$prototype.$$define_methods_on) {
              break;
            }
            mod = protoToModule(proto);
            if (mod) {
              result2.push(mod);
            }
            proto = Object.getPrototypeOf(proto);
          }
        }
        return result2;
      }
      Opal2.append_features = function(module2, includer) {
        var module_ancestors = Opal2.ancestors(module2);
        var iclasses = [];
        if (module_ancestors.indexOf(includer) !== -1) {
          throw Opal2.ArgumentError.$new("cyclic include detected");
        }
        for (var i = 0, length = module_ancestors.length; i < length; i++) {
          var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
          $defineProperty(iclass, "$$included", true);
          iclasses.push(iclass);
        }
        var includer_ancestors = Opal2.ancestors(includer), chain = chain_iclasses(iclasses), start_chain_after, end_chain_on;
        if (includer_ancestors.indexOf(module2) === -1) {
          start_chain_after = includer.$$prototype;
          end_chain_on = Object.getPrototypeOf(includer.$$prototype);
        } else {
          var proto = includer.$$prototype, parent = proto, module_iclass = Object.getPrototypeOf(parent);
          while (module_iclass != null) {
            if (isRoot(module_iclass) && module_iclass.$$module === module2) {
              break;
            }
            parent = module_iclass;
            module_iclass = Object.getPrototypeOf(module_iclass);
          }
          var next_ancestor = Object.getPrototypeOf(module_iclass);
          while (next_ancestor.hasOwnProperty("$$iclass") && !isRoot(next_ancestor)) {
            next_ancestor = Object.getPrototypeOf(next_ancestor);
          }
          start_chain_after = parent;
          end_chain_on = next_ancestor;
        }
        $setPrototype(start_chain_after, chain.first);
        $setPrototype(chain.last, end_chain_on);
        includer.$$own_included_modules = own_included_modules(includer);
        Opal2.const_cache_version++;
      };
      Opal2.prepend_features = function(module2, prepender) {
        var module_ancestors = Opal2.ancestors(module2);
        var iclasses = [];
        if (module_ancestors.indexOf(prepender) !== -1) {
          throw Opal2.ArgumentError.$new("cyclic prepend detected");
        }
        for (var i = 0, length = module_ancestors.length; i < length; i++) {
          var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
          $defineProperty(iclass, "$$prepended", true);
          iclasses.push(iclass);
        }
        var chain = chain_iclasses(iclasses), dummy_prepender = prepender.$$prototype, previous_parent = Object.getPrototypeOf(dummy_prepender), prepender_iclass, start_chain_after, end_chain_on;
        if (dummy_prepender.hasOwnProperty("$$dummy")) {
          prepender_iclass = dummy_prepender.$$define_methods_on;
        } else {
          prepender_iclass = create_dummy_iclass(prepender);
          flush_methods_in(prepender);
          $defineProperty(dummy_prepender, "$$dummy", true);
          $defineProperty(dummy_prepender, "$$define_methods_on", prepender_iclass);
          $setPrototype(dummy_prepender, prepender_iclass);
          $setPrototype(prepender_iclass, previous_parent);
        }
        var prepender_ancestors = Opal2.ancestors(prepender);
        if (prepender_ancestors.indexOf(module2) === -1) {
          start_chain_after = dummy_prepender;
          end_chain_on = Object.getPrototypeOf(dummy_prepender);
          while (end_chain_on != null) {
            if (end_chain_on.hasOwnProperty("$$root") || end_chain_on === prepender_iclass || !end_chain_on.hasOwnProperty("$$iclass")) {
              break;
            }
            end_chain_on = Object.getPrototypeOf(end_chain_on);
          }
        } else {
          throw Opal2.RuntimeError.$new("Prepending a module multiple times is not supported");
        }
        $setPrototype(start_chain_after, chain.first);
        $setPrototype(chain.last, end_chain_on);
        prepender.$$own_prepended_modules = own_prepended_modules(prepender);
        Opal2.const_cache_version++;
      };
      function flush_methods_in(module2) {
        var proto = module2.$$prototype, props = Object.getOwnPropertyNames(proto);
        for (var i = 0; i < props.length; i++) {
          var prop = props[i];
          if (Opal2.is_method(prop)) {
            delete proto[prop];
          }
        }
      }
      function create_iclass(module2) {
        var iclass = create_dummy_iclass(module2);
        if (module2.$$is_module) {
          module2.$$iclasses.push(iclass);
        }
        return iclass;
      }
      function create_dummy_iclass(module2) {
        var iclass = {}, proto = module2.$$prototype;
        if (proto.hasOwnProperty("$$dummy")) {
          proto = proto.$$define_methods_on;
        }
        var props = Object.getOwnPropertyNames(proto), length = props.length, i;
        for (i = 0; i < length; i++) {
          var prop = props[i];
          $defineProperty(iclass, prop, proto[prop]);
        }
        $defineProperty(iclass, "$$iclass", true);
        $defineProperty(iclass, "$$module", module2);
        return iclass;
      }
      function chain_iclasses(iclasses) {
        var length = iclasses.length, first = iclasses[0];
        $defineProperty(first, "$$root", true);
        if (length === 1) {
          return { first, last: first };
        }
        var previous = first;
        for (var i = 1; i < length; i++) {
          var current = iclasses[i];
          $setPrototype(previous, current);
          previous = current;
        }
        return { first: iclasses[0], last: iclasses[length - 1] };
      }
      Opal2.bridge = function(native_klass, klass) {
        if (native_klass.hasOwnProperty("$$bridge")) {
          throw Opal2.ArgumentError.$new("already bridged");
        }
        var klass_to_inject, klass_reference;
        klass_to_inject = klass.$$super || Opal2.Object;
        klass_reference = klass;
        var original_prototype = klass.$$prototype;
        $defineProperty(native_klass, "$$bridge", klass);
        $setPrototype(native_klass.prototype, (klass.$$super || Opal2.Object).$$prototype);
        $defineProperty(klass, "$$prototype", native_klass.prototype);
        $defineProperty(klass.$$prototype, "$$class", klass);
        $defineProperty(klass, "$$constructor", native_klass);
        $defineProperty(klass, "$$bridge", true);
      };
      function protoToModule(proto) {
        if (proto.hasOwnProperty("$$dummy")) {
          return;
        } else if (proto.hasOwnProperty("$$iclass")) {
          return proto.$$module;
        } else if (proto.hasOwnProperty("$$class")) {
          return proto.$$class;
        }
      }
      function own_ancestors(module2) {
        return module2.$$own_prepended_modules.concat([module2]).concat(module2.$$own_included_modules);
      }
      Opal2.ancestors = function(module2) {
        if (!module2) {
          return [];
        }
        if (module2.$$ancestors_cache_version === Opal2.const_cache_version) {
          return module2.$$ancestors;
        }
        var result2 = [], i, mods, length;
        for (i = 0, mods = own_ancestors(module2), length = mods.length; i < length; i++) {
          result2.push(mods[i]);
        }
        if (module2.$$super) {
          for (i = 0, mods = Opal2.ancestors(module2.$$super), length = mods.length; i < length; i++) {
            result2.push(mods[i]);
          }
        }
        module2.$$ancestors_cache_version = Opal2.const_cache_version;
        module2.$$ancestors = result2;
        return result2;
      };
      Opal2.included_modules = function(module2) {
        var result2 = [], mod = null, proto = Object.getPrototypeOf(module2.$$prototype);
        for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {
          mod = protoToModule(proto);
          if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {
            result2.push(mod);
          }
        }
        return result2;
      };
      Opal2.add_stubs = function(stubs) {
        var proto = Opal2.BasicObject.$$prototype;
        for (var i = 0, length = stubs.length; i < length; i++) {
          var stub = stubs[i], existing_method = proto[stub];
          if (existing_method == null || existing_method.$$stub) {
            Opal2.add_stub_for(proto, stub);
          }
        }
      };
      Opal2.add_stub_for = function(prototype, stub) {
        var method_missing_stub = Opal2.stub_for(stub);
        $defineProperty(prototype, stub, method_missing_stub);
      };
      Opal2.stub_for = function(method_name) {
        function method_missing_stub() {
          this.$method_missing.$$p = method_missing_stub.$$p;
          method_missing_stub.$$p = null;
          var args_ary = new Array(arguments.length);
          for (var i = 0, l = args_ary.length; i < l; i++) {
            args_ary[i] = arguments[i];
          }
          return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
        }
        method_missing_stub.$$stub = true;
        return method_missing_stub;
      };
      Opal2.ac = function(actual, expected, object, meth) {
        var inspect = "";
        if (object.$$is_a_module) {
          inspect += object.$$name + ".";
        } else {
          inspect += object.$$class.$$name + "#";
        }
        inspect += meth;
        throw Opal2.ArgumentError.$new("[" + inspect + "] wrong number of arguments(" + actual + " for " + expected + ")");
      };
      Opal2.block_ac = function(actual, expected, context) {
        var inspect = "`block in " + context + "'";
        throw Opal2.ArgumentError.$new(inspect + ": wrong number of arguments (" + actual + " for " + expected + ")");
      };
      Opal2.find_super_dispatcher = function(obj, mid, current_func, defcheck, defs) {
        var jsid = "$" + mid, ancestors, super_method;
        if (obj.hasOwnProperty("$$meta")) {
          ancestors = Opal2.ancestors(obj.$$meta);
        } else {
          ancestors = Opal2.ancestors(obj.$$class);
        }
        var current_index = ancestors.indexOf(current_func.$$owner);
        for (var i = current_index + 1; i < ancestors.length; i++) {
          var ancestor = ancestors[i], proto = ancestor.$$prototype;
          if (proto.hasOwnProperty("$$dummy")) {
            proto = proto.$$define_methods_on;
          }
          if (proto.hasOwnProperty(jsid)) {
            var method = proto[jsid];
            if (!method.$$stub) {
              super_method = method;
            }
            break;
          }
        }
        if (!defcheck && super_method == null && Opal2.Kernel.$method_missing === obj.$method_missing) {
          throw Opal2.NoMethodError.$new("super: no superclass method `" + mid + "' for " + obj, mid);
        }
        return super_method;
      };
      Opal2.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
        var call_jsid = jsid;
        if (!current_func) {
          throw Opal2.RuntimeError.$new("super called outside of method");
        }
        if (implicit && current_func.$$define_meth) {
          throw Opal2.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
        }
        if (current_func.$$def) {
          call_jsid = current_func.$$jsid;
        }
        return Opal2.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
      };
      Opal2.ret = function(val) {
        Opal2.returner.$v = val;
        throw Opal2.returner;
      };
      Opal2.brk = function(val, breaker) {
        breaker.$v = val;
        throw breaker;
      };
      Opal2.new_brk = function() {
        return new Error("unexpected break");
      };
      Opal2.yield1 = function(block2, arg) {
        if (typeof block2 !== "function") {
          throw Opal2.LocalJumpError.$new("no block given");
        }
        var has_mlhs = block2.$$has_top_level_mlhs_arg, has_trailing_comma = block2.$$has_trailing_comma_in_args;
        if (block2.length > 1 || (has_mlhs || has_trailing_comma) && block2.length === 1) {
          arg = Opal2.to_ary(arg);
        }
        if ((block2.length > 1 || has_trailing_comma && block2.length === 1) && arg.$$is_array) {
          return block2.apply(null, arg);
        } else {
          return block2(arg);
        }
      };
      Opal2.yieldX = function(block2, args2) {
        if (typeof block2 !== "function") {
          throw Opal2.LocalJumpError.$new("no block given");
        }
        if (block2.length > 1 && args2.length === 1) {
          if (args2[0].$$is_array) {
            return block2.apply(null, args2[0]);
          }
        }
        if (!args2.$$is_array) {
          var args_ary = new Array(args2.length);
          for (var i = 0, l = args_ary.length; i < l; i++) {
            args_ary[i] = args2[i];
          }
          return block2.apply(null, args_ary);
        }
        return block2.apply(null, args2);
      };
      Opal2.rescue = function(exception, candidates) {
        for (var i = 0; i < candidates.length; i++) {
          var candidate = candidates[i];
          if (candidate.$$is_array) {
            var result2 = Opal2.rescue(exception, candidate);
            if (result2) {
              return result2;
            }
          } else if (candidate === Opal2.JS.Error) {
            return candidate;
          } else if (candidate["$==="](exception)) {
            return candidate;
          }
        }
        return null;
      };
      Opal2.is_a = function(object, klass) {
        if (klass != null && object.$$meta === klass || object.$$class === klass) {
          return true;
        }
        if (object.$$is_number && klass.$$is_number_class) {
          return true;
        }
        var i, length, ancestors = Opal2.ancestors(object.$$is_class ? Opal2.get_singleton_class(object) : object.$$meta || object.$$class);
        for (i = 0, length = ancestors.length; i < length; i++) {
          if (ancestors[i] === klass) {
            return true;
          }
        }
        return false;
      };
      Opal2.to_hash = function(value) {
        if (value.$$is_hash) {
          return value;
        } else if (value["$respond_to?"]("to_hash", true)) {
          var hash = value.$to_hash();
          if (hash.$$is_hash) {
            return hash;
          } else {
            throw Opal2.TypeError.$new("Can't convert " + value.$$class + " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
          }
        } else {
          throw Opal2.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
        }
      };
      Opal2.to_ary = function(value) {
        if (value.$$is_array) {
          return value;
        } else if (value["$respond_to?"]("to_ary", true)) {
          var ary = value.$to_ary();
          if (ary === nil2) {
            return [value];
          } else if (ary.$$is_array) {
            return ary;
          } else {
            throw Opal2.TypeError.$new("Can't convert " + value.$$class + " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
          }
        } else {
          return [value];
        }
      };
      Opal2.to_a = function(value) {
        if (value.$$is_array) {
          return value.slice();
        } else if (value["$respond_to?"]("to_a", true)) {
          var ary = value.$to_a();
          if (ary === nil2) {
            return [value];
          } else if (ary.$$is_array) {
            return ary;
          } else {
            throw Opal2.TypeError.$new("Can't convert " + value.$$class + " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
          }
        } else {
          return [value];
        }
      };
      Opal2.extract_kwargs = function(parameters) {
        var kwargs = parameters[parameters.length - 1];
        if (kwargs != null && kwargs["$respond_to?"]("to_hash", true)) {
          $splice.call(parameters, parameters.length - 1, 1);
          return kwargs.$to_hash();
        } else {
          return Opal2.hash2([], {});
        }
      };
      Opal2.kwrestargs = function(given_args, used_args) {
        var keys = [], map = {}, key = null, given_map = given_args.$$smap;
        for (key in given_map) {
          if (!used_args[key]) {
            keys.push(key);
            map[key] = given_map[key];
          }
        }
        return Opal2.hash2(keys, map);
      };
      Opal2.send = function(recv, method, args2, block2) {
        var body = typeof method === "string" ? recv["$" + method] : method;
        if (body != null) {
          if (typeof block2 === "function") {
            body.$$p = block2;
          }
          return body.apply(recv, args2);
        }
        return recv.$method_missing.apply(recv, [method].concat(args2));
      };
      Opal2.lambda = function(block2) {
        block2.$$is_lambda = true;
        return block2;
      };
      Opal2.def = function(obj, jsid, body) {
        if (obj === Opal2.top) {
          Opal2.defn(Opal2.Object, jsid, body);
        } else if (!obj.$$eval && obj.$$is_a_module) {
          Opal2.defn(obj, jsid, body);
        } else {
          Opal2.defs(obj, jsid, body);
        }
      };
      Opal2.defn = function(module2, jsid, body) {
        body.displayName = jsid;
        body.$$owner = module2;
        var proto = module2.$$prototype;
        if (proto.hasOwnProperty("$$dummy")) {
          proto = proto.$$define_methods_on;
        }
        $defineProperty(proto, jsid, body);
        if (module2.$$is_module) {
          if (module2.$$module_function) {
            Opal2.defs(module2, jsid, body);
          }
          for (var i = 0, iclasses = module2.$$iclasses, length = iclasses.length; i < length; i++) {
            var iclass = iclasses[i];
            $defineProperty(iclass, jsid, body);
          }
        }
        var singleton_of = module2.$$singleton_of;
        if (module2.$method_added && !module2.$method_added.$$stub && !singleton_of) {
          module2.$method_added(jsid.substr(1));
        } else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
          singleton_of.$singleton_method_added(jsid.substr(1));
        }
      };
      Opal2.defs = function(obj, jsid, body) {
        if (obj.$$is_string || obj.$$is_number) {
          throw Opal2.TypeError.$new("can't define singleton");
        }
        Opal2.defn(Opal2.get_singleton_class(obj), jsid, body);
      };
      Opal2.rdef = function(obj, jsid) {
        if (!$hasOwn.call(obj.$$prototype, jsid)) {
          throw Opal2.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
        }
        delete obj.$$prototype[jsid];
        if (obj.$$is_singleton) {
          if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {
            obj.$$prototype.$singleton_method_removed(jsid.substr(1));
          }
        } else {
          if (obj.$method_removed && !obj.$method_removed.$$stub) {
            obj.$method_removed(jsid.substr(1));
          }
        }
      };
      Opal2.udef = function(obj, jsid) {
        if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {
          throw Opal2.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
        }
        Opal2.add_stub_for(obj.$$prototype, jsid);
        if (obj.$$is_singleton) {
          if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {
            obj.$$prototype.$singleton_method_undefined(jsid.substr(1));
          }
        } else {
          if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
            obj.$method_undefined(jsid.substr(1));
          }
        }
      };
      function is_method_body(body) {
        return typeof body === "function" && !body.$$stub;
      }
      Opal2.alias = function(obj, name, old2) {
        var id = "$" + name, old_id = "$" + old2, body = obj.$$prototype["$" + old2], alias;
        if (obj.$$eval) {
          return Opal2.alias(Opal2.get_singleton_class(obj), name, old2);
        }
        if (!is_method_body(body)) {
          var ancestor = obj.$$super;
          while (typeof body !== "function" && ancestor) {
            body = ancestor[old_id];
            ancestor = ancestor.$$super;
          }
          if (!is_method_body(body) && obj.$$is_module) {
            body = Opal2.Object.$$prototype[old_id];
          }
          if (!is_method_body(body)) {
            throw Opal2.NameError.$new("undefined method `" + old2 + "' for class `" + obj.$name() + "'");
          }
        }
        if (body.$$alias_of)
          body = body.$$alias_of;
        alias = function() {
          var block2 = alias.$$p, args2, i, ii;
          args2 = new Array(arguments.length);
          for (i = 0, ii = arguments.length; i < ii; i++) {
            args2[i] = arguments[i];
          }
          if (block2 != null) {
            alias.$$p = null;
          }
          return Opal2.send(this, body, args2, block2);
        };
        alias.displayName = name;
        alias.length = body.length;
        alias.$$arity = body.$$arity;
        alias.$$parameters = body.$$parameters;
        alias.$$source_location = body.$$source_location;
        alias.$$alias_of = body;
        alias.$$alias_name = name;
        Opal2.defn(obj, id, alias);
        return obj;
      };
      Opal2.alias_native = function(obj, name, native_name) {
        var id = "$" + name, body = obj.$$prototype[native_name];
        if (typeof body !== "function" || body.$$stub) {
          throw Opal2.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'");
        }
        Opal2.defn(obj, id, body);
        return obj;
      };
      Opal2.hash_init = function(hash) {
        hash.$$smap = Object.create(null);
        hash.$$map = Object.create(null);
        hash.$$keys = [];
      };
      Opal2.hash_clone = function(from_hash, to_hash) {
        to_hash.$$none = from_hash.$$none;
        to_hash.$$proc = from_hash.$$proc;
        for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {
          key = keys[i];
          if (key.$$is_string) {
            value = smap[key];
          } else {
            value = key.value;
            key = key.key;
          }
          Opal2.hash_put(to_hash, key, value);
        }
      };
      Opal2.hash_put = function(hash, key, value) {
        if (key.$$is_string) {
          if (!$hasOwn.call(hash.$$smap, key)) {
            hash.$$keys.push(key);
          }
          hash.$$smap[key] = value;
          return;
        }
        var key_hash, bucket, last_bucket;
        key_hash = hash.$$by_identity ? Opal2.id(key) : key.$hash();
        if (!$hasOwn.call(hash.$$map, key_hash)) {
          bucket = { key, key_hash, value };
          hash.$$keys.push(bucket);
          hash.$$map[key_hash] = bucket;
          return;
        }
        bucket = hash.$$map[key_hash];
        while (bucket) {
          if (key === bucket.key || key["$eql?"](bucket.key)) {
            last_bucket = undefined2;
            bucket.value = value;
            break;
          }
          last_bucket = bucket;
          bucket = bucket.next;
        }
        if (last_bucket) {
          bucket = { key, key_hash, value };
          hash.$$keys.push(bucket);
          last_bucket.next = bucket;
        }
      };
      Opal2.hash_get = function(hash, key) {
        if (key.$$is_string) {
          if ($hasOwn.call(hash.$$smap, key)) {
            return hash.$$smap[key];
          }
          return;
        }
        var key_hash, bucket;
        key_hash = hash.$$by_identity ? Opal2.id(key) : key.$hash();
        if ($hasOwn.call(hash.$$map, key_hash)) {
          bucket = hash.$$map[key_hash];
          while (bucket) {
            if (key === bucket.key || key["$eql?"](bucket.key)) {
              return bucket.value;
            }
            bucket = bucket.next;
          }
        }
      };
      Opal2.hash_delete = function(hash, key) {
        var i, keys = hash.$$keys, length = keys.length, value;
        if (key.$$is_string) {
          if (!$hasOwn.call(hash.$$smap, key)) {
            return;
          }
          for (i = 0; i < length; i++) {
            if (keys[i] === key) {
              keys.splice(i, 1);
              break;
            }
          }
          value = hash.$$smap[key];
          delete hash.$$smap[key];
          return value;
        }
        var key_hash = key.$hash();
        if (!$hasOwn.call(hash.$$map, key_hash)) {
          return;
        }
        var bucket = hash.$$map[key_hash], last_bucket;
        while (bucket) {
          if (key === bucket.key || key["$eql?"](bucket.key)) {
            value = bucket.value;
            for (i = 0; i < length; i++) {
              if (keys[i] === bucket) {
                keys.splice(i, 1);
                break;
              }
            }
            if (last_bucket && bucket.next) {
              last_bucket.next = bucket.next;
            } else if (last_bucket) {
              delete last_bucket.next;
            } else if (bucket.next) {
              hash.$$map[key_hash] = bucket.next;
            } else {
              delete hash.$$map[key_hash];
            }
            return value;
          }
          last_bucket = bucket;
          bucket = bucket.next;
        }
      };
      Opal2.hash_rehash = function(hash) {
        for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {
          if (hash.$$keys[i].$$is_string) {
            continue;
          }
          key_hash = hash.$$keys[i].key.$hash();
          if (key_hash === hash.$$keys[i].key_hash) {
            continue;
          }
          bucket = hash.$$map[hash.$$keys[i].key_hash];
          last_bucket = undefined2;
          while (bucket) {
            if (bucket === hash.$$keys[i]) {
              if (last_bucket && bucket.next) {
                last_bucket.next = bucket.next;
              } else if (last_bucket) {
                delete last_bucket.next;
              } else if (bucket.next) {
                hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
              } else {
                delete hash.$$map[hash.$$keys[i].key_hash];
              }
              break;
            }
            last_bucket = bucket;
            bucket = bucket.next;
          }
          hash.$$keys[i].key_hash = key_hash;
          if (!$hasOwn.call(hash.$$map, key_hash)) {
            hash.$$map[key_hash] = hash.$$keys[i];
            continue;
          }
          bucket = hash.$$map[key_hash];
          last_bucket = undefined2;
          while (bucket) {
            if (bucket === hash.$$keys[i]) {
              last_bucket = undefined2;
              break;
            }
            last_bucket = bucket;
            bucket = bucket.next;
          }
          if (last_bucket) {
            last_bucket.next = hash.$$keys[i];
          }
        }
      };
      Opal2.hash = function() {
        var arguments_length = arguments.length, args2, hash, i, length, key, value;
        if (arguments_length === 1 && arguments[0].$$is_hash) {
          return arguments[0];
        }
        hash = new Opal2.Hash();
        Opal2.hash_init(hash);
        if (arguments_length === 1 && arguments[0].$$is_array) {
          args2 = arguments[0];
          length = args2.length;
          for (i = 0; i < length; i++) {
            if (args2[i].length !== 2) {
              throw Opal2.ArgumentError.$new("value not of length 2: " + args2[i].$inspect());
            }
            key = args2[i][0];
            value = args2[i][1];
            Opal2.hash_put(hash, key, value);
          }
          return hash;
        }
        if (arguments_length === 1) {
          args2 = arguments[0];
          for (key in args2) {
            if ($hasOwn.call(args2, key)) {
              value = args2[key];
              Opal2.hash_put(hash, key, value);
            }
          }
          return hash;
        }
        if (arguments_length % 2 !== 0) {
          throw Opal2.ArgumentError.$new("odd number of arguments for Hash");
        }
        for (i = 0; i < arguments_length; i += 2) {
          key = arguments[i];
          value = arguments[i + 1];
          Opal2.hash_put(hash, key, value);
        }
        return hash;
      };
      Opal2.hash2 = function(keys, smap) {
        var hash = new Opal2.Hash();
        hash.$$smap = smap;
        hash.$$map = Object.create(null);
        hash.$$keys = keys;
        return hash;
      };
      Opal2.range = function(first, last, exc) {
        var range = new Opal2.Range();
        range.begin = first;
        range.end = last;
        range.excl = exc;
        return range;
      };
      Opal2.ivar = function(name) {
        if (name === "constructor" || name === "displayName" || name === "__count__" || name === "__noSuchMethod__" || name === "__parent__" || name === "__proto__" || name === "hasOwnProperty" || name === "valueOf") {
          return name + "$";
        }
        return name;
      };
      Opal2.escape_regexp = function(str) {
        return str.replace(/([-[\]\/{}()*+?.^$\\| ])/g, "\\$1").replace(/[\n]/g, "\\n").replace(/[\r]/g, "\\r").replace(/[\f]/g, "\\f").replace(/[\t]/g, "\\t");
      };
      Opal2.global_regexp = function(pattern) {
        if (pattern.global) {
          return pattern;
        }
        if (pattern.$$g == null) {
          pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? "gm" : "g") + (pattern.ignoreCase ? "i" : ""));
        } else {
          pattern.$$g.lastIndex = null;
        }
        return pattern.$$g;
      };
      Opal2.global_multiline_regexp = function(pattern) {
        var result2;
        if (pattern.multiline) {
          if (pattern.global) {
            return pattern;
          }
          if (pattern.$$g != null) {
            result2 = pattern.$$g;
          } else {
            result2 = pattern.$$g = new RegExp(pattern.source, "gm" + (pattern.ignoreCase ? "i" : ""));
          }
        } else if (pattern.$$gm != null) {
          result2 = pattern.$$gm;
        } else {
          result2 = pattern.$$gm = new RegExp(pattern.source, "gm" + (pattern.ignoreCase ? "i" : ""));
        }
        result2.lastIndex = null;
        return result2;
      };
      Opal2.modules = {};
      Opal2.loaded_features = ["corelib/runtime"];
      Opal2.current_dir = ".";
      Opal2.require_table = { "corelib/runtime": true };
      Opal2.normalize = function(path) {
        var parts, part, new_parts = [], SEPARATOR = "/";
        if (Opal2.current_dir !== ".") {
          path = Opal2.current_dir.replace(/\/*$/, "/") + path;
        }
        path = path.replace(/^\.\//, "");
        path = path.replace(/\.(rb|opal|js)$/, "");
        parts = path.split(SEPARATOR);
        for (var i = 0, ii = parts.length; i < ii; i++) {
          part = parts[i];
          if (part === "")
            continue;
          part === ".." ? new_parts.pop() : new_parts.push(part);
        }
        return new_parts.join(SEPARATOR);
      };
      Opal2.loaded = function(paths) {
        var i, l, path;
        for (i = 0, l = paths.length; i < l; i++) {
          path = Opal2.normalize(paths[i]);
          if (Opal2.require_table[path]) {
            continue;
          }
          Opal2.loaded_features.push(path);
          Opal2.require_table[path] = true;
        }
      };
      Opal2.load = function(path) {
        path = Opal2.normalize(path);
        Opal2.loaded([path]);
        var module2 = Opal2.modules[path];
        if (module2) {
          module2(Opal2);
        } else {
          var severity = Opal2.config.missing_require_severity;
          var message = "cannot load such file -- " + path;
          if (severity === "error") {
            if (Opal2.LoadError) {
              throw Opal2.LoadError.$new(message);
            } else {
              throw message;
            }
          } else if (severity === "warning") {
            console2.warn("WARNING: LoadError: " + message);
          }
        }
        return true;
      };
      Opal2.require = function(path) {
        path = Opal2.normalize(path);
        if (Opal2.require_table[path]) {
          return false;
        }
        return Opal2.load(path);
      };
      Opal2.encodings = Object.create(null);
      Opal2.set_encoding = function(str, name) {
        if (typeof str === "string")
          throw Opal2.FrozenError.$new("can't modify frozen String");
        var encoding = Opal2.encodings[name];
        if (encoding === str.encoding) {
          return str;
        }
        str.encoding = encoding;
        return str;
      };
      Opal2.enc = function(str, name) {
        var dup = new String(str);
        Opal2.set_encoding(dup, name);
        dup.internal_encoding = dup.encoding;
        return dup;
      };
      function $BasicObject() {
      }
      ;
      function $Object() {
      }
      ;
      function $Module() {
      }
      ;
      function $Class() {
      }
      ;
      Opal2.BasicObject = BasicObject = Opal2.allocate_class("BasicObject", null, $BasicObject);
      Opal2.Object = _Object = Opal2.allocate_class("Object", Opal2.BasicObject, $Object);
      Opal2.Module = Module = Opal2.allocate_class("Module", Opal2.Object, $Module);
      Opal2.Class = Class = Opal2.allocate_class("Class", Opal2.Module, $Class);
      $setPrototype(Opal2.BasicObject, Opal2.Class.$$prototype);
      $setPrototype(Opal2.Object, Opal2.Class.$$prototype);
      $setPrototype(Opal2.Module, Opal2.Class.$$prototype);
      $setPrototype(Opal2.Class, Opal2.Class.$$prototype);
      BasicObject.$$const["BasicObject"] = BasicObject;
      Opal2.const_set(_Object, "BasicObject", BasicObject);
      Opal2.const_set(_Object, "Object", _Object);
      Opal2.const_set(_Object, "Module", Module);
      Opal2.const_set(_Object, "Class", Class);
      BasicObject.$$class = Class;
      _Object.$$class = Class;
      Module.$$class = Class;
      Class.$$class = Class;
      $defineProperty(_Object.$$prototype, "toString", function() {
        var to_s = this.$to_s();
        if (to_s.$$is_string && typeof to_s === "object") {
          return to_s.valueOf();
        } else {
          return to_s;
        }
      });
      $defineProperty(_Object.$$prototype, "$require", Opal2.require);
      Opal2.$$ = _Object.$$;
      Opal2.top = new _Object();
      Opal2.top.$to_s = Opal2.top.$inspect = function() {
        return "main";
      };
      function $NilClass() {
      }
      ;
      Opal2.NilClass = Opal2.allocate_class("NilClass", Opal2.Object, $NilClass);
      Opal2.const_set(_Object, "NilClass", Opal2.NilClass);
      nil2 = Opal2.nil = new Opal2.NilClass();
      nil2.$$id = nil_id;
      nil2.call = nil2.apply = function() {
        throw Opal2.LocalJumpError.$new("no block given");
      };
      Opal2.breaker = new Error("unexpected break (old)");
      Opal2.returner = new Error("unexpected return");
      TypeError.$$super = Error;
    }).call(exports);
    Opal.loaded(["corelib/runtime.js"]);
    Opal.modules["corelib/helpers"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$new", "$class", "$===", "$respond_to?", "$raise", "$type_error", "$__send__", "$coerce_to", "$nil?", "$<=>", "$coerce_to!", "$!=", "$[]", "$upcase"]);
      return function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Opal");
        var $nesting3 = [self3].concat($parent_nesting2), $Opal_bridge$1, $Opal_type_error$2, $Opal_coerce_to$3, $Opal_coerce_to$excl$4, $Opal_coerce_to$ques$5, $Opal_try_convert$6, $Opal_compare$7, $Opal_destructure$8, $Opal_respond_to$ques$9, $Opal_inspect_obj$10, $Opal_instance_variable_name$excl$11, $Opal_class_variable_name$excl$12, $Opal_const_name$excl$13, $Opal_pristine$14;
        Opal2.defs(self3, "$bridge", $Opal_bridge$1 = function $$bridge(constructor, klass) {
          var self4 = this;
          return Opal2.bridge(constructor, klass);
        }, $Opal_bridge$1.$$arity = 2);
        Opal2.defs(self3, "$type_error", $Opal_type_error$2 = function $$type_error(object, type, method, coerced) {
          var $a2, self4 = this;
          if (method == null) {
            method = nil2;
          }
          ;
          if (coerced == null) {
            coerced = nil2;
          }
          ;
          if ($truthy2($truthy2($a2 = method) ? coerced : $a2)) {
            return $$2($nesting3, "TypeError").$new("can't convert " + object.$class() + " into " + type + " (" + object.$class() + "#" + method + " gives " + coerced.$class() + ")");
          } else {
            return $$2($nesting3, "TypeError").$new("no implicit conversion of " + object.$class() + " into " + type);
          }
          ;
        }, $Opal_type_error$2.$$arity = -3);
        Opal2.defs(self3, "$coerce_to", $Opal_coerce_to$3 = function $$coerce_to(object, type, method) {
          var self4 = this;
          if ($truthy2(type["$==="](object))) {
            return object;
          }
          ;
          if ($truthy2(object["$respond_to?"](method))) {
          } else {
            self4.$raise(self4.$type_error(object, type));
          }
          ;
          return object.$__send__(method);
        }, $Opal_coerce_to$3.$$arity = 3);
        Opal2.defs(self3, "$coerce_to!", $Opal_coerce_to$excl$4 = function(object, type, method) {
          var self4 = this, coerced = nil2;
          coerced = self4.$coerce_to(object, type, method);
          if ($truthy2(type["$==="](coerced))) {
          } else {
            self4.$raise(self4.$type_error(object, type, method, coerced));
          }
          ;
          return coerced;
        }, $Opal_coerce_to$excl$4.$$arity = 3);
        Opal2.defs(self3, "$coerce_to?", $Opal_coerce_to$ques$5 = function(object, type, method) {
          var self4 = this, coerced = nil2;
          if ($truthy2(object["$respond_to?"](method))) {
          } else {
            return nil2;
          }
          ;
          coerced = self4.$coerce_to(object, type, method);
          if ($truthy2(coerced["$nil?"]())) {
            return nil2;
          }
          ;
          if ($truthy2(type["$==="](coerced))) {
          } else {
            self4.$raise(self4.$type_error(object, type, method, coerced));
          }
          ;
          return coerced;
        }, $Opal_coerce_to$ques$5.$$arity = 3);
        Opal2.defs(self3, "$try_convert", $Opal_try_convert$6 = function $$try_convert(object, type, method) {
          var self4 = this;
          if ($truthy2(type["$==="](object))) {
            return object;
          }
          ;
          if ($truthy2(object["$respond_to?"](method))) {
            return object.$__send__(method);
          } else {
            return nil2;
          }
          ;
        }, $Opal_try_convert$6.$$arity = 3);
        Opal2.defs(self3, "$compare", $Opal_compare$7 = function $$compare(a, b) {
          var self4 = this, compare = nil2;
          compare = a["$<=>"](b);
          if ($truthy2(compare === nil2)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + a.$class() + " with " + b.$class() + " failed");
          }
          ;
          return compare;
        }, $Opal_compare$7.$$arity = 2);
        Opal2.defs(self3, "$destructure", $Opal_destructure$8 = function $$destructure(args2) {
          var self4 = this;
          if (args2.length == 1) {
            return args2[0];
          } else if (args2.$$is_array) {
            return args2;
          } else {
            var args_ary = new Array(args2.length);
            for (var i = 0, l = args_ary.length; i < l; i++) {
              args_ary[i] = args2[i];
            }
            return args_ary;
          }
        }, $Opal_destructure$8.$$arity = 1);
        Opal2.defs(self3, "$respond_to?", $Opal_respond_to$ques$9 = function(obj, method, include_all) {
          var self4 = this;
          if (include_all == null) {
            include_all = false;
          }
          ;
          if (obj == null || !obj.$$class) {
            return false;
          }
          ;
          return obj["$respond_to?"](method, include_all);
        }, $Opal_respond_to$ques$9.$$arity = -3);
        Opal2.defs(self3, "$inspect_obj", $Opal_inspect_obj$10 = function $$inspect_obj(obj) {
          var self4 = this;
          return Opal2.inspect(obj);
        }, $Opal_inspect_obj$10.$$arity = 1);
        Opal2.defs(self3, "$instance_variable_name!", $Opal_instance_variable_name$excl$11 = function(name) {
          var self4 = this;
          name = $$2($nesting3, "Opal")["$coerce_to!"](name, $$2($nesting3, "String"), "to_str");
          if ($truthy2(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {
          } else {
            self4.$raise($$2($nesting3, "NameError").$new("'" + name + "' is not allowed as an instance variable name", name));
          }
          ;
          return name;
        }, $Opal_instance_variable_name$excl$11.$$arity = 1);
        Opal2.defs(self3, "$class_variable_name!", $Opal_class_variable_name$excl$12 = function(name) {
          var self4 = this;
          name = $$2($nesting3, "Opal")["$coerce_to!"](name, $$2($nesting3, "String"), "to_str");
          if ($truthy2(name.length < 3 || name.slice(0, 2) !== "@@")) {
            self4.$raise($$2($nesting3, "NameError").$new("`" + name + "' is not allowed as a class variable name", name));
          }
          ;
          return name;
        }, $Opal_class_variable_name$excl$12.$$arity = 1);
        Opal2.defs(self3, "$const_name!", $Opal_const_name$excl$13 = function(const_name) {
          var self4 = this;
          const_name = $$2($nesting3, "Opal")["$coerce_to!"](const_name, $$2($nesting3, "String"), "to_str");
          if ($truthy2(const_name["$[]"](0)["$!="](const_name["$[]"](0).$upcase()))) {
            self4.$raise($$2($nesting3, "NameError"), "wrong constant name " + const_name);
          }
          ;
          return const_name;
        }, $Opal_const_name$excl$13.$$arity = 1);
        Opal2.defs(self3, "$pristine", $Opal_pristine$14 = function $$pristine(owner_class, $a2) {
          var $post_args2, method_names, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          method_names = $post_args2;
          ;
          var method_name, method;
          for (var i = method_names.length - 1; i >= 0; i--) {
            method_name = method_names[i];
            method = owner_class.$$prototype["$" + method_name];
            if (method && !method.$$stub) {
              method.$$pristine = true;
            }
          }
          ;
          return nil2;
        }, $Opal_pristine$14.$$arity = -2);
      }($nesting2[0], $nesting2);
    };
    Opal.modules["corelib/module"] = function(Opal) {
      function $rb_lt(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      function $rb_gt(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $lambda = Opal.lambda, $range = Opal.range, $hash2 = Opal.hash2;
      Opal.add_stubs(["$module_eval", "$to_proc", "$===", "$raise", "$equal?", "$<", "$>", "$nil?", "$attr_reader", "$attr_writer", "$class_variable_name!", "$new", "$const_name!", "$=~", "$inject", "$split", "$const_get", "$==", "$!~", "$start_with?", "$bind", "$call", "$class", "$append_features", "$included", "$name", "$cover?", "$size", "$merge", "$compile", "$proc", "$any?", "$prepend_features", "$prepended", "$to_s", "$__id__", "$constants", "$include?", "$copy_class_variables", "$copy_constants"]);
      return function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, "Module");
        var $nesting = [self].concat($parent_nesting), $Module_allocate$1, $Module_initialize$2, $Module_$eq_eq_eq$3, $Module_$lt$4, $Module_$lt_eq$5, $Module_$gt$6, $Module_$gt_eq$7, $Module_$lt_eq_gt$8, $Module_alias_method$9, $Module_alias_native$10, $Module_ancestors$11, $Module_append_features$12, $Module_attr_accessor$13, $Module_attr_reader$14, $Module_attr_writer$15, $Module_autoload$16, $Module_class_variables$17, $Module_class_variable_get$18, $Module_class_variable_set$19, $Module_class_variable_defined$ques$20, $Module_remove_class_variable$21, $Module_constants$22, $Module_constants$23, $Module_nesting$24, $Module_const_defined$ques$25, $Module_const_get$26, $Module_const_missing$28, $Module_const_set$29, $Module_public_constant$30, $Module_define_method$31, $Module_remove_method$33, $Module_singleton_class$ques$34, $Module_include$35, $Module_included_modules$36, $Module_include$ques$37, $Module_instance_method$38, $Module_instance_methods$39, $Module_included$40, $Module_extended$41, $Module_extend_object$42, $Module_method_added$43, $Module_method_removed$44, $Module_method_undefined$45, $Module_module_eval$46, $Module_module_exec$48, $Module_method_defined$ques$49, $Module_module_function$50, $Module_name$51, $Module_prepend$52, $Module_prepend_features$53, $Module_prepended$54, $Module_remove_const$55, $Module_to_s$56, $Module_undef_method$57, $Module_instance_variables$58, $Module_dup$59, $Module_copy_class_variables$60, $Module_copy_constants$61;
        Opal.defs(self, "$allocate", $Module_allocate$1 = function $$allocate() {
          var self2 = this;
          var module2 = Opal.allocate_module(nil, function() {
          });
          if (self2 !== Opal.Module)
            Object.setPrototypeOf(module2, self2.$$prototype);
          return module2;
        }, $Module_allocate$1.$$arity = 0);
        Opal.def(self, "$initialize", $Module_initialize$2 = function $$initialize() {
          var $iter2 = $Module_initialize$2.$$p, block2 = $iter2 || nil, self2 = this;
          if ($iter2)
            $Module_initialize$2.$$p = null;
          if ($iter2)
            $Module_initialize$2.$$p = null;
          ;
          if (block2 !== nil) {
            return $send(self2, "module_eval", [], block2.$to_proc());
          } else {
            return nil;
          }
          ;
        }, $Module_initialize$2.$$arity = 0);
        Opal.def(self, "$===", $Module_$eq_eq_eq$3 = function(object) {
          var self2 = this;
          if ($truthy(object == null)) {
            return false;
          }
          ;
          return Opal.is_a(object, self2);
          ;
        }, $Module_$eq_eq_eq$3.$$arity = 1);
        Opal.def(self, "$<", $Module_$lt$4 = function(other) {
          var self2 = this;
          if ($truthy($$($nesting, "Module")["$==="](other))) {
          } else {
            self2.$raise($$($nesting, "TypeError"), "compared with non class/module");
          }
          ;
          var working = self2, ancestors, i, length;
          if (working === other) {
            return false;
          }
          for (i = 0, ancestors = Opal.ancestors(self2), length = ancestors.length; i < length; i++) {
            if (ancestors[i] === other) {
              return true;
            }
          }
          for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
            if (ancestors[i] === self2) {
              return false;
            }
          }
          return nil;
          ;
        }, $Module_$lt$4.$$arity = 1);
        Opal.def(self, "$<=", $Module_$lt_eq$5 = function(other) {
          var $a2, self2 = this;
          return $truthy($a2 = self2["$equal?"](other)) ? $a2 : $rb_lt(self2, other);
        }, $Module_$lt_eq$5.$$arity = 1);
        Opal.def(self, "$>", $Module_$gt$6 = function(other) {
          var self2 = this;
          if ($truthy($$($nesting, "Module")["$==="](other))) {
          } else {
            self2.$raise($$($nesting, "TypeError"), "compared with non class/module");
          }
          ;
          return $rb_lt(other, self2);
        }, $Module_$gt$6.$$arity = 1);
        Opal.def(self, "$>=", $Module_$gt_eq$7 = function(other) {
          var $a2, self2 = this;
          return $truthy($a2 = self2["$equal?"](other)) ? $a2 : $rb_gt(self2, other);
        }, $Module_$gt_eq$7.$$arity = 1);
        Opal.def(self, "$<=>", $Module_$lt_eq_gt$8 = function(other) {
          var self2 = this, lt = nil;
          if (self2 === other) {
            return 0;
          }
          ;
          if ($truthy($$($nesting, "Module")["$==="](other))) {
          } else {
            return nil;
          }
          ;
          lt = $rb_lt(self2, other);
          if ($truthy(lt["$nil?"]())) {
            return nil;
          }
          ;
          if ($truthy(lt)) {
            return -1;
          } else {
            return 1;
          }
          ;
        }, $Module_$lt_eq_gt$8.$$arity = 1);
        Opal.def(self, "$alias_method", $Module_alias_method$9 = function $$alias_method(newname, oldname) {
          var self2 = this;
          Opal.alias(self2, newname, oldname);
          return self2;
        }, $Module_alias_method$9.$$arity = 2);
        Opal.def(self, "$alias_native", $Module_alias_native$10 = function $$alias_native(mid, jsid) {
          var self2 = this;
          if (jsid == null) {
            jsid = mid;
          }
          ;
          Opal.alias_native(self2, mid, jsid);
          return self2;
        }, $Module_alias_native$10.$$arity = -2);
        Opal.def(self, "$ancestors", $Module_ancestors$11 = function $$ancestors() {
          var self2 = this;
          return Opal.ancestors(self2);
        }, $Module_ancestors$11.$$arity = 0);
        Opal.def(self, "$append_features", $Module_append_features$12 = function $$append_features(includer) {
          var self2 = this;
          Opal.append_features(self2, includer);
          return self2;
        }, $Module_append_features$12.$$arity = 1);
        Opal.def(self, "$attr_accessor", $Module_attr_accessor$13 = function $$attr_accessor($a2) {
          var $post_args2, names, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          names = $post_args2;
          ;
          $send(self2, "attr_reader", Opal.to_a(names));
          return $send(self2, "attr_writer", Opal.to_a(names));
        }, $Module_attr_accessor$13.$$arity = -1);
        Opal.alias(self, "attr", "attr_accessor");
        Opal.def(self, "$attr_reader", $Module_attr_reader$14 = function $$attr_reader($a2) {
          var $post_args2, names, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          names = $post_args2;
          ;
          var proto = self2.$$prototype;
          for (var i = names.length - 1; i >= 0; i--) {
            var name = names[i], id = "$" + name, ivar = Opal.ivar(name);
            var body = function(ivar2) {
              return function() {
                if (this[ivar2] == null) {
                  return nil;
                } else {
                  return this[ivar2];
                }
              };
            }(ivar);
            Opal.defineProperty(proto, ivar, nil);
            body.$$parameters = [];
            body.$$arity = 0;
            Opal.defn(self2, id, body);
          }
          ;
          return nil;
        }, $Module_attr_reader$14.$$arity = -1);
        Opal.def(self, "$attr_writer", $Module_attr_writer$15 = function $$attr_writer($a2) {
          var $post_args2, names, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          names = $post_args2;
          ;
          var proto = self2.$$prototype;
          for (var i = names.length - 1; i >= 0; i--) {
            var name = names[i], id = "$" + name + "=", ivar = Opal.ivar(name);
            var body = function(ivar2) {
              return function(value) {
                return this[ivar2] = value;
              };
            }(ivar);
            body.$$parameters = [["req"]];
            body.$$arity = 1;
            Opal.defineProperty(proto, ivar, nil);
            Opal.defn(self2, id, body);
          }
          ;
          return nil;
        }, $Module_attr_writer$15.$$arity = -1);
        Opal.def(self, "$autoload", $Module_autoload$16 = function $$autoload(const$, path) {
          var self2 = this;
          if (self2.$$autoload == null)
            self2.$$autoload = {};
          Opal.const_cache_version++;
          self2.$$autoload[const$] = path;
          return nil;
        }, $Module_autoload$16.$$arity = 2);
        Opal.def(self, "$class_variables", $Module_class_variables$17 = function $$class_variables() {
          var self2 = this;
          return Object.keys(Opal.class_variables(self2));
        }, $Module_class_variables$17.$$arity = 0);
        Opal.def(self, "$class_variable_get", $Module_class_variable_get$18 = function $$class_variable_get(name) {
          var self2 = this;
          name = $$($nesting, "Opal")["$class_variable_name!"](name);
          var value = Opal.class_variables(self2)[name];
          if (value == null) {
            self2.$raise($$($nesting, "NameError").$new("uninitialized class variable " + name + " in " + self2, name));
          }
          return value;
          ;
        }, $Module_class_variable_get$18.$$arity = 1);
        Opal.def(self, "$class_variable_set", $Module_class_variable_set$19 = function $$class_variable_set(name, value) {
          var self2 = this;
          name = $$($nesting, "Opal")["$class_variable_name!"](name);
          return Opal.class_variable_set(self2, name, value);
          ;
        }, $Module_class_variable_set$19.$$arity = 2);
        Opal.def(self, "$class_variable_defined?", $Module_class_variable_defined$ques$20 = function(name) {
          var self2 = this;
          name = $$($nesting, "Opal")["$class_variable_name!"](name);
          return Opal.class_variables(self2).hasOwnProperty(name);
          ;
        }, $Module_class_variable_defined$ques$20.$$arity = 1);
        Opal.def(self, "$remove_class_variable", $Module_remove_class_variable$21 = function $$remove_class_variable(name) {
          var self2 = this;
          name = $$($nesting, "Opal")["$class_variable_name!"](name);
          if (Opal.hasOwnProperty.call(self2.$$cvars, name)) {
            var value = self2.$$cvars[name];
            delete self2.$$cvars[name];
            return value;
          } else {
            self2.$raise($$($nesting, "NameError"), "cannot remove " + name + " for " + self2);
          }
          ;
        }, $Module_remove_class_variable$21.$$arity = 1);
        Opal.def(self, "$constants", $Module_constants$22 = function $$constants(inherit) {
          var self2 = this;
          if (inherit == null) {
            inherit = true;
          }
          ;
          return Opal.constants(self2, inherit);
          ;
        }, $Module_constants$22.$$arity = -1);
        Opal.defs(self, "$constants", $Module_constants$23 = function $$constants(inherit) {
          var self2 = this;
          ;
          if (inherit == null) {
            var nesting = (self2.$$nesting || []).concat(Opal.Object), constant, constants = {}, i, ii;
            for (i = 0, ii = nesting.length; i < ii; i++) {
              for (constant in nesting[i].$$const) {
                constants[constant] = true;
              }
            }
            return Object.keys(constants);
          } else {
            return Opal.constants(self2, inherit);
          }
          ;
        }, $Module_constants$23.$$arity = -1);
        Opal.defs(self, "$nesting", $Module_nesting$24 = function $$nesting() {
          var self2 = this;
          return self2.$$nesting || [];
        }, $Module_nesting$24.$$arity = 0);
        Opal.def(self, "$const_defined?", $Module_const_defined$ques$25 = function(name, inherit) {
          var self2 = this;
          if (inherit == null) {
            inherit = true;
          }
          ;
          name = $$($nesting, "Opal")["$const_name!"](name);
          if ($truthy(name["$=~"]($$$($$($nesting, "Opal"), "CONST_NAME_REGEXP")))) {
          } else {
            self2.$raise($$($nesting, "NameError").$new("wrong constant name " + name, name));
          }
          ;
          var module2, modules = [self2], module_constants, i, ii;
          if (inherit) {
            modules = modules.concat(Opal.ancestors(self2));
            if (self2.$$is_module) {
              modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));
            }
          }
          for (i = 0, ii = modules.length; i < ii; i++) {
            module2 = modules[i];
            if (module2.$$const[name] != null) {
              return true;
            }
          }
          return false;
          ;
        }, $Module_const_defined$ques$25.$$arity = -2);
        Opal.def(self, "$const_get", $Module_const_get$26 = function $$const_get(name, inherit) {
          var $$27, self2 = this;
          if (inherit == null) {
            inherit = true;
          }
          ;
          name = $$($nesting, "Opal")["$const_name!"](name);
          if (name.indexOf("::") === 0 && name !== "::") {
            name = name.slice(2);
          }
          ;
          if ($truthy(name.indexOf("::") != -1 && name != "::")) {
            return $send(name.$split("::"), "inject", [self2], ($$27 = function(o, c) {
              var self3 = $$27.$$s || this;
              if (o == null) {
                o = nil;
              }
              ;
              if (c == null) {
                c = nil;
              }
              ;
              return o.$const_get(c);
            }, $$27.$$s = self2, $$27.$$arity = 2, $$27));
          }
          ;
          if ($truthy(name["$=~"]($$$($$($nesting, "Opal"), "CONST_NAME_REGEXP")))) {
          } else {
            self2.$raise($$($nesting, "NameError").$new("wrong constant name " + name, name));
          }
          ;
          if (inherit) {
            return $$([self2], name);
          } else {
            return Opal.const_get_local(self2, name);
          }
          ;
        }, $Module_const_get$26.$$arity = -2);
        Opal.def(self, "$const_missing", $Module_const_missing$28 = function $$const_missing(name) {
          var self2 = this, full_const_name = nil;
          if (self2.$$autoload) {
            var file2 = self2.$$autoload[name];
            if (file2) {
              self2.$require(file2);
              return self2.$const_get(name);
            }
          }
          ;
          full_const_name = function() {
            if (self2["$=="]($$($nesting, "Object"))) {
              return name;
            } else {
              return "" + self2 + "::" + name;
            }
            ;
            return nil;
          }();
          return self2.$raise($$($nesting, "NameError").$new("uninitialized constant " + full_const_name, name));
        }, $Module_const_missing$28.$$arity = 1);
        Opal.def(self, "$const_set", $Module_const_set$29 = function $$const_set(name, value) {
          var $a2, self2 = this;
          name = $$($nesting, "Opal")["$const_name!"](name);
          if ($truthy($truthy($a2 = name["$!~"]($$$($$($nesting, "Opal"), "CONST_NAME_REGEXP"))) ? $a2 : name["$start_with?"]("::"))) {
            self2.$raise($$($nesting, "NameError").$new("wrong constant name " + name, name));
          }
          ;
          Opal.const_set(self2, name, value);
          return value;
        }, $Module_const_set$29.$$arity = 2);
        Opal.def(self, "$public_constant", $Module_public_constant$30 = function $$public_constant(const_name) {
          var self2 = this;
          return nil;
        }, $Module_public_constant$30.$$arity = 1);
        Opal.def(self, "$define_method", $Module_define_method$31 = function $$define_method(name, method) {
          var $iter2 = $Module_define_method$31.$$p, block2 = $iter2 || nil, $a2, $$32, self2 = this, $case = nil;
          if ($iter2)
            $Module_define_method$31.$$p = null;
          if ($iter2)
            $Module_define_method$31.$$p = null;
          ;
          ;
          if ($truthy(method === void 0 && block2 === nil)) {
            self2.$raise($$($nesting, "ArgumentError"), "tried to create a Proc object without a block");
          }
          ;
          block2 = $truthy($a2 = block2) ? $a2 : function() {
            $case = method;
            if ($$($nesting, "Proc")["$==="]($case)) {
              return method;
            } else if ($$($nesting, "Method")["$==="]($case)) {
              return method.$to_proc().$$unbound;
            } else if ($$($nesting, "UnboundMethod")["$==="]($case)) {
              return $lambda(($$32 = function($b2) {
                var self3 = $$32.$$s || this, $post_args2, args2, bound = nil;
                $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                bound = method.$bind(self3);
                return $send(bound, "call", Opal.to_a(args2));
              }, $$32.$$s = self2, $$32.$$arity = -1, $$32));
            } else {
              return self2.$raise($$($nesting, "TypeError"), "wrong argument type " + block2.$class() + " (expected Proc/Method)");
            }
          }();
          var id = "$" + name;
          block2.$$jsid = name;
          block2.$$s = null;
          block2.$$def = block2;
          block2.$$define_meth = true;
          Opal.defn(self2, id, block2);
          return name;
          ;
        }, $Module_define_method$31.$$arity = -2);
        Opal.def(self, "$remove_method", $Module_remove_method$33 = function $$remove_method($a2) {
          var $post_args2, names, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          names = $post_args2;
          ;
          for (var i = 0, length = names.length; i < length; i++) {
            Opal.rdef(self2, "$" + names[i]);
          }
          ;
          return self2;
        }, $Module_remove_method$33.$$arity = -1);
        Opal.def(self, "$singleton_class?", $Module_singleton_class$ques$34 = function() {
          var self2 = this;
          return !!self2.$$is_singleton;
        }, $Module_singleton_class$ques$34.$$arity = 0);
        Opal.def(self, "$include", $Module_include$35 = function $$include($a2) {
          var $post_args2, mods, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          mods = $post_args2;
          ;
          for (var i = mods.length - 1; i >= 0; i--) {
            var mod = mods[i];
            if (!mod.$$is_module) {
              self2.$raise($$($nesting, "TypeError"), "wrong argument type " + mod.$class() + " (expected Module)");
            }
            mod.$append_features(self2);
            mod.$included(self2);
          }
          ;
          return self2;
        }, $Module_include$35.$$arity = -1);
        Opal.def(self, "$included_modules", $Module_included_modules$36 = function $$included_modules() {
          var self2 = this;
          return Opal.included_modules(self2);
        }, $Module_included_modules$36.$$arity = 0);
        Opal.def(self, "$include?", $Module_include$ques$37 = function(mod) {
          var self2 = this;
          if (!mod.$$is_module) {
            self2.$raise($$($nesting, "TypeError"), "wrong argument type " + mod.$class() + " (expected Module)");
          }
          var i, ii, mod2, ancestors = Opal.ancestors(self2);
          for (i = 0, ii = ancestors.length; i < ii; i++) {
            mod2 = ancestors[i];
            if (mod2 === mod && mod2 !== self2) {
              return true;
            }
          }
          return false;
        }, $Module_include$ques$37.$$arity = 1);
        Opal.def(self, "$instance_method", $Module_instance_method$38 = function $$instance_method(name) {
          var self2 = this;
          var meth = self2.$$prototype["$" + name];
          if (!meth || meth.$$stub) {
            self2.$raise($$($nesting, "NameError").$new("undefined method `" + name + "' for class `" + self2.$name() + "'", name));
          }
          return $$($nesting, "UnboundMethod").$new(self2, meth.$$owner || self2, meth, name);
        }, $Module_instance_method$38.$$arity = 1);
        Opal.def(self, "$instance_methods", $Module_instance_methods$39 = function $$instance_methods(include_super) {
          var self2 = this;
          if (include_super == null) {
            include_super = true;
          }
          ;
          if ($truthy(include_super)) {
            return Opal.instance_methods(self2);
          } else {
            return Opal.own_instance_methods(self2);
          }
          ;
        }, $Module_instance_methods$39.$$arity = -1);
        Opal.def(self, "$included", $Module_included$40 = function $$included(mod) {
          var self2 = this;
          return nil;
        }, $Module_included$40.$$arity = 1);
        Opal.def(self, "$extended", $Module_extended$41 = function $$extended(mod) {
          var self2 = this;
          return nil;
        }, $Module_extended$41.$$arity = 1);
        Opal.def(self, "$extend_object", $Module_extend_object$42 = function $$extend_object(object) {
          var self2 = this;
          return nil;
        }, $Module_extend_object$42.$$arity = 1);
        Opal.def(self, "$method_added", $Module_method_added$43 = function $$method_added($a2) {
          var $post_args2, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return nil;
        }, $Module_method_added$43.$$arity = -1);
        Opal.def(self, "$method_removed", $Module_method_removed$44 = function $$method_removed($a2) {
          var $post_args2, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return nil;
        }, $Module_method_removed$44.$$arity = -1);
        Opal.def(self, "$method_undefined", $Module_method_undefined$45 = function $$method_undefined($a2) {
          var $post_args2, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return nil;
        }, $Module_method_undefined$45.$$arity = -1);
        Opal.def(self, "$module_eval", $Module_module_eval$46 = function $$module_eval($a) {
          var $iter = $Module_module_eval$46.$$p, block = $iter || nil, $post_args, args, $b, $$47, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;
          if ($iter)
            $Module_module_eval$46.$$p = null;
          if ($iter)
            $Module_module_eval$46.$$p = null;
          ;
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          args = $post_args;
          ;
          if ($truthy($truthy($b = block["$nil?"]()) ? !!Opal.compile : $b)) {
            if ($truthy($range(1, 3, false)["$cover?"](args.$size()))) {
            } else {
              $$($nesting, "Kernel").$raise($$($nesting, "ArgumentError"), "wrong number of arguments (0 for 1..3)");
            }
            ;
            $b = [].concat(Opal.to_a(args)), string = $b[0] == null ? nil : $b[0], file = $b[1] == null ? nil : $b[1], _lineno = $b[2] == null ? nil : $b[2], $b;
            default_eval_options = $hash2(["file", "eval"], { "file": $truthy($b = file) ? $b : "(eval)", "eval": true });
            compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
            compiled = $$($nesting, "Opal").$compile(string, compiling_options);
            block = $send($$($nesting, "Kernel"), "proc", [], ($$47 = function() {
              var self = $$47.$$s || this;
              return function(self) {
                return eval(compiled);
              }(self);
            }, $$47.$$s = self, $$47.$$arity = 0, $$47));
          } else if ($truthy(args["$any?"]())) {
            $$($nesting, "Kernel").$raise($$($nesting, "ArgumentError"), "" + ("wrong number of arguments (" + args.$size() + " for 0)") + `

  NOTE:If you want to enable passing a String argument please add "require 'opal-parser'" to your script
`);
          }
          ;
          var old = block.$$s, result;
          block.$$s = null;
          result = block.apply(self, [self]);
          block.$$s = old;
          return result;
          ;
        }, $Module_module_eval$46.$$arity = -1);
        Opal.alias(self, "class_eval", "module_eval");
        Opal.def(self, "$module_exec", $Module_module_exec$48 = function $$module_exec($a2) {
          var $iter2 = $Module_module_exec$48.$$p, block2 = $iter2 || nil, $post_args2, args2, self2 = this;
          if ($iter2)
            $Module_module_exec$48.$$p = null;
          if ($iter2)
            $Module_module_exec$48.$$p = null;
          ;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if (block2 === nil) {
            self2.$raise($$($nesting, "LocalJumpError"), "no block given");
          }
          var block_self = block2.$$s, result2;
          block2.$$s = null;
          result2 = block2.apply(self2, args2);
          block2.$$s = block_self;
          return result2;
          ;
        }, $Module_module_exec$48.$$arity = -1);
        Opal.alias(self, "class_exec", "module_exec");
        Opal.def(self, "$method_defined?", $Module_method_defined$ques$49 = function(method) {
          var self2 = this;
          var body = self2.$$prototype["$" + method];
          return !!body && !body.$$stub;
        }, $Module_method_defined$ques$49.$$arity = 1);
        Opal.def(self, "$module_function", $Module_module_function$50 = function $$module_function($a2) {
          var $post_args2, methods, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          methods = $post_args2;
          ;
          if (methods.length === 0) {
            self2.$$module_function = true;
          } else {
            for (var i = 0, length = methods.length; i < length; i++) {
              var meth = methods[i], id = "$" + meth, func = self2.$$prototype[id];
              Opal.defs(self2, id, func);
            }
          }
          return self2;
          ;
        }, $Module_module_function$50.$$arity = -1);
        Opal.def(self, "$name", $Module_name$51 = function $$name() {
          var self2 = this;
          if (self2.$$full_name) {
            return self2.$$full_name;
          }
          var result2 = [], base = self2;
          while (base) {
            if (base.$$name === nil || base.$$name == null)
              return nil;
            result2.unshift(base.$$name);
            base = base.$$base_module;
            if (base === Opal.Object) {
              break;
            }
          }
          if (result2.length === 0) {
            return nil;
          }
          return self2.$$full_name = result2.join("::");
        }, $Module_name$51.$$arity = 0);
        Opal.def(self, "$prepend", $Module_prepend$52 = function $$prepend($a2) {
          var $post_args2, mods, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          mods = $post_args2;
          ;
          if (mods.length === 0) {
            self2.$raise($$($nesting, "ArgumentError"), "wrong number of arguments (given 0, expected 1+)");
          }
          for (var i = mods.length - 1; i >= 0; i--) {
            var mod = mods[i];
            if (!mod.$$is_module) {
              self2.$raise($$($nesting, "TypeError"), "wrong argument type " + mod.$class() + " (expected Module)");
            }
            mod.$prepend_features(self2);
            mod.$prepended(self2);
          }
          ;
          return self2;
        }, $Module_prepend$52.$$arity = -1);
        Opal.def(self, "$prepend_features", $Module_prepend_features$53 = function $$prepend_features(prepender) {
          var self2 = this;
          if (!self2.$$is_module) {
            self2.$raise($$($nesting, "TypeError"), "wrong argument type " + self2.$class() + " (expected Module)");
          }
          Opal.prepend_features(self2, prepender);
          return self2;
        }, $Module_prepend_features$53.$$arity = 1);
        Opal.def(self, "$prepended", $Module_prepended$54 = function $$prepended(mod) {
          var self2 = this;
          return nil;
        }, $Module_prepended$54.$$arity = 1);
        Opal.def(self, "$remove_const", $Module_remove_const$55 = function $$remove_const(name) {
          var self2 = this;
          return Opal.const_remove(self2, name);
        }, $Module_remove_const$55.$$arity = 1);
        Opal.def(self, "$to_s", $Module_to_s$56 = function $$to_s() {
          var $a2, self2 = this;
          return $truthy($a2 = Opal.Module.$name.call(self2)) ? $a2 : "#<" + (self2.$$is_module ? "Module" : "Class") + ":0x" + self2.$__id__().$to_s(16) + ">";
        }, $Module_to_s$56.$$arity = 0);
        Opal.def(self, "$undef_method", $Module_undef_method$57 = function $$undef_method($a2) {
          var $post_args2, names, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          names = $post_args2;
          ;
          for (var i = 0, length = names.length; i < length; i++) {
            Opal.udef(self2, "$" + names[i]);
          }
          ;
          return self2;
        }, $Module_undef_method$57.$$arity = -1);
        Opal.def(self, "$instance_variables", $Module_instance_variables$58 = function $$instance_variables() {
          var self2 = this, consts = nil;
          consts = (Opal.Module.$$nesting = $nesting, self2.$constants());
          var result2 = [];
          for (var name in self2) {
            if (self2.hasOwnProperty(name) && name.charAt(0) !== "$" && name !== "constructor" && !consts["$include?"](name)) {
              result2.push("@" + name);
            }
          }
          return result2;
          ;
        }, $Module_instance_variables$58.$$arity = 0);
        Opal.def(self, "$dup", $Module_dup$59 = function $$dup() {
          var $iter2 = $Module_dup$59.$$p, $yield = $iter2 || nil, self2 = this, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;
          if ($iter2)
            $Module_dup$59.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          copy = $send(self2, Opal.find_super_dispatcher(self2, "dup", $Module_dup$59, false), $zuper, $iter2);
          copy.$copy_class_variables(self2);
          copy.$copy_constants(self2);
          return copy;
        }, $Module_dup$59.$$arity = 0);
        Opal.def(self, "$copy_class_variables", $Module_copy_class_variables$60 = function $$copy_class_variables(other) {
          var self2 = this;
          for (var name in other.$$cvars) {
            self2.$$cvars[name] = other.$$cvars[name];
          }
        }, $Module_copy_class_variables$60.$$arity = 1);
        return (Opal.def(self, "$copy_constants", $Module_copy_constants$61 = function $$copy_constants(other) {
          var self2 = this;
          var name, other_constants = other.$$const;
          for (name in other_constants) {
            Opal.const_set(self2, name, other_constants[name]);
          }
        }, $Module_copy_constants$61.$$arity = 1), nil) && "copy_constants";
      }($nesting[0], null, $nesting);
    };
    Opal.modules["corelib/class"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $send2 = Opal2.send;
      Opal2.add_stubs(["$require", "$class_eval", "$to_proc", "$initialize_copy", "$allocate", "$name", "$to_s"]);
      self2.$require("corelib/module");
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Class");
        var $nesting3 = [self3].concat($parent_nesting2), $Class_new$1, $Class_allocate$2, $Class_inherited$3, $Class_initialize_dup$4, $Class_new$5, $Class_superclass$6, $Class_to_s$7;
        Opal2.defs(self3, "$new", $Class_new$1 = function(superclass) {
          var $iter2 = $Class_new$1.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Class_new$1.$$p = null;
          if ($iter2)
            $Class_new$1.$$p = null;
          ;
          if (superclass == null) {
            superclass = $$2($nesting3, "Object");
          }
          ;
          if (!superclass.$$is_class) {
            throw Opal2.TypeError.$new("superclass must be a Class");
          }
          var klass = Opal2.allocate_class(nil2, superclass);
          superclass.$inherited(klass);
          (function() {
            if (block2 !== nil2) {
              return $send2(klass, "class_eval", [], block2.$to_proc());
            } else {
              return nil2;
            }
            ;
            return nil2;
          })();
          return klass;
          ;
        }, $Class_new$1.$$arity = -1);
        Opal2.def(self3, "$allocate", $Class_allocate$2 = function $$allocate() {
          var self4 = this;
          var obj = new self4.$$constructor();
          obj.$$id = Opal2.uid();
          return obj;
        }, $Class_allocate$2.$$arity = 0);
        Opal2.def(self3, "$inherited", $Class_inherited$3 = function $$inherited(cls) {
          var self4 = this;
          return nil2;
        }, $Class_inherited$3.$$arity = 1);
        Opal2.def(self3, "$initialize_dup", $Class_initialize_dup$4 = function $$initialize_dup(original) {
          var self4 = this;
          self4.$initialize_copy(original);
          self4.$$name = null;
          self4.$$full_name = null;
          ;
        }, $Class_initialize_dup$4.$$arity = 1);
        Opal2.def(self3, "$new", $Class_new$5 = function($a2) {
          var $iter2 = $Class_new$5.$$p, block2 = $iter2 || nil2, $post_args2, args2, self4 = this;
          if ($iter2)
            $Class_new$5.$$p = null;
          if ($iter2)
            $Class_new$5.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          var object = self4.$allocate();
          Opal2.send(object, object.$initialize, args2, block2);
          return object;
          ;
        }, $Class_new$5.$$arity = -1);
        Opal2.def(self3, "$superclass", $Class_superclass$6 = function $$superclass() {
          var self4 = this;
          return self4.$$super || nil2;
        }, $Class_superclass$6.$$arity = 0);
        return (Opal2.def(self3, "$to_s", $Class_to_s$7 = function $$to_s() {
          var $iter2 = $Class_to_s$7.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Class_to_s$7.$$p = null;
          var singleton_of = self4.$$singleton_of;
          if (singleton_of && singleton_of.$$is_a_module) {
            return "#<Class:" + singleton_of.$name() + ">";
          } else if (singleton_of) {
            return "#<Class:#<" + singleton_of.$$class.$name() + ":0x" + Opal2.id(singleton_of).$to_s(16) + ">>";
          }
          return $send2(self4, Opal2.find_super_dispatcher(self4, "to_s", $Class_to_s$7, false), [], null);
        }, $Class_to_s$7.$$arity = 0), nil2) && "to_s";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/basic_object"] = function(Opal) {
      var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;
      Opal.add_stubs(["$==", "$!", "$nil?", "$cover?", "$size", "$raise", "$merge", "$compile", "$proc", "$any?", "$inspect", "$new"]);
      return function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, "BasicObject");
        var $nesting = [self].concat($parent_nesting), $BasicObject_initialize$1, $BasicObject_$eq_eq$2, $BasicObject_eql$ques$3, $BasicObject___id__$4, $BasicObject___send__$5, $BasicObject_$excl$6, $BasicObject_$not_eq$7, $BasicObject_instance_eval$8, $BasicObject_instance_exec$10, $BasicObject_singleton_method_added$11, $BasicObject_singleton_method_removed$12, $BasicObject_singleton_method_undefined$13, $BasicObject_class$14, $BasicObject_method_missing$15;
        Opal.def(self, "$initialize", $BasicObject_initialize$1 = function $$initialize($a2) {
          var $post_args2, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return nil;
        }, $BasicObject_initialize$1.$$arity = -1);
        Opal.def(self, "$==", $BasicObject_$eq_eq$2 = function(other) {
          var self2 = this;
          return self2 === other;
        }, $BasicObject_$eq_eq$2.$$arity = 1);
        Opal.def(self, "$eql?", $BasicObject_eql$ques$3 = function(other) {
          var self2 = this;
          return self2["$=="](other);
        }, $BasicObject_eql$ques$3.$$arity = 1);
        Opal.alias(self, "equal?", "==");
        Opal.def(self, "$__id__", $BasicObject___id__$4 = function $$__id__() {
          var self2 = this;
          if (self2.$$id != null) {
            return self2.$$id;
          }
          Opal.defineProperty(self2, "$$id", Opal.uid());
          return self2.$$id;
        }, $BasicObject___id__$4.$$arity = 0);
        Opal.def(self, "$__send__", $BasicObject___send__$5 = function $$__send__(symbol, $a2) {
          var $iter2 = $BasicObject___send__$5.$$p, block2 = $iter2 || nil, $post_args2, args2, self2 = this;
          if ($iter2)
            $BasicObject___send__$5.$$p = null;
          if ($iter2)
            $BasicObject___send__$5.$$p = null;
          ;
          $post_args2 = Opal.slice.call(arguments, 1, arguments.length);
          args2 = $post_args2;
          ;
          var func = self2["$" + symbol];
          if (func) {
            if (block2 !== nil) {
              func.$$p = block2;
            }
            return func.apply(self2, args2);
          }
          if (block2 !== nil) {
            self2.$method_missing.$$p = block2;
          }
          return self2.$method_missing.apply(self2, [symbol].concat(args2));
          ;
        }, $BasicObject___send__$5.$$arity = -2);
        Opal.def(self, "$!", $BasicObject_$excl$6 = function() {
          var self2 = this;
          return false;
        }, $BasicObject_$excl$6.$$arity = 0);
        Opal.def(self, "$!=", $BasicObject_$not_eq$7 = function(other) {
          var self2 = this;
          return self2["$=="](other)["$!"]();
        }, $BasicObject_$not_eq$7.$$arity = 1);
        Opal.def(self, "$instance_eval", $BasicObject_instance_eval$8 = function $$instance_eval($a) {
          var $iter = $BasicObject_instance_eval$8.$$p, block = $iter || nil, $post_args, args, $b, $$9, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;
          if ($iter)
            $BasicObject_instance_eval$8.$$p = null;
          if ($iter)
            $BasicObject_instance_eval$8.$$p = null;
          ;
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          args = $post_args;
          ;
          if ($truthy($truthy($b = block["$nil?"]()) ? !!Opal.compile : $b)) {
            if ($truthy($range(1, 3, false)["$cover?"](args.$size()))) {
            } else {
              $$$("::", "Kernel").$raise($$$("::", "ArgumentError"), "wrong number of arguments (0 for 1..3)");
            }
            ;
            $b = [].concat(Opal.to_a(args)), string = $b[0] == null ? nil : $b[0], file = $b[1] == null ? nil : $b[1], _lineno = $b[2] == null ? nil : $b[2], $b;
            default_eval_options = $hash2(["file", "eval"], { "file": $truthy($b = file) ? $b : "(eval)", "eval": true });
            compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
            compiled = $$$("::", "Opal").$compile(string, compiling_options);
            block = $send($$$("::", "Kernel"), "proc", [], ($$9 = function() {
              var self = $$9.$$s || this;
              return function(self) {
                return eval(compiled);
              }(self);
            }, $$9.$$s = self, $$9.$$arity = 0, $$9));
          } else if ($truthy(args["$any?"]())) {
            $$$("::", "Kernel").$raise($$$("::", "ArgumentError"), "wrong number of arguments (" + args.$size() + " for 0)");
          }
          ;
          var old = block.$$s, result;
          block.$$s = null;
          if (self.$$is_a_module) {
            self.$$eval = true;
            try {
              result = block.call(self, self);
            } finally {
              self.$$eval = false;
            }
          } else {
            result = block.call(self, self);
          }
          block.$$s = old;
          return result;
          ;
        }, $BasicObject_instance_eval$8.$$arity = -1);
        Opal.def(self, "$instance_exec", $BasicObject_instance_exec$10 = function $$instance_exec($a2) {
          var $iter2 = $BasicObject_instance_exec$10.$$p, block2 = $iter2 || nil, $post_args2, args2, self2 = this;
          if ($iter2)
            $BasicObject_instance_exec$10.$$p = null;
          if ($iter2)
            $BasicObject_instance_exec$10.$$p = null;
          ;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if ($truthy(block2)) {
          } else {
            $$$("::", "Kernel").$raise($$$("::", "ArgumentError"), "no block given");
          }
          ;
          var block_self = block2.$$s, result2;
          block2.$$s = null;
          if (self2.$$is_a_module) {
            self2.$$eval = true;
            try {
              result2 = block2.apply(self2, args2);
            } finally {
              self2.$$eval = false;
            }
          } else {
            result2 = block2.apply(self2, args2);
          }
          block2.$$s = block_self;
          return result2;
          ;
        }, $BasicObject_instance_exec$10.$$arity = -1);
        Opal.def(self, "$singleton_method_added", $BasicObject_singleton_method_added$11 = function $$singleton_method_added($a2) {
          var $post_args2, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return nil;
        }, $BasicObject_singleton_method_added$11.$$arity = -1);
        Opal.def(self, "$singleton_method_removed", $BasicObject_singleton_method_removed$12 = function $$singleton_method_removed($a2) {
          var $post_args2, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return nil;
        }, $BasicObject_singleton_method_removed$12.$$arity = -1);
        Opal.def(self, "$singleton_method_undefined", $BasicObject_singleton_method_undefined$13 = function $$singleton_method_undefined($a2) {
          var $post_args2, self2 = this;
          $post_args2 = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return nil;
        }, $BasicObject_singleton_method_undefined$13.$$arity = -1);
        Opal.def(self, "$class", $BasicObject_class$14 = function() {
          var self2 = this;
          return self2.$$class;
        }, $BasicObject_class$14.$$arity = 0);
        return (Opal.def(self, "$method_missing", $BasicObject_method_missing$15 = function $$method_missing(symbol, $a2) {
          var $iter2 = $BasicObject_method_missing$15.$$p, block2 = $iter2 || nil, $post_args2, args2, self2 = this, message = nil;
          if ($iter2)
            $BasicObject_method_missing$15.$$p = null;
          if ($iter2)
            $BasicObject_method_missing$15.$$p = null;
          ;
          $post_args2 = Opal.slice.call(arguments, 1, arguments.length);
          args2 = $post_args2;
          ;
          message = function() {
            if ($truthy(self2.$inspect && !self2.$inspect.$$stub)) {
              return "undefined method `" + symbol + "' for " + self2.$inspect() + ":" + self2.$$class;
            } else {
              return "undefined method `" + symbol + "' for " + self2.$$class;
            }
            ;
            return nil;
          }();
          return $$$("::", "Kernel").$raise($$$("::", "NoMethodError").$new(message, symbol));
        }, $BasicObject_method_missing$15.$$arity = -2), nil) && "method_missing";
      }($nesting[0], null, $nesting);
    };
    Opal.modules["corelib/kernel"] = function(Opal2) {
      function $rb_le(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $truthy2 = Opal2.truthy, $gvars = Opal2.gvars, $hash22 = Opal2.hash2, $send2 = Opal2.send, $klass2 = Opal2.klass;
      Opal2.add_stubs(["$raise", "$new", "$inspect", "$!", "$=~", "$==", "$object_id", "$class", "$coerce_to?", "$<<", "$allocate", "$copy_instance_variables", "$copy_singleton_methods", "$initialize_clone", "$initialize_copy", "$define_method", "$singleton_class", "$to_proc", "$initialize_dup", "$for", "$empty?", "$pop", "$call", "$coerce_to", "$append_features", "$extend_object", "$extended", "$__id__", "$to_s", "$instance_variable_name!", "$respond_to?", "$to_int", "$coerce_to!", "$Integer", "$nil?", "$===", "$enum_for", "$result", "$any?", "$print", "$format", "$puts", "$each", "$<=", "$length", "$[]", "$exception", "$is_a?", "$rand", "$respond_to_missing?", "$try_convert!", "$expand_path", "$join", "$start_with?", "$new_seed", "$srand", "$sym", "$arg", "$open", "$include"]);
      (function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Kernel");
        var $nesting3 = [self3].concat($parent_nesting2), $Kernel_method_missing$1, $Kernel_$eq_tilde$2, $Kernel_$excl_tilde$3, $Kernel_$eq_eq_eq$4, $Kernel_$lt_eq_gt$5, $Kernel_method$6, $Kernel_methods$7, $Kernel_public_methods$8, $Kernel_Array$9, $Kernel_at_exit$10, $Kernel_caller$11, $Kernel_class$12, $Kernel_copy_instance_variables$13, $Kernel_copy_singleton_methods$14, $Kernel_clone$15, $Kernel_initialize_clone$16, $Kernel_define_singleton_method$17, $Kernel_dup$18, $Kernel_initialize_dup$19, $Kernel_enum_for$20, $Kernel_equal$ques$21, $Kernel_exit$22, $Kernel_extend$23, $Kernel_hash$24, $Kernel_initialize_copy$25, $Kernel_inspect$26, $Kernel_instance_of$ques$27, $Kernel_instance_variable_defined$ques$28, $Kernel_instance_variable_get$29, $Kernel_instance_variable_set$30, $Kernel_remove_instance_variable$31, $Kernel_instance_variables$32, $Kernel_Integer$33, $Kernel_Float$34, $Kernel_Hash$35, $Kernel_is_a$ques$36, $Kernel_itself$37, $Kernel_lambda$38, $Kernel_load$39, $Kernel_loop$40, $Kernel_nil$ques$42, $Kernel_printf$43, $Kernel_proc$44, $Kernel_puts$45, $Kernel_p$46, $Kernel_print$48, $Kernel_warn$49, $Kernel_raise$50, $Kernel_rand$51, $Kernel_respond_to$ques$52, $Kernel_respond_to_missing$ques$53, $Kernel_require$54, $Kernel_require_relative$55, $Kernel_require_tree$56, $Kernel_singleton_class$57, $Kernel_sleep$58, $Kernel_srand$59, $Kernel_String$60, $Kernel_tap$61, $Kernel_to_proc$62, $Kernel_to_s$63, $Kernel_catch$64, $Kernel_throw$65, $Kernel_open$66, $Kernel_yield_self$67;
        Opal2.def(self3, "$method_missing", $Kernel_method_missing$1 = function $$method_missing(symbol, $a2) {
          var $iter2 = $Kernel_method_missing$1.$$p, block2 = $iter2 || nil2, $post_args2, args2, self4 = this;
          if ($iter2)
            $Kernel_method_missing$1.$$p = null;
          if ($iter2)
            $Kernel_method_missing$1.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          args2 = $post_args2;
          ;
          return self4.$raise($$2($nesting3, "NoMethodError").$new("undefined method `" + symbol + "' for " + self4.$inspect(), symbol, args2));
        }, $Kernel_method_missing$1.$$arity = -2);
        Opal2.def(self3, "$=~", $Kernel_$eq_tilde$2 = function(obj) {
          var self4 = this;
          return false;
        }, $Kernel_$eq_tilde$2.$$arity = 1);
        Opal2.def(self3, "$!~", $Kernel_$excl_tilde$3 = function(obj) {
          var self4 = this;
          return self4["$=~"](obj)["$!"]();
        }, $Kernel_$excl_tilde$3.$$arity = 1);
        Opal2.def(self3, "$===", $Kernel_$eq_eq_eq$4 = function(other) {
          var $a2, self4 = this;
          return $truthy2($a2 = self4.$object_id()["$=="](other.$object_id())) ? $a2 : self4["$=="](other);
        }, $Kernel_$eq_eq_eq$4.$$arity = 1);
        Opal2.def(self3, "$<=>", $Kernel_$lt_eq_gt$5 = function(other) {
          var self4 = this;
          self4.$$comparable = true;
          var x = self4["$=="](other);
          if (x && x !== nil2) {
            return 0;
          }
          return nil2;
        }, $Kernel_$lt_eq_gt$5.$$arity = 1);
        Opal2.def(self3, "$method", $Kernel_method$6 = function $$method(name) {
          var self4 = this;
          var meth = self4["$" + name];
          if (!meth || meth.$$stub) {
            self4.$raise($$2($nesting3, "NameError").$new("undefined method `" + name + "' for class `" + self4.$class() + "'", name));
          }
          return $$2($nesting3, "Method").$new(self4, meth.$$owner || self4.$class(), meth, name);
        }, $Kernel_method$6.$$arity = 1);
        Opal2.def(self3, "$methods", $Kernel_methods$7 = function $$methods(all) {
          var self4 = this;
          if (all == null) {
            all = true;
          }
          ;
          if ($truthy2(all)) {
            return Opal2.methods(self4);
          } else {
            return Opal2.own_methods(self4);
          }
          ;
        }, $Kernel_methods$7.$$arity = -1);
        Opal2.def(self3, "$public_methods", $Kernel_public_methods$8 = function $$public_methods(all) {
          var self4 = this;
          if (all == null) {
            all = true;
          }
          ;
          if ($truthy2(all)) {
            return Opal2.methods(self4);
          } else {
            return Opal2.receiver_methods(self4);
          }
          ;
        }, $Kernel_public_methods$8.$$arity = -1);
        Opal2.def(self3, "$Array", $Kernel_Array$9 = function $$Array(object) {
          var self4 = this;
          var coerced;
          if (object === nil2) {
            return [];
          }
          if (object.$$is_array) {
            return object;
          }
          coerced = $$2($nesting3, "Opal")["$coerce_to?"](object, $$2($nesting3, "Array"), "to_ary");
          if (coerced !== nil2) {
            return coerced;
          }
          coerced = $$2($nesting3, "Opal")["$coerce_to?"](object, $$2($nesting3, "Array"), "to_a");
          if (coerced !== nil2) {
            return coerced;
          }
          return [object];
        }, $Kernel_Array$9.$$arity = 1);
        Opal2.def(self3, "$at_exit", $Kernel_at_exit$10 = function $$at_exit() {
          var $iter2 = $Kernel_at_exit$10.$$p, block2 = $iter2 || nil2, $a2, self4 = this;
          if ($gvars.__at_exit__ == null)
            $gvars.__at_exit__ = nil2;
          if ($iter2)
            $Kernel_at_exit$10.$$p = null;
          if ($iter2)
            $Kernel_at_exit$10.$$p = null;
          ;
          $gvars.__at_exit__ = $truthy2($a2 = $gvars.__at_exit__) ? $a2 : [];
          return $gvars.__at_exit__["$<<"](block2);
        }, $Kernel_at_exit$10.$$arity = 0);
        Opal2.def(self3, "$caller", $Kernel_caller$11 = function $$caller($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return [];
        }, $Kernel_caller$11.$$arity = -1);
        Opal2.def(self3, "$class", $Kernel_class$12 = function() {
          var self4 = this;
          return self4.$$class;
        }, $Kernel_class$12.$$arity = 0);
        Opal2.def(self3, "$copy_instance_variables", $Kernel_copy_instance_variables$13 = function $$copy_instance_variables(other) {
          var self4 = this;
          var keys = Object.keys(other), i, ii, name;
          for (i = 0, ii = keys.length; i < ii; i++) {
            name = keys[i];
            if (name.charAt(0) !== "$" && other.hasOwnProperty(name)) {
              self4[name] = other[name];
            }
          }
        }, $Kernel_copy_instance_variables$13.$$arity = 1);
        Opal2.def(self3, "$copy_singleton_methods", $Kernel_copy_singleton_methods$14 = function $$copy_singleton_methods(other) {
          var self4 = this;
          var i, name, names, length;
          if (other.hasOwnProperty("$$meta")) {
            var other_singleton_class = Opal2.get_singleton_class(other);
            var self_singleton_class = Opal2.get_singleton_class(self4);
            names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);
            for (i = 0, length = names.length; i < length; i++) {
              name = names[i];
              if (Opal2.is_method(name)) {
                self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];
              }
            }
            self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);
            Object.setPrototypeOf(self_singleton_class.$$prototype, Object.getPrototypeOf(other_singleton_class.$$prototype));
          }
          for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {
            name = names[i];
            if (name.charAt(0) === "$" && name.charAt(1) !== "$" && other.hasOwnProperty(name)) {
              self4[name] = other[name];
            }
          }
        }, $Kernel_copy_singleton_methods$14.$$arity = 1);
        Opal2.def(self3, "$clone", $Kernel_clone$15 = function $$clone($kwargs) {
          var freeze, self4 = this, copy = nil2;
          if ($kwargs == null) {
            $kwargs = $hash22([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal2.ArgumentError.$new("expected kwargs");
          }
          ;
          freeze = $kwargs.$$smap["freeze"];
          if (freeze == null) {
            freeze = true;
          }
          ;
          copy = self4.$class().$allocate();
          copy.$copy_instance_variables(self4);
          copy.$copy_singleton_methods(self4);
          copy.$initialize_clone(self4);
          return copy;
        }, $Kernel_clone$15.$$arity = -1);
        Opal2.def(self3, "$initialize_clone", $Kernel_initialize_clone$16 = function $$initialize_clone(other) {
          var self4 = this;
          return self4.$initialize_copy(other);
        }, $Kernel_initialize_clone$16.$$arity = 1);
        Opal2.def(self3, "$define_singleton_method", $Kernel_define_singleton_method$17 = function $$define_singleton_method(name, method) {
          var $iter2 = $Kernel_define_singleton_method$17.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Kernel_define_singleton_method$17.$$p = null;
          if ($iter2)
            $Kernel_define_singleton_method$17.$$p = null;
          ;
          ;
          return $send2(self4.$singleton_class(), "define_method", [name, method], block2.$to_proc());
        }, $Kernel_define_singleton_method$17.$$arity = -2);
        Opal2.def(self3, "$dup", $Kernel_dup$18 = function $$dup() {
          var self4 = this, copy = nil2;
          copy = self4.$class().$allocate();
          copy.$copy_instance_variables(self4);
          copy.$initialize_dup(self4);
          return copy;
        }, $Kernel_dup$18.$$arity = 0);
        Opal2.def(self3, "$initialize_dup", $Kernel_initialize_dup$19 = function $$initialize_dup(other) {
          var self4 = this;
          return self4.$initialize_copy(other);
        }, $Kernel_initialize_dup$19.$$arity = 1);
        Opal2.def(self3, "$enum_for", $Kernel_enum_for$20 = function $$enum_for($a2, $b2) {
          var $iter2 = $Kernel_enum_for$20.$$p, block2 = $iter2 || nil2, $post_args2, method, args2, self4 = this;
          if ($iter2)
            $Kernel_enum_for$20.$$p = null;
          if ($iter2)
            $Kernel_enum_for$20.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          if ($post_args2.length > 0) {
            method = $post_args2[0];
            $post_args2.splice(0, 1);
          }
          if (method == null) {
            method = "each";
          }
          ;
          args2 = $post_args2;
          ;
          return $send2($$2($nesting3, "Enumerator"), "for", [self4, method].concat(Opal2.to_a(args2)), block2.$to_proc());
        }, $Kernel_enum_for$20.$$arity = -1);
        Opal2.alias(self3, "to_enum", "enum_for");
        Opal2.def(self3, "$equal?", $Kernel_equal$ques$21 = function(other) {
          var self4 = this;
          return self4 === other;
        }, $Kernel_equal$ques$21.$$arity = 1);
        Opal2.def(self3, "$exit", $Kernel_exit$22 = function $$exit(status) {
          var $a2, self4 = this, block2 = nil2;
          if ($gvars.__at_exit__ == null)
            $gvars.__at_exit__ = nil2;
          if (status == null) {
            status = true;
          }
          ;
          $gvars.__at_exit__ = $truthy2($a2 = $gvars.__at_exit__) ? $a2 : [];
          while (!$truthy2($gvars.__at_exit__["$empty?"]())) {
            block2 = $gvars.__at_exit__.$pop();
            block2.$call();
          }
          ;
          if (status.$$is_boolean) {
            status = status ? 0 : 1;
          } else {
            status = $$2($nesting3, "Opal").$coerce_to(status, $$2($nesting3, "Integer"), "to_int");
          }
          Opal2.exit(status);
          ;
          return nil2;
        }, $Kernel_exit$22.$$arity = -1);
        Opal2.def(self3, "$extend", $Kernel_extend$23 = function $$extend($a2) {
          var $post_args2, mods, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          mods = $post_args2;
          ;
          var singleton = self4.$singleton_class();
          for (var i = mods.length - 1; i >= 0; i--) {
            var mod = mods[i];
            if (!mod.$$is_module) {
              self4.$raise($$2($nesting3, "TypeError"), "wrong argument type " + mod.$class() + " (expected Module)");
            }
            mod.$append_features(singleton);
            mod.$extend_object(self4);
            mod.$extended(self4);
          }
          ;
          return self4;
        }, $Kernel_extend$23.$$arity = -1);
        Opal2.def(self3, "$hash", $Kernel_hash$24 = function $$hash() {
          var self4 = this;
          return self4.$__id__();
        }, $Kernel_hash$24.$$arity = 0);
        Opal2.def(self3, "$initialize_copy", $Kernel_initialize_copy$25 = function $$initialize_copy(other) {
          var self4 = this;
          return nil2;
        }, $Kernel_initialize_copy$25.$$arity = 1);
        Opal2.def(self3, "$inspect", $Kernel_inspect$26 = function $$inspect() {
          var self4 = this;
          return self4.$to_s();
        }, $Kernel_inspect$26.$$arity = 0);
        Opal2.def(self3, "$instance_of?", $Kernel_instance_of$ques$27 = function(klass) {
          var self4 = this;
          if (!klass.$$is_class && !klass.$$is_module) {
            self4.$raise($$2($nesting3, "TypeError"), "class or module required");
          }
          return self4.$$class === klass;
        }, $Kernel_instance_of$ques$27.$$arity = 1);
        Opal2.def(self3, "$instance_variable_defined?", $Kernel_instance_variable_defined$ques$28 = function(name) {
          var self4 = this;
          name = $$2($nesting3, "Opal")["$instance_variable_name!"](name);
          return Opal2.hasOwnProperty.call(self4, name.substr(1));
          ;
        }, $Kernel_instance_variable_defined$ques$28.$$arity = 1);
        Opal2.def(self3, "$instance_variable_get", $Kernel_instance_variable_get$29 = function $$instance_variable_get(name) {
          var self4 = this;
          name = $$2($nesting3, "Opal")["$instance_variable_name!"](name);
          var ivar = self4[Opal2.ivar(name.substr(1))];
          return ivar == null ? nil2 : ivar;
          ;
        }, $Kernel_instance_variable_get$29.$$arity = 1);
        Opal2.def(self3, "$instance_variable_set", $Kernel_instance_variable_set$30 = function $$instance_variable_set(name, value) {
          var self4 = this;
          name = $$2($nesting3, "Opal")["$instance_variable_name!"](name);
          return self4[Opal2.ivar(name.substr(1))] = value;
          ;
        }, $Kernel_instance_variable_set$30.$$arity = 2);
        Opal2.def(self3, "$remove_instance_variable", $Kernel_remove_instance_variable$31 = function $$remove_instance_variable(name) {
          var self4 = this;
          name = $$2($nesting3, "Opal")["$instance_variable_name!"](name);
          var key = Opal2.ivar(name.substr(1)), val;
          if (self4.hasOwnProperty(key)) {
            val = self4[key];
            delete self4[key];
            return val;
          }
          ;
          return self4.$raise($$2($nesting3, "NameError"), "instance variable " + name + " not defined");
        }, $Kernel_remove_instance_variable$31.$$arity = 1);
        Opal2.def(self3, "$instance_variables", $Kernel_instance_variables$32 = function $$instance_variables() {
          var self4 = this;
          var result2 = [], ivar;
          for (var name in self4) {
            if (self4.hasOwnProperty(name) && name.charAt(0) !== "$") {
              if (name.substr(-1) === "$") {
                ivar = name.slice(0, name.length - 1);
              } else {
                ivar = name;
              }
              result2.push("@" + ivar);
            }
          }
          return result2;
        }, $Kernel_instance_variables$32.$$arity = 0);
        Opal2.def(self3, "$Integer", $Kernel_Integer$33 = function $$Integer(value, base) {
          var self4 = this;
          ;
          var i, str, base_digits;
          if (!value.$$is_string) {
            if (base !== void 0) {
              self4.$raise($$2($nesting3, "ArgumentError"), "base specified for non string value");
            }
            if (value === nil2) {
              self4.$raise($$2($nesting3, "TypeError"), "can't convert nil into Integer");
            }
            if (value.$$is_number) {
              if (value === Infinity || value === -Infinity || isNaN(value)) {
                self4.$raise($$2($nesting3, "FloatDomainError"), value);
              }
              return Math.floor(value);
            }
            if (value["$respond_to?"]("to_int")) {
              i = value.$to_int();
              if (i !== nil2) {
                return i;
              }
            }
            return $$2($nesting3, "Opal")["$coerce_to!"](value, $$2($nesting3, "Integer"), "to_i");
          }
          if (value === "0") {
            return 0;
          }
          if (base === void 0) {
            base = 0;
          } else {
            base = $$2($nesting3, "Opal").$coerce_to(base, $$2($nesting3, "Integer"), "to_int");
            if (base === 1 || base < 0 || base > 36) {
              self4.$raise($$2($nesting3, "ArgumentError"), "invalid radix " + base);
            }
          }
          str = value.toLowerCase();
          str = str.replace(/(\d)_(?=\d)/g, "$1");
          str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function(_, head, flag) {
            switch (flag) {
              case "0b":
                if (base === 0 || base === 2) {
                  base = 2;
                  return head;
                }
              case "0":
              case "0o":
                if (base === 0 || base === 8) {
                  base = 8;
                  return head;
                }
              case "0d":
                if (base === 0 || base === 10) {
                  base = 10;
                  return head;
                }
              case "0x":
                if (base === 0 || base === 16) {
                  base = 16;
                  return head;
                }
            }
            self4.$raise($$2($nesting3, "ArgumentError"), 'invalid value for Integer(): "' + value + '"');
          });
          base = base === 0 ? 10 : base;
          base_digits = "0-" + (base <= 10 ? base - 1 : "9a-" + String.fromCharCode(97 + (base - 11)));
          if (!new RegExp("^\\s*[+-]?[" + base_digits + "]+\\s*$").test(str)) {
            self4.$raise($$2($nesting3, "ArgumentError"), 'invalid value for Integer(): "' + value + '"');
          }
          i = parseInt(str, base);
          if (isNaN(i)) {
            self4.$raise($$2($nesting3, "ArgumentError"), 'invalid value for Integer(): "' + value + '"');
          }
          return i;
          ;
        }, $Kernel_Integer$33.$$arity = -2);
        Opal2.def(self3, "$Float", $Kernel_Float$34 = function $$Float(value) {
          var self4 = this;
          var str;
          if (value === nil2) {
            self4.$raise($$2($nesting3, "TypeError"), "can't convert nil into Float");
          }
          if (value.$$is_string) {
            str = value.toString();
            str = str.replace(/(\d)_(?=\d)/g, "$1");
            if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
              return self4.$Integer(str);
            }
            if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
              self4.$raise($$2($nesting3, "ArgumentError"), 'invalid value for Float(): "' + value + '"');
            }
            return parseFloat(str);
          }
          return $$2($nesting3, "Opal")["$coerce_to!"](value, $$2($nesting3, "Float"), "to_f");
        }, $Kernel_Float$34.$$arity = 1);
        Opal2.def(self3, "$Hash", $Kernel_Hash$35 = function $$Hash(arg) {
          var $a2, self4 = this;
          if ($truthy2($truthy2($a2 = arg["$nil?"]()) ? $a2 : arg["$=="]([]))) {
            return $hash22([], {});
          }
          ;
          if ($truthy2($$2($nesting3, "Hash")["$==="](arg))) {
            return arg;
          }
          ;
          return $$2($nesting3, "Opal")["$coerce_to!"](arg, $$2($nesting3, "Hash"), "to_hash");
        }, $Kernel_Hash$35.$$arity = 1);
        Opal2.def(self3, "$is_a?", $Kernel_is_a$ques$36 = function(klass) {
          var self4 = this;
          if (!klass.$$is_class && !klass.$$is_module) {
            self4.$raise($$2($nesting3, "TypeError"), "class or module required");
          }
          return Opal2.is_a(self4, klass);
        }, $Kernel_is_a$ques$36.$$arity = 1);
        Opal2.def(self3, "$itself", $Kernel_itself$37 = function $$itself() {
          var self4 = this;
          return self4;
        }, $Kernel_itself$37.$$arity = 0);
        Opal2.alias(self3, "kind_of?", "is_a?");
        Opal2.def(self3, "$lambda", $Kernel_lambda$38 = function $$lambda() {
          var $iter2 = $Kernel_lambda$38.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Kernel_lambda$38.$$p = null;
          if ($iter2)
            $Kernel_lambda$38.$$p = null;
          ;
          return Opal2.lambda(block2);
          ;
        }, $Kernel_lambda$38.$$arity = 0);
        Opal2.def(self3, "$load", $Kernel_load$39 = function $$load(file2) {
          var self4 = this;
          file2 = $$2($nesting3, "Opal")["$coerce_to!"](file2, $$2($nesting3, "String"), "to_str");
          return Opal2.load(file2);
        }, $Kernel_load$39.$$arity = 1);
        Opal2.def(self3, "$loop", $Kernel_loop$40 = function $$loop() {
          var $$41, $a2, $iter2 = $Kernel_loop$40.$$p, $yield = $iter2 || nil2, self4 = this, e = nil2;
          if ($iter2)
            $Kernel_loop$40.$$p = null;
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["loop"], ($$41 = function() {
              var self5 = $$41.$$s || this;
              return $$$2($$2($nesting3, "Float"), "INFINITY");
            }, $$41.$$s = self4, $$41.$$arity = 0, $$41));
          }
          ;
          while ($truthy2(true)) {
            try {
              Opal2.yieldX($yield, []);
            } catch ($err) {
              if (Opal2.rescue($err, [$$2($nesting3, "StopIteration")])) {
                e = $err;
                try {
                  return e.$result();
                } finally {
                  Opal2.pop_exception();
                }
              } else {
                throw $err;
              }
            }
            ;
          }
          ;
          return self4;
        }, $Kernel_loop$40.$$arity = 0);
        Opal2.def(self3, "$nil?", $Kernel_nil$ques$42 = function() {
          var self4 = this;
          return false;
        }, $Kernel_nil$ques$42.$$arity = 0);
        Opal2.alias(self3, "object_id", "__id__");
        Opal2.def(self3, "$printf", $Kernel_printf$43 = function $$printf($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if ($truthy2(args2["$any?"]())) {
            self4.$print($send2(self4, "format", Opal2.to_a(args2)));
          }
          ;
          return nil2;
        }, $Kernel_printf$43.$$arity = -1);
        Opal2.def(self3, "$proc", $Kernel_proc$44 = function $$proc() {
          var $iter2 = $Kernel_proc$44.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Kernel_proc$44.$$p = null;
          if ($iter2)
            $Kernel_proc$44.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "tried to create Proc object without a block");
          }
          ;
          block2.$$is_lambda = false;
          return block2;
        }, $Kernel_proc$44.$$arity = 0);
        Opal2.def(self3, "$puts", $Kernel_puts$45 = function $$puts($a2) {
          var $post_args2, strs, self4 = this;
          if ($gvars.stdout == null)
            $gvars.stdout = nil2;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          strs = $post_args2;
          ;
          return $send2($gvars.stdout, "puts", Opal2.to_a(strs));
        }, $Kernel_puts$45.$$arity = -1);
        Opal2.def(self3, "$p", $Kernel_p$46 = function $$p($a2) {
          var $post_args2, args2, $$472, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          $send2(args2, "each", [], ($$472 = function(obj) {
            var self5 = $$472.$$s || this;
            if ($gvars.stdout == null)
              $gvars.stdout = nil2;
            if (obj == null) {
              obj = nil2;
            }
            ;
            return $gvars.stdout.$puts(obj.$inspect());
          }, $$472.$$s = self4, $$472.$$arity = 1, $$472));
          if ($truthy2($rb_le(args2.$length(), 1))) {
            return args2["$[]"](0);
          } else {
            return args2;
          }
          ;
        }, $Kernel_p$46.$$arity = -1);
        Opal2.def(self3, "$print", $Kernel_print$48 = function $$print($a2) {
          var $post_args2, strs, self4 = this;
          if ($gvars.stdout == null)
            $gvars.stdout = nil2;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          strs = $post_args2;
          ;
          return $send2($gvars.stdout, "print", Opal2.to_a(strs));
        }, $Kernel_print$48.$$arity = -1);
        Opal2.def(self3, "$warn", $Kernel_warn$49 = function $$warn($a2) {
          var $post_args2, strs, $b2, self4 = this;
          if ($gvars.VERBOSE == null)
            $gvars.VERBOSE = nil2;
          if ($gvars.stderr == null)
            $gvars.stderr = nil2;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          strs = $post_args2;
          ;
          if ($truthy2($truthy2($b2 = $gvars.VERBOSE["$nil?"]()) ? $b2 : strs["$empty?"]())) {
            return nil2;
          } else {
            return $send2($gvars.stderr, "puts", Opal2.to_a(strs));
          }
          ;
        }, $Kernel_warn$49.$$arity = -1);
        Opal2.def(self3, "$raise", $Kernel_raise$50 = function $$raise(exception, string2, _backtrace) {
          var self4 = this;
          if ($gvars["!"] == null)
            $gvars["!"] = nil2;
          ;
          if (string2 == null) {
            string2 = nil2;
          }
          ;
          if (_backtrace == null) {
            _backtrace = nil2;
          }
          ;
          if (exception == null && $gvars["!"] !== nil2) {
            throw $gvars["!"];
          }
          if (exception == null) {
            exception = $$2($nesting3, "RuntimeError").$new();
          } else if (exception.$$is_string) {
            exception = $$2($nesting3, "RuntimeError").$new(exception);
          } else if (exception.$$is_class && exception["$respond_to?"]("exception")) {
            exception = exception.$exception(string2);
          } else if (exception["$is_a?"]($$2($nesting3, "Exception"))) {
          } else {
            exception = $$2($nesting3, "TypeError").$new("exception class/object expected");
          }
          if ($gvars["!"] !== nil2) {
            Opal2.exceptions.push($gvars["!"]);
          }
          $gvars["!"] = exception;
          throw exception;
          ;
        }, $Kernel_raise$50.$$arity = -1);
        Opal2.alias(self3, "fail", "raise");
        Opal2.def(self3, "$rand", $Kernel_rand$51 = function $$rand(max) {
          var self4 = this;
          ;
          if (max === void 0) {
            return $$$2($$2($nesting3, "Random"), "DEFAULT").$rand();
          }
          if (max.$$is_number) {
            if (max < 0) {
              max = Math.abs(max);
            }
            if (max % 1 !== 0) {
              max = max.$to_i();
            }
            if (max === 0) {
              max = void 0;
            }
          }
          ;
          return $$$2($$2($nesting3, "Random"), "DEFAULT").$rand(max);
        }, $Kernel_rand$51.$$arity = -1);
        Opal2.def(self3, "$respond_to?", $Kernel_respond_to$ques$52 = function(name, include_all) {
          var self4 = this;
          if (include_all == null) {
            include_all = false;
          }
          ;
          if ($truthy2(self4["$respond_to_missing?"](name, include_all))) {
            return true;
          }
          ;
          var body = self4["$" + name];
          if (typeof body === "function" && !body.$$stub) {
            return true;
          }
          ;
          return false;
        }, $Kernel_respond_to$ques$52.$$arity = -2);
        Opal2.def(self3, "$respond_to_missing?", $Kernel_respond_to_missing$ques$53 = function(method_name, include_all) {
          var self4 = this;
          if (include_all == null) {
            include_all = false;
          }
          ;
          return false;
        }, $Kernel_respond_to_missing$ques$53.$$arity = -2);
        Opal2.def(self3, "$require", $Kernel_require$54 = function $$require(file2) {
          var self4 = this;
          file2 = $$2($nesting3, "Opal")["$coerce_to!"](file2, $$2($nesting3, "String"), "to_str");
          return Opal2.require(file2);
        }, $Kernel_require$54.$$arity = 1);
        Opal2.def(self3, "$require_relative", $Kernel_require_relative$55 = function $$require_relative(file2) {
          var self4 = this;
          $$2($nesting3, "Opal")["$try_convert!"](file2, $$2($nesting3, "String"), "to_str");
          file2 = $$2($nesting3, "File").$expand_path($$2($nesting3, "File").$join(Opal2.current_file, "..", file2));
          return Opal2.require(file2);
        }, $Kernel_require_relative$55.$$arity = 1);
        Opal2.def(self3, "$require_tree", $Kernel_require_tree$56 = function $$require_tree(path) {
          var self4 = this;
          var result2 = [];
          path = $$2($nesting3, "File").$expand_path(path);
          path = Opal2.normalize(path);
          if (path === ".")
            path = "";
          for (var name in Opal2.modules) {
            if (name["$start_with?"](path)) {
              result2.push([name, Opal2.require(name)]);
            }
          }
          return result2;
        }, $Kernel_require_tree$56.$$arity = 1);
        Opal2.alias(self3, "send", "__send__");
        Opal2.alias(self3, "public_send", "__send__");
        Opal2.def(self3, "$singleton_class", $Kernel_singleton_class$57 = function $$singleton_class() {
          var self4 = this;
          return Opal2.get_singleton_class(self4);
        }, $Kernel_singleton_class$57.$$arity = 0);
        Opal2.def(self3, "$sleep", $Kernel_sleep$58 = function $$sleep(seconds) {
          var self4 = this;
          if (seconds == null) {
            seconds = nil2;
          }
          ;
          if (seconds === nil2) {
            self4.$raise($$2($nesting3, "TypeError"), "can't convert NilClass into time interval");
          }
          if (!seconds.$$is_number) {
            self4.$raise($$2($nesting3, "TypeError"), "can't convert " + seconds.$class() + " into time interval");
          }
          if (seconds < 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "time interval must be positive");
          }
          var get_time = Opal2.global.performance ? function() {
            return performance.now();
          } : function() {
            return new Date();
          };
          var t = get_time();
          while (get_time() - t <= seconds * 1e3)
            ;
          return seconds;
          ;
        }, $Kernel_sleep$58.$$arity = -1);
        Opal2.def(self3, "$srand", $Kernel_srand$59 = function $$srand(seed) {
          var self4 = this;
          if (seed == null) {
            seed = $$2($nesting3, "Random").$new_seed();
          }
          ;
          return $$2($nesting3, "Random").$srand(seed);
        }, $Kernel_srand$59.$$arity = -1);
        Opal2.def(self3, "$String", $Kernel_String$60 = function $$String(str) {
          var $a2, self4 = this;
          return $truthy2($a2 = $$2($nesting3, "Opal")["$coerce_to?"](str, $$2($nesting3, "String"), "to_str")) ? $a2 : $$2($nesting3, "Opal")["$coerce_to!"](str, $$2($nesting3, "String"), "to_s");
        }, $Kernel_String$60.$$arity = 1);
        Opal2.def(self3, "$tap", $Kernel_tap$61 = function $$tap() {
          var $iter2 = $Kernel_tap$61.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Kernel_tap$61.$$p = null;
          if ($iter2)
            $Kernel_tap$61.$$p = null;
          ;
          Opal2.yield1(block2, self4);
          return self4;
        }, $Kernel_tap$61.$$arity = 0);
        Opal2.def(self3, "$to_proc", $Kernel_to_proc$62 = function $$to_proc() {
          var self4 = this;
          return self4;
        }, $Kernel_to_proc$62.$$arity = 0);
        Opal2.def(self3, "$to_s", $Kernel_to_s$63 = function $$to_s() {
          var self4 = this;
          return "#<" + self4.$class() + ":0x" + self4.$__id__().$to_s(16) + ">";
        }, $Kernel_to_s$63.$$arity = 0);
        Opal2.def(self3, "$catch", $Kernel_catch$64 = function(sym) {
          var $iter2 = $Kernel_catch$64.$$p, $yield = $iter2 || nil2, self4 = this, e = nil2;
          if ($iter2)
            $Kernel_catch$64.$$p = null;
          try {
            return Opal2.yieldX($yield, []);
          } catch ($err) {
            if (Opal2.rescue($err, [$$2($nesting3, "UncaughtThrowError")])) {
              e = $err;
              try {
                if (e.$sym()["$=="](sym)) {
                  return e.$arg();
                }
                ;
                return self4.$raise();
              } finally {
                Opal2.pop_exception();
              }
            } else {
              throw $err;
            }
          }
        }, $Kernel_catch$64.$$arity = 1);
        Opal2.def(self3, "$throw", $Kernel_throw$65 = function($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return self4.$raise($$2($nesting3, "UncaughtThrowError"), args2);
        }, $Kernel_throw$65.$$arity = -1);
        Opal2.def(self3, "$open", $Kernel_open$66 = function $$open($a2) {
          var $iter2 = $Kernel_open$66.$$p, block2 = $iter2 || nil2, $post_args2, args2, self4 = this;
          if ($iter2)
            $Kernel_open$66.$$p = null;
          if ($iter2)
            $Kernel_open$66.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return $send2($$2($nesting3, "File"), "open", Opal2.to_a(args2), block2.$to_proc());
        }, $Kernel_open$66.$$arity = -1);
        Opal2.def(self3, "$yield_self", $Kernel_yield_self$67 = function $$yield_self() {
          var $$68, $iter2 = $Kernel_yield_self$67.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Kernel_yield_self$67.$$p = null;
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["yield_self"], ($$68 = function() {
              var self5 = $$68.$$s || this;
              return 1;
            }, $$68.$$s = self4, $$68.$$arity = 0, $$68));
          }
          ;
          return Opal2.yield1($yield, self4);
          ;
        }, $Kernel_yield_self$67.$$arity = 0);
      })($nesting2[0], $nesting2);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Object");
        var $nesting3 = [self3].concat($parent_nesting2);
        return self3.$include($$2($nesting3, "Kernel"));
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/error"] = function(Opal2) {
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $module = Opal2.module, $hash22 = Opal2.hash2;
      Opal2.add_stubs(["$new", "$clone", "$to_s", "$empty?", "$class", "$raise", "$+", "$attr_reader", "$[]", "$>", "$length", "$inspect"]);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Exception");
        var $nesting3 = [self3].concat($parent_nesting2), $Exception_new$1, $Exception_exception$2, $Exception_initialize$3, $Exception_backtrace$4, $Exception_exception$5, $Exception_message$6, $Exception_inspect$7, $Exception_set_backtrace$8, $Exception_to_s$9;
        self3.$$prototype.message = nil2;
        var stack_trace_limit;
        Opal2.defs(self3, "$new", $Exception_new$1 = function($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          var message = args2.length > 0 ? args2[0] : nil2;
          var error = new self4.$$constructor(message);
          error.name = self4.$$name;
          error.message = message;
          Opal2.send(error, error.$initialize, args2);
          if (Opal2.config.enable_stack_trace && Error.captureStackTrace) {
            Error.captureStackTrace(error, stack_trace_limit);
          }
          return error;
          ;
        }, $Exception_new$1.$$arity = -1);
        stack_trace_limit = self3.$new;
        Opal2.defs(self3, "$exception", $Exception_exception$2 = function $$exception($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return $send2(self4, "new", Opal2.to_a(args2));
        }, $Exception_exception$2.$$arity = -1);
        Opal2.def(self3, "$initialize", $Exception_initialize$3 = function $$initialize($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return self4.message = args2.length > 0 ? args2[0] : nil2;
          ;
        }, $Exception_initialize$3.$$arity = -1);
        Opal2.def(self3, "$backtrace", $Exception_backtrace$4 = function $$backtrace() {
          var self4 = this;
          if (self4.backtrace) {
            return self4.backtrace;
          }
          var backtrace = self4.stack;
          if (typeof backtrace === "string") {
            return backtrace.split("\n").slice(0, 15);
          } else if (backtrace) {
            return backtrace.slice(0, 15);
          }
          return [];
        }, $Exception_backtrace$4.$$arity = 0);
        Opal2.def(self3, "$exception", $Exception_exception$5 = function $$exception(str) {
          var self4 = this;
          if (str == null) {
            str = nil2;
          }
          ;
          if (str === nil2 || self4 === str) {
            return self4;
          }
          var cloned = self4.$clone();
          cloned.message = str;
          return cloned;
          ;
        }, $Exception_exception$5.$$arity = -1);
        Opal2.def(self3, "$message", $Exception_message$6 = function $$message() {
          var self4 = this;
          return self4.$to_s();
        }, $Exception_message$6.$$arity = 0);
        Opal2.def(self3, "$inspect", $Exception_inspect$7 = function $$inspect() {
          var self4 = this, as_str = nil2;
          as_str = self4.$to_s();
          if ($truthy2(as_str["$empty?"]())) {
            return self4.$class().$to_s();
          } else {
            return "#<" + self4.$class().$to_s() + ": " + self4.$to_s() + ">";
          }
          ;
        }, $Exception_inspect$7.$$arity = 0);
        Opal2.def(self3, "$set_backtrace", $Exception_set_backtrace$8 = function $$set_backtrace(backtrace) {
          var self4 = this;
          var valid = true, i, ii;
          if (backtrace === nil2) {
            self4.backtrace = nil2;
          } else if (backtrace.$$is_string) {
            self4.backtrace = [backtrace];
          } else {
            if (backtrace.$$is_array) {
              for (i = 0, ii = backtrace.length; i < ii; i++) {
                if (!backtrace[i].$$is_string) {
                  valid = false;
                  break;
                }
              }
            } else {
              valid = false;
            }
            if (valid === false) {
              self4.$raise($$2($nesting3, "TypeError"), "backtrace must be Array of String");
            }
            self4.backtrace = backtrace;
          }
          return backtrace;
        }, $Exception_set_backtrace$8.$$arity = 1);
        return (Opal2.def(self3, "$to_s", $Exception_to_s$9 = function $$to_s() {
          var $a2, $b2, self4 = this;
          return $truthy2($a2 = $truthy2($b2 = self4.message) ? self4.message.$to_s() : $b2) ? $a2 : self4.$class().$to_s();
        }, $Exception_to_s$9.$$arity = 0), nil2) && "to_s";
      })($nesting2[0], Error, $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "ScriptError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "Exception"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "SyntaxError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "ScriptError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "LoadError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "ScriptError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "NotImplementedError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "ScriptError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "SystemExit");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "Exception"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "NoMemoryError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "Exception"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "SignalException");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "Exception"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Interrupt");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "Exception"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "SecurityError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "Exception"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "StandardError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "Exception"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "EncodingError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "ZeroDivisionError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "NameError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "NoMethodError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "NameError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "RuntimeError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "FrozenError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "RuntimeError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "LocalJumpError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "TypeError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "ArgumentError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "IndexError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "StopIteration");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "IndexError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "KeyError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "IndexError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "RangeError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "FloatDomainError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "RangeError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "IOError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "SystemCallError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Errno");
        var $nesting3 = [self3].concat($parent_nesting2);
        (function($base3, $super2, $parent_nesting3) {
          var self4 = $klass2($base3, $super2, "EINVAL");
          var $nesting4 = [self4].concat($parent_nesting3), $EINVAL_new$10;
          return (Opal2.defs(self4, "$new", $EINVAL_new$10 = function(name) {
            var $iter2 = $EINVAL_new$10.$$p, $yield = $iter2 || nil2, self5 = this, message = nil2;
            if ($iter2)
              $EINVAL_new$10.$$p = null;
            if (name == null) {
              name = nil2;
            }
            ;
            message = "Invalid argument";
            if ($truthy2(name)) {
              message = $rb_plus(message, " - " + name);
            }
            ;
            return $send2(self5, Opal2.find_super_dispatcher(self5, "new", $EINVAL_new$10, false, self5.$$class.$$prototype), [message], null);
          }, $EINVAL_new$10.$$arity = -1), nil2) && "new";
        })($nesting3[0], $$2($nesting3, "SystemCallError"), $nesting3);
      })($nesting2[0], $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "UncaughtThrowError");
        var $nesting3 = [self3].concat($parent_nesting2), $UncaughtThrowError_initialize$11;
        self3.$$prototype.sym = nil2;
        self3.$attr_reader("sym", "arg");
        return (Opal2.def(self3, "$initialize", $UncaughtThrowError_initialize$11 = function $$initialize(args2) {
          var $iter2 = $UncaughtThrowError_initialize$11.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $UncaughtThrowError_initialize$11.$$p = null;
          self4.sym = args2["$[]"](0);
          if ($truthy2($rb_gt2(args2.$length(), 1))) {
            self4.arg = args2["$[]"](1);
          }
          ;
          return $send2(self4, Opal2.find_super_dispatcher(self4, "initialize", $UncaughtThrowError_initialize$11, false), ["uncaught throw " + self4.sym.$inspect()], null);
        }, $UncaughtThrowError_initialize$11.$$arity = 1), nil2) && "initialize";
      })($nesting2[0], $$2($nesting2, "ArgumentError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "NameError");
        var $nesting3 = [self3].concat($parent_nesting2), $NameError_initialize$12;
        self3.$attr_reader("name");
        return (Opal2.def(self3, "$initialize", $NameError_initialize$12 = function $$initialize(message, name) {
          var $iter2 = $NameError_initialize$12.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $NameError_initialize$12.$$p = null;
          if (name == null) {
            name = nil2;
          }
          ;
          $send2(self4, Opal2.find_super_dispatcher(self4, "initialize", $NameError_initialize$12, false), [message], null);
          return self4.name = name;
        }, $NameError_initialize$12.$$arity = -2), nil2) && "initialize";
      })($nesting2[0], null, $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "NoMethodError");
        var $nesting3 = [self3].concat($parent_nesting2), $NoMethodError_initialize$13;
        self3.$attr_reader("args");
        return (Opal2.def(self3, "$initialize", $NoMethodError_initialize$13 = function $$initialize(message, name, args2) {
          var $iter2 = $NoMethodError_initialize$13.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $NoMethodError_initialize$13.$$p = null;
          if (name == null) {
            name = nil2;
          }
          ;
          if (args2 == null) {
            args2 = [];
          }
          ;
          $send2(self4, Opal2.find_super_dispatcher(self4, "initialize", $NoMethodError_initialize$13, false), [message, name], null);
          return self4.args = args2;
        }, $NoMethodError_initialize$13.$$arity = -2), nil2) && "initialize";
      })($nesting2[0], null, $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "StopIteration");
        var $nesting3 = [self3].concat($parent_nesting2);
        return self3.$attr_reader("result");
      })($nesting2[0], null, $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "KeyError");
        var $nesting3 = [self3].concat($parent_nesting2), $KeyError_initialize$14, $KeyError_receiver$15, $KeyError_key$16;
        self3.$$prototype.receiver = self3.$$prototype.key = nil2;
        Opal2.def(self3, "$initialize", $KeyError_initialize$14 = function $$initialize(message, $kwargs) {
          var receiver, key, $iter2 = $KeyError_initialize$14.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $KeyError_initialize$14.$$p = null;
          if ($kwargs == null) {
            $kwargs = $hash22([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal2.ArgumentError.$new("expected kwargs");
          }
          ;
          receiver = $kwargs.$$smap["receiver"];
          if (receiver == null) {
            receiver = nil2;
          }
          ;
          key = $kwargs.$$smap["key"];
          if (key == null) {
            key = nil2;
          }
          ;
          $send2(self4, Opal2.find_super_dispatcher(self4, "initialize", $KeyError_initialize$14, false), [message], null);
          self4.receiver = receiver;
          return self4.key = key;
        }, $KeyError_initialize$14.$$arity = -2);
        Opal2.def(self3, "$receiver", $KeyError_receiver$15 = function $$receiver() {
          var $a2, self4 = this;
          return $truthy2($a2 = self4.receiver) ? $a2 : self4.$raise($$2($nesting3, "ArgumentError"), "no receiver is available");
        }, $KeyError_receiver$15.$$arity = 0);
        return (Opal2.def(self3, "$key", $KeyError_key$16 = function $$key() {
          var $a2, self4 = this;
          return $truthy2($a2 = self4.key) ? $a2 : self4.$raise($$2($nesting3, "ArgumentError"), "no key is available");
        }, $KeyError_key$16.$$arity = 0), nil2) && "key";
      })($nesting2[0], null, $nesting2);
      return function($base2, $parent_nesting2) {
        var self3 = $module($base2, "JS");
        var $nesting3 = [self3].concat($parent_nesting2);
        (function($base3, $super2, $parent_nesting3) {
          var self4 = $klass2($base3, $super2, "Error");
          var $nesting4 = [self4].concat($parent_nesting3);
          return nil2;
        })($nesting3[0], null, $nesting3);
      }($nesting2[0], $nesting2);
    };
    Opal.modules["corelib/constants"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
      Opal2.const_set($nesting2[0], "RUBY_PLATFORM", "opal");
      Opal2.const_set($nesting2[0], "RUBY_ENGINE", "opal");
      Opal2.const_set($nesting2[0], "RUBY_VERSION", "2.5.1");
      Opal2.const_set($nesting2[0], "RUBY_ENGINE_VERSION", "0.11.99.dev");
      Opal2.const_set($nesting2[0], "RUBY_RELEASE_DATE", "2018-12-25");
      Opal2.const_set($nesting2[0], "RUBY_PATCHLEVEL", 0);
      Opal2.const_set($nesting2[0], "RUBY_REVISION", 0);
      Opal2.const_set($nesting2[0], "RUBY_COPYRIGHT", "opal - Copyright (C) 2013-2018 Adam Beynon and the Opal contributors");
      return Opal2.const_set($nesting2[0], "RUBY_DESCRIPTION", "opal " + $$2($nesting2, "RUBY_ENGINE_VERSION") + " (" + $$2($nesting2, "RUBY_RELEASE_DATE") + " revision " + $$2($nesting2, "RUBY_REVISION") + ")");
    };
    Opal.modules["opal/base"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
      Opal2.add_stubs(["$require"]);
      self2.$require("corelib/runtime");
      self2.$require("corelib/helpers");
      self2.$require("corelib/module");
      self2.$require("corelib/class");
      self2.$require("corelib/basic_object");
      self2.$require("corelib/kernel");
      self2.$require("corelib/error");
      return self2.$require("corelib/constants");
    };
    Opal.modules["corelib/nil"] = function(Opal2) {
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$raise", "$name", "$new", "$>", "$length", "$Rational"]);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "NilClass");
        var $nesting3 = [self3].concat($parent_nesting2), $NilClass_$excl$2, $NilClass_$$3, $NilClass_$$4, $NilClass_$$5, $NilClass_$eq_eq$6, $NilClass_dup$7, $NilClass_clone$8, $NilClass_inspect$9, $NilClass_nil$ques$10, $NilClass_singleton_class$11, $NilClass_to_a$12, $NilClass_to_h$13, $NilClass_to_i$14, $NilClass_to_s$15, $NilClass_to_c$16, $NilClass_rationalize$17, $NilClass_to_r$18, $NilClass_instance_variables$19;
        self3.$$prototype.$$meta = self3;
        (function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $allocate$1;
          Opal2.def(self4, "$allocate", $allocate$1 = function $$allocate() {
            var self5 = this;
            return self5.$raise($$2($nesting4, "TypeError"), "allocator undefined for " + self5.$name());
          }, $allocate$1.$$arity = 0);
          Opal2.udef(self4, "$new");
          ;
          return nil2;
          ;
        })(Opal2.get_singleton_class(self3), $nesting3);
        Opal2.def(self3, "$!", $NilClass_$excl$2 = function() {
          var self4 = this;
          return true;
        }, $NilClass_$excl$2.$$arity = 0);
        Opal2.def(self3, "$&", $NilClass_$$3 = function(other) {
          var self4 = this;
          return false;
        }, $NilClass_$$3.$$arity = 1);
        Opal2.def(self3, "$|", $NilClass_$$4 = function(other) {
          var self4 = this;
          return other !== false && other !== nil2;
        }, $NilClass_$$4.$$arity = 1);
        Opal2.def(self3, "$^", $NilClass_$$5 = function(other) {
          var self4 = this;
          return other !== false && other !== nil2;
        }, $NilClass_$$5.$$arity = 1);
        Opal2.def(self3, "$==", $NilClass_$eq_eq$6 = function(other) {
          var self4 = this;
          return other === nil2;
        }, $NilClass_$eq_eq$6.$$arity = 1);
        Opal2.def(self3, "$dup", $NilClass_dup$7 = function $$dup() {
          var self4 = this;
          return nil2;
        }, $NilClass_dup$7.$$arity = 0);
        Opal2.def(self3, "$clone", $NilClass_clone$8 = function $$clone($kwargs) {
          var freeze, self4 = this;
          if ($kwargs == null) {
            $kwargs = $hash22([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal2.ArgumentError.$new("expected kwargs");
          }
          ;
          freeze = $kwargs.$$smap["freeze"];
          if (freeze == null) {
            freeze = true;
          }
          ;
          return nil2;
        }, $NilClass_clone$8.$$arity = -1);
        Opal2.def(self3, "$inspect", $NilClass_inspect$9 = function $$inspect() {
          var self4 = this;
          return "nil";
        }, $NilClass_inspect$9.$$arity = 0);
        Opal2.def(self3, "$nil?", $NilClass_nil$ques$10 = function() {
          var self4 = this;
          return true;
        }, $NilClass_nil$ques$10.$$arity = 0);
        Opal2.def(self3, "$singleton_class", $NilClass_singleton_class$11 = function $$singleton_class() {
          var self4 = this;
          return $$2($nesting3, "NilClass");
        }, $NilClass_singleton_class$11.$$arity = 0);
        Opal2.def(self3, "$to_a", $NilClass_to_a$12 = function $$to_a() {
          var self4 = this;
          return [];
        }, $NilClass_to_a$12.$$arity = 0);
        Opal2.def(self3, "$to_h", $NilClass_to_h$13 = function $$to_h() {
          var self4 = this;
          return Opal2.hash();
        }, $NilClass_to_h$13.$$arity = 0);
        Opal2.def(self3, "$to_i", $NilClass_to_i$14 = function $$to_i() {
          var self4 = this;
          return 0;
        }, $NilClass_to_i$14.$$arity = 0);
        Opal2.alias(self3, "to_f", "to_i");
        Opal2.def(self3, "$to_s", $NilClass_to_s$15 = function $$to_s() {
          var self4 = this;
          return "";
        }, $NilClass_to_s$15.$$arity = 0);
        Opal2.def(self3, "$to_c", $NilClass_to_c$16 = function $$to_c() {
          var self4 = this;
          return $$2($nesting3, "Complex").$new(0, 0);
        }, $NilClass_to_c$16.$$arity = 0);
        Opal2.def(self3, "$rationalize", $NilClass_rationalize$17 = function $$rationalize($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if ($truthy2($rb_gt2(args2.$length(), 1))) {
            self4.$raise($$2($nesting3, "ArgumentError"));
          }
          ;
          return self4.$Rational(0, 1);
        }, $NilClass_rationalize$17.$$arity = -1);
        Opal2.def(self3, "$to_r", $NilClass_to_r$18 = function $$to_r() {
          var self4 = this;
          return self4.$Rational(0, 1);
        }, $NilClass_to_r$18.$$arity = 0);
        return (Opal2.def(self3, "$instance_variables", $NilClass_instance_variables$19 = function $$instance_variables() {
          var self4 = this;
          return [];
        }, $NilClass_instance_variables$19.$$arity = 0), nil2) && "instance_variables";
      })($nesting2[0], null, $nesting2);
      return Opal2.const_set($nesting2[0], "NIL", nil2);
    };
    Opal.modules["corelib/boolean"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $hash22 = Opal2.hash2;
      Opal2.add_stubs(["$raise", "$name"]);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Boolean");
        var $nesting3 = [self3].concat($parent_nesting2), $Boolean___id__$2, $Boolean_$excl$3, $Boolean_$$4, $Boolean_$$5, $Boolean_$$6, $Boolean_$eq_eq$7, $Boolean_singleton_class$8, $Boolean_to_s$9, $Boolean_dup$10, $Boolean_clone$11;
        Opal2.defineProperty(self3.$$prototype, "$$is_boolean", true);
        Opal2.defineProperty(self3.$$prototype, "$$meta", self3);
        (function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $allocate$1;
          Opal2.def(self4, "$allocate", $allocate$1 = function $$allocate() {
            var self5 = this;
            return self5.$raise($$2($nesting4, "TypeError"), "allocator undefined for " + self5.$name());
          }, $allocate$1.$$arity = 0);
          Opal2.udef(self4, "$new");
          ;
          return nil2;
          ;
        })(Opal2.get_singleton_class(self3), $nesting3);
        Opal2.def(self3, "$__id__", $Boolean___id__$2 = function $$__id__() {
          var self4 = this;
          return self4.valueOf() ? 2 : 0;
        }, $Boolean___id__$2.$$arity = 0);
        Opal2.alias(self3, "object_id", "__id__");
        Opal2.def(self3, "$!", $Boolean_$excl$3 = function() {
          var self4 = this;
          return self4 != true;
        }, $Boolean_$excl$3.$$arity = 0);
        Opal2.def(self3, "$&", $Boolean_$$4 = function(other) {
          var self4 = this;
          return self4 == true ? other !== false && other !== nil2 : false;
        }, $Boolean_$$4.$$arity = 1);
        Opal2.def(self3, "$|", $Boolean_$$5 = function(other) {
          var self4 = this;
          return self4 == true ? true : other !== false && other !== nil2;
        }, $Boolean_$$5.$$arity = 1);
        Opal2.def(self3, "$^", $Boolean_$$6 = function(other) {
          var self4 = this;
          return self4 == true ? other === false || other === nil2 : other !== false && other !== nil2;
        }, $Boolean_$$6.$$arity = 1);
        Opal2.def(self3, "$==", $Boolean_$eq_eq$7 = function(other) {
          var self4 = this;
          return self4 == true === other.valueOf();
        }, $Boolean_$eq_eq$7.$$arity = 1);
        Opal2.alias(self3, "equal?", "==");
        Opal2.alias(self3, "eql?", "==");
        Opal2.def(self3, "$singleton_class", $Boolean_singleton_class$8 = function $$singleton_class() {
          var self4 = this;
          return $$2($nesting3, "Boolean");
        }, $Boolean_singleton_class$8.$$arity = 0);
        Opal2.def(self3, "$to_s", $Boolean_to_s$9 = function $$to_s() {
          var self4 = this;
          return self4 == true ? "true" : "false";
        }, $Boolean_to_s$9.$$arity = 0);
        Opal2.def(self3, "$dup", $Boolean_dup$10 = function $$dup() {
          var self4 = this;
          return self4;
        }, $Boolean_dup$10.$$arity = 0);
        return (Opal2.def(self3, "$clone", $Boolean_clone$11 = function $$clone($kwargs) {
          var freeze, self4 = this;
          if ($kwargs == null) {
            $kwargs = $hash22([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal2.ArgumentError.$new("expected kwargs");
          }
          ;
          freeze = $kwargs.$$smap["freeze"];
          if (freeze == null) {
            freeze = true;
          }
          ;
          return self4;
        }, $Boolean_clone$11.$$arity = -1), nil2) && "clone";
      })($nesting2[0], Boolean, $nesting2);
      Opal2.const_set($nesting2[0], "TrueClass", $$2($nesting2, "Boolean"));
      Opal2.const_set($nesting2[0], "FalseClass", $$2($nesting2, "Boolean"));
      Opal2.const_set($nesting2[0], "TRUE", true);
      return Opal2.const_set($nesting2[0], "FALSE", false);
    };
    Opal.modules["corelib/comparable"] = function(Opal2) {
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$===", "$>", "$<", "$equal?", "$<=>", "$normalize", "$raise", "$class"]);
      return function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Comparable");
        var $nesting3 = [self3].concat($parent_nesting2), $Comparable_normalize$1, $Comparable_$eq_eq$2, $Comparable_$gt$3, $Comparable_$gt_eq$4, $Comparable_$lt$5, $Comparable_$lt_eq$6, $Comparable_between$ques$7, $Comparable_clamp$8;
        Opal2.defs(self3, "$normalize", $Comparable_normalize$1 = function $$normalize(what) {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Integer")["$==="](what))) {
            return what;
          }
          ;
          if ($truthy2($rb_gt2(what, 0))) {
            return 1;
          }
          ;
          if ($truthy2($rb_lt2(what, 0))) {
            return -1;
          }
          ;
          return 0;
        }, $Comparable_normalize$1.$$arity = 1);
        Opal2.def(self3, "$==", $Comparable_$eq_eq$2 = function(other) {
          var self4 = this, cmp = nil2;
          try {
            if ($truthy2(self4["$equal?"](other))) {
              return true;
            }
            ;
            if (self4["$<=>"] == Opal2.Kernel["$<=>"]) {
              return false;
            }
            if (self4.$$comparable) {
              delete self4.$$comparable;
              return false;
            }
            ;
            if ($truthy2(cmp = self4["$<=>"](other))) {
            } else {
              return false;
            }
            ;
            return $$2($nesting3, "Comparable").$normalize(cmp) == 0;
          } catch ($err) {
            if (Opal2.rescue($err, [$$2($nesting3, "StandardError")])) {
              try {
                return false;
              } finally {
                Opal2.pop_exception();
              }
            } else {
              throw $err;
            }
          }
        }, $Comparable_$eq_eq$2.$$arity = 1);
        Opal2.def(self3, "$>", $Comparable_$gt$3 = function(other) {
          var self4 = this, cmp = nil2;
          if ($truthy2(cmp = self4["$<=>"](other))) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self4.$class() + " with " + other.$class() + " failed");
          }
          ;
          return $$2($nesting3, "Comparable").$normalize(cmp) > 0;
        }, $Comparable_$gt$3.$$arity = 1);
        Opal2.def(self3, "$>=", $Comparable_$gt_eq$4 = function(other) {
          var self4 = this, cmp = nil2;
          if ($truthy2(cmp = self4["$<=>"](other))) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self4.$class() + " with " + other.$class() + " failed");
          }
          ;
          return $$2($nesting3, "Comparable").$normalize(cmp) >= 0;
        }, $Comparable_$gt_eq$4.$$arity = 1);
        Opal2.def(self3, "$<", $Comparable_$lt$5 = function(other) {
          var self4 = this, cmp = nil2;
          if ($truthy2(cmp = self4["$<=>"](other))) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self4.$class() + " with " + other.$class() + " failed");
          }
          ;
          return $$2($nesting3, "Comparable").$normalize(cmp) < 0;
        }, $Comparable_$lt$5.$$arity = 1);
        Opal2.def(self3, "$<=", $Comparable_$lt_eq$6 = function(other) {
          var self4 = this, cmp = nil2;
          if ($truthy2(cmp = self4["$<=>"](other))) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self4.$class() + " with " + other.$class() + " failed");
          }
          ;
          return $$2($nesting3, "Comparable").$normalize(cmp) <= 0;
        }, $Comparable_$lt_eq$6.$$arity = 1);
        Opal2.def(self3, "$between?", $Comparable_between$ques$7 = function(min, max) {
          var self4 = this;
          if ($rb_lt2(self4, min)) {
            return false;
          }
          ;
          if ($rb_gt2(self4, max)) {
            return false;
          }
          ;
          return true;
        }, $Comparable_between$ques$7.$$arity = 2);
        Opal2.def(self3, "$clamp", $Comparable_clamp$8 = function $$clamp(min, max) {
          var self4 = this, cmp = nil2;
          cmp = min["$<=>"](max);
          if ($truthy2(cmp)) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + min.$class() + " with " + max.$class() + " failed");
          }
          ;
          if ($truthy2($rb_gt2($$2($nesting3, "Comparable").$normalize(cmp), 0))) {
            self4.$raise($$2($nesting3, "ArgumentError"), "min argument must be smaller than max argument");
          }
          ;
          if ($truthy2($rb_lt2($$2($nesting3, "Comparable").$normalize(self4["$<=>"](min)), 0))) {
            return min;
          }
          ;
          if ($truthy2($rb_gt2($$2($nesting3, "Comparable").$normalize(self4["$<=>"](max)), 0))) {
            return max;
          }
          ;
          return self4;
        }, $Comparable_clamp$8.$$arity = 2);
      }($nesting2[0], $nesting2);
    };
    Opal.modules["corelib/regexp"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $gvars = Opal2.gvars;
      Opal2.add_stubs(["$nil?", "$[]", "$raise", "$escape", "$options", "$to_str", "$new", "$join", "$coerce_to!", "$!", "$match", "$coerce_to?", "$begin", "$coerce_to", "$=~", "$attr_reader", "$===", "$inspect", "$to_a"]);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "RegexpError");
        var $nesting3 = [self3].concat($parent_nesting2);
        return nil2;
      })($nesting2[0], $$2($nesting2, "StandardError"), $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Regexp");
        var $nesting3 = [self3].concat($parent_nesting2), $Regexp_$eq_eq$6, $Regexp_$eq_eq_eq$7, $Regexp_$eq_tilde$8, $Regexp_inspect$9, $Regexp_match$10, $Regexp_match$ques$11, $Regexp_$$12, $Regexp_source$13, $Regexp_options$14, $Regexp_casefold$ques$15;
        Opal2.const_set($nesting3[0], "IGNORECASE", 1);
        Opal2.const_set($nesting3[0], "EXTENDED", 2);
        Opal2.const_set($nesting3[0], "MULTILINE", 4);
        Opal2.defineProperty(self3.$$prototype, "$$is_regexp", true);
        (function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $allocate$1, $escape$2, $last_match$3, $union$4, $new$5;
          Opal2.def(self4, "$allocate", $allocate$1 = function $$allocate() {
            var $iter2 = $allocate$1.$$p, $yield = $iter2 || nil2, self5 = this, allocated = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
            if ($iter2)
              $allocate$1.$$p = null;
            for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            allocated = $send2(self5, Opal2.find_super_dispatcher(self5, "allocate", $allocate$1, false), $zuper, $iter2);
            allocated.uninitialized = true;
            return allocated;
          }, $allocate$1.$$arity = 0);
          Opal2.def(self4, "$escape", $escape$2 = function $$escape(string2) {
            var self5 = this;
            return Opal2.escape_regexp(string2);
          }, $escape$2.$$arity = 1);
          Opal2.def(self4, "$last_match", $last_match$3 = function $$last_match(n) {
            var self5 = this;
            if ($gvars["~"] == null)
              $gvars["~"] = nil2;
            if (n == null) {
              n = nil2;
            }
            ;
            if ($truthy2(n["$nil?"]())) {
              return $gvars["~"];
            } else {
              return $gvars["~"]["$[]"](n);
            }
            ;
          }, $last_match$3.$$arity = -1);
          Opal2.alias(self4, "quote", "escape");
          Opal2.def(self4, "$union", $union$4 = function $$union($a2) {
            var $post_args2, parts, self5 = this;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            parts = $post_args2;
            ;
            var is_first_part_array, quoted_validated, part, options, each_part_options;
            if (parts.length == 0) {
              return /(?!)/;
            }
            if (parts.length == 1 && parts[0].$$is_regexp) {
              return parts[0];
            }
            is_first_part_array = parts[0].$$is_array;
            if (parts.length > 1 && is_first_part_array) {
              self5.$raise($$2($nesting4, "TypeError"), "no implicit conversion of Array into String");
            }
            if (is_first_part_array) {
              parts = parts[0];
            }
            options = void 0;
            quoted_validated = [];
            for (var i = 0; i < parts.length; i++) {
              part = parts[i];
              if (part.$$is_string) {
                quoted_validated.push(self5.$escape(part));
              } else if (part.$$is_regexp) {
                each_part_options = part.$options();
                if (options != void 0 && options != each_part_options) {
                  self5.$raise($$2($nesting4, "TypeError"), "All expressions must use the same options");
                }
                options = each_part_options;
                quoted_validated.push("(" + part.source + ")");
              } else {
                quoted_validated.push(self5.$escape(part.$to_str()));
              }
            }
            ;
            return self5.$new(quoted_validated.$join("|"), options);
          }, $union$4.$$arity = -1);
          return (Opal2.def(self4, "$new", $new$5 = function(regexp, options) {
            var self5 = this;
            ;
            if (regexp.$$is_regexp) {
              return new RegExp(regexp);
            }
            regexp = $$2($nesting4, "Opal")["$coerce_to!"](regexp, $$2($nesting4, "String"), "to_str");
            if (regexp.charAt(regexp.length - 1) === "\\" && regexp.charAt(regexp.length - 2) !== "\\") {
              self5.$raise($$2($nesting4, "RegexpError"), "too short escape sequence: /" + regexp + "/");
            }
            if (options === void 0 || options["$!"]()) {
              return new RegExp(regexp);
            }
            if (options.$$is_number) {
              var temp = "";
              if ($$2($nesting4, "IGNORECASE") & options) {
                temp += "i";
              }
              if ($$2($nesting4, "MULTILINE") & options) {
                temp += "m";
              }
              options = temp;
            } else {
              options = "i";
            }
            return new RegExp(regexp, options);
            ;
          }, $new$5.$$arity = -2), nil2) && "new";
        })(Opal2.get_singleton_class(self3), $nesting3);
        Opal2.def(self3, "$==", $Regexp_$eq_eq$6 = function(other) {
          var self4 = this;
          return other instanceof RegExp && self4.toString() === other.toString();
        }, $Regexp_$eq_eq$6.$$arity = 1);
        Opal2.def(self3, "$===", $Regexp_$eq_eq_eq$7 = function(string2) {
          var self4 = this;
          return self4.$match($$2($nesting3, "Opal")["$coerce_to?"](string2, $$2($nesting3, "String"), "to_str")) !== nil2;
        }, $Regexp_$eq_eq_eq$7.$$arity = 1);
        Opal2.def(self3, "$=~", $Regexp_$eq_tilde$8 = function(string2) {
          var $a2, self4 = this;
          if ($gvars["~"] == null)
            $gvars["~"] = nil2;
          return $truthy2($a2 = self4.$match(string2)) ? $gvars["~"].$begin(0) : $a2;
        }, $Regexp_$eq_tilde$8.$$arity = 1);
        Opal2.alias(self3, "eql?", "==");
        Opal2.def(self3, "$inspect", $Regexp_inspect$9 = function $$inspect() {
          var self4 = this;
          var regexp_format = /^\/(.*)\/([^\/]*)$/;
          var value = self4.toString();
          var matches = regexp_format.exec(value);
          if (matches) {
            var regexp_pattern = matches[1];
            var regexp_flags = matches[2];
            var chars = regexp_pattern.split("");
            var chars_length = chars.length;
            var char_escaped = false;
            var regexp_pattern_escaped = "";
            for (var i = 0; i < chars_length; i++) {
              var current_char = chars[i];
              if (!char_escaped && current_char == "/") {
                regexp_pattern_escaped = regexp_pattern_escaped.concat("\\");
              }
              regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);
              if (current_char == "\\") {
                if (char_escaped) {
                  char_escaped = false;
                } else {
                  char_escaped = true;
                }
              } else {
                char_escaped = false;
              }
            }
            return "/" + regexp_pattern_escaped + "/" + regexp_flags;
          } else {
            return value;
          }
        }, $Regexp_inspect$9.$$arity = 0);
        Opal2.def(self3, "$match", $Regexp_match$10 = function $$match(string2, pos) {
          var $iter2 = $Regexp_match$10.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($gvars["~"] == null)
            $gvars["~"] = nil2;
          if ($iter2)
            $Regexp_match$10.$$p = null;
          if ($iter2)
            $Regexp_match$10.$$p = null;
          ;
          ;
          if (self4.uninitialized) {
            self4.$raise($$2($nesting3, "TypeError"), "uninitialized Regexp");
          }
          if (pos === void 0) {
            if (string2 === nil2)
              return $gvars["~"] = nil2;
            var m = self4.exec($$2($nesting3, "Opal").$coerce_to(string2, $$2($nesting3, "String"), "to_str"));
            if (m) {
              $gvars["~"] = $$2($nesting3, "MatchData").$new(self4, m);
              return block2 === nil2 ? $gvars["~"] : Opal2.yield1(block2, $gvars["~"]);
            } else {
              return $gvars["~"] = nil2;
            }
          }
          pos = $$2($nesting3, "Opal").$coerce_to(pos, $$2($nesting3, "Integer"), "to_int");
          if (string2 === nil2) {
            return $gvars["~"] = nil2;
          }
          string2 = $$2($nesting3, "Opal").$coerce_to(string2, $$2($nesting3, "String"), "to_str");
          if (pos < 0) {
            pos += string2.length;
            if (pos < 0) {
              return $gvars["~"] = nil2;
            }
          }
          var md, re = Opal2.global_regexp(self4);
          while (true) {
            md = re.exec(string2);
            if (md === null) {
              return $gvars["~"] = nil2;
            }
            if (md.index >= pos) {
              $gvars["~"] = $$2($nesting3, "MatchData").$new(re, md);
              return block2 === nil2 ? $gvars["~"] : Opal2.yield1(block2, $gvars["~"]);
            }
            re.lastIndex = md.index + 1;
          }
          ;
        }, $Regexp_match$10.$$arity = -2);
        Opal2.def(self3, "$match?", $Regexp_match$ques$11 = function(string2, pos) {
          var self4 = this;
          ;
          if (self4.uninitialized) {
            self4.$raise($$2($nesting3, "TypeError"), "uninitialized Regexp");
          }
          if (pos === void 0) {
            return string2 === nil2 ? false : self4.test($$2($nesting3, "Opal").$coerce_to(string2, $$2($nesting3, "String"), "to_str"));
          }
          pos = $$2($nesting3, "Opal").$coerce_to(pos, $$2($nesting3, "Integer"), "to_int");
          if (string2 === nil2) {
            return false;
          }
          string2 = $$2($nesting3, "Opal").$coerce_to(string2, $$2($nesting3, "String"), "to_str");
          if (pos < 0) {
            pos += string2.length;
            if (pos < 0) {
              return false;
            }
          }
          var md, re = Opal2.global_regexp(self4);
          md = re.exec(string2);
          if (md === null || md.index < pos) {
            return false;
          } else {
            return true;
          }
          ;
        }, $Regexp_match$ques$11.$$arity = -2);
        Opal2.def(self3, "$~", $Regexp_$$12 = function() {
          var self4 = this;
          if ($gvars._ == null)
            $gvars._ = nil2;
          return self4["$=~"]($gvars._);
        }, $Regexp_$$12.$$arity = 0);
        Opal2.def(self3, "$source", $Regexp_source$13 = function $$source() {
          var self4 = this;
          return self4.source;
        }, $Regexp_source$13.$$arity = 0);
        Opal2.def(self3, "$options", $Regexp_options$14 = function $$options() {
          var self4 = this;
          if (self4.uninitialized) {
            self4.$raise($$2($nesting3, "TypeError"), "uninitialized Regexp");
          }
          var result2 = 0;
          if (self4.multiline) {
            result2 |= $$2($nesting3, "MULTILINE");
          }
          if (self4.ignoreCase) {
            result2 |= $$2($nesting3, "IGNORECASE");
          }
          return result2;
        }, $Regexp_options$14.$$arity = 0);
        Opal2.def(self3, "$casefold?", $Regexp_casefold$ques$15 = function() {
          var self4 = this;
          return self4.ignoreCase;
        }, $Regexp_casefold$ques$15.$$arity = 0);
        return Opal2.alias(self3, "to_s", "source");
      })($nesting2[0], RegExp, $nesting2);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "MatchData");
        var $nesting3 = [self3].concat($parent_nesting2), $MatchData_initialize$16, $MatchData_$$$17, $MatchData_offset$18, $MatchData_$eq_eq$19, $MatchData_begin$20, $MatchData_end$21, $MatchData_captures$22, $MatchData_inspect$23, $MatchData_length$24, $MatchData_to_a$25, $MatchData_to_s$26, $MatchData_values_at$27;
        self3.$$prototype.matches = nil2;
        self3.$attr_reader("post_match", "pre_match", "regexp", "string");
        Opal2.def(self3, "$initialize", $MatchData_initialize$16 = function $$initialize(regexp, match_groups) {
          var self4 = this;
          $gvars["~"] = self4;
          self4.regexp = regexp;
          self4.begin = match_groups.index;
          self4.string = match_groups.input;
          self4.pre_match = match_groups.input.slice(0, match_groups.index);
          self4.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
          self4.matches = [];
          for (var i = 0, length = match_groups.length; i < length; i++) {
            var group = match_groups[i];
            if (group == null) {
              self4.matches.push(nil2);
            } else {
              self4.matches.push(group);
            }
          }
          ;
        }, $MatchData_initialize$16.$$arity = 2);
        Opal2.def(self3, "$[]", $MatchData_$$$17 = function($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return $send2(self4.matches, "[]", Opal2.to_a(args2));
        }, $MatchData_$$$17.$$arity = -1);
        Opal2.def(self3, "$offset", $MatchData_offset$18 = function $$offset(n) {
          var self4 = this;
          if (n !== 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "MatchData#offset only supports 0th element");
          }
          return [self4.begin, self4.begin + self4.matches[n].length];
        }, $MatchData_offset$18.$$arity = 1);
        Opal2.def(self3, "$==", $MatchData_$eq_eq$19 = function(other) {
          var $a2, $b2, $c, $d, self4 = this;
          if ($truthy2($$2($nesting3, "MatchData")["$==="](other))) {
          } else {
            return false;
          }
          ;
          return $truthy2($a2 = $truthy2($b2 = $truthy2($c = $truthy2($d = self4.string == other.string) ? self4.regexp.toString() == other.regexp.toString() : $d) ? self4.pre_match == other.pre_match : $c) ? self4.post_match == other.post_match : $b2) ? self4.begin == other.begin : $a2;
        }, $MatchData_$eq_eq$19.$$arity = 1);
        Opal2.alias(self3, "eql?", "==");
        Opal2.def(self3, "$begin", $MatchData_begin$20 = function $$begin(n) {
          var self4 = this;
          if (n !== 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "MatchData#begin only supports 0th element");
          }
          return self4.begin;
        }, $MatchData_begin$20.$$arity = 1);
        Opal2.def(self3, "$end", $MatchData_end$21 = function $$end(n) {
          var self4 = this;
          if (n !== 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "MatchData#end only supports 0th element");
          }
          return self4.begin + self4.matches[n].length;
        }, $MatchData_end$21.$$arity = 1);
        Opal2.def(self3, "$captures", $MatchData_captures$22 = function $$captures() {
          var self4 = this;
          return self4.matches.slice(1);
        }, $MatchData_captures$22.$$arity = 0);
        Opal2.def(self3, "$inspect", $MatchData_inspect$23 = function $$inspect() {
          var self4 = this;
          var str = "#<MatchData " + self4.matches[0].$inspect();
          for (var i = 1, length = self4.matches.length; i < length; i++) {
            str += " " + i + ":" + self4.matches[i].$inspect();
          }
          return str + ">";
        }, $MatchData_inspect$23.$$arity = 0);
        Opal2.def(self3, "$length", $MatchData_length$24 = function $$length() {
          var self4 = this;
          return self4.matches.length;
        }, $MatchData_length$24.$$arity = 0);
        Opal2.alias(self3, "size", "length");
        Opal2.def(self3, "$to_a", $MatchData_to_a$25 = function $$to_a() {
          var self4 = this;
          return self4.matches;
        }, $MatchData_to_a$25.$$arity = 0);
        Opal2.def(self3, "$to_s", $MatchData_to_s$26 = function $$to_s() {
          var self4 = this;
          return self4.matches[0];
        }, $MatchData_to_s$26.$$arity = 0);
        return (Opal2.def(self3, "$values_at", $MatchData_values_at$27 = function $$values_at($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          var i, a, index, values = [];
          for (i = 0; i < args2.length; i++) {
            if (args2[i].$$is_range) {
              a = args2[i].$to_a();
              a.unshift(i, 1);
              Array.prototype.splice.apply(args2, a);
            }
            index = $$2($nesting3, "Opal")["$coerce_to!"](args2[i], $$2($nesting3, "Integer"), "to_int");
            if (index < 0) {
              index += self4.matches.length;
              if (index < 0) {
                values.push(nil2);
                continue;
              }
            }
            values.push(self4.matches[index]);
          }
          return values;
          ;
        }, $MatchData_values_at$27.$$arity = -1), nil2) && "values_at";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/string"] = function(Opal2) {
      function $rb_divide(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs / rhs : lhs["$/"](rhs);
      }
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $gvars = Opal2.gvars;
      Opal2.add_stubs(["$require", "$include", "$coerce_to?", "$coerce_to", "$raise", "$===", "$format", "$to_s", "$respond_to?", "$to_str", "$<=>", "$==", "$=~", "$new", "$force_encoding", "$casecmp", "$empty?", "$ljust", "$ceil", "$/", "$+", "$rjust", "$floor", "$to_a", "$each_char", "$to_proc", "$coerce_to!", "$copy_singleton_methods", "$initialize_clone", "$initialize_dup", "$enum_for", "$size", "$chomp", "$[]", "$to_i", "$each_line", "$class", "$match", "$match?", "$captures", "$proc", "$succ", "$escape"]);
      self2.$require("corelib/comparable");
      self2.$require("corelib/regexp");
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "String");
        var $nesting3 = [self3].concat($parent_nesting2), $String___id__$1, $String_try_convert$2, $String_new$3, $String_initialize$4, $String_$percent$5, $String_$$6, $String_$plus$7, $String_$lt_eq_gt$8, $String_$eq_eq$9, $String_$eq_tilde$10, $String_$$$11, $String_b$12, $String_capitalize$13, $String_casecmp$14, $String_casecmp$ques$15, $String_center$16, $String_chars$17, $String_chomp$18, $String_chop$19, $String_chr$20, $String_clone$21, $String_dup$22, $String_count$23, $String_delete$24, $String_delete_prefix$25, $String_delete_suffix$26, $String_downcase$27, $String_each_char$28, $String_each_line$30, $String_empty$ques$31, $String_end_with$ques$32, $String_gsub$33, $String_hash$34, $String_hex$35, $String_include$ques$36, $String_index$37, $String_inspect$38, $String_intern$39, $String_lines$40, $String_length$41, $String_ljust$42, $String_lstrip$43, $String_ascii_only$ques$44, $String_match$45, $String_match$ques$46, $String_next$47, $String_oct$48, $String_ord$49, $String_partition$50, $String_reverse$51, $String_rindex$52, $String_rjust$53, $String_rpartition$54, $String_rstrip$55, $String_scan$56, $String_split$57, $String_squeeze$58, $String_start_with$ques$59, $String_strip$60, $String_sub$61, $String_sum$62, $String_swapcase$63, $String_to_f$64, $String_to_i$65, $String_to_proc$66, $String_to_s$68, $String_tr$69, $String_tr_s$70, $String_upcase$71, $String_upto$72, $String_instance_variables$73, $String__load$74, $String_unicode_normalize$75, $String_unicode_normalized$ques$76, $String_unpack$77, $String_unpack1$78;
        self3.$include($$2($nesting3, "Comparable"));
        Opal2.defineProperty(self3.$$prototype, "$$is_string", true);
        Opal2.defineProperty(self3.$$prototype, "$$cast", function(string2) {
          var klass = this.$$class;
          if (klass.$$constructor === String) {
            return string2;
          } else {
            return new klass.$$constructor(string2);
          }
        });
        ;
        Opal2.def(self3, "$__id__", $String___id__$1 = function $$__id__() {
          var self4 = this;
          return self4.toString();
        }, $String___id__$1.$$arity = 0);
        Opal2.alias(self3, "object_id", "__id__");
        Opal2.defs(self3, "$try_convert", $String_try_convert$2 = function $$try_convert(what) {
          var self4 = this;
          return $$2($nesting3, "Opal")["$coerce_to?"](what, $$2($nesting3, "String"), "to_str");
        }, $String_try_convert$2.$$arity = 1);
        Opal2.defs(self3, "$new", $String_new$3 = function(str) {
          var self4 = this;
          if (str == null) {
            str = "";
          }
          ;
          str = $$2($nesting3, "Opal").$coerce_to(str, $$2($nesting3, "String"), "to_str");
          return new self4.$$constructor(str);
          ;
        }, $String_new$3.$$arity = -1);
        Opal2.def(self3, "$initialize", $String_initialize$4 = function $$initialize(str) {
          var self4 = this;
          ;
          if (str === void 0) {
            return self4;
          }
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), "Mutable strings are not supported in Opal.");
        }, $String_initialize$4.$$arity = -1);
        Opal2.def(self3, "$%", $String_$percent$5 = function(data) {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Array")["$==="](data))) {
            return $send2(self4, "format", [self4].concat(Opal2.to_a(data)));
          } else {
            return self4.$format(self4, data);
          }
        }, $String_$percent$5.$$arity = 1);
        Opal2.def(self3, "$*", $String_$$6 = function(count) {
          var self4 = this;
          count = $$2($nesting3, "Opal").$coerce_to(count, $$2($nesting3, "Integer"), "to_int");
          if (count < 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "negative argument");
          }
          if (count === 0) {
            return self4.$$cast("");
          }
          var result2 = "", string2 = self4.toString();
          if (string2.length * count >= 1 << 28) {
            self4.$raise($$2($nesting3, "RangeError"), "multiply count must not overflow maximum string size");
          }
          for (; ; ) {
            if ((count & 1) === 1) {
              result2 += string2;
            }
            count >>>= 1;
            if (count === 0) {
              break;
            }
            string2 += string2;
          }
          return self4.$$cast(result2);
        }, $String_$$6.$$arity = 1);
        Opal2.def(self3, "$+", $String_$plus$7 = function(other) {
          var self4 = this;
          other = $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "String"), "to_str");
          return self4 + other.$to_s();
        }, $String_$plus$7.$$arity = 1);
        Opal2.def(self3, "$<=>", $String_$lt_eq_gt$8 = function(other) {
          var self4 = this;
          if ($truthy2(other["$respond_to?"]("to_str"))) {
            other = other.$to_str().$to_s();
            return self4 > other ? 1 : self4 < other ? -1 : 0;
            ;
          } else {
            var cmp = other["$<=>"](self4);
            if (cmp === nil2) {
              return nil2;
            } else {
              return cmp > 0 ? -1 : cmp < 0 ? 1 : 0;
            }
          }
        }, $String_$lt_eq_gt$8.$$arity = 1);
        Opal2.def(self3, "$==", $String_$eq_eq$9 = function(other) {
          var self4 = this;
          if (other.$$is_string) {
            return self4.toString() === other.toString();
          }
          if ($$2($nesting3, "Opal")["$respond_to?"](other, "to_str")) {
            return other["$=="](self4);
          }
          return false;
        }, $String_$eq_eq$9.$$arity = 1);
        Opal2.alias(self3, "eql?", "==");
        Opal2.alias(self3, "===", "==");
        Opal2.def(self3, "$=~", $String_$eq_tilde$10 = function(other) {
          var self4 = this;
          if (other.$$is_string) {
            self4.$raise($$2($nesting3, "TypeError"), "type mismatch: String given");
          }
          return other["$=~"](self4);
        }, $String_$eq_tilde$10.$$arity = 1);
        Opal2.def(self3, "$[]", $String_$$$11 = function(index, length) {
          var self4 = this;
          ;
          var size = self4.length, exclude;
          if (index.$$is_range) {
            exclude = index.excl;
            length = $$2($nesting3, "Opal").$coerce_to(index.end, $$2($nesting3, "Integer"), "to_int");
            index = $$2($nesting3, "Opal").$coerce_to(index.begin, $$2($nesting3, "Integer"), "to_int");
            if (Math.abs(index) > size) {
              return nil2;
            }
            if (index < 0) {
              index += size;
            }
            if (length < 0) {
              length += size;
            }
            if (!exclude) {
              length += 1;
            }
            length = length - index;
            if (length < 0) {
              length = 0;
            }
            return self4.$$cast(self4.substr(index, length));
          }
          if (index.$$is_string) {
            if (length != null) {
              self4.$raise($$2($nesting3, "TypeError"));
            }
            return self4.indexOf(index) !== -1 ? self4.$$cast(index) : nil2;
          }
          if (index.$$is_regexp) {
            var match = self4.match(index);
            if (match === null) {
              $gvars["~"] = nil2;
              return nil2;
            }
            $gvars["~"] = $$2($nesting3, "MatchData").$new(index, match);
            if (length == null) {
              return self4.$$cast(match[0]);
            }
            length = $$2($nesting3, "Opal").$coerce_to(length, $$2($nesting3, "Integer"), "to_int");
            if (length < 0 && -length < match.length) {
              return self4.$$cast(match[length += match.length]);
            }
            if (length >= 0 && length < match.length) {
              return self4.$$cast(match[length]);
            }
            return nil2;
          }
          index = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
          if (index < 0) {
            index += size;
          }
          if (length == null) {
            if (index >= size || index < 0) {
              return nil2;
            }
            return self4.$$cast(self4.substr(index, 1));
          }
          length = $$2($nesting3, "Opal").$coerce_to(length, $$2($nesting3, "Integer"), "to_int");
          if (length < 0) {
            return nil2;
          }
          if (index > size || index < 0) {
            return nil2;
          }
          return self4.$$cast(self4.substr(index, length));
          ;
        }, $String_$$$11.$$arity = -2);
        Opal2.alias(self3, "byteslice", "[]");
        Opal2.def(self3, "$b", $String_b$12 = function $$b() {
          var self4 = this;
          return self4.$force_encoding("binary");
        }, $String_b$12.$$arity = 0);
        Opal2.def(self3, "$capitalize", $String_capitalize$13 = function $$capitalize() {
          var self4 = this;
          return self4.$$cast(self4.charAt(0).toUpperCase() + self4.substr(1).toLowerCase());
        }, $String_capitalize$13.$$arity = 0);
        Opal2.def(self3, "$casecmp", $String_casecmp$14 = function $$casecmp(other) {
          var self4 = this;
          if ($truthy2(other["$respond_to?"]("to_str"))) {
          } else {
            return nil2;
          }
          ;
          other = $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "String"), "to_str").$to_s();
          var ascii_only = /^[\x00-\x7F]*$/;
          if (ascii_only.test(self4) && ascii_only.test(other)) {
            self4 = self4.toLowerCase();
            other = other.toLowerCase();
          }
          ;
          return self4["$<=>"](other);
        }, $String_casecmp$14.$$arity = 1);
        Opal2.def(self3, "$casecmp?", $String_casecmp$ques$15 = function(other) {
          var self4 = this;
          var cmp = self4.$casecmp(other);
          if (cmp === nil2) {
            return nil2;
          } else {
            return cmp === 0;
          }
        }, $String_casecmp$ques$15.$$arity = 1);
        Opal2.def(self3, "$center", $String_center$16 = function $$center(width, padstr) {
          var self4 = this;
          if (padstr == null) {
            padstr = " ";
          }
          ;
          width = $$2($nesting3, "Opal").$coerce_to(width, $$2($nesting3, "Integer"), "to_int");
          padstr = $$2($nesting3, "Opal").$coerce_to(padstr, $$2($nesting3, "String"), "to_str").$to_s();
          if ($truthy2(padstr["$empty?"]())) {
            self4.$raise($$2($nesting3, "ArgumentError"), "zero width padding");
          }
          ;
          if ($truthy2(width <= self4.length)) {
            return self4;
          }
          ;
          var ljustified = self4.$ljust($rb_divide($rb_plus(width, self4.length), 2).$ceil(), padstr), rjustified = self4.$rjust($rb_divide($rb_plus(width, self4.length), 2).$floor(), padstr);
          return self4.$$cast(rjustified + ljustified.slice(self4.length));
          ;
        }, $String_center$16.$$arity = -2);
        Opal2.def(self3, "$chars", $String_chars$17 = function $$chars() {
          var $iter2 = $String_chars$17.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $String_chars$17.$$p = null;
          if ($iter2)
            $String_chars$17.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return self4.$each_char().$to_a();
          }
          ;
          return $send2(self4, "each_char", [], block2.$to_proc());
        }, $String_chars$17.$$arity = 0);
        Opal2.def(self3, "$chomp", $String_chomp$18 = function $$chomp(separator) {
          var self4 = this;
          if ($gvars["/"] == null)
            $gvars["/"] = nil2;
          if (separator == null) {
            separator = $gvars["/"];
          }
          ;
          if ($truthy2(separator === nil2 || self4.length === 0)) {
            return self4;
          }
          ;
          separator = $$2($nesting3, "Opal")["$coerce_to!"](separator, $$2($nesting3, "String"), "to_str").$to_s();
          var result2;
          if (separator === "\n") {
            result2 = self4.replace(/\r?\n?$/, "");
          } else if (separator === "") {
            result2 = self4.replace(/(\r?\n)+$/, "");
          } else if (self4.length >= separator.length) {
            var tail = self4.substr(self4.length - separator.length, separator.length);
            if (tail === separator) {
              result2 = self4.substr(0, self4.length - separator.length);
            }
          }
          if (result2 != null) {
            return self4.$$cast(result2);
          }
          ;
          return self4;
        }, $String_chomp$18.$$arity = -1);
        Opal2.def(self3, "$chop", $String_chop$19 = function $$chop() {
          var self4 = this;
          var length = self4.length, result2;
          if (length <= 1) {
            result2 = "";
          } else if (self4.charAt(length - 1) === "\n" && self4.charAt(length - 2) === "\r") {
            result2 = self4.substr(0, length - 2);
          } else {
            result2 = self4.substr(0, length - 1);
          }
          return self4.$$cast(result2);
        }, $String_chop$19.$$arity = 0);
        Opal2.def(self3, "$chr", $String_chr$20 = function $$chr() {
          var self4 = this;
          return self4.charAt(0);
        }, $String_chr$20.$$arity = 0);
        Opal2.def(self3, "$clone", $String_clone$21 = function $$clone() {
          var self4 = this, copy = nil2;
          copy = self4.slice();
          copy.$copy_singleton_methods(self4);
          copy.$initialize_clone(self4);
          return copy;
        }, $String_clone$21.$$arity = 0);
        Opal2.def(self3, "$dup", $String_dup$22 = function $$dup() {
          var self4 = this, copy = nil2;
          copy = self4.slice();
          copy.$initialize_dup(self4);
          return copy;
        }, $String_dup$22.$$arity = 0);
        Opal2.def(self3, "$count", $String_count$23 = function $$count($a2) {
          var $post_args2, sets, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          sets = $post_args2;
          ;
          if (sets.length === 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "ArgumentError: wrong number of arguments (0 for 1+)");
          }
          var char_class = char_class_from_char_sets(sets);
          if (char_class === null) {
            return 0;
          }
          return self4.length - self4.replace(new RegExp(char_class, "g"), "").length;
          ;
        }, $String_count$23.$$arity = -1);
        Opal2.def(self3, "$delete", $String_delete$24 = function($a2) {
          var $post_args2, sets, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          sets = $post_args2;
          ;
          if (sets.length === 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "ArgumentError: wrong number of arguments (0 for 1+)");
          }
          var char_class = char_class_from_char_sets(sets);
          if (char_class === null) {
            return self4;
          }
          return self4.$$cast(self4.replace(new RegExp(char_class, "g"), ""));
          ;
        }, $String_delete$24.$$arity = -1);
        Opal2.def(self3, "$delete_prefix", $String_delete_prefix$25 = function $$delete_prefix(prefix) {
          var self4 = this;
          if (!prefix.$$is_string) {
            prefix = $$2($nesting3, "Opal").$coerce_to(prefix, $$2($nesting3, "String"), "to_str");
          }
          if (self4.slice(0, prefix.length) === prefix) {
            return self4.$$cast(self4.slice(prefix.length));
          } else {
            return self4;
          }
        }, $String_delete_prefix$25.$$arity = 1);
        Opal2.def(self3, "$delete_suffix", $String_delete_suffix$26 = function $$delete_suffix(suffix) {
          var self4 = this;
          if (!suffix.$$is_string) {
            suffix = $$2($nesting3, "Opal").$coerce_to(suffix, $$2($nesting3, "String"), "to_str");
          }
          if (self4.slice(self4.length - suffix.length) === suffix) {
            return self4.$$cast(self4.slice(0, self4.length - suffix.length));
          } else {
            return self4;
          }
        }, $String_delete_suffix$26.$$arity = 1);
        Opal2.def(self3, "$downcase", $String_downcase$27 = function $$downcase() {
          var self4 = this;
          return self4.$$cast(self4.toLowerCase());
        }, $String_downcase$27.$$arity = 0);
        Opal2.def(self3, "$each_char", $String_each_char$28 = function $$each_char() {
          var $iter2 = $String_each_char$28.$$p, block2 = $iter2 || nil2, $$29, self4 = this;
          if ($iter2)
            $String_each_char$28.$$p = null;
          if ($iter2)
            $String_each_char$28.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each_char"], ($$29 = function() {
              var self5 = $$29.$$s || this;
              return self5.$size();
            }, $$29.$$s = self4, $$29.$$arity = 0, $$29));
          }
          ;
          for (var i = 0, length = self4.length; i < length; i++) {
            Opal2.yield1(block2, self4.charAt(i));
          }
          ;
          return self4;
        }, $String_each_char$28.$$arity = 0);
        Opal2.def(self3, "$each_line", $String_each_line$30 = function $$each_line(separator) {
          var $iter2 = $String_each_line$30.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($gvars["/"] == null)
            $gvars["/"] = nil2;
          if ($iter2)
            $String_each_line$30.$$p = null;
          if ($iter2)
            $String_each_line$30.$$p = null;
          ;
          if (separator == null) {
            separator = $gvars["/"];
          }
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("each_line", separator);
          }
          ;
          if (separator === nil2) {
            Opal2.yield1(block2, self4);
            return self4;
          }
          separator = $$2($nesting3, "Opal").$coerce_to(separator, $$2($nesting3, "String"), "to_str");
          var a, i, n, length, chomped, trailing, splitted;
          if (separator.length === 0) {
            for (a = self4.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
              if (a[i] || a[i + 1]) {
                var value = (a[i] || "") + (a[i + 1] || "");
                Opal2.yield1(block2, self4.$$cast(value));
              }
            }
            return self4;
          }
          chomped = self4.$chomp(separator);
          trailing = self4.length != chomped.length;
          splitted = chomped.split(separator);
          for (i = 0, length = splitted.length; i < length; i++) {
            if (i < length - 1 || trailing) {
              Opal2.yield1(block2, self4.$$cast(splitted[i] + separator));
            } else {
              Opal2.yield1(block2, self4.$$cast(splitted[i]));
            }
          }
          ;
          return self4;
        }, $String_each_line$30.$$arity = -1);
        Opal2.def(self3, "$empty?", $String_empty$ques$31 = function() {
          var self4 = this;
          return self4.length === 0;
        }, $String_empty$ques$31.$$arity = 0);
        Opal2.def(self3, "$end_with?", $String_end_with$ques$32 = function($a2) {
          var $post_args2, suffixes, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          suffixes = $post_args2;
          ;
          for (var i = 0, length = suffixes.length; i < length; i++) {
            var suffix = $$2($nesting3, "Opal").$coerce_to(suffixes[i], $$2($nesting3, "String"), "to_str").$to_s();
            if (self4.length >= suffix.length && self4.substr(self4.length - suffix.length, suffix.length) == suffix) {
              return true;
            }
          }
          ;
          return false;
        }, $String_end_with$ques$32.$$arity = -1);
        Opal2.alias(self3, "equal?", "===");
        Opal2.def(self3, "$gsub", $String_gsub$33 = function $$gsub(pattern, replacement) {
          var $iter2 = $String_gsub$33.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $String_gsub$33.$$p = null;
          if ($iter2)
            $String_gsub$33.$$p = null;
          ;
          ;
          if (replacement === void 0 && block2 === nil2) {
            return self4.$enum_for("gsub", pattern);
          }
          var result2 = "", match_data = nil2, index = 0, match, _replacement;
          if (pattern.$$is_regexp) {
            pattern = Opal2.global_multiline_regexp(pattern);
          } else {
            pattern = $$2($nesting3, "Opal").$coerce_to(pattern, $$2($nesting3, "String"), "to_str");
            pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gm");
          }
          var lastIndex;
          while (true) {
            match = pattern.exec(self4);
            if (match === null) {
              $gvars["~"] = nil2;
              result2 += self4.slice(index);
              break;
            }
            match_data = $$2($nesting3, "MatchData").$new(pattern, match);
            if (replacement === void 0) {
              lastIndex = pattern.lastIndex;
              _replacement = block2(match[0]);
              pattern.lastIndex = lastIndex;
            } else if (replacement.$$is_hash) {
              _replacement = replacement["$[]"](match[0]).$to_s();
            } else {
              if (!replacement.$$is_string) {
                replacement = $$2($nesting3, "Opal").$coerce_to(replacement, $$2($nesting3, "String"), "to_str");
              }
              _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function(original, slashes, command) {
                if (slashes.length % 2 === 0) {
                  return original;
                }
                switch (command) {
                  case "+":
                    for (var i = match.length - 1; i > 0; i--) {
                      if (match[i] !== void 0) {
                        return slashes.slice(1) + match[i];
                      }
                    }
                    return "";
                  case "&":
                    return slashes.slice(1) + match[0];
                  case "`":
                    return slashes.slice(1) + self4.slice(0, match.index);
                  case "'":
                    return slashes.slice(1) + self4.slice(match.index + match[0].length);
                  default:
                    return slashes.slice(1) + (match[command] || "");
                }
              }).replace(/\\\\/g, "\\");
            }
            if (pattern.lastIndex === match.index) {
              result2 += _replacement + self4.slice(index, match.index + 1);
              pattern.lastIndex += 1;
            } else {
              result2 += self4.slice(index, match.index) + _replacement;
            }
            index = pattern.lastIndex;
          }
          $gvars["~"] = match_data;
          return self4.$$cast(result2);
          ;
        }, $String_gsub$33.$$arity = -2);
        Opal2.def(self3, "$hash", $String_hash$34 = function $$hash() {
          var self4 = this;
          return self4.toString();
        }, $String_hash$34.$$arity = 0);
        Opal2.def(self3, "$hex", $String_hex$35 = function $$hex() {
          var self4 = this;
          return self4.$to_i(16);
        }, $String_hex$35.$$arity = 0);
        Opal2.def(self3, "$include?", $String_include$ques$36 = function(other) {
          var self4 = this;
          if (!other.$$is_string) {
            other = $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "String"), "to_str");
          }
          return self4.indexOf(other) !== -1;
        }, $String_include$ques$36.$$arity = 1);
        Opal2.def(self3, "$index", $String_index$37 = function $$index(search, offset) {
          var self4 = this;
          ;
          var index, match, regex;
          if (offset === void 0) {
            offset = 0;
          } else {
            offset = $$2($nesting3, "Opal").$coerce_to(offset, $$2($nesting3, "Integer"), "to_int");
            if (offset < 0) {
              offset += self4.length;
              if (offset < 0) {
                return nil2;
              }
            }
          }
          if (search.$$is_regexp) {
            regex = Opal2.global_multiline_regexp(search);
            while (true) {
              match = regex.exec(self4);
              if (match === null) {
                $gvars["~"] = nil2;
                index = -1;
                break;
              }
              if (match.index >= offset) {
                $gvars["~"] = $$2($nesting3, "MatchData").$new(regex, match);
                index = match.index;
                break;
              }
              regex.lastIndex = match.index + 1;
            }
          } else {
            search = $$2($nesting3, "Opal").$coerce_to(search, $$2($nesting3, "String"), "to_str");
            if (search.length === 0 && offset > self4.length) {
              index = -1;
            } else {
              index = self4.indexOf(search, offset);
            }
          }
          return index === -1 ? nil2 : index;
          ;
        }, $String_index$37.$$arity = -2);
        Opal2.def(self3, "$inspect", $String_inspect$38 = function $$inspect() {
          var self4 = this;
          var escapable = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, meta = {
            "\x07": "\\a",
            "": "\\e",
            "\b": "\\b",
            "	": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\v": "\\v",
            '"': '\\"',
            "\\": "\\\\"
          }, escaped = self4.replace(escapable, function(chr) {
            return meta[chr] || "\\u" + ("0000" + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
          return '"' + escaped.replace(/\#[\$\@\{]/g, "\\$&") + '"';
        }, $String_inspect$38.$$arity = 0);
        Opal2.def(self3, "$intern", $String_intern$39 = function $$intern() {
          var self4 = this;
          return self4.toString();
        }, $String_intern$39.$$arity = 0);
        Opal2.def(self3, "$lines", $String_lines$40 = function $$lines(separator) {
          var $iter2 = $String_lines$40.$$p, block2 = $iter2 || nil2, self4 = this, e = nil2;
          if ($gvars["/"] == null)
            $gvars["/"] = nil2;
          if ($iter2)
            $String_lines$40.$$p = null;
          if ($iter2)
            $String_lines$40.$$p = null;
          ;
          if (separator == null) {
            separator = $gvars["/"];
          }
          ;
          e = $send2(self4, "each_line", [separator], block2.$to_proc());
          if ($truthy2(block2)) {
            return self4;
          } else {
            return e.$to_a();
          }
          ;
        }, $String_lines$40.$$arity = -1);
        Opal2.def(self3, "$length", $String_length$41 = function $$length() {
          var self4 = this;
          return self4.length;
        }, $String_length$41.$$arity = 0);
        Opal2.def(self3, "$ljust", $String_ljust$42 = function $$ljust(width, padstr) {
          var self4 = this;
          if (padstr == null) {
            padstr = " ";
          }
          ;
          width = $$2($nesting3, "Opal").$coerce_to(width, $$2($nesting3, "Integer"), "to_int");
          padstr = $$2($nesting3, "Opal").$coerce_to(padstr, $$2($nesting3, "String"), "to_str").$to_s();
          if ($truthy2(padstr["$empty?"]())) {
            self4.$raise($$2($nesting3, "ArgumentError"), "zero width padding");
          }
          ;
          if ($truthy2(width <= self4.length)) {
            return self4;
          }
          ;
          var index = -1, result2 = "";
          width -= self4.length;
          while (++index < width) {
            result2 += padstr;
          }
          return self4.$$cast(self4 + result2.slice(0, width));
          ;
        }, $String_ljust$42.$$arity = -2);
        Opal2.def(self3, "$lstrip", $String_lstrip$43 = function $$lstrip() {
          var self4 = this;
          return self4.replace(/^\s*/, "");
        }, $String_lstrip$43.$$arity = 0);
        Opal2.def(self3, "$ascii_only?", $String_ascii_only$ques$44 = function() {
          var self4 = this;
          return self4.match(/[ -~\n]*/)[0] === self4;
        }, $String_ascii_only$ques$44.$$arity = 0);
        Opal2.def(self3, "$match", $String_match$45 = function $$match(pattern, pos) {
          var $iter2 = $String_match$45.$$p, block2 = $iter2 || nil2, $a2, self4 = this;
          if ($iter2)
            $String_match$45.$$p = null;
          if ($iter2)
            $String_match$45.$$p = null;
          ;
          ;
          if ($truthy2($truthy2($a2 = $$2($nesting3, "String")["$==="](pattern)) ? $a2 : pattern["$respond_to?"]("to_str"))) {
            pattern = $$2($nesting3, "Regexp").$new(pattern.$to_str());
          }
          ;
          if ($truthy2($$2($nesting3, "Regexp")["$==="](pattern))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "wrong argument type " + pattern.$class() + " (expected Regexp)");
          }
          ;
          return $send2(pattern, "match", [self4, pos], block2.$to_proc());
        }, $String_match$45.$$arity = -2);
        Opal2.def(self3, "$match?", $String_match$ques$46 = function(pattern, pos) {
          var $a2, self4 = this;
          ;
          if ($truthy2($truthy2($a2 = $$2($nesting3, "String")["$==="](pattern)) ? $a2 : pattern["$respond_to?"]("to_str"))) {
            pattern = $$2($nesting3, "Regexp").$new(pattern.$to_str());
          }
          ;
          if ($truthy2($$2($nesting3, "Regexp")["$==="](pattern))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "wrong argument type " + pattern.$class() + " (expected Regexp)");
          }
          ;
          return pattern["$match?"](self4, pos);
        }, $String_match$ques$46.$$arity = -2);
        Opal2.def(self3, "$next", $String_next$47 = function $$next() {
          var self4 = this;
          var i = self4.length;
          if (i === 0) {
            return self4.$$cast("");
          }
          var result2 = self4;
          var first_alphanum_char_index = self4.search(/[a-zA-Z0-9]/);
          var carry = false;
          var code;
          while (i--) {
            code = self4.charCodeAt(i);
            if (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
              switch (code) {
                case 57:
                  carry = true;
                  code = 48;
                  break;
                case 90:
                  carry = true;
                  code = 65;
                  break;
                case 122:
                  carry = true;
                  code = 97;
                  break;
                default:
                  carry = false;
                  code += 1;
              }
            } else {
              if (first_alphanum_char_index === -1) {
                if (code === 255) {
                  carry = true;
                  code = 0;
                } else {
                  carry = false;
                  code += 1;
                }
              } else {
                carry = true;
              }
            }
            result2 = result2.slice(0, i) + String.fromCharCode(code) + result2.slice(i + 1);
            if (carry && (i === 0 || i === first_alphanum_char_index)) {
              switch (code) {
                case 65:
                  break;
                case 97:
                  break;
                default:
                  code += 1;
              }
              if (i === 0) {
                result2 = String.fromCharCode(code) + result2;
              } else {
                result2 = result2.slice(0, i) + String.fromCharCode(code) + result2.slice(i);
              }
              carry = false;
            }
            if (!carry) {
              break;
            }
          }
          return self4.$$cast(result2);
        }, $String_next$47.$$arity = 0);
        Opal2.def(self3, "$oct", $String_oct$48 = function $$oct() {
          var self4 = this;
          var result2, string2 = self4, radix = 8;
          if (/^\s*_/.test(string2)) {
            return 0;
          }
          string2 = string2.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function(original, head, flag, tail) {
            switch (tail.charAt(0)) {
              case "+":
              case "-":
                return original;
              case "0":
                if (tail.charAt(1) === "x" && flag === "0x") {
                  return original;
                }
            }
            switch (flag) {
              case "0b":
                radix = 2;
                break;
              case "0":
              case "0o":
                radix = 8;
                break;
              case "0d":
                radix = 10;
                break;
              case "0x":
                radix = 16;
                break;
            }
            return head + tail;
          });
          result2 = parseInt(string2.replace(/_(?!_)/g, ""), radix);
          return isNaN(result2) ? 0 : result2;
        }, $String_oct$48.$$arity = 0);
        Opal2.def(self3, "$ord", $String_ord$49 = function $$ord() {
          var self4 = this;
          return self4.charCodeAt(0);
        }, $String_ord$49.$$arity = 0);
        Opal2.def(self3, "$partition", $String_partition$50 = function $$partition(sep) {
          var self4 = this;
          var i, m;
          if (sep.$$is_regexp) {
            m = sep.exec(self4);
            if (m === null) {
              i = -1;
            } else {
              $$2($nesting3, "MatchData").$new(sep, m);
              sep = m[0];
              i = m.index;
            }
          } else {
            sep = $$2($nesting3, "Opal").$coerce_to(sep, $$2($nesting3, "String"), "to_str");
            i = self4.indexOf(sep);
          }
          if (i === -1) {
            return [self4, "", ""];
          }
          return [
            self4.slice(0, i),
            self4.slice(i, i + sep.length),
            self4.slice(i + sep.length)
          ];
        }, $String_partition$50.$$arity = 1);
        Opal2.def(self3, "$reverse", $String_reverse$51 = function $$reverse() {
          var self4 = this;
          return self4.split("").reverse().join("");
        }, $String_reverse$51.$$arity = 0);
        Opal2.def(self3, "$rindex", $String_rindex$52 = function $$rindex(search, offset) {
          var self4 = this;
          ;
          var i, m, r, _m;
          if (offset === void 0) {
            offset = self4.length;
          } else {
            offset = $$2($nesting3, "Opal").$coerce_to(offset, $$2($nesting3, "Integer"), "to_int");
            if (offset < 0) {
              offset += self4.length;
              if (offset < 0) {
                return nil2;
              }
            }
          }
          if (search.$$is_regexp) {
            m = null;
            r = Opal2.global_multiline_regexp(search);
            while (true) {
              _m = r.exec(self4);
              if (_m === null || _m.index > offset) {
                break;
              }
              m = _m;
              r.lastIndex = m.index + 1;
            }
            if (m === null) {
              $gvars["~"] = nil2;
              i = -1;
            } else {
              $$2($nesting3, "MatchData").$new(r, m);
              i = m.index;
            }
          } else {
            search = $$2($nesting3, "Opal").$coerce_to(search, $$2($nesting3, "String"), "to_str");
            i = self4.lastIndexOf(search, offset);
          }
          return i === -1 ? nil2 : i;
          ;
        }, $String_rindex$52.$$arity = -2);
        Opal2.def(self3, "$rjust", $String_rjust$53 = function $$rjust(width, padstr) {
          var self4 = this;
          if (padstr == null) {
            padstr = " ";
          }
          ;
          width = $$2($nesting3, "Opal").$coerce_to(width, $$2($nesting3, "Integer"), "to_int");
          padstr = $$2($nesting3, "Opal").$coerce_to(padstr, $$2($nesting3, "String"), "to_str").$to_s();
          if ($truthy2(padstr["$empty?"]())) {
            self4.$raise($$2($nesting3, "ArgumentError"), "zero width padding");
          }
          ;
          if ($truthy2(width <= self4.length)) {
            return self4;
          }
          ;
          var chars = Math.floor(width - self4.length), patterns = Math.floor(chars / padstr.length), result2 = Array(patterns + 1).join(padstr), remaining = chars - result2.length;
          return self4.$$cast(result2 + padstr.slice(0, remaining) + self4);
          ;
        }, $String_rjust$53.$$arity = -2);
        Opal2.def(self3, "$rpartition", $String_rpartition$54 = function $$rpartition(sep) {
          var self4 = this;
          var i, m, r, _m;
          if (sep.$$is_regexp) {
            m = null;
            r = Opal2.global_multiline_regexp(sep);
            while (true) {
              _m = r.exec(self4);
              if (_m === null) {
                break;
              }
              m = _m;
              r.lastIndex = m.index + 1;
            }
            if (m === null) {
              i = -1;
            } else {
              $$2($nesting3, "MatchData").$new(r, m);
              sep = m[0];
              i = m.index;
            }
          } else {
            sep = $$2($nesting3, "Opal").$coerce_to(sep, $$2($nesting3, "String"), "to_str");
            i = self4.lastIndexOf(sep);
          }
          if (i === -1) {
            return ["", "", self4];
          }
          return [
            self4.slice(0, i),
            self4.slice(i, i + sep.length),
            self4.slice(i + sep.length)
          ];
        }, $String_rpartition$54.$$arity = 1);
        Opal2.def(self3, "$rstrip", $String_rstrip$55 = function $$rstrip() {
          var self4 = this;
          return self4.replace(/[\s\u0000]*$/, "");
        }, $String_rstrip$55.$$arity = 0);
        Opal2.def(self3, "$scan", $String_scan$56 = function $$scan(pattern) {
          var $iter2 = $String_scan$56.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $String_scan$56.$$p = null;
          if ($iter2)
            $String_scan$56.$$p = null;
          ;
          var result2 = [], match_data = nil2, match;
          if (pattern.$$is_regexp) {
            pattern = Opal2.global_multiline_regexp(pattern);
          } else {
            pattern = $$2($nesting3, "Opal").$coerce_to(pattern, $$2($nesting3, "String"), "to_str");
            pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gm");
          }
          while ((match = pattern.exec(self4)) != null) {
            match_data = $$2($nesting3, "MatchData").$new(pattern, match);
            if (block2 === nil2) {
              match.length == 1 ? result2.push(match[0]) : result2.push(match_data.$captures());
            } else {
              match.length == 1 ? block2(match[0]) : block2.call(self4, match_data.$captures());
            }
            if (pattern.lastIndex === match.index) {
              pattern.lastIndex += 1;
            }
          }
          $gvars["~"] = match_data;
          return block2 !== nil2 ? self4 : result2;
          ;
        }, $String_scan$56.$$arity = 1);
        Opal2.alias(self3, "size", "length");
        Opal2.alias(self3, "slice", "[]");
        Opal2.def(self3, "$split", $String_split$57 = function $$split(pattern, limit) {
          var $a2, self4 = this;
          if ($gvars[";"] == null)
            $gvars[";"] = nil2;
          ;
          ;
          if (self4.length === 0) {
            return [];
          }
          if (limit === void 0) {
            limit = 0;
          } else {
            limit = $$2($nesting3, "Opal")["$coerce_to!"](limit, $$2($nesting3, "Integer"), "to_int");
            if (limit === 1) {
              return [self4];
            }
          }
          if (pattern === void 0 || pattern === nil2) {
            pattern = $truthy2($a2 = $gvars[";"]) ? $a2 : " ";
          }
          var result2 = [], string2 = self4.toString(), index = 0, match, i, ii;
          if (pattern.$$is_regexp) {
            pattern = Opal2.global_multiline_regexp(pattern);
          } else {
            pattern = $$2($nesting3, "Opal").$coerce_to(pattern, $$2($nesting3, "String"), "to_str").$to_s();
            if (pattern === " ") {
              pattern = /\s+/gm;
              string2 = string2.replace(/^\s+/, "");
            } else {
              pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gm");
            }
          }
          result2 = string2.split(pattern);
          if (result2.length === 1 && result2[0] === string2) {
            return [self4.$$cast(result2[0])];
          }
          while ((i = result2.indexOf(void 0)) !== -1) {
            result2.splice(i, 1);
          }
          function castResult() {
            for (i = 0; i < result2.length; i++) {
              result2[i] = self4.$$cast(result2[i]);
            }
          }
          if (limit === 0) {
            while (result2[result2.length - 1] === "") {
              result2.length -= 1;
            }
            castResult();
            return result2;
          }
          match = pattern.exec(string2);
          if (limit < 0) {
            if (match !== null && match[0] === "" && pattern.source.indexOf("(?=") === -1) {
              for (i = 0, ii = match.length; i < ii; i++) {
                result2.push("");
              }
            }
            castResult();
            return result2;
          }
          if (match !== null && match[0] === "") {
            result2.splice(limit - 1, result2.length - 1, result2.slice(limit - 1).join(""));
            castResult();
            return result2;
          }
          if (limit >= result2.length) {
            castResult();
            return result2;
          }
          i = 0;
          while (match !== null) {
            i++;
            index = pattern.lastIndex;
            if (i + 1 === limit) {
              break;
            }
            match = pattern.exec(string2);
          }
          result2.splice(limit - 1, result2.length - 1, string2.slice(index));
          castResult();
          return result2;
          ;
        }, $String_split$57.$$arity = -1);
        Opal2.def(self3, "$squeeze", $String_squeeze$58 = function $$squeeze($a2) {
          var $post_args2, sets, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          sets = $post_args2;
          ;
          if (sets.length === 0) {
            return self4.$$cast(self4.replace(/(.)\1+/g, "$1"));
          }
          var char_class = char_class_from_char_sets(sets);
          if (char_class === null) {
            return self4;
          }
          return self4.$$cast(self4.replace(new RegExp("(" + char_class + ")\\1+", "g"), "$1"));
          ;
        }, $String_squeeze$58.$$arity = -1);
        Opal2.def(self3, "$start_with?", $String_start_with$ques$59 = function($a2) {
          var $post_args2, prefixes, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          prefixes = $post_args2;
          ;
          for (var i = 0, length = prefixes.length; i < length; i++) {
            var prefix = $$2($nesting3, "Opal").$coerce_to(prefixes[i], $$2($nesting3, "String"), "to_str").$to_s();
            if (self4.indexOf(prefix) === 0) {
              return true;
            }
          }
          return false;
          ;
        }, $String_start_with$ques$59.$$arity = -1);
        Opal2.def(self3, "$strip", $String_strip$60 = function $$strip() {
          var self4 = this;
          return self4.replace(/^\s*/, "").replace(/[\s\u0000]*$/, "");
        }, $String_strip$60.$$arity = 0);
        Opal2.def(self3, "$sub", $String_sub$61 = function $$sub(pattern, replacement) {
          var $iter2 = $String_sub$61.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $String_sub$61.$$p = null;
          if ($iter2)
            $String_sub$61.$$p = null;
          ;
          ;
          if (!pattern.$$is_regexp) {
            pattern = $$2($nesting3, "Opal").$coerce_to(pattern, $$2($nesting3, "String"), "to_str");
            pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"));
          }
          var result2, match = pattern.exec(self4);
          if (match === null) {
            $gvars["~"] = nil2;
            result2 = self4.toString();
          } else {
            $$2($nesting3, "MatchData").$new(pattern, match);
            if (replacement === void 0) {
              if (block2 === nil2) {
                self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (1 for 2)");
              }
              result2 = self4.slice(0, match.index) + block2(match[0]) + self4.slice(match.index + match[0].length);
            } else if (replacement.$$is_hash) {
              result2 = self4.slice(0, match.index) + replacement["$[]"](match[0]).$to_s() + self4.slice(match.index + match[0].length);
            } else {
              replacement = $$2($nesting3, "Opal").$coerce_to(replacement, $$2($nesting3, "String"), "to_str");
              replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function(original, slashes, command) {
                if (slashes.length % 2 === 0) {
                  return original;
                }
                switch (command) {
                  case "+":
                    for (var i = match.length - 1; i > 0; i--) {
                      if (match[i] !== void 0) {
                        return slashes.slice(1) + match[i];
                      }
                    }
                    return "";
                  case "&":
                    return slashes.slice(1) + match[0];
                  case "`":
                    return slashes.slice(1) + self4.slice(0, match.index);
                  case "'":
                    return slashes.slice(1) + self4.slice(match.index + match[0].length);
                  default:
                    return slashes.slice(1) + (match[command] || "");
                }
              }).replace(/\\\\/g, "\\");
              result2 = self4.slice(0, match.index) + replacement + self4.slice(match.index + match[0].length);
            }
          }
          return self4.$$cast(result2);
          ;
        }, $String_sub$61.$$arity = -2);
        Opal2.alias(self3, "succ", "next");
        Opal2.def(self3, "$sum", $String_sum$62 = function $$sum(n) {
          var self4 = this;
          if (n == null) {
            n = 16;
          }
          ;
          n = $$2($nesting3, "Opal").$coerce_to(n, $$2($nesting3, "Integer"), "to_int");
          var result2 = 0, length = self4.length, i = 0;
          for (; i < length; i++) {
            result2 += self4.charCodeAt(i);
          }
          if (n <= 0) {
            return result2;
          }
          return result2 & Math.pow(2, n) - 1;
          ;
        }, $String_sum$62.$$arity = -1);
        Opal2.def(self3, "$swapcase", $String_swapcase$63 = function $$swapcase() {
          var self4 = this;
          var str = self4.replace(/([a-z]+)|([A-Z]+)/g, function($0, $1, $2) {
            return $1 ? $0.toUpperCase() : $0.toLowerCase();
          });
          if (self4.constructor === String) {
            return str;
          }
          return self4.$class().$new(str);
        }, $String_swapcase$63.$$arity = 0);
        Opal2.def(self3, "$to_f", $String_to_f$64 = function $$to_f() {
          var self4 = this;
          if (self4.charAt(0) === "_") {
            return 0;
          }
          var result2 = parseFloat(self4.replace(/_/g, ""));
          if (isNaN(result2) || result2 == Infinity || result2 == -Infinity) {
            return 0;
          } else {
            return result2;
          }
        }, $String_to_f$64.$$arity = 0);
        Opal2.def(self3, "$to_i", $String_to_i$65 = function $$to_i(base) {
          var self4 = this;
          if (base == null) {
            base = 10;
          }
          ;
          var result2, string2 = self4.toLowerCase(), radix = $$2($nesting3, "Opal").$coerce_to(base, $$2($nesting3, "Integer"), "to_int");
          if (radix === 1 || radix < 0 || radix > 36) {
            self4.$raise($$2($nesting3, "ArgumentError"), "invalid radix " + radix);
          }
          if (/^\s*_/.test(string2)) {
            return 0;
          }
          string2 = string2.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function(original, head, flag, tail) {
            switch (tail.charAt(0)) {
              case "+":
              case "-":
                return original;
              case "0":
                if (tail.charAt(1) === "x" && flag === "0x" && (radix === 0 || radix === 16)) {
                  return original;
                }
            }
            switch (flag) {
              case "0b":
                if (radix === 0 || radix === 2) {
                  radix = 2;
                  return head + tail;
                }
                break;
              case "0":
              case "0o":
                if (radix === 0 || radix === 8) {
                  radix = 8;
                  return head + tail;
                }
                break;
              case "0d":
                if (radix === 0 || radix === 10) {
                  radix = 10;
                  return head + tail;
                }
                break;
              case "0x":
                if (radix === 0 || radix === 16) {
                  radix = 16;
                  return head + tail;
                }
                break;
            }
            return original;
          });
          result2 = parseInt(string2.replace(/_(?!_)/g, ""), radix);
          return isNaN(result2) ? 0 : result2;
          ;
        }, $String_to_i$65.$$arity = -1);
        Opal2.def(self3, "$to_proc", $String_to_proc$66 = function $$to_proc() {
          var $$67, $iter2 = $String_to_proc$66.$$p, $yield = $iter2 || nil2, self4 = this, method_name = nil2;
          if ($iter2)
            $String_to_proc$66.$$p = null;
          method_name = $rb_plus("$", self4.valueOf());
          return $send2(self4, "proc", [], ($$67 = function($a2) {
            var self5 = $$67.$$s || this, $iter3 = $$67.$$p, block2 = $iter3 || nil2, $post_args2, args2;
            if ($iter3)
              $$67.$$p = null;
            ;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            args2 = $post_args2;
            ;
            if (args2.length === 0) {
              self5.$raise($$2($nesting3, "ArgumentError"), "no receiver given");
            }
            var recv = args2[0];
            if (recv == null)
              recv = nil2;
            var body = recv[method_name];
            if (!body) {
              return recv.$method_missing.apply(recv, args2);
            }
            if (typeof block2 === "function") {
              body.$$p = block2;
            }
            if (args2.length === 1) {
              return body.call(recv);
            } else {
              return body.apply(recv, args2.slice(1));
            }
            ;
          }, $$67.$$s = self4, $$67.$$arity = -1, $$67));
        }, $String_to_proc$66.$$arity = 0);
        Opal2.def(self3, "$to_s", $String_to_s$68 = function $$to_s() {
          var self4 = this;
          return self4.toString();
        }, $String_to_s$68.$$arity = 0);
        Opal2.alias(self3, "to_str", "to_s");
        Opal2.alias(self3, "to_sym", "intern");
        Opal2.def(self3, "$tr", $String_tr$69 = function $$tr(from, to) {
          var self4 = this;
          from = $$2($nesting3, "Opal").$coerce_to(from, $$2($nesting3, "String"), "to_str").$to_s();
          to = $$2($nesting3, "Opal").$coerce_to(to, $$2($nesting3, "String"), "to_str").$to_s();
          if (from.length == 0 || from === to) {
            return self4;
          }
          var i, in_range, c, ch, start, end, length;
          var subs = {};
          var from_chars = from.split("");
          var from_length = from_chars.length;
          var to_chars = to.split("");
          var to_length = to_chars.length;
          var inverse = false;
          var global_sub = null;
          if (from_chars[0] === "^" && from_chars.length > 1) {
            inverse = true;
            from_chars.shift();
            global_sub = to_chars[to_length - 1];
            from_length -= 1;
          }
          var from_chars_expanded = [];
          var last_from = null;
          in_range = false;
          for (i = 0; i < from_length; i++) {
            ch = from_chars[i];
            if (last_from == null) {
              last_from = ch;
              from_chars_expanded.push(ch);
            } else if (ch === "-") {
              if (last_from === "-") {
                from_chars_expanded.push("-");
                from_chars_expanded.push("-");
              } else if (i == from_length - 1) {
                from_chars_expanded.push("-");
              } else {
                in_range = true;
              }
            } else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self4.$raise($$2($nesting3, "ArgumentError"), 'invalid range "' + String.fromCharCode(start) + "-" + String.fromCharCode(end) + '" in string transliteration');
              }
              for (c = start + 1; c < end; c++) {
                from_chars_expanded.push(String.fromCharCode(c));
              }
              from_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            } else {
              from_chars_expanded.push(ch);
            }
          }
          from_chars = from_chars_expanded;
          from_length = from_chars.length;
          if (inverse) {
            for (i = 0; i < from_length; i++) {
              subs[from_chars[i]] = true;
            }
          } else {
            if (to_length > 0) {
              var to_chars_expanded = [];
              var last_to = null;
              in_range = false;
              for (i = 0; i < to_length; i++) {
                ch = to_chars[i];
                if (last_to == null) {
                  last_to = ch;
                  to_chars_expanded.push(ch);
                } else if (ch === "-") {
                  if (last_to === "-") {
                    to_chars_expanded.push("-");
                    to_chars_expanded.push("-");
                  } else if (i == to_length - 1) {
                    to_chars_expanded.push("-");
                  } else {
                    in_range = true;
                  }
                } else if (in_range) {
                  start = last_to.charCodeAt(0);
                  end = ch.charCodeAt(0);
                  if (start > end) {
                    self4.$raise($$2($nesting3, "ArgumentError"), 'invalid range "' + String.fromCharCode(start) + "-" + String.fromCharCode(end) + '" in string transliteration');
                  }
                  for (c = start + 1; c < end; c++) {
                    to_chars_expanded.push(String.fromCharCode(c));
                  }
                  to_chars_expanded.push(ch);
                  in_range = null;
                  last_to = null;
                } else {
                  to_chars_expanded.push(ch);
                }
              }
              to_chars = to_chars_expanded;
              to_length = to_chars.length;
            }
            var length_diff = from_length - to_length;
            if (length_diff > 0) {
              var pad_char = to_length > 0 ? to_chars[to_length - 1] : "";
              for (i = 0; i < length_diff; i++) {
                to_chars.push(pad_char);
              }
            }
            for (i = 0; i < from_length; i++) {
              subs[from_chars[i]] = to_chars[i];
            }
          }
          var new_str = "";
          for (i = 0, length = self4.length; i < length; i++) {
            ch = self4.charAt(i);
            var sub = subs[ch];
            if (inverse) {
              new_str += sub == null ? global_sub : ch;
            } else {
              new_str += sub != null ? sub : ch;
            }
          }
          return self4.$$cast(new_str);
          ;
        }, $String_tr$69.$$arity = 2);
        Opal2.def(self3, "$tr_s", $String_tr_s$70 = function $$tr_s(from, to) {
          var self4 = this;
          from = $$2($nesting3, "Opal").$coerce_to(from, $$2($nesting3, "String"), "to_str").$to_s();
          to = $$2($nesting3, "Opal").$coerce_to(to, $$2($nesting3, "String"), "to_str").$to_s();
          if (from.length == 0) {
            return self4;
          }
          var i, in_range, c, ch, start, end, length;
          var subs = {};
          var from_chars = from.split("");
          var from_length = from_chars.length;
          var to_chars = to.split("");
          var to_length = to_chars.length;
          var inverse = false;
          var global_sub = null;
          if (from_chars[0] === "^" && from_chars.length > 1) {
            inverse = true;
            from_chars.shift();
            global_sub = to_chars[to_length - 1];
            from_length -= 1;
          }
          var from_chars_expanded = [];
          var last_from = null;
          in_range = false;
          for (i = 0; i < from_length; i++) {
            ch = from_chars[i];
            if (last_from == null) {
              last_from = ch;
              from_chars_expanded.push(ch);
            } else if (ch === "-") {
              if (last_from === "-") {
                from_chars_expanded.push("-");
                from_chars_expanded.push("-");
              } else if (i == from_length - 1) {
                from_chars_expanded.push("-");
              } else {
                in_range = true;
              }
            } else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self4.$raise($$2($nesting3, "ArgumentError"), 'invalid range "' + String.fromCharCode(start) + "-" + String.fromCharCode(end) + '" in string transliteration');
              }
              for (c = start + 1; c < end; c++) {
                from_chars_expanded.push(String.fromCharCode(c));
              }
              from_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            } else {
              from_chars_expanded.push(ch);
            }
          }
          from_chars = from_chars_expanded;
          from_length = from_chars.length;
          if (inverse) {
            for (i = 0; i < from_length; i++) {
              subs[from_chars[i]] = true;
            }
          } else {
            if (to_length > 0) {
              var to_chars_expanded = [];
              var last_to = null;
              in_range = false;
              for (i = 0; i < to_length; i++) {
                ch = to_chars[i];
                if (last_from == null) {
                  last_from = ch;
                  to_chars_expanded.push(ch);
                } else if (ch === "-") {
                  if (last_to === "-") {
                    to_chars_expanded.push("-");
                    to_chars_expanded.push("-");
                  } else if (i == to_length - 1) {
                    to_chars_expanded.push("-");
                  } else {
                    in_range = true;
                  }
                } else if (in_range) {
                  start = last_from.charCodeAt(0);
                  end = ch.charCodeAt(0);
                  if (start > end) {
                    self4.$raise($$2($nesting3, "ArgumentError"), 'invalid range "' + String.fromCharCode(start) + "-" + String.fromCharCode(end) + '" in string transliteration');
                  }
                  for (c = start + 1; c < end; c++) {
                    to_chars_expanded.push(String.fromCharCode(c));
                  }
                  to_chars_expanded.push(ch);
                  in_range = null;
                  last_from = null;
                } else {
                  to_chars_expanded.push(ch);
                }
              }
              to_chars = to_chars_expanded;
              to_length = to_chars.length;
            }
            var length_diff = from_length - to_length;
            if (length_diff > 0) {
              var pad_char = to_length > 0 ? to_chars[to_length - 1] : "";
              for (i = 0; i < length_diff; i++) {
                to_chars.push(pad_char);
              }
            }
            for (i = 0; i < from_length; i++) {
              subs[from_chars[i]] = to_chars[i];
            }
          }
          var new_str = "";
          var last_substitute = null;
          for (i = 0, length = self4.length; i < length; i++) {
            ch = self4.charAt(i);
            var sub = subs[ch];
            if (inverse) {
              if (sub == null) {
                if (last_substitute == null) {
                  new_str += global_sub;
                  last_substitute = true;
                }
              } else {
                new_str += ch;
                last_substitute = null;
              }
            } else {
              if (sub != null) {
                if (last_substitute == null || last_substitute !== sub) {
                  new_str += sub;
                  last_substitute = sub;
                }
              } else {
                new_str += ch;
                last_substitute = null;
              }
            }
          }
          return self4.$$cast(new_str);
          ;
        }, $String_tr_s$70.$$arity = 2);
        Opal2.def(self3, "$upcase", $String_upcase$71 = function $$upcase() {
          var self4 = this;
          return self4.$$cast(self4.toUpperCase());
        }, $String_upcase$71.$$arity = 0);
        Opal2.def(self3, "$upto", $String_upto$72 = function $$upto(stop, excl) {
          var $iter2 = $String_upto$72.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $String_upto$72.$$p = null;
          if ($iter2)
            $String_upto$72.$$p = null;
          ;
          if (excl == null) {
            excl = false;
          }
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("upto", stop, excl);
          }
          ;
          stop = $$2($nesting3, "Opal").$coerce_to(stop, $$2($nesting3, "String"), "to_str");
          var a, b, s = self4.toString();
          if (s.length === 1 && stop.length === 1) {
            a = s.charCodeAt(0);
            b = stop.charCodeAt(0);
            while (a <= b) {
              if (excl && a === b) {
                break;
              }
              block2(String.fromCharCode(a));
              a += 1;
            }
          } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {
            a = parseInt(s, 10);
            b = parseInt(stop, 10);
            while (a <= b) {
              if (excl && a === b) {
                break;
              }
              block2(a.toString());
              a += 1;
            }
          } else {
            while (s.length <= stop.length && s <= stop) {
              if (excl && s === stop) {
                break;
              }
              block2(s);
              s = s.$succ();
            }
          }
          return self4;
          ;
        }, $String_upto$72.$$arity = -2);
        function char_class_from_char_sets(sets) {
          function explode_sequences_in_character_set(set2) {
            var result2 = "", i2, len2 = set2.length, curr_char, skip_next_dash, char_code_from, char_code_upto, char_code;
            for (i2 = 0; i2 < len2; i2++) {
              curr_char = set2.charAt(i2);
              if (curr_char === "-" && i2 > 0 && i2 < len2 - 1 && !skip_next_dash) {
                char_code_from = set2.charCodeAt(i2 - 1);
                char_code_upto = set2.charCodeAt(i2 + 1);
                if (char_code_from > char_code_upto) {
                  self3.$raise($$2($nesting3, "ArgumentError"), 'invalid range "' + char_code_from + "-" + char_code_upto + '" in string transliteration');
                }
                for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
                  result2 += String.fromCharCode(char_code);
                }
                skip_next_dash = true;
                i2++;
              } else {
                skip_next_dash = curr_char === "\\";
                result2 += curr_char;
              }
            }
            return result2;
          }
          function intersection(setA, setB) {
            if (setA.length === 0) {
              return setB;
            }
            var result2 = "", i2, len2 = setA.length, chr2;
            for (i2 = 0; i2 < len2; i2++) {
              chr2 = setA.charAt(i2);
              if (setB.indexOf(chr2) !== -1) {
                result2 += chr2;
              }
            }
            return result2;
          }
          var i, len, set, neg, chr, tmp, pos_intersection = "", neg_intersection = "";
          for (i = 0, len = sets.length; i < len; i++) {
            set = $$2($nesting3, "Opal").$coerce_to(sets[i], $$2($nesting3, "String"), "to_str");
            neg = set.charAt(0) === "^" && set.length > 1;
            set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
            if (neg) {
              neg_intersection = intersection(neg_intersection, set);
            } else {
              pos_intersection = intersection(pos_intersection, set);
            }
          }
          if (pos_intersection.length > 0 && neg_intersection.length > 0) {
            tmp = "";
            for (i = 0, len = pos_intersection.length; i < len; i++) {
              chr = pos_intersection.charAt(i);
              if (neg_intersection.indexOf(chr) === -1) {
                tmp += chr;
              }
            }
            pos_intersection = tmp;
            neg_intersection = "";
          }
          if (pos_intersection.length > 0) {
            return "[" + $$2($nesting3, "Regexp").$escape(pos_intersection) + "]";
          }
          if (neg_intersection.length > 0) {
            return "[^" + $$2($nesting3, "Regexp").$escape(neg_intersection) + "]";
          }
          return null;
        }
        ;
        Opal2.def(self3, "$instance_variables", $String_instance_variables$73 = function $$instance_variables() {
          var self4 = this;
          return [];
        }, $String_instance_variables$73.$$arity = 0);
        Opal2.defs(self3, "$_load", $String__load$74 = function $$_load($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return $send2(self4, "new", Opal2.to_a(args2));
        }, $String__load$74.$$arity = -1);
        Opal2.def(self3, "$unicode_normalize", $String_unicode_normalize$75 = function $$unicode_normalize(form) {
          var self4 = this;
          ;
          return self4.toString();
          ;
        }, $String_unicode_normalize$75.$$arity = -1);
        Opal2.def(self3, "$unicode_normalized?", $String_unicode_normalized$ques$76 = function(form) {
          var self4 = this;
          ;
          return true;
        }, $String_unicode_normalized$ques$76.$$arity = -1);
        Opal2.def(self3, "$unpack", $String_unpack$77 = function $$unpack(format) {
          var self4 = this;
          return self4.$raise("To use String#unpack, you must first require 'corelib/string/unpack'.");
        }, $String_unpack$77.$$arity = 1);
        return (Opal2.def(self3, "$unpack1", $String_unpack1$78 = function $$unpack1(format) {
          var self4 = this;
          return self4.$raise("To use String#unpack1, you must first require 'corelib/string/unpack'.");
        }, $String_unpack1$78.$$arity = 1), nil2) && "unpack1";
      })($nesting2[0], String, $nesting2);
      return Opal2.const_set($nesting2[0], "Symbol", $$2($nesting2, "String"));
    };
    Opal.modules["corelib/enumerable"] = function(Opal2) {
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      function $rb_times(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      function $rb_divide(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs / rhs : lhs["$/"](rhs);
      }
      function $rb_le(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $falsy = Opal2.falsy, $hash22 = Opal2.hash2, $lambda2 = Opal2.lambda;
      Opal2.add_stubs(["$each", "$public_send", "$destructure", "$to_enum", "$enumerator_size", "$new", "$yield", "$raise", "$slice_when", "$!", "$enum_for", "$flatten", "$map", "$warn", "$proc", "$==", "$nil?", "$respond_to?", "$coerce_to!", "$>", "$*", "$coerce_to", "$try_convert", "$<", "$+", "$-", "$ceil", "$/", "$size", "$__send__", "$length", "$<=", "$[]", "$push", "$<<", "$[]=", "$===", "$inspect", "$<=>", "$first", "$reverse", "$sort", "$to_proc", "$compare", "$call", "$dup", "$to_a", "$sort!", "$map!", "$key?", "$values", "$zip"]);
      return function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Enumerable");
        var $nesting3 = [self3].concat($parent_nesting2), $Enumerable_all$ques$1, $Enumerable_any$ques$5, $Enumerable_chunk$9, $Enumerable_chunk_while$12, $Enumerable_collect$14, $Enumerable_collect_concat$16, $Enumerable_count$19, $Enumerable_cycle$23, $Enumerable_detect$25, $Enumerable_drop$27, $Enumerable_drop_while$28, $Enumerable_each_cons$29, $Enumerable_each_entry$31, $Enumerable_each_slice$33, $Enumerable_each_with_index$35, $Enumerable_each_with_object$37, $Enumerable_entries$39, $Enumerable_find_all$40, $Enumerable_find_index$42, $Enumerable_first$45, $Enumerable_grep$48, $Enumerable_grep_v$50, $Enumerable_group_by$52, $Enumerable_include$ques$54, $Enumerable_inject$56, $Enumerable_lazy$57, $Enumerable_enumerator_size$59, $Enumerable_max$60, $Enumerable_max_by$61, $Enumerable_min$63, $Enumerable_min_by$64, $Enumerable_minmax$66, $Enumerable_minmax_by$68, $Enumerable_none$ques$69, $Enumerable_one$ques$73, $Enumerable_partition$77, $Enumerable_reject$79, $Enumerable_reverse_each$81, $Enumerable_slice_before$83, $Enumerable_slice_after$85, $Enumerable_slice_when$88, $Enumerable_sort$90, $Enumerable_sort_by$92, $Enumerable_sum$97, $Enumerable_take$99, $Enumerable_take_while$100, $Enumerable_uniq$102, $Enumerable_zip$104;
        function comparableForPattern(value) {
          if (value.length === 0) {
            value = [nil2];
          }
          if (value.length > 1) {
            value = [value];
          }
          return value;
        }
        ;
        Opal2.def(self3, "$all?", $Enumerable_all$ques$1 = function(pattern) {
          try {
            var $iter2 = $Enumerable_all$ques$1.$$p, block2 = $iter2 || nil2, $$22, $$3, $$4, self4 = this;
            if ($iter2)
              $Enumerable_all$ques$1.$$p = null;
            if ($iter2)
              $Enumerable_all$ques$1.$$p = null;
            ;
            ;
            if ($truthy2(pattern !== void 0)) {
              $send2(self4, "each", [], ($$22 = function($a2) {
                var self5 = $$22.$$s || this, $post_args2, value, comparable = nil2;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                comparable = comparableForPattern(value);
                if ($truthy2($send2(pattern, "public_send", ["==="].concat(Opal2.to_a(comparable))))) {
                  return nil2;
                } else {
                  Opal2.ret(false);
                }
                ;
              }, $$22.$$s = self4, $$22.$$arity = -1, $$22));
            } else if (block2 !== nil2) {
              $send2(self4, "each", [], ($$3 = function($a2) {
                var self5 = $$3.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2(Opal2.yieldX(block2, Opal2.to_a(value)))) {
                  return nil2;
                } else {
                  Opal2.ret(false);
                }
                ;
              }, $$3.$$s = self4, $$3.$$arity = -1, $$3));
            } else {
              $send2(self4, "each", [], ($$4 = function($a2) {
                var self5 = $$4.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2($$2($nesting3, "Opal").$destructure(value))) {
                  return nil2;
                } else {
                  Opal2.ret(false);
                }
                ;
              }, $$4.$$s = self4, $$4.$$arity = -1, $$4));
            }
            ;
            return true;
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_all$ques$1.$$arity = -1);
        Opal2.def(self3, "$any?", $Enumerable_any$ques$5 = function(pattern) {
          try {
            var $iter2 = $Enumerable_any$ques$5.$$p, block2 = $iter2 || nil2, $$6, $$7, $$8, self4 = this;
            if ($iter2)
              $Enumerable_any$ques$5.$$p = null;
            if ($iter2)
              $Enumerable_any$ques$5.$$p = null;
            ;
            ;
            if ($truthy2(pattern !== void 0)) {
              $send2(self4, "each", [], ($$6 = function($a2) {
                var self5 = $$6.$$s || this, $post_args2, value, comparable = nil2;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                comparable = comparableForPattern(value);
                if ($truthy2($send2(pattern, "public_send", ["==="].concat(Opal2.to_a(comparable))))) {
                  Opal2.ret(true);
                } else {
                  return nil2;
                }
                ;
              }, $$6.$$s = self4, $$6.$$arity = -1, $$6));
            } else if (block2 !== nil2) {
              $send2(self4, "each", [], ($$7 = function($a2) {
                var self5 = $$7.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2(Opal2.yieldX(block2, Opal2.to_a(value)))) {
                  Opal2.ret(true);
                } else {
                  return nil2;
                }
                ;
              }, $$7.$$s = self4, $$7.$$arity = -1, $$7));
            } else {
              $send2(self4, "each", [], ($$8 = function($a2) {
                var self5 = $$8.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2($$2($nesting3, "Opal").$destructure(value))) {
                  Opal2.ret(true);
                } else {
                  return nil2;
                }
                ;
              }, $$8.$$s = self4, $$8.$$arity = -1, $$8));
            }
            ;
            return false;
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_any$ques$5.$$arity = -1);
        Opal2.def(self3, "$chunk", $Enumerable_chunk$9 = function $$chunk() {
          var $iter2 = $Enumerable_chunk$9.$$p, block2 = $iter2 || nil2, $$10, $$11, self4 = this;
          if ($iter2)
            $Enumerable_chunk$9.$$p = null;
          if ($iter2)
            $Enumerable_chunk$9.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "to_enum", ["chunk"], ($$10 = function() {
              var self5 = $$10.$$s || this;
              return self5.$enumerator_size();
            }, $$10.$$s = self4, $$10.$$arity = 0, $$10));
          }
          ;
          return $send2($$$2("::", "Enumerator"), "new", [], ($$11 = function(yielder) {
            var self5 = $$11.$$s || this;
            if (yielder == null) {
              yielder = nil2;
            }
            ;
            var previous = nil2, accumulate = [];
            function releaseAccumulate() {
              if (accumulate.length > 0) {
                yielder.$yield(previous, accumulate);
              }
            }
            self5.$each.$$p = function(value) {
              var key = Opal2.yield1(block2, value);
              if (key === nil2) {
                releaseAccumulate();
                accumulate = [];
                previous = nil2;
              } else {
                if (previous === nil2 || previous === key) {
                  accumulate.push(value);
                } else {
                  releaseAccumulate();
                  accumulate = [value];
                }
                previous = key;
              }
            };
            self5.$each();
            releaseAccumulate();
            ;
          }, $$11.$$s = self4, $$11.$$arity = 1, $$11));
        }, $Enumerable_chunk$9.$$arity = 0);
        Opal2.def(self3, "$chunk_while", $Enumerable_chunk_while$12 = function $$chunk_while() {
          var $iter2 = $Enumerable_chunk_while$12.$$p, block2 = $iter2 || nil2, $$13, self4 = this;
          if ($iter2)
            $Enumerable_chunk_while$12.$$p = null;
          if ($iter2)
            $Enumerable_chunk_while$12.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "no block given");
          }
          ;
          return $send2(self4, "slice_when", [], ($$13 = function(before, after) {
            var self5 = $$13.$$s || this;
            if (before == null) {
              before = nil2;
            }
            ;
            if (after == null) {
              after = nil2;
            }
            ;
            return Opal2.yieldX(block2, [before, after])["$!"]();
          }, $$13.$$s = self4, $$13.$$arity = 2, $$13));
        }, $Enumerable_chunk_while$12.$$arity = 0);
        Opal2.def(self3, "$collect", $Enumerable_collect$14 = function $$collect() {
          var $iter2 = $Enumerable_collect$14.$$p, block2 = $iter2 || nil2, $$15, self4 = this;
          if ($iter2)
            $Enumerable_collect$14.$$p = null;
          if ($iter2)
            $Enumerable_collect$14.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["collect"], ($$15 = function() {
              var self5 = $$15.$$s || this;
              return self5.$enumerator_size();
            }, $$15.$$s = self4, $$15.$$arity = 0, $$15));
          }
          ;
          var result2 = [];
          self4.$each.$$p = function() {
            var value = Opal2.yieldX(block2, arguments);
            result2.push(value);
          };
          self4.$each();
          return result2;
          ;
        }, $Enumerable_collect$14.$$arity = 0);
        Opal2.def(self3, "$collect_concat", $Enumerable_collect_concat$16 = function $$collect_concat() {
          var $iter2 = $Enumerable_collect_concat$16.$$p, block2 = $iter2 || nil2, $$17, $$18, self4 = this;
          if ($iter2)
            $Enumerable_collect_concat$16.$$p = null;
          if ($iter2)
            $Enumerable_collect_concat$16.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["collect_concat"], ($$17 = function() {
              var self5 = $$17.$$s || this;
              return self5.$enumerator_size();
            }, $$17.$$s = self4, $$17.$$arity = 0, $$17));
          }
          ;
          return $send2(self4, "map", [], ($$18 = function(item) {
            var self5 = $$18.$$s || this;
            if (item == null) {
              item = nil2;
            }
            ;
            return Opal2.yield1(block2, item);
            ;
          }, $$18.$$s = self4, $$18.$$arity = 1, $$18)).$flatten(1);
        }, $Enumerable_collect_concat$16.$$arity = 0);
        Opal2.def(self3, "$count", $Enumerable_count$19 = function $$count(object) {
          var $iter2 = $Enumerable_count$19.$$p, block2 = $iter2 || nil2, $$20, $$21, $$22, self4 = this, result2 = nil2;
          if ($iter2)
            $Enumerable_count$19.$$p = null;
          if ($iter2)
            $Enumerable_count$19.$$p = null;
          ;
          ;
          result2 = 0;
          if (object != null && block2 !== nil2) {
            self4.$warn("warning: given block not used");
          }
          ;
          if ($truthy2(object != null)) {
            block2 = $send2(self4, "proc", [], ($$20 = function($a2) {
              var self5 = $$20.$$s || this, $post_args2, args2;
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              args2 = $post_args2;
              ;
              return $$2($nesting3, "Opal").$destructure(args2)["$=="](object);
            }, $$20.$$s = self4, $$20.$$arity = -1, $$20));
          } else if ($truthy2(block2["$nil?"]())) {
            block2 = $send2(self4, "proc", [], ($$21 = function() {
              var self5 = $$21.$$s || this;
              return true;
            }, $$21.$$s = self4, $$21.$$arity = 0, $$21));
          }
          ;
          $send2(self4, "each", [], ($$22 = function($a2) {
            var self5 = $$22.$$s || this, $post_args2, args2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            args2 = $post_args2;
            ;
            if ($truthy2(Opal2.yieldX(block2, args2))) {
              return result2++;
            } else {
              return nil2;
            }
            ;
          }, $$22.$$s = self4, $$22.$$arity = -1, $$22));
          return result2;
        }, $Enumerable_count$19.$$arity = -1);
        Opal2.def(self3, "$cycle", $Enumerable_cycle$23 = function $$cycle(n) {
          var $iter2 = $Enumerable_cycle$23.$$p, block2 = $iter2 || nil2, $$24, self4 = this;
          if ($iter2)
            $Enumerable_cycle$23.$$p = null;
          if ($iter2)
            $Enumerable_cycle$23.$$p = null;
          ;
          if (n == null) {
            n = nil2;
          }
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["cycle", n], ($$24 = function() {
              var self5 = $$24.$$s || this;
              if ($truthy2(n["$nil?"]())) {
                if ($truthy2(self5["$respond_to?"]("size"))) {
                  return $$$2($$2($nesting3, "Float"), "INFINITY");
                } else {
                  return nil2;
                }
              } else {
                n = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
                if ($truthy2($rb_gt2(n, 0))) {
                  return $rb_times(self5.$enumerator_size(), n);
                } else {
                  return 0;
                }
                ;
              }
            }, $$24.$$s = self4, $$24.$$arity = 0, $$24));
          }
          ;
          if ($truthy2(n["$nil?"]())) {
          } else {
            n = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
            if ($truthy2(n <= 0)) {
              return nil2;
            }
            ;
          }
          ;
          var result2, all = [], i, length, value;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value2 = Opal2.yield1(block2, param);
            all.push(param);
          };
          self4.$each();
          if (result2 !== void 0) {
            return result2;
          }
          if (all.length === 0) {
            return nil2;
          }
          if (n === nil2) {
            while (true) {
              for (i = 0, length = all.length; i < length; i++) {
                value = Opal2.yield1(block2, all[i]);
              }
            }
          } else {
            while (n > 1) {
              for (i = 0, length = all.length; i < length; i++) {
                value = Opal2.yield1(block2, all[i]);
              }
              n--;
            }
          }
          ;
        }, $Enumerable_cycle$23.$$arity = -1);
        Opal2.def(self3, "$detect", $Enumerable_detect$25 = function $$detect(ifnone) {
          try {
            var $iter2 = $Enumerable_detect$25.$$p, block2 = $iter2 || nil2, $$26, self4 = this;
            if ($iter2)
              $Enumerable_detect$25.$$p = null;
            if ($iter2)
              $Enumerable_detect$25.$$p = null;
            ;
            ;
            if (block2 !== nil2) {
            } else {
              return self4.$enum_for("detect", ifnone);
            }
            ;
            $send2(self4, "each", [], ($$26 = function($a2) {
              var self5 = $$26.$$s || this, $post_args2, args2, value = nil2;
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              args2 = $post_args2;
              ;
              value = $$2($nesting3, "Opal").$destructure(args2);
              if ($truthy2(Opal2.yield1(block2, value))) {
                Opal2.ret(value);
              } else {
                return nil2;
              }
              ;
            }, $$26.$$s = self4, $$26.$$arity = -1, $$26));
            if (ifnone !== void 0) {
              if (typeof ifnone === "function") {
                return ifnone();
              } else {
                return ifnone;
              }
            }
            ;
            return nil2;
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_detect$25.$$arity = -1);
        Opal2.def(self3, "$drop", $Enumerable_drop$27 = function $$drop(number) {
          var self4 = this;
          number = $$2($nesting3, "Opal").$coerce_to(number, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2(number < 0)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "attempt to drop negative size");
          }
          ;
          var result2 = [], current = 0;
          self4.$each.$$p = function() {
            if (number <= current) {
              result2.push($$2($nesting3, "Opal").$destructure(arguments));
            }
            current++;
          };
          self4.$each();
          return result2;
          ;
        }, $Enumerable_drop$27.$$arity = 1);
        Opal2.def(self3, "$drop_while", $Enumerable_drop_while$28 = function $$drop_while() {
          var $iter2 = $Enumerable_drop_while$28.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Enumerable_drop_while$28.$$p = null;
          if ($iter2)
            $Enumerable_drop_while$28.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("drop_while");
          }
          ;
          var result2 = [], dropping = true;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments);
            if (dropping) {
              var value = Opal2.yield1(block2, param);
              if ($falsy(value)) {
                dropping = false;
                result2.push(param);
              }
            } else {
              result2.push(param);
            }
          };
          self4.$each();
          return result2;
          ;
        }, $Enumerable_drop_while$28.$$arity = 0);
        Opal2.def(self3, "$each_cons", $Enumerable_each_cons$29 = function $$each_cons(n) {
          var $iter2 = $Enumerable_each_cons$29.$$p, block2 = $iter2 || nil2, $$30, self4 = this;
          if ($iter2)
            $Enumerable_each_cons$29.$$p = null;
          if ($iter2)
            $Enumerable_each_cons$29.$$p = null;
          ;
          if ($truthy2(arguments.length != 1)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + arguments.length + " for 1)");
          }
          ;
          n = $$2($nesting3, "Opal").$try_convert(n, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2(n <= 0)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "invalid size");
          }
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each_cons", n], ($$30 = function() {
              var self5 = $$30.$$s || this, $a2, enum_size = nil2;
              enum_size = self5.$enumerator_size();
              if ($truthy2(enum_size["$nil?"]())) {
                return nil2;
              } else if ($truthy2($truthy2($a2 = enum_size["$=="](0)) ? $a2 : $rb_lt2(enum_size, n))) {
                return 0;
              } else {
                return $rb_plus($rb_minus(enum_size, n), 1);
              }
              ;
            }, $$30.$$s = self4, $$30.$$arity = 0, $$30));
          }
          ;
          var buffer = [], result2 = nil2;
          self4.$each.$$p = function() {
            var element = $$2($nesting3, "Opal").$destructure(arguments);
            buffer.push(element);
            if (buffer.length > n) {
              buffer.shift();
            }
            if (buffer.length == n) {
              Opal2.yield1(block2, buffer.slice(0, n));
            }
          };
          self4.$each();
          return result2;
          ;
        }, $Enumerable_each_cons$29.$$arity = 1);
        Opal2.def(self3, "$each_entry", $Enumerable_each_entry$31 = function $$each_entry($a2) {
          var $iter2 = $Enumerable_each_entry$31.$$p, block2 = $iter2 || nil2, $post_args2, data, $$32, self4 = this;
          if ($iter2)
            $Enumerable_each_entry$31.$$p = null;
          if ($iter2)
            $Enumerable_each_entry$31.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          data = $post_args2;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "to_enum", ["each_entry"].concat(Opal2.to_a(data)), ($$32 = function() {
              var self5 = $$32.$$s || this;
              return self5.$enumerator_size();
            }, $$32.$$s = self4, $$32.$$arity = 0, $$32));
          }
          ;
          self4.$each.$$p = function() {
            var item = $$2($nesting3, "Opal").$destructure(arguments);
            Opal2.yield1(block2, item);
          };
          self4.$each.apply(self4, data);
          return self4;
          ;
        }, $Enumerable_each_entry$31.$$arity = -1);
        Opal2.def(self3, "$each_slice", $Enumerable_each_slice$33 = function $$each_slice(n) {
          var $iter2 = $Enumerable_each_slice$33.$$p, block2 = $iter2 || nil2, $$34, self4 = this;
          if ($iter2)
            $Enumerable_each_slice$33.$$p = null;
          if ($iter2)
            $Enumerable_each_slice$33.$$p = null;
          ;
          n = $$2($nesting3, "Opal").$coerce_to(n, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2(n <= 0)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "invalid slice size");
          }
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each_slice", n], ($$34 = function() {
              var self5 = $$34.$$s || this;
              if ($truthy2(self5["$respond_to?"]("size"))) {
                return $rb_divide(self5.$size(), n).$ceil();
              } else {
                return nil2;
              }
            }, $$34.$$s = self4, $$34.$$arity = 0, $$34));
          }
          ;
          var result2, slice = [];
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments);
            slice.push(param);
            if (slice.length === n) {
              Opal2.yield1(block2, slice);
              slice = [];
            }
          };
          self4.$each();
          if (result2 !== void 0) {
            return result2;
          }
          if (slice.length > 0) {
            Opal2.yield1(block2, slice);
          }
          ;
          return nil2;
        }, $Enumerable_each_slice$33.$$arity = 1);
        Opal2.def(self3, "$each_with_index", $Enumerable_each_with_index$35 = function $$each_with_index($a2) {
          var $iter2 = $Enumerable_each_with_index$35.$$p, block2 = $iter2 || nil2, $post_args2, args2, $$36, self4 = this;
          if ($iter2)
            $Enumerable_each_with_index$35.$$p = null;
          if ($iter2)
            $Enumerable_each_with_index$35.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each_with_index"].concat(Opal2.to_a(args2)), ($$36 = function() {
              var self5 = $$36.$$s || this;
              return self5.$enumerator_size();
            }, $$36.$$s = self4, $$36.$$arity = 0, $$36));
          }
          ;
          var result2, index = 0;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments);
            block2(param, index);
            index++;
          };
          self4.$each.apply(self4, args2);
          if (result2 !== void 0) {
            return result2;
          }
          ;
          return self4;
        }, $Enumerable_each_with_index$35.$$arity = -1);
        Opal2.def(self3, "$each_with_object", $Enumerable_each_with_object$37 = function $$each_with_object(object) {
          var $iter2 = $Enumerable_each_with_object$37.$$p, block2 = $iter2 || nil2, $$38, self4 = this;
          if ($iter2)
            $Enumerable_each_with_object$37.$$p = null;
          if ($iter2)
            $Enumerable_each_with_object$37.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each_with_object", object], ($$38 = function() {
              var self5 = $$38.$$s || this;
              return self5.$enumerator_size();
            }, $$38.$$s = self4, $$38.$$arity = 0, $$38));
          }
          ;
          var result2;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments);
            block2(param, object);
          };
          self4.$each();
          if (result2 !== void 0) {
            return result2;
          }
          ;
          return object;
        }, $Enumerable_each_with_object$37.$$arity = 1);
        Opal2.def(self3, "$entries", $Enumerable_entries$39 = function $$entries($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          var result2 = [];
          self4.$each.$$p = function() {
            result2.push($$2($nesting3, "Opal").$destructure(arguments));
          };
          self4.$each.apply(self4, args2);
          return result2;
          ;
        }, $Enumerable_entries$39.$$arity = -1);
        Opal2.alias(self3, "find", "detect");
        Opal2.def(self3, "$find_all", $Enumerable_find_all$40 = function $$find_all() {
          var $iter2 = $Enumerable_find_all$40.$$p, block2 = $iter2 || nil2, $$41, self4 = this;
          if ($iter2)
            $Enumerable_find_all$40.$$p = null;
          if ($iter2)
            $Enumerable_find_all$40.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["find_all"], ($$41 = function() {
              var self5 = $$41.$$s || this;
              return self5.$enumerator_size();
            }, $$41.$$s = self4, $$41.$$arity = 0, $$41));
          }
          ;
          var result2 = [];
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value = Opal2.yield1(block2, param);
            if ($truthy2(value)) {
              result2.push(param);
            }
          };
          self4.$each();
          return result2;
          ;
        }, $Enumerable_find_all$40.$$arity = 0);
        Opal2.def(self3, "$find_index", $Enumerable_find_index$42 = function $$find_index(object) {
          try {
            var $iter2 = $Enumerable_find_index$42.$$p, block2 = $iter2 || nil2, $$43, $$44, self4 = this, index = nil2;
            if ($iter2)
              $Enumerable_find_index$42.$$p = null;
            if ($iter2)
              $Enumerable_find_index$42.$$p = null;
            ;
            ;
            if ($truthy2(object === void 0 && block2 === nil2)) {
              return self4.$enum_for("find_index");
            }
            ;
            if (object != null && block2 !== nil2) {
              self4.$warn("warning: given block not used");
            }
            ;
            index = 0;
            if ($truthy2(object != null)) {
              $send2(self4, "each", [], ($$43 = function($a2) {
                var self5 = $$43.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($$2($nesting3, "Opal").$destructure(value)["$=="](object)) {
                  Opal2.ret(index);
                }
                ;
                return index += 1;
                ;
              }, $$43.$$s = self4, $$43.$$arity = -1, $$43));
            } else {
              $send2(self4, "each", [], ($$44 = function($a2) {
                var self5 = $$44.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2(Opal2.yieldX(block2, Opal2.to_a(value)))) {
                  Opal2.ret(index);
                }
                ;
                return index += 1;
                ;
              }, $$44.$$s = self4, $$44.$$arity = -1, $$44));
            }
            ;
            return nil2;
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_find_index$42.$$arity = -1);
        Opal2.def(self3, "$first", $Enumerable_first$45 = function $$first(number) {
          try {
            var $$46, $$472, self4 = this, result2 = nil2, current = nil2;
            ;
            if ($truthy2(number === void 0)) {
              return $send2(self4, "each", [], ($$46 = function(value) {
                var self5 = $$46.$$s || this;
                if (value == null) {
                  value = nil2;
                }
                ;
                Opal2.ret(value);
              }, $$46.$$s = self4, $$46.$$arity = 1, $$46));
            } else {
              result2 = [];
              number = $$2($nesting3, "Opal").$coerce_to(number, $$2($nesting3, "Integer"), "to_int");
              if ($truthy2(number < 0)) {
                self4.$raise($$2($nesting3, "ArgumentError"), "attempt to take negative size");
              }
              ;
              if ($truthy2(number == 0)) {
                return [];
              }
              ;
              current = 0;
              $send2(self4, "each", [], ($$472 = function($a2) {
                var self5 = $$472.$$s || this, $post_args2, args2;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                result2.push($$2($nesting3, "Opal").$destructure(args2));
                if ($truthy2(number <= ++current)) {
                  Opal2.ret(result2);
                } else {
                  return nil2;
                }
                ;
              }, $$472.$$s = self4, $$472.$$arity = -1, $$472));
              return result2;
            }
            ;
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_first$45.$$arity = -1);
        Opal2.alias(self3, "flat_map", "collect_concat");
        Opal2.def(self3, "$grep", $Enumerable_grep$48 = function $$grep(pattern) {
          var $iter2 = $Enumerable_grep$48.$$p, block2 = $iter2 || nil2, $$49, self4 = this, result2 = nil2;
          if ($iter2)
            $Enumerable_grep$48.$$p = null;
          if ($iter2)
            $Enumerable_grep$48.$$p = null;
          ;
          result2 = [];
          $send2(self4, "each", [], ($$49 = function($a2) {
            var self5 = $$49.$$s || this, $post_args2, value, cmp = nil2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            value = $post_args2;
            ;
            cmp = comparableForPattern(value);
            if ($truthy2($send2(pattern, "__send__", ["==="].concat(Opal2.to_a(cmp))))) {
            } else {
              return nil2;
            }
            ;
            if (block2 !== nil2) {
              if ($truthy2($rb_gt2(value.$length(), 1))) {
                value = [value];
              }
              ;
              value = Opal2.yieldX(block2, Opal2.to_a(value));
            } else if ($truthy2($rb_le(value.$length(), 1))) {
              value = value["$[]"](0);
            }
            ;
            return result2.$push(value);
          }, $$49.$$s = self4, $$49.$$arity = -1, $$49));
          return result2;
        }, $Enumerable_grep$48.$$arity = 1);
        Opal2.def(self3, "$grep_v", $Enumerable_grep_v$50 = function $$grep_v(pattern) {
          var $iter2 = $Enumerable_grep_v$50.$$p, block2 = $iter2 || nil2, $$51, self4 = this, result2 = nil2;
          if ($iter2)
            $Enumerable_grep_v$50.$$p = null;
          if ($iter2)
            $Enumerable_grep_v$50.$$p = null;
          ;
          result2 = [];
          $send2(self4, "each", [], ($$51 = function($a2) {
            var self5 = $$51.$$s || this, $post_args2, value, cmp = nil2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            value = $post_args2;
            ;
            cmp = comparableForPattern(value);
            if ($truthy2($send2(pattern, "__send__", ["==="].concat(Opal2.to_a(cmp))))) {
              return nil2;
            }
            ;
            if (block2 !== nil2) {
              if ($truthy2($rb_gt2(value.$length(), 1))) {
                value = [value];
              }
              ;
              value = Opal2.yieldX(block2, Opal2.to_a(value));
            } else if ($truthy2($rb_le(value.$length(), 1))) {
              value = value["$[]"](0);
            }
            ;
            return result2.$push(value);
          }, $$51.$$s = self4, $$51.$$arity = -1, $$51));
          return result2;
        }, $Enumerable_grep_v$50.$$arity = 1);
        Opal2.def(self3, "$group_by", $Enumerable_group_by$52 = function $$group_by() {
          var $iter2 = $Enumerable_group_by$52.$$p, block2 = $iter2 || nil2, $$53, $a2, self4 = this, hash = nil2, $writer = nil2;
          if ($iter2)
            $Enumerable_group_by$52.$$p = null;
          if ($iter2)
            $Enumerable_group_by$52.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["group_by"], ($$53 = function() {
              var self5 = $$53.$$s || this;
              return self5.$enumerator_size();
            }, $$53.$$s = self4, $$53.$$arity = 0, $$53));
          }
          ;
          hash = $hash22([], {});
          var result2;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value = Opal2.yield1(block2, param);
            ($truthy2($a2 = hash["$[]"](value)) ? $a2 : ($writer = [value, []], $send2(hash, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))["$<<"](param);
          };
          self4.$each();
          if (result2 !== void 0) {
            return result2;
          }
          ;
          return hash;
        }, $Enumerable_group_by$52.$$arity = 0);
        Opal2.def(self3, "$include?", $Enumerable_include$ques$54 = function(obj) {
          try {
            var $$55, self4 = this;
            $send2(self4, "each", [], ($$55 = function($a2) {
              var self5 = $$55.$$s || this, $post_args2, args2;
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              args2 = $post_args2;
              ;
              if ($$2($nesting3, "Opal").$destructure(args2)["$=="](obj)) {
                Opal2.ret(true);
              } else {
                return nil2;
              }
              ;
            }, $$55.$$s = self4, $$55.$$arity = -1, $$55));
            return false;
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_include$ques$54.$$arity = 1);
        Opal2.def(self3, "$inject", $Enumerable_inject$56 = function $$inject(object, sym) {
          var $iter2 = $Enumerable_inject$56.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Enumerable_inject$56.$$p = null;
          if ($iter2)
            $Enumerable_inject$56.$$p = null;
          ;
          ;
          ;
          var result2 = object;
          if (block2 !== nil2 && sym === void 0) {
            self4.$each.$$p = function() {
              var value = $$2($nesting3, "Opal").$destructure(arguments);
              if (result2 === void 0) {
                result2 = value;
                return;
              }
              value = Opal2.yieldX(block2, [result2, value]);
              result2 = value;
            };
          } else {
            if (sym === void 0) {
              if (!$$2($nesting3, "Symbol")["$==="](object)) {
                self4.$raise($$2($nesting3, "TypeError"), "" + object.$inspect() + " is not a Symbol");
              }
              sym = object;
              result2 = void 0;
            }
            self4.$each.$$p = function() {
              var value = $$2($nesting3, "Opal").$destructure(arguments);
              if (result2 === void 0) {
                result2 = value;
                return;
              }
              result2 = result2.$__send__(sym, value);
            };
          }
          self4.$each();
          return result2 == void 0 ? nil2 : result2;
          ;
        }, $Enumerable_inject$56.$$arity = -1);
        Opal2.def(self3, "$lazy", $Enumerable_lazy$57 = function $$lazy() {
          var $$58, self4 = this;
          return $send2($$$2($$2($nesting3, "Enumerator"), "Lazy"), "new", [self4, self4.$enumerator_size()], ($$58 = function(enum$, $a2) {
            var self5 = $$58.$$s || this, $post_args2, args2;
            if (enum$ == null) {
              enum$ = nil2;
            }
            ;
            $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
            args2 = $post_args2;
            ;
            return $send2(enum$, "yield", Opal2.to_a(args2));
          }, $$58.$$s = self4, $$58.$$arity = -2, $$58));
        }, $Enumerable_lazy$57.$$arity = 0);
        Opal2.def(self3, "$enumerator_size", $Enumerable_enumerator_size$59 = function $$enumerator_size() {
          var self4 = this;
          if ($truthy2(self4["$respond_to?"]("size"))) {
            return self4.$size();
          } else {
            return nil2;
          }
        }, $Enumerable_enumerator_size$59.$$arity = 0);
        Opal2.alias(self3, "map", "collect");
        Opal2.def(self3, "$max", $Enumerable_max$60 = function $$max(n) {
          var $iter2 = $Enumerable_max$60.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Enumerable_max$60.$$p = null;
          if ($iter2)
            $Enumerable_max$60.$$p = null;
          ;
          ;
          if (n === void 0 || n === nil2) {
            var result2, value;
            self4.$each.$$p = function() {
              var item = $$2($nesting3, "Opal").$destructure(arguments);
              if (result2 === void 0) {
                result2 = item;
                return;
              }
              if (block2 !== nil2) {
                value = Opal2.yieldX(block2, [item, result2]);
              } else {
                value = item["$<=>"](result2);
              }
              if (value === nil2) {
                self4.$raise($$2($nesting3, "ArgumentError"), "comparison failed");
              }
              if (value > 0) {
                result2 = item;
              }
            };
            self4.$each();
            if (result2 === void 0) {
              return nil2;
            } else {
              return result2;
            }
          }
          ;
          n = $$2($nesting3, "Opal").$coerce_to(n, $$2($nesting3, "Integer"), "to_int");
          return $send2(self4, "sort", [], block2.$to_proc()).$reverse().$first(n);
        }, $Enumerable_max$60.$$arity = -1);
        Opal2.def(self3, "$max_by", $Enumerable_max_by$61 = function $$max_by() {
          var $iter2 = $Enumerable_max_by$61.$$p, block2 = $iter2 || nil2, $$62, self4 = this;
          if ($iter2)
            $Enumerable_max_by$61.$$p = null;
          if ($iter2)
            $Enumerable_max_by$61.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["max_by"], ($$62 = function() {
              var self5 = $$62.$$s || this;
              return self5.$enumerator_size();
            }, $$62.$$s = self4, $$62.$$arity = 0, $$62));
          }
          ;
          var result2, by;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value = Opal2.yield1(block2, param);
            if (result2 === void 0) {
              result2 = param;
              by = value;
              return;
            }
            if (value["$<=>"](by) > 0) {
              result2 = param;
              by = value;
            }
          };
          self4.$each();
          return result2 === void 0 ? nil2 : result2;
          ;
        }, $Enumerable_max_by$61.$$arity = 0);
        Opal2.alias(self3, "member?", "include?");
        Opal2.def(self3, "$min", $Enumerable_min$63 = function $$min() {
          var $iter2 = $Enumerable_min$63.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Enumerable_min$63.$$p = null;
          if ($iter2)
            $Enumerable_min$63.$$p = null;
          ;
          var result2;
          if (block2 !== nil2) {
            self4.$each.$$p = function() {
              var param = $$2($nesting3, "Opal").$destructure(arguments);
              if (result2 === void 0) {
                result2 = param;
                return;
              }
              var value = block2(param, result2);
              if (value === nil2) {
                self4.$raise($$2($nesting3, "ArgumentError"), "comparison failed");
              }
              if (value < 0) {
                result2 = param;
              }
            };
          } else {
            self4.$each.$$p = function() {
              var param = $$2($nesting3, "Opal").$destructure(arguments);
              if (result2 === void 0) {
                result2 = param;
                return;
              }
              if ($$2($nesting3, "Opal").$compare(param, result2) < 0) {
                result2 = param;
              }
            };
          }
          self4.$each();
          return result2 === void 0 ? nil2 : result2;
          ;
        }, $Enumerable_min$63.$$arity = 0);
        Opal2.def(self3, "$min_by", $Enumerable_min_by$64 = function $$min_by() {
          var $iter2 = $Enumerable_min_by$64.$$p, block2 = $iter2 || nil2, $$65, self4 = this;
          if ($iter2)
            $Enumerable_min_by$64.$$p = null;
          if ($iter2)
            $Enumerable_min_by$64.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["min_by"], ($$65 = function() {
              var self5 = $$65.$$s || this;
              return self5.$enumerator_size();
            }, $$65.$$s = self4, $$65.$$arity = 0, $$65));
          }
          ;
          var result2, by;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value = Opal2.yield1(block2, param);
            if (result2 === void 0) {
              result2 = param;
              by = value;
              return;
            }
            if (value["$<=>"](by) < 0) {
              result2 = param;
              by = value;
            }
          };
          self4.$each();
          return result2 === void 0 ? nil2 : result2;
          ;
        }, $Enumerable_min_by$64.$$arity = 0);
        Opal2.def(self3, "$minmax", $Enumerable_minmax$66 = function $$minmax() {
          var $iter2 = $Enumerable_minmax$66.$$p, block2 = $iter2 || nil2, $a2, $$67, self4 = this;
          if ($iter2)
            $Enumerable_minmax$66.$$p = null;
          if ($iter2)
            $Enumerable_minmax$66.$$p = null;
          ;
          block2 = $truthy2($a2 = block2) ? $a2 : $send2(self4, "proc", [], ($$67 = function(a, b) {
            var self5 = $$67.$$s || this;
            if (a == null) {
              a = nil2;
            }
            ;
            if (b == null) {
              b = nil2;
            }
            ;
            return a["$<=>"](b);
          }, $$67.$$s = self4, $$67.$$arity = 2, $$67));
          var min = nil2, max = nil2, first_time = true;
          self4.$each.$$p = function() {
            var element = $$2($nesting3, "Opal").$destructure(arguments);
            if (first_time) {
              min = max = element;
              first_time = false;
            } else {
              var min_cmp = block2.$call(min, element);
              if (min_cmp === nil2) {
                self4.$raise($$2($nesting3, "ArgumentError"), "comparison failed");
              } else if (min_cmp > 0) {
                min = element;
              }
              var max_cmp = block2.$call(max, element);
              if (max_cmp === nil2) {
                self4.$raise($$2($nesting3, "ArgumentError"), "comparison failed");
              } else if (max_cmp < 0) {
                max = element;
              }
            }
          };
          self4.$each();
          return [min, max];
          ;
        }, $Enumerable_minmax$66.$$arity = 0);
        Opal2.def(self3, "$minmax_by", $Enumerable_minmax_by$68 = function $$minmax_by() {
          var $iter2 = $Enumerable_minmax_by$68.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Enumerable_minmax_by$68.$$p = null;
          if ($iter2)
            $Enumerable_minmax_by$68.$$p = null;
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"));
        }, $Enumerable_minmax_by$68.$$arity = 0);
        Opal2.def(self3, "$none?", $Enumerable_none$ques$69 = function(pattern) {
          try {
            var $iter2 = $Enumerable_none$ques$69.$$p, block2 = $iter2 || nil2, $$70, $$71, $$72, self4 = this;
            if ($iter2)
              $Enumerable_none$ques$69.$$p = null;
            if ($iter2)
              $Enumerable_none$ques$69.$$p = null;
            ;
            ;
            if ($truthy2(pattern !== void 0)) {
              $send2(self4, "each", [], ($$70 = function($a2) {
                var self5 = $$70.$$s || this, $post_args2, value, comparable = nil2;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                comparable = comparableForPattern(value);
                if ($truthy2($send2(pattern, "public_send", ["==="].concat(Opal2.to_a(comparable))))) {
                  Opal2.ret(false);
                } else {
                  return nil2;
                }
                ;
              }, $$70.$$s = self4, $$70.$$arity = -1, $$70));
            } else if (block2 !== nil2) {
              $send2(self4, "each", [], ($$71 = function($a2) {
                var self5 = $$71.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2(Opal2.yieldX(block2, Opal2.to_a(value)))) {
                  Opal2.ret(false);
                } else {
                  return nil2;
                }
                ;
              }, $$71.$$s = self4, $$71.$$arity = -1, $$71));
            } else {
              $send2(self4, "each", [], ($$72 = function($a2) {
                var self5 = $$72.$$s || this, $post_args2, value, item = nil2;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                item = $$2($nesting3, "Opal").$destructure(value);
                if ($truthy2(item)) {
                  Opal2.ret(false);
                } else {
                  return nil2;
                }
                ;
              }, $$72.$$s = self4, $$72.$$arity = -1, $$72));
            }
            ;
            return true;
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_none$ques$69.$$arity = -1);
        Opal2.def(self3, "$one?", $Enumerable_one$ques$73 = function(pattern) {
          try {
            var $iter2 = $Enumerable_one$ques$73.$$p, block2 = $iter2 || nil2, $$74, $$75, $$76, self4 = this, count = nil2;
            if ($iter2)
              $Enumerable_one$ques$73.$$p = null;
            if ($iter2)
              $Enumerable_one$ques$73.$$p = null;
            ;
            ;
            count = 0;
            if ($truthy2(pattern !== void 0)) {
              $send2(self4, "each", [], ($$74 = function($a2) {
                var self5 = $$74.$$s || this, $post_args2, value, comparable = nil2;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                comparable = comparableForPattern(value);
                if ($truthy2($send2(pattern, "public_send", ["==="].concat(Opal2.to_a(comparable))))) {
                  count = $rb_plus(count, 1);
                  if ($truthy2($rb_gt2(count, 1))) {
                    Opal2.ret(false);
                  } else {
                    return nil2;
                  }
                  ;
                } else {
                  return nil2;
                }
                ;
              }, $$74.$$s = self4, $$74.$$arity = -1, $$74));
            } else if (block2 !== nil2) {
              $send2(self4, "each", [], ($$75 = function($a2) {
                var self5 = $$75.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2(Opal2.yieldX(block2, Opal2.to_a(value)))) {
                } else {
                  return nil2;
                }
                ;
                count = $rb_plus(count, 1);
                if ($truthy2($rb_gt2(count, 1))) {
                  Opal2.ret(false);
                } else {
                  return nil2;
                }
                ;
              }, $$75.$$s = self4, $$75.$$arity = -1, $$75));
            } else {
              $send2(self4, "each", [], ($$76 = function($a2) {
                var self5 = $$76.$$s || this, $post_args2, value;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                if ($truthy2($$2($nesting3, "Opal").$destructure(value))) {
                } else {
                  return nil2;
                }
                ;
                count = $rb_plus(count, 1);
                if ($truthy2($rb_gt2(count, 1))) {
                  Opal2.ret(false);
                } else {
                  return nil2;
                }
                ;
              }, $$76.$$s = self4, $$76.$$arity = -1, $$76));
            }
            ;
            return count["$=="](1);
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_one$ques$73.$$arity = -1);
        Opal2.def(self3, "$partition", $Enumerable_partition$77 = function $$partition() {
          var $iter2 = $Enumerable_partition$77.$$p, block2 = $iter2 || nil2, $$78, self4 = this;
          if ($iter2)
            $Enumerable_partition$77.$$p = null;
          if ($iter2)
            $Enumerable_partition$77.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["partition"], ($$78 = function() {
              var self5 = $$78.$$s || this;
              return self5.$enumerator_size();
            }, $$78.$$s = self4, $$78.$$arity = 0, $$78));
          }
          ;
          var truthy = [], falsy = [], result2;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value = Opal2.yield1(block2, param);
            if ($truthy2(value)) {
              truthy.push(param);
            } else {
              falsy.push(param);
            }
          };
          self4.$each();
          return [truthy, falsy];
          ;
        }, $Enumerable_partition$77.$$arity = 0);
        Opal2.alias(self3, "reduce", "inject");
        Opal2.def(self3, "$reject", $Enumerable_reject$79 = function $$reject() {
          var $iter2 = $Enumerable_reject$79.$$p, block2 = $iter2 || nil2, $$80, self4 = this;
          if ($iter2)
            $Enumerable_reject$79.$$p = null;
          if ($iter2)
            $Enumerable_reject$79.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["reject"], ($$80 = function() {
              var self5 = $$80.$$s || this;
              return self5.$enumerator_size();
            }, $$80.$$s = self4, $$80.$$arity = 0, $$80));
          }
          ;
          var result2 = [];
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value = Opal2.yield1(block2, param);
            if ($falsy(value)) {
              result2.push(param);
            }
          };
          self4.$each();
          return result2;
          ;
        }, $Enumerable_reject$79.$$arity = 0);
        Opal2.def(self3, "$reverse_each", $Enumerable_reverse_each$81 = function $$reverse_each() {
          var $iter2 = $Enumerable_reverse_each$81.$$p, block2 = $iter2 || nil2, $$82, self4 = this;
          if ($iter2)
            $Enumerable_reverse_each$81.$$p = null;
          if ($iter2)
            $Enumerable_reverse_each$81.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["reverse_each"], ($$82 = function() {
              var self5 = $$82.$$s || this;
              return self5.$enumerator_size();
            }, $$82.$$s = self4, $$82.$$arity = 0, $$82));
          }
          ;
          var result2 = [];
          self4.$each.$$p = function() {
            result2.push(arguments);
          };
          self4.$each();
          for (var i = result2.length - 1; i >= 0; i--) {
            Opal2.yieldX(block2, result2[i]);
          }
          return result2;
          ;
        }, $Enumerable_reverse_each$81.$$arity = 0);
        Opal2.alias(self3, "select", "find_all");
        Opal2.def(self3, "$slice_before", $Enumerable_slice_before$83 = function $$slice_before(pattern) {
          var $iter2 = $Enumerable_slice_before$83.$$p, block2 = $iter2 || nil2, $$84, self4 = this;
          if ($iter2)
            $Enumerable_slice_before$83.$$p = null;
          if ($iter2)
            $Enumerable_slice_before$83.$$p = null;
          ;
          ;
          if ($truthy2(pattern === void 0 && block2 === nil2)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "both pattern and block are given");
          }
          ;
          if ($truthy2(pattern !== void 0 && block2 !== nil2 || arguments.length > 1)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + arguments.length + " expected 1)");
          }
          ;
          return $send2($$2($nesting3, "Enumerator"), "new", [], ($$84 = function(e) {
            var self5 = $$84.$$s || this;
            if (e == null) {
              e = nil2;
            }
            ;
            var slice = [];
            if (block2 !== nil2) {
              if (pattern === void 0) {
                self5.$each.$$p = function() {
                  var param = $$2($nesting3, "Opal").$destructure(arguments), value = Opal2.yield1(block2, param);
                  if ($truthy2(value) && slice.length > 0) {
                    e["$<<"](slice);
                    slice = [];
                  }
                  slice.push(param);
                };
              } else {
                self5.$each.$$p = function() {
                  var param = $$2($nesting3, "Opal").$destructure(arguments), value = block2(param, pattern.$dup());
                  if ($truthy2(value) && slice.length > 0) {
                    e["$<<"](slice);
                    slice = [];
                  }
                  slice.push(param);
                };
              }
            } else {
              self5.$each.$$p = function() {
                var param = $$2($nesting3, "Opal").$destructure(arguments), value = pattern["$==="](param);
                if ($truthy2(value) && slice.length > 0) {
                  e["$<<"](slice);
                  slice = [];
                }
                slice.push(param);
              };
            }
            self5.$each();
            if (slice.length > 0) {
              e["$<<"](slice);
            }
            ;
          }, $$84.$$s = self4, $$84.$$arity = 1, $$84));
        }, $Enumerable_slice_before$83.$$arity = -1);
        Opal2.def(self3, "$slice_after", $Enumerable_slice_after$85 = function $$slice_after(pattern) {
          var $iter2 = $Enumerable_slice_after$85.$$p, block2 = $iter2 || nil2, $$86, $$87, self4 = this;
          if ($iter2)
            $Enumerable_slice_after$85.$$p = null;
          if ($iter2)
            $Enumerable_slice_after$85.$$p = null;
          ;
          ;
          if ($truthy2(pattern === void 0 && block2 === nil2)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "both pattern and block are given");
          }
          ;
          if ($truthy2(pattern !== void 0 && block2 !== nil2 || arguments.length > 1)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + arguments.length + " expected 1)");
          }
          ;
          if ($truthy2(pattern !== void 0)) {
            block2 = $send2(self4, "proc", [], ($$86 = function(e) {
              var self5 = $$86.$$s || this;
              if (e == null) {
                e = nil2;
              }
              ;
              return pattern["$==="](e);
            }, $$86.$$s = self4, $$86.$$arity = 1, $$86));
          }
          ;
          return $send2($$2($nesting3, "Enumerator"), "new", [], ($$87 = function(yielder) {
            var self5 = $$87.$$s || this;
            if (yielder == null) {
              yielder = nil2;
            }
            ;
            var accumulate;
            self5.$each.$$p = function() {
              var element = $$2($nesting3, "Opal").$destructure(arguments), end_chunk = Opal2.yield1(block2, element);
              if (accumulate == null) {
                accumulate = [];
              }
              if ($truthy2(end_chunk)) {
                accumulate.push(element);
                yielder.$yield(accumulate);
                accumulate = null;
              } else {
                accumulate.push(element);
              }
            };
            self5.$each();
            if (accumulate != null) {
              yielder.$yield(accumulate);
            }
            ;
          }, $$87.$$s = self4, $$87.$$arity = 1, $$87));
        }, $Enumerable_slice_after$85.$$arity = -1);
        Opal2.def(self3, "$slice_when", $Enumerable_slice_when$88 = function $$slice_when() {
          var $iter2 = $Enumerable_slice_when$88.$$p, block2 = $iter2 || nil2, $$89, self4 = this;
          if ($iter2)
            $Enumerable_slice_when$88.$$p = null;
          if ($iter2)
            $Enumerable_slice_when$88.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (0 for 1)");
          }
          ;
          return $send2($$2($nesting3, "Enumerator"), "new", [], ($$89 = function(yielder) {
            var self5 = $$89.$$s || this;
            if (yielder == null) {
              yielder = nil2;
            }
            ;
            var slice = nil2, last_after = nil2;
            self5.$each_cons.$$p = function() {
              var params = $$2($nesting3, "Opal").$destructure(arguments), before = params[0], after = params[1], match = Opal2.yieldX(block2, [before, after]);
              last_after = after;
              if (slice === nil2) {
                slice = [];
              }
              if ($truthy2(match)) {
                slice.push(before);
                yielder.$yield(slice);
                slice = [];
              } else {
                slice.push(before);
              }
            };
            self5.$each_cons(2);
            if (slice !== nil2) {
              slice.push(last_after);
              yielder.$yield(slice);
            }
            ;
          }, $$89.$$s = self4, $$89.$$arity = 1, $$89));
        }, $Enumerable_slice_when$88.$$arity = 0);
        Opal2.def(self3, "$sort", $Enumerable_sort$90 = function $$sort() {
          var $iter2 = $Enumerable_sort$90.$$p, block2 = $iter2 || nil2, $$91, self4 = this, ary = nil2;
          if ($iter2)
            $Enumerable_sort$90.$$p = null;
          if ($iter2)
            $Enumerable_sort$90.$$p = null;
          ;
          ary = self4.$to_a();
          if (block2 !== nil2) {
          } else {
            block2 = $lambda2(($$91 = function(a, b) {
              var self5 = $$91.$$s || this;
              if (a == null) {
                a = nil2;
              }
              ;
              if (b == null) {
                b = nil2;
              }
              ;
              return a["$<=>"](b);
            }, $$91.$$s = self4, $$91.$$arity = 2, $$91));
          }
          ;
          return $send2(ary, "sort", [], block2.$to_proc());
        }, $Enumerable_sort$90.$$arity = 0);
        Opal2.def(self3, "$sort_by", $Enumerable_sort_by$92 = function $$sort_by() {
          var $iter2 = $Enumerable_sort_by$92.$$p, block2 = $iter2 || nil2, $$93, $$94, $$95, $$96, self4 = this, dup = nil2;
          if ($iter2)
            $Enumerable_sort_by$92.$$p = null;
          if ($iter2)
            $Enumerable_sort_by$92.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["sort_by"], ($$93 = function() {
              var self5 = $$93.$$s || this;
              return self5.$enumerator_size();
            }, $$93.$$s = self4, $$93.$$arity = 0, $$93));
          }
          ;
          dup = $send2(self4, "map", [], ($$94 = function() {
            var self5 = $$94.$$s || this, arg = nil2;
            arg = $$2($nesting3, "Opal").$destructure(arguments);
            return [Opal2.yield1(block2, arg), arg];
          }, $$94.$$s = self4, $$94.$$arity = 0, $$94));
          $send2(dup, "sort!", [], ($$95 = function(a, b) {
            var self5 = $$95.$$s || this;
            if (a == null) {
              a = nil2;
            }
            ;
            if (b == null) {
              b = nil2;
            }
            ;
            return a[0]["$<=>"](b[0]);
          }, $$95.$$s = self4, $$95.$$arity = 2, $$95));
          return $send2(dup, "map!", [], ($$96 = function(i) {
            var self5 = $$96.$$s || this;
            if (i == null) {
              i = nil2;
            }
            ;
            return i[1];
            ;
          }, $$96.$$s = self4, $$96.$$arity = 1, $$96));
        }, $Enumerable_sort_by$92.$$arity = 0);
        Opal2.def(self3, "$sum", $Enumerable_sum$97 = function $$sum(initial) {
          var $$98, $iter2 = $Enumerable_sum$97.$$p, $yield = $iter2 || nil2, self4 = this, result2 = nil2;
          if ($iter2)
            $Enumerable_sum$97.$$p = null;
          if (initial == null) {
            initial = 0;
          }
          ;
          result2 = initial;
          $send2(self4, "each", [], ($$98 = function($a2) {
            var self5 = $$98.$$s || this, $post_args2, args2, item = nil2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            args2 = $post_args2;
            ;
            item = function() {
              if ($yield !== nil2) {
                return Opal2.yieldX($yield, Opal2.to_a(args2));
              } else {
                return $$2($nesting3, "Opal").$destructure(args2);
              }
              ;
              return nil2;
            }();
            return result2 = $rb_plus(result2, item);
          }, $$98.$$s = self4, $$98.$$arity = -1, $$98));
          return result2;
        }, $Enumerable_sum$97.$$arity = -1);
        Opal2.def(self3, "$take", $Enumerable_take$99 = function $$take(num) {
          var self4 = this;
          return self4.$first(num);
        }, $Enumerable_take$99.$$arity = 1);
        Opal2.def(self3, "$take_while", $Enumerable_take_while$100 = function $$take_while() {
          try {
            var $iter2 = $Enumerable_take_while$100.$$p, block2 = $iter2 || nil2, $$101, self4 = this, result2 = nil2;
            if ($iter2)
              $Enumerable_take_while$100.$$p = null;
            if ($iter2)
              $Enumerable_take_while$100.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              return self4.$enum_for("take_while");
            }
            ;
            result2 = [];
            return $send2(self4, "each", [], ($$101 = function($a2) {
              var self5 = $$101.$$s || this, $post_args2, args2, value = nil2;
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              args2 = $post_args2;
              ;
              value = $$2($nesting3, "Opal").$destructure(args2);
              if ($truthy2(Opal2.yield1(block2, value))) {
              } else {
                Opal2.ret(result2);
              }
              ;
              return result2.push(value);
              ;
            }, $$101.$$s = self4, $$101.$$arity = -1, $$101));
          } catch ($returner) {
            if ($returner === Opal2.returner) {
              return $returner.$v;
            }
            throw $returner;
          }
        }, $Enumerable_take_while$100.$$arity = 0);
        Opal2.def(self3, "$uniq", $Enumerable_uniq$102 = function $$uniq() {
          var $iter2 = $Enumerable_uniq$102.$$p, block2 = $iter2 || nil2, $$103, self4 = this, hash = nil2;
          if ($iter2)
            $Enumerable_uniq$102.$$p = null;
          if ($iter2)
            $Enumerable_uniq$102.$$p = null;
          ;
          hash = $hash22([], {});
          $send2(self4, "each", [], ($$103 = function($a2) {
            var self5 = $$103.$$s || this, $post_args2, args2, value = nil2, produced = nil2, $writer = nil2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            args2 = $post_args2;
            ;
            value = $$2($nesting3, "Opal").$destructure(args2);
            produced = function() {
              if (block2 !== nil2) {
                return Opal2.yield1(block2, value);
              } else {
                return value;
              }
              ;
              return nil2;
            }();
            if ($truthy2(hash["$key?"](produced))) {
              return nil2;
            } else {
              $writer = [produced, value];
              $send2(hash, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }
            ;
          }, $$103.$$s = self4, $$103.$$arity = -1, $$103));
          return hash.$values();
        }, $Enumerable_uniq$102.$$arity = 0);
        Opal2.alias(self3, "to_a", "entries");
        Opal2.def(self3, "$zip", $Enumerable_zip$104 = function $$zip($a2) {
          var $iter2 = $Enumerable_zip$104.$$p, block2 = $iter2 || nil2, $post_args2, others, self4 = this;
          if ($iter2)
            $Enumerable_zip$104.$$p = null;
          if ($iter2)
            $Enumerable_zip$104.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          others = $post_args2;
          ;
          return $send2(self4.$to_a(), "zip", Opal2.to_a(others));
        }, $Enumerable_zip$104.$$arity = -1);
      }($nesting2[0], $nesting2);
    };
    Opal.modules["corelib/enumerator"] = function(Opal2) {
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $falsy = Opal2.falsy;
      Opal2.add_stubs(["$require", "$include", "$allocate", "$new", "$to_proc", "$coerce_to", "$nil?", "$empty?", "$+", "$class", "$__send__", "$===", "$call", "$enum_for", "$size", "$destructure", "$inspect", "$any?", "$[]", "$raise", "$yield", "$each", "$enumerator_size", "$respond_to?", "$try_convert", "$<", "$for"]);
      self2.$require("corelib/enumerable");
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Enumerator");
        var $nesting3 = [self3].concat($parent_nesting2), $Enumerator_for$1, $Enumerator_initialize$2, $Enumerator_each$3, $Enumerator_size$4, $Enumerator_with_index$5, $Enumerator_inspect$7;
        self3.$$prototype.size = self3.$$prototype.args = self3.$$prototype.object = self3.$$prototype.method = nil2;
        self3.$include($$2($nesting3, "Enumerable"));
        self3.$$prototype.$$is_enumerator = true;
        Opal2.defs(self3, "$for", $Enumerator_for$1 = function(object, $a2, $b2) {
          var $iter2 = $Enumerator_for$1.$$p, block2 = $iter2 || nil2, $post_args2, method, args2, self4 = this;
          if ($iter2)
            $Enumerator_for$1.$$p = null;
          if ($iter2)
            $Enumerator_for$1.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          if ($post_args2.length > 0) {
            method = $post_args2[0];
            $post_args2.splice(0, 1);
          }
          if (method == null) {
            method = "each";
          }
          ;
          args2 = $post_args2;
          ;
          var obj = self4.$allocate();
          obj.object = object;
          obj.size = block2;
          obj.method = method;
          obj.args = args2;
          return obj;
          ;
        }, $Enumerator_for$1.$$arity = -2);
        Opal2.def(self3, "$initialize", $Enumerator_initialize$2 = function $$initialize($a2) {
          var $iter2 = $Enumerator_initialize$2.$$p, block2 = $iter2 || nil2, $post_args2, self4 = this;
          if ($iter2)
            $Enumerator_initialize$2.$$p = null;
          if ($iter2)
            $Enumerator_initialize$2.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          if ($truthy2(block2)) {
            self4.object = $send2($$2($nesting3, "Generator"), "new", [], block2.$to_proc());
            self4.method = "each";
            self4.args = [];
            self4.size = arguments[0] || nil2;
            if ($truthy2(self4.size)) {
              return self4.size = $$2($nesting3, "Opal").$coerce_to(self4.size, $$2($nesting3, "Integer"), "to_int");
            } else {
              return nil2;
            }
            ;
          } else {
            self4.object = arguments[0];
            self4.method = arguments[1] || "each";
            self4.args = $slice2.call(arguments, 2);
            return self4.size = nil2;
          }
          ;
        }, $Enumerator_initialize$2.$$arity = -1);
        Opal2.def(self3, "$each", $Enumerator_each$3 = function $$each($a2) {
          var $iter2 = $Enumerator_each$3.$$p, block2 = $iter2 || nil2, $post_args2, args2, $b2, self4 = this;
          if ($iter2)
            $Enumerator_each$3.$$p = null;
          if ($iter2)
            $Enumerator_each$3.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if ($truthy2($truthy2($b2 = block2["$nil?"]()) ? args2["$empty?"]() : $b2)) {
            return self4;
          }
          ;
          args2 = $rb_plus(self4.args, args2);
          if ($truthy2(block2["$nil?"]())) {
            return $send2(self4.$class(), "new", [self4.object, self4.method].concat(Opal2.to_a(args2)));
          }
          ;
          return $send2(self4.object, "__send__", [self4.method].concat(Opal2.to_a(args2)), block2.$to_proc());
        }, $Enumerator_each$3.$$arity = -1);
        Opal2.def(self3, "$size", $Enumerator_size$4 = function $$size() {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Proc")["$==="](self4.size))) {
            return $send2(self4.size, "call", Opal2.to_a(self4.args));
          } else {
            return self4.size;
          }
        }, $Enumerator_size$4.$$arity = 0);
        Opal2.def(self3, "$with_index", $Enumerator_with_index$5 = function $$with_index(offset) {
          var $iter2 = $Enumerator_with_index$5.$$p, block2 = $iter2 || nil2, $$6, self4 = this;
          if ($iter2)
            $Enumerator_with_index$5.$$p = null;
          if ($iter2)
            $Enumerator_with_index$5.$$p = null;
          ;
          if (offset == null) {
            offset = 0;
          }
          ;
          offset = function() {
            if ($truthy2(offset)) {
              return $$2($nesting3, "Opal").$coerce_to(offset, $$2($nesting3, "Integer"), "to_int");
            } else {
              return 0;
            }
            ;
            return nil2;
          }();
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["with_index", offset], ($$6 = function() {
              var self5 = $$6.$$s || this;
              return self5.$size();
            }, $$6.$$s = self4, $$6.$$arity = 0, $$6));
          }
          ;
          var result2, index = offset;
          self4.$each.$$p = function() {
            var param = $$2($nesting3, "Opal").$destructure(arguments), value = block2(param, index);
            index++;
            return value;
          };
          return self4.$each();
          ;
        }, $Enumerator_with_index$5.$$arity = -1);
        Opal2.alias(self3, "with_object", "each_with_object");
        Opal2.def(self3, "$inspect", $Enumerator_inspect$7 = function $$inspect() {
          var self4 = this, result2 = nil2;
          result2 = "#<" + self4.$class() + ": " + self4.object.$inspect() + ":" + self4.method;
          if ($truthy2(self4.args["$any?"]())) {
            result2 = $rb_plus(result2, "(" + self4.args.$inspect()["$[]"]($$2($nesting3, "Range").$new(1, -2)) + ")");
          }
          ;
          return $rb_plus(result2, ">");
        }, $Enumerator_inspect$7.$$arity = 0);
        (function($base3, $super3, $parent_nesting3) {
          var self4 = $klass2($base3, $super3, "Generator");
          var $nesting4 = [self4].concat($parent_nesting3), $Generator_initialize$8, $Generator_each$9;
          self4.$$prototype.block = nil2;
          self4.$include($$2($nesting4, "Enumerable"));
          Opal2.def(self4, "$initialize", $Generator_initialize$8 = function $$initialize() {
            var $iter2 = $Generator_initialize$8.$$p, block2 = $iter2 || nil2, self5 = this;
            if ($iter2)
              $Generator_initialize$8.$$p = null;
            if ($iter2)
              $Generator_initialize$8.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              self5.$raise($$2($nesting4, "LocalJumpError"), "no block given");
            }
            ;
            return self5.block = block2;
          }, $Generator_initialize$8.$$arity = 0);
          return (Opal2.def(self4, "$each", $Generator_each$9 = function $$each($a2) {
            var $iter2 = $Generator_each$9.$$p, block2 = $iter2 || nil2, $post_args2, args2, self5 = this, yielder = nil2;
            if ($iter2)
              $Generator_each$9.$$p = null;
            if ($iter2)
              $Generator_each$9.$$p = null;
            ;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            args2 = $post_args2;
            ;
            yielder = $send2($$2($nesting4, "Yielder"), "new", [], block2.$to_proc());
            try {
              args2.unshift(yielder);
              Opal2.yieldX(self5.block, args2);
            } catch (e) {
              if (e === $breaker2) {
                return $breaker2.$v;
              } else {
                throw e;
              }
            }
            ;
            return self5;
          }, $Generator_each$9.$$arity = -1), nil2) && "each";
        })($nesting3[0], null, $nesting3);
        (function($base3, $super3, $parent_nesting3) {
          var self4 = $klass2($base3, $super3, "Yielder");
          var $nesting4 = [self4].concat($parent_nesting3), $Yielder_initialize$10, $Yielder_yield$11, $Yielder_$lt$lt$12;
          self4.$$prototype.block = nil2;
          Opal2.def(self4, "$initialize", $Yielder_initialize$10 = function $$initialize() {
            var $iter2 = $Yielder_initialize$10.$$p, block2 = $iter2 || nil2, self5 = this;
            if ($iter2)
              $Yielder_initialize$10.$$p = null;
            if ($iter2)
              $Yielder_initialize$10.$$p = null;
            ;
            return self5.block = block2;
          }, $Yielder_initialize$10.$$arity = 0);
          Opal2.def(self4, "$yield", $Yielder_yield$11 = function($a2) {
            var $post_args2, values, self5 = this;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            values = $post_args2;
            ;
            var value = Opal2.yieldX(self5.block, values);
            if (value === $breaker2) {
              throw $breaker2;
            }
            return value;
            ;
          }, $Yielder_yield$11.$$arity = -1);
          return (Opal2.def(self4, "$<<", $Yielder_$lt$lt$12 = function($a2) {
            var $post_args2, values, self5 = this;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            values = $post_args2;
            ;
            $send2(self5, "yield", Opal2.to_a(values));
            return self5;
          }, $Yielder_$lt$lt$12.$$arity = -1), nil2) && "<<";
        })($nesting3[0], null, $nesting3);
        return function($base3, $super3, $parent_nesting3) {
          var self4 = $klass2($base3, $super3, "Lazy");
          var $nesting4 = [self4].concat($parent_nesting3), $Lazy_initialize$13, $Lazy_lazy$16, $Lazy_collect$17, $Lazy_collect_concat$19, $Lazy_drop$23, $Lazy_drop_while$25, $Lazy_enum_for$27, $Lazy_find_all$28, $Lazy_grep$30, $Lazy_reject$33, $Lazy_take$35, $Lazy_take_while$37, $Lazy_inspect$39;
          self4.$$prototype.enumerator = nil2;
          (function($base4, $super4, $parent_nesting4) {
            var self5 = $klass2($base4, $super4, "StopLazyError");
            var $nesting5 = [self5].concat($parent_nesting4);
            return nil2;
          })($nesting4[0], $$2($nesting4, "Exception"), $nesting4);
          Opal2.def(self4, "$initialize", $Lazy_initialize$13 = function $$initialize(object, size) {
            var $iter2 = $Lazy_initialize$13.$$p, block2 = $iter2 || nil2, $$14, self5 = this;
            if ($iter2)
              $Lazy_initialize$13.$$p = null;
            if ($iter2)
              $Lazy_initialize$13.$$p = null;
            ;
            if (size == null) {
              size = nil2;
            }
            ;
            if (block2 !== nil2) {
            } else {
              self5.$raise($$2($nesting4, "ArgumentError"), "tried to call lazy new without a block");
            }
            ;
            self5.enumerator = object;
            return $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Lazy_initialize$13, false), [size], ($$14 = function(yielder, $a2) {
              var self6 = $$14.$$s || this, $post_args2, each_args, $$15;
              if (yielder == null) {
                yielder = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              each_args = $post_args2;
              ;
              try {
                return $send2(object, "each", Opal2.to_a(each_args), ($$15 = function($b2) {
                  var self7 = $$15.$$s || this, $post_args3, args2;
                  $post_args3 = Opal2.slice.call(arguments, 0, arguments.length);
                  args2 = $post_args3;
                  ;
                  args2.unshift(yielder);
                  Opal2.yieldX(block2, args2);
                  ;
                }, $$15.$$s = self6, $$15.$$arity = -1, $$15));
              } catch ($err) {
                if (Opal2.rescue($err, [$$2($nesting4, "Exception")])) {
                  try {
                    return nil2;
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
              ;
            }, $$14.$$s = self5, $$14.$$arity = -2, $$14));
          }, $Lazy_initialize$13.$$arity = -2);
          Opal2.alias(self4, "force", "to_a");
          Opal2.def(self4, "$lazy", $Lazy_lazy$16 = function $$lazy() {
            var self5 = this;
            return self5;
          }, $Lazy_lazy$16.$$arity = 0);
          Opal2.def(self4, "$collect", $Lazy_collect$17 = function $$collect() {
            var $iter2 = $Lazy_collect$17.$$p, block2 = $iter2 || nil2, $$18, self5 = this;
            if ($iter2)
              $Lazy_collect$17.$$p = null;
            if ($iter2)
              $Lazy_collect$17.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              self5.$raise($$2($nesting4, "ArgumentError"), "tried to call lazy map without a block");
            }
            ;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, self5.$enumerator_size()], ($$18 = function(enum$, $a2) {
              var self6 = $$18.$$s || this, $post_args2, args2;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              var value = Opal2.yieldX(block2, args2);
              enum$.$yield(value);
              ;
            }, $$18.$$s = self5, $$18.$$arity = -2, $$18));
          }, $Lazy_collect$17.$$arity = 0);
          Opal2.def(self4, "$collect_concat", $Lazy_collect_concat$19 = function $$collect_concat() {
            var $iter2 = $Lazy_collect_concat$19.$$p, block2 = $iter2 || nil2, $$20, self5 = this;
            if ($iter2)
              $Lazy_collect_concat$19.$$p = null;
            if ($iter2)
              $Lazy_collect_concat$19.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              self5.$raise($$2($nesting4, "ArgumentError"), "tried to call lazy map without a block");
            }
            ;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, nil2], ($$20 = function(enum$, $a2) {
              var self6 = $$20.$$s || this, $post_args2, args2, $$21, $$22;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              var value = Opal2.yieldX(block2, args2);
              if (value["$respond_to?"]("force") && value["$respond_to?"]("each")) {
                $send2(value, "each", [], ($$21 = function(v) {
                  var self7 = $$21.$$s || this;
                  if (v == null) {
                    v = nil2;
                  }
                  ;
                  return enum$.$yield(v);
                }, $$21.$$s = self6, $$21.$$arity = 1, $$21));
              } else {
                var array = $$2($nesting4, "Opal").$try_convert(value, $$2($nesting4, "Array"), "to_ary");
                if (array === nil2) {
                  enum$.$yield(value);
                } else {
                  $send2(value, "each", [], ($$22 = function(v) {
                    var self7 = $$22.$$s || this;
                    if (v == null) {
                      v = nil2;
                    }
                    ;
                    return enum$.$yield(v);
                  }, $$22.$$s = self6, $$22.$$arity = 1, $$22));
                }
              }
              ;
            }, $$20.$$s = self5, $$20.$$arity = -2, $$20));
          }, $Lazy_collect_concat$19.$$arity = 0);
          Opal2.def(self4, "$drop", $Lazy_drop$23 = function $$drop(n) {
            var $$24, self5 = this, current_size = nil2, set_size = nil2, dropped = nil2;
            n = $$2($nesting4, "Opal").$coerce_to(n, $$2($nesting4, "Integer"), "to_int");
            if ($truthy2($rb_lt2(n, 0))) {
              self5.$raise($$2($nesting4, "ArgumentError"), "attempt to drop negative size");
            }
            ;
            current_size = self5.$enumerator_size();
            set_size = function() {
              if ($truthy2($$2($nesting4, "Integer")["$==="](current_size))) {
                if ($truthy2($rb_lt2(n, current_size))) {
                  return n;
                } else {
                  return current_size;
                }
              } else {
                return current_size;
              }
              ;
              return nil2;
            }();
            dropped = 0;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, set_size], ($$24 = function(enum$, $a2) {
              var self6 = $$24.$$s || this, $post_args2, args2;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              if ($truthy2($rb_lt2(dropped, n))) {
                return dropped = $rb_plus(dropped, 1);
              } else {
                return $send2(enum$, "yield", Opal2.to_a(args2));
              }
              ;
            }, $$24.$$s = self5, $$24.$$arity = -2, $$24));
          }, $Lazy_drop$23.$$arity = 1);
          Opal2.def(self4, "$drop_while", $Lazy_drop_while$25 = function $$drop_while() {
            var $iter2 = $Lazy_drop_while$25.$$p, block2 = $iter2 || nil2, $$26, self5 = this, succeeding = nil2;
            if ($iter2)
              $Lazy_drop_while$25.$$p = null;
            if ($iter2)
              $Lazy_drop_while$25.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              self5.$raise($$2($nesting4, "ArgumentError"), "tried to call lazy drop_while without a block");
            }
            ;
            succeeding = true;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, nil2], ($$26 = function(enum$, $a2) {
              var self6 = $$26.$$s || this, $post_args2, args2;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              if ($truthy2(succeeding)) {
                var value = Opal2.yieldX(block2, args2);
                if ($falsy(value)) {
                  succeeding = false;
                  $send2(enum$, "yield", Opal2.to_a(args2));
                }
              } else {
                return $send2(enum$, "yield", Opal2.to_a(args2));
              }
              ;
            }, $$26.$$s = self5, $$26.$$arity = -2, $$26));
          }, $Lazy_drop_while$25.$$arity = 0);
          Opal2.def(self4, "$enum_for", $Lazy_enum_for$27 = function $$enum_for($a2, $b2) {
            var $iter2 = $Lazy_enum_for$27.$$p, block2 = $iter2 || nil2, $post_args2, method, args2, self5 = this;
            if ($iter2)
              $Lazy_enum_for$27.$$p = null;
            if ($iter2)
              $Lazy_enum_for$27.$$p = null;
            ;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            if ($post_args2.length > 0) {
              method = $post_args2[0];
              $post_args2.splice(0, 1);
            }
            if (method == null) {
              method = "each";
            }
            ;
            args2 = $post_args2;
            ;
            return $send2(self5.$class(), "for", [self5, method].concat(Opal2.to_a(args2)), block2.$to_proc());
          }, $Lazy_enum_for$27.$$arity = -1);
          Opal2.def(self4, "$find_all", $Lazy_find_all$28 = function $$find_all() {
            var $iter2 = $Lazy_find_all$28.$$p, block2 = $iter2 || nil2, $$29, self5 = this;
            if ($iter2)
              $Lazy_find_all$28.$$p = null;
            if ($iter2)
              $Lazy_find_all$28.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              self5.$raise($$2($nesting4, "ArgumentError"), "tried to call lazy select without a block");
            }
            ;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, nil2], ($$29 = function(enum$, $a2) {
              var self6 = $$29.$$s || this, $post_args2, args2;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              var value = Opal2.yieldX(block2, args2);
              if ($truthy2(value)) {
                $send2(enum$, "yield", Opal2.to_a(args2));
              }
              ;
            }, $$29.$$s = self5, $$29.$$arity = -2, $$29));
          }, $Lazy_find_all$28.$$arity = 0);
          Opal2.alias(self4, "flat_map", "collect_concat");
          Opal2.def(self4, "$grep", $Lazy_grep$30 = function $$grep(pattern) {
            var $iter2 = $Lazy_grep$30.$$p, block2 = $iter2 || nil2, $$31, $$32, self5 = this;
            if ($iter2)
              $Lazy_grep$30.$$p = null;
            if ($iter2)
              $Lazy_grep$30.$$p = null;
            ;
            if ($truthy2(block2)) {
              return $send2($$2($nesting4, "Lazy"), "new", [self5, nil2], ($$31 = function(enum$, $a2) {
                var self6 = $$31.$$s || this, $post_args2, args2;
                if (enum$ == null) {
                  enum$ = nil2;
                }
                ;
                $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
                args2 = $post_args2;
                ;
                var param = $$2($nesting4, "Opal").$destructure(args2), value = pattern["$==="](param);
                if ($truthy2(value)) {
                  value = Opal2.yield1(block2, param);
                  enum$.$yield(Opal2.yield1(block2, param));
                }
                ;
              }, $$31.$$s = self5, $$31.$$arity = -2, $$31));
            } else {
              return $send2($$2($nesting4, "Lazy"), "new", [self5, nil2], ($$32 = function(enum$, $a2) {
                var self6 = $$32.$$s || this, $post_args2, args2;
                if (enum$ == null) {
                  enum$ = nil2;
                }
                ;
                $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
                args2 = $post_args2;
                ;
                var param = $$2($nesting4, "Opal").$destructure(args2), value = pattern["$==="](param);
                if ($truthy2(value)) {
                  enum$.$yield(param);
                }
                ;
              }, $$32.$$s = self5, $$32.$$arity = -2, $$32));
            }
            ;
          }, $Lazy_grep$30.$$arity = 1);
          Opal2.alias(self4, "map", "collect");
          Opal2.alias(self4, "select", "find_all");
          Opal2.def(self4, "$reject", $Lazy_reject$33 = function $$reject() {
            var $iter2 = $Lazy_reject$33.$$p, block2 = $iter2 || nil2, $$34, self5 = this;
            if ($iter2)
              $Lazy_reject$33.$$p = null;
            if ($iter2)
              $Lazy_reject$33.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              self5.$raise($$2($nesting4, "ArgumentError"), "tried to call lazy reject without a block");
            }
            ;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, nil2], ($$34 = function(enum$, $a2) {
              var self6 = $$34.$$s || this, $post_args2, args2;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              var value = Opal2.yieldX(block2, args2);
              if ($falsy(value)) {
                $send2(enum$, "yield", Opal2.to_a(args2));
              }
              ;
            }, $$34.$$s = self5, $$34.$$arity = -2, $$34));
          }, $Lazy_reject$33.$$arity = 0);
          Opal2.def(self4, "$take", $Lazy_take$35 = function $$take(n) {
            var $$36, self5 = this, current_size = nil2, set_size = nil2, taken = nil2;
            n = $$2($nesting4, "Opal").$coerce_to(n, $$2($nesting4, "Integer"), "to_int");
            if ($truthy2($rb_lt2(n, 0))) {
              self5.$raise($$2($nesting4, "ArgumentError"), "attempt to take negative size");
            }
            ;
            current_size = self5.$enumerator_size();
            set_size = function() {
              if ($truthy2($$2($nesting4, "Integer")["$==="](current_size))) {
                if ($truthy2($rb_lt2(n, current_size))) {
                  return n;
                } else {
                  return current_size;
                }
              } else {
                return current_size;
              }
              ;
              return nil2;
            }();
            taken = 0;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, set_size], ($$36 = function(enum$, $a2) {
              var self6 = $$36.$$s || this, $post_args2, args2;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              if ($truthy2($rb_lt2(taken, n))) {
                $send2(enum$, "yield", Opal2.to_a(args2));
                return taken = $rb_plus(taken, 1);
              } else {
                return self6.$raise($$2($nesting4, "StopLazyError"));
              }
              ;
            }, $$36.$$s = self5, $$36.$$arity = -2, $$36));
          }, $Lazy_take$35.$$arity = 1);
          Opal2.def(self4, "$take_while", $Lazy_take_while$37 = function $$take_while() {
            var $iter2 = $Lazy_take_while$37.$$p, block2 = $iter2 || nil2, $$38, self5 = this;
            if ($iter2)
              $Lazy_take_while$37.$$p = null;
            if ($iter2)
              $Lazy_take_while$37.$$p = null;
            ;
            if ($truthy2(block2)) {
            } else {
              self5.$raise($$2($nesting4, "ArgumentError"), "tried to call lazy take_while without a block");
            }
            ;
            return $send2($$2($nesting4, "Lazy"), "new", [self5, nil2], ($$38 = function(enum$, $a2) {
              var self6 = $$38.$$s || this, $post_args2, args2;
              if (enum$ == null) {
                enum$ = nil2;
              }
              ;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              var value = Opal2.yieldX(block2, args2);
              if ($truthy2(value)) {
                $send2(enum$, "yield", Opal2.to_a(args2));
              } else {
                self6.$raise($$2($nesting4, "StopLazyError"));
              }
              ;
            }, $$38.$$s = self5, $$38.$$arity = -2, $$38));
          }, $Lazy_take_while$37.$$arity = 0);
          Opal2.alias(self4, "to_enum", "enum_for");
          return (Opal2.def(self4, "$inspect", $Lazy_inspect$39 = function $$inspect() {
            var self5 = this;
            return "#<" + self5.$class() + ": " + self5.enumerator.$inspect() + ">";
          }, $Lazy_inspect$39.$$arity = 0), nil2) && "inspect";
        }($nesting3[0], self3, $nesting3);
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/numeric"] = function(Opal2) {
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      function $rb_times(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      function $rb_divide(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs / rhs : lhs["$/"](rhs);
      }
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2;
      Opal2.add_stubs(["$require", "$include", "$instance_of?", "$class", "$Float", "$respond_to?", "$coerce", "$__send__", "$===", "$raise", "$equal?", "$-", "$*", "$div", "$<", "$-@", "$ceil", "$to_f", "$denominator", "$to_r", "$==", "$floor", "$/", "$%", "$Complex", "$zero?", "$numerator", "$abs", "$arg", "$coerce_to!", "$round", "$to_i", "$truncate", "$>"]);
      self2.$require("corelib/comparable");
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Numeric");
        var $nesting3 = [self3].concat($parent_nesting2), $Numeric_coerce$1, $Numeric___coerced__$2, $Numeric_$lt_eq_gt$3, $Numeric_$plus$$4, $Numeric_$minus$$5, $Numeric_$percent$6, $Numeric_abs$7, $Numeric_abs2$8, $Numeric_angle$9, $Numeric_ceil$10, $Numeric_conj$11, $Numeric_denominator$12, $Numeric_div$13, $Numeric_divmod$14, $Numeric_fdiv$15, $Numeric_floor$16, $Numeric_i$17, $Numeric_imag$18, $Numeric_integer$ques$19, $Numeric_nonzero$ques$20, $Numeric_numerator$21, $Numeric_polar$22, $Numeric_quo$23, $Numeric_real$24, $Numeric_real$ques$25, $Numeric_rect$26, $Numeric_round$27, $Numeric_to_c$28, $Numeric_to_int$29, $Numeric_truncate$30, $Numeric_zero$ques$31, $Numeric_positive$ques$32, $Numeric_negative$ques$33, $Numeric_dup$34, $Numeric_clone$35, $Numeric_finite$ques$36, $Numeric_infinite$ques$37;
        self3.$include($$2($nesting3, "Comparable"));
        Opal2.def(self3, "$coerce", $Numeric_coerce$1 = function $$coerce(other) {
          var self4 = this;
          if ($truthy2(other["$instance_of?"](self4.$class()))) {
            return [other, self4];
          }
          ;
          return [self4.$Float(other), self4.$Float(self4)];
        }, $Numeric_coerce$1.$$arity = 1);
        Opal2.def(self3, "$__coerced__", $Numeric___coerced__$2 = function $$__coerced__(method, other) {
          var $a2, $b2, self4 = this, a = nil2, b = nil2, $case = nil2;
          if ($truthy2(other["$respond_to?"]("coerce"))) {
            $b2 = other.$coerce(self4), $a2 = Opal2.to_ary($b2), a = $a2[0] == null ? nil2 : $a2[0], b = $a2[1] == null ? nil2 : $a2[1], $b2;
            return a.$__send__(method, b);
          } else {
            return function() {
              $case = method;
              if ("+"["$==="]($case) || "-"["$==="]($case) || "*"["$==="]($case) || "/"["$==="]($case) || "%"["$==="]($case) || "&"["$==="]($case) || "|"["$==="]($case) || "^"["$==="]($case) || "**"["$==="]($case)) {
                return self4.$raise($$2($nesting3, "TypeError"), "" + other.$class() + " can't be coerced into Numeric");
              } else if (">"["$==="]($case) || ">="["$==="]($case) || "<"["$==="]($case) || "<="["$==="]($case) || "<=>"["$==="]($case)) {
                return self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self4.$class() + " with " + other.$class() + " failed");
              } else {
                return nil2;
              }
            }();
          }
        }, $Numeric___coerced__$2.$$arity = 2);
        Opal2.def(self3, "$<=>", $Numeric_$lt_eq_gt$3 = function(other) {
          var self4 = this;
          if ($truthy2(self4["$equal?"](other))) {
            return 0;
          }
          ;
          return nil2;
        }, $Numeric_$lt_eq_gt$3.$$arity = 1);
        Opal2.def(self3, "$+@", $Numeric_$plus$$4 = function() {
          var self4 = this;
          return self4;
        }, $Numeric_$plus$$4.$$arity = 0);
        Opal2.def(self3, "$-@", $Numeric_$minus$$5 = function() {
          var self4 = this;
          return $rb_minus(0, self4);
        }, $Numeric_$minus$$5.$$arity = 0);
        Opal2.def(self3, "$%", $Numeric_$percent$6 = function(other) {
          var self4 = this;
          return $rb_minus(self4, $rb_times(other, self4.$div(other)));
        }, $Numeric_$percent$6.$$arity = 1);
        Opal2.def(self3, "$abs", $Numeric_abs$7 = function $$abs() {
          var self4 = this;
          if ($rb_lt2(self4, 0)) {
            return self4["$-@"]();
          } else {
            return self4;
          }
        }, $Numeric_abs$7.$$arity = 0);
        Opal2.def(self3, "$abs2", $Numeric_abs2$8 = function $$abs2() {
          var self4 = this;
          return $rb_times(self4, self4);
        }, $Numeric_abs2$8.$$arity = 0);
        Opal2.def(self3, "$angle", $Numeric_angle$9 = function $$angle() {
          var self4 = this;
          if ($rb_lt2(self4, 0)) {
            return $$$2($$2($nesting3, "Math"), "PI");
          } else {
            return 0;
          }
        }, $Numeric_angle$9.$$arity = 0);
        Opal2.alias(self3, "arg", "angle");
        Opal2.def(self3, "$ceil", $Numeric_ceil$10 = function $$ceil(ndigits) {
          var self4 = this;
          if (ndigits == null) {
            ndigits = 0;
          }
          ;
          return self4.$to_f().$ceil(ndigits);
        }, $Numeric_ceil$10.$$arity = -1);
        Opal2.def(self3, "$conj", $Numeric_conj$11 = function $$conj() {
          var self4 = this;
          return self4;
        }, $Numeric_conj$11.$$arity = 0);
        Opal2.alias(self3, "conjugate", "conj");
        Opal2.def(self3, "$denominator", $Numeric_denominator$12 = function $$denominator() {
          var self4 = this;
          return self4.$to_r().$denominator();
        }, $Numeric_denominator$12.$$arity = 0);
        Opal2.def(self3, "$div", $Numeric_div$13 = function $$div(other) {
          var self4 = this;
          if (other["$=="](0)) {
            self4.$raise($$2($nesting3, "ZeroDivisionError"), "divided by o");
          }
          ;
          return $rb_divide(self4, other).$floor();
        }, $Numeric_div$13.$$arity = 1);
        Opal2.def(self3, "$divmod", $Numeric_divmod$14 = function $$divmod(other) {
          var self4 = this;
          return [self4.$div(other), self4["$%"](other)];
        }, $Numeric_divmod$14.$$arity = 1);
        Opal2.def(self3, "$fdiv", $Numeric_fdiv$15 = function $$fdiv(other) {
          var self4 = this;
          return $rb_divide(self4.$to_f(), other);
        }, $Numeric_fdiv$15.$$arity = 1);
        Opal2.def(self3, "$floor", $Numeric_floor$16 = function $$floor(ndigits) {
          var self4 = this;
          if (ndigits == null) {
            ndigits = 0;
          }
          ;
          return self4.$to_f().$floor(ndigits);
        }, $Numeric_floor$16.$$arity = -1);
        Opal2.def(self3, "$i", $Numeric_i$17 = function $$i() {
          var self4 = this;
          return self4.$Complex(0, self4);
        }, $Numeric_i$17.$$arity = 0);
        Opal2.def(self3, "$imag", $Numeric_imag$18 = function $$imag() {
          var self4 = this;
          return 0;
        }, $Numeric_imag$18.$$arity = 0);
        Opal2.alias(self3, "imaginary", "imag");
        Opal2.def(self3, "$integer?", $Numeric_integer$ques$19 = function() {
          var self4 = this;
          return false;
        }, $Numeric_integer$ques$19.$$arity = 0);
        Opal2.alias(self3, "magnitude", "abs");
        Opal2.alias(self3, "modulo", "%");
        Opal2.def(self3, "$nonzero?", $Numeric_nonzero$ques$20 = function() {
          var self4 = this;
          if ($truthy2(self4["$zero?"]())) {
            return nil2;
          } else {
            return self4;
          }
        }, $Numeric_nonzero$ques$20.$$arity = 0);
        Opal2.def(self3, "$numerator", $Numeric_numerator$21 = function $$numerator() {
          var self4 = this;
          return self4.$to_r().$numerator();
        }, $Numeric_numerator$21.$$arity = 0);
        Opal2.alias(self3, "phase", "arg");
        Opal2.def(self3, "$polar", $Numeric_polar$22 = function $$polar() {
          var self4 = this;
          return [self4.$abs(), self4.$arg()];
        }, $Numeric_polar$22.$$arity = 0);
        Opal2.def(self3, "$quo", $Numeric_quo$23 = function $$quo(other) {
          var self4 = this;
          return $rb_divide($$2($nesting3, "Opal")["$coerce_to!"](self4, $$2($nesting3, "Rational"), "to_r"), other);
        }, $Numeric_quo$23.$$arity = 1);
        Opal2.def(self3, "$real", $Numeric_real$24 = function $$real() {
          var self4 = this;
          return self4;
        }, $Numeric_real$24.$$arity = 0);
        Opal2.def(self3, "$real?", $Numeric_real$ques$25 = function() {
          var self4 = this;
          return true;
        }, $Numeric_real$ques$25.$$arity = 0);
        Opal2.def(self3, "$rect", $Numeric_rect$26 = function $$rect() {
          var self4 = this;
          return [self4, 0];
        }, $Numeric_rect$26.$$arity = 0);
        Opal2.alias(self3, "rectangular", "rect");
        Opal2.def(self3, "$round", $Numeric_round$27 = function $$round(digits) {
          var self4 = this;
          ;
          return self4.$to_f().$round(digits);
        }, $Numeric_round$27.$$arity = -1);
        Opal2.def(self3, "$to_c", $Numeric_to_c$28 = function $$to_c() {
          var self4 = this;
          return self4.$Complex(self4, 0);
        }, $Numeric_to_c$28.$$arity = 0);
        Opal2.def(self3, "$to_int", $Numeric_to_int$29 = function $$to_int() {
          var self4 = this;
          return self4.$to_i();
        }, $Numeric_to_int$29.$$arity = 0);
        Opal2.def(self3, "$truncate", $Numeric_truncate$30 = function $$truncate(ndigits) {
          var self4 = this;
          if (ndigits == null) {
            ndigits = 0;
          }
          ;
          return self4.$to_f().$truncate(ndigits);
        }, $Numeric_truncate$30.$$arity = -1);
        Opal2.def(self3, "$zero?", $Numeric_zero$ques$31 = function() {
          var self4 = this;
          return self4["$=="](0);
        }, $Numeric_zero$ques$31.$$arity = 0);
        Opal2.def(self3, "$positive?", $Numeric_positive$ques$32 = function() {
          var self4 = this;
          return $rb_gt2(self4, 0);
        }, $Numeric_positive$ques$32.$$arity = 0);
        Opal2.def(self3, "$negative?", $Numeric_negative$ques$33 = function() {
          var self4 = this;
          return $rb_lt2(self4, 0);
        }, $Numeric_negative$ques$33.$$arity = 0);
        Opal2.def(self3, "$dup", $Numeric_dup$34 = function $$dup() {
          var self4 = this;
          return self4;
        }, $Numeric_dup$34.$$arity = 0);
        Opal2.def(self3, "$clone", $Numeric_clone$35 = function $$clone($kwargs) {
          var freeze, self4 = this;
          if ($kwargs == null) {
            $kwargs = $hash22([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal2.ArgumentError.$new("expected kwargs");
          }
          ;
          freeze = $kwargs.$$smap["freeze"];
          if (freeze == null) {
            freeze = true;
          }
          ;
          return self4;
        }, $Numeric_clone$35.$$arity = -1);
        Opal2.def(self3, "$finite?", $Numeric_finite$ques$36 = function() {
          var self4 = this;
          return true;
        }, $Numeric_finite$ques$36.$$arity = 0);
        return (Opal2.def(self3, "$infinite?", $Numeric_infinite$ques$37 = function() {
          var self4 = this;
          return nil2;
        }, $Numeric_infinite$ques$37.$$arity = 0), nil2) && "infinite?";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/array"] = function(Opal2) {
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      function $rb_times(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
      }
      function $rb_ge(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2, $send2 = Opal2.send, $gvars = Opal2.gvars;
      Opal2.add_stubs(["$require", "$include", "$to_a", "$warn", "$raise", "$replace", "$respond_to?", "$to_ary", "$coerce_to", "$coerce_to?", "$===", "$join", "$to_str", "$class", "$hash", "$<=>", "$==", "$object_id", "$inspect", "$enum_for", "$bsearch_index", "$to_proc", "$nil?", "$coerce_to!", "$>", "$*", "$enumerator_size", "$empty?", "$size", "$map", "$equal?", "$dup", "$each", "$[]", "$dig", "$eql?", "$length", "$begin", "$end", "$exclude_end?", "$flatten", "$__id__", "$to_s", "$new", "$max", "$min", "$!", "$>=", "$**", "$delete_if", "$reverse", "$rotate", "$rand", "$at", "$keep_if", "$shuffle!", "$<", "$sort", "$sort_by", "$!=", "$times", "$[]=", "$-", "$<<", "$values", "$is_a?", "$last", "$first", "$upto", "$reject", "$pristine", "$singleton_class"]);
      self2.$require("corelib/enumerable");
      self2.$require("corelib/numeric");
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Array");
        var $nesting3 = [self3].concat($parent_nesting2), $Array_$$$1, $Array_initialize$2, $Array_try_convert$3, $Array_$$4, $Array_$$5, $Array_$$6, $Array_$plus$7, $Array_$minus$8, $Array_$lt$lt$9, $Array_$lt_eq_gt$10, $Array_$eq_eq$11, $Array_$$$12, $Array_$$$eq$13, $Array_any$ques$14, $Array_assoc$15, $Array_at$16, $Array_bsearch_index$17, $Array_bsearch$18, $Array_cycle$19, $Array_clear$21, $Array_count$22, $Array_initialize_copy$23, $Array_collect$24, $Array_collect$excl$26, $Array_combination$28, $Array_repeated_combination$30, $Array_compact$32, $Array_compact$excl$33, $Array_concat$34, $Array_delete$37, $Array_delete_at$38, $Array_delete_if$39, $Array_dig$41, $Array_drop$42, $Array_dup$43, $Array_each$44, $Array_each_index$46, $Array_empty$ques$48, $Array_eql$ques$49, $Array_fetch$50, $Array_fill$51, $Array_first$52, $Array_flatten$53, $Array_flatten$excl$54, $Array_hash$55, $Array_include$ques$56, $Array_index$57, $Array_insert$58, $Array_inspect$59, $Array_join$60, $Array_keep_if$61, $Array_last$63, $Array_length$64, $Array_max$65, $Array_min$66, $Array_permutation$67, $Array_repeated_permutation$69, $Array_pop$71, $Array_product$72, $Array_push$73, $Array_rassoc$74, $Array_reject$75, $Array_reject$excl$77, $Array_replace$79, $Array_reverse$80, $Array_reverse$excl$81, $Array_reverse_each$82, $Array_rindex$84, $Array_rotate$85, $Array_rotate$excl$86, $Array_sample$89, $Array_select$90, $Array_select$excl$92, $Array_shift$94, $Array_shuffle$95, $Array_shuffle$excl$96, $Array_slice$excl$97, $Array_sort$98, $Array_sort$excl$99, $Array_sort_by$excl$100, $Array_take$102, $Array_take_while$103, $Array_to_a$104, $Array_to_h$105, $Array_transpose$106, $Array_uniq$109, $Array_uniq$excl$110, $Array_unshift$111, $Array_values_at$112, $Array_zip$115, $Array_inherited$116, $Array_instance_variables$117, $Array_pack$119;
        self3.$include($$2($nesting3, "Enumerable"));
        Opal2.defineProperty(self3.$$prototype, "$$is_array", true);
        function shiftNoArg(list) {
          var r = list[0];
          var index = 1;
          var length = list.length;
          for (; index < length; index++) {
            list[index - 1] = list[index];
          }
          list.pop();
          return r;
        }
        function toArraySubclass(obj, klass) {
          if (klass.$$name === Opal2.Array) {
            return obj;
          } else {
            return klass.$allocate().$replace(obj.$to_a());
          }
        }
        ;
        Opal2.defs(self3, "$[]", $Array_$$$1 = function($a2) {
          var $post_args2, objects, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          objects = $post_args2;
          ;
          return toArraySubclass(objects, self4);
          ;
        }, $Array_$$$1.$$arity = -1);
        Opal2.def(self3, "$initialize", $Array_initialize$2 = function $$initialize(size, obj) {
          var $iter2 = $Array_initialize$2.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_initialize$2.$$p = null;
          if ($iter2)
            $Array_initialize$2.$$p = null;
          ;
          if (size == null) {
            size = nil2;
          }
          ;
          if (obj == null) {
            obj = nil2;
          }
          ;
          if (obj !== nil2 && block2 !== nil2) {
            self4.$warn("warning: block supersedes default value argument");
          }
          if (size > $$$2($$2($nesting3, "Integer"), "MAX")) {
            self4.$raise($$2($nesting3, "ArgumentError"), "array size too big");
          }
          if (arguments.length > 2) {
            self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + arguments.length + " for 0..2)");
          }
          if (arguments.length === 0) {
            self4.splice(0, self4.length);
            return self4;
          }
          if (arguments.length === 1) {
            if (size.$$is_array) {
              self4.$replace(size.$to_a());
              return self4;
            } else if (size["$respond_to?"]("to_ary")) {
              self4.$replace(size.$to_ary());
              return self4;
            }
          }
          size = $$2($nesting3, "Opal").$coerce_to(size, $$2($nesting3, "Integer"), "to_int");
          if (size < 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "negative array size");
          }
          self4.splice(0, self4.length);
          var i, value;
          if (block2 === nil2) {
            for (i = 0; i < size; i++) {
              self4.push(obj);
            }
          } else {
            for (i = 0, value; i < size; i++) {
              value = block2(i);
              self4[i] = value;
            }
          }
          return self4;
          ;
        }, $Array_initialize$2.$$arity = -1);
        Opal2.defs(self3, "$try_convert", $Array_try_convert$3 = function $$try_convert(obj) {
          var self4 = this;
          return $$2($nesting3, "Opal")["$coerce_to?"](obj, $$2($nesting3, "Array"), "to_ary");
        }, $Array_try_convert$3.$$arity = 1);
        Opal2.def(self3, "$&", $Array_$$4 = function(other) {
          var self4 = this;
          other = function() {
            if ($truthy2($$2($nesting3, "Array")["$==="](other))) {
              return other.$to_a();
            } else {
              return $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "Array"), "to_ary").$to_a();
            }
            ;
            return nil2;
          }();
          var result2 = [], hash = $hash22([], {}), i, length, item;
          for (i = 0, length = other.length; i < length; i++) {
            Opal2.hash_put(hash, other[i], true);
          }
          for (i = 0, length = self4.length; i < length; i++) {
            item = self4[i];
            if (Opal2.hash_delete(hash, item) !== void 0) {
              result2.push(item);
            }
          }
          return result2;
          ;
        }, $Array_$$4.$$arity = 1);
        Opal2.def(self3, "$|", $Array_$$5 = function(other) {
          var self4 = this;
          other = function() {
            if ($truthy2($$2($nesting3, "Array")["$==="](other))) {
              return other.$to_a();
            } else {
              return $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "Array"), "to_ary").$to_a();
            }
            ;
            return nil2;
          }();
          var hash = $hash22([], {}), i, length, item;
          for (i = 0, length = self4.length; i < length; i++) {
            Opal2.hash_put(hash, self4[i], true);
          }
          for (i = 0, length = other.length; i < length; i++) {
            Opal2.hash_put(hash, other[i], true);
          }
          return hash.$keys();
          ;
        }, $Array_$$5.$$arity = 1);
        Opal2.def(self3, "$*", $Array_$$6 = function(other) {
          var self4 = this;
          if ($truthy2(other["$respond_to?"]("to_str"))) {
            return self4.$join(other.$to_str());
          }
          ;
          other = $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2(other < 0)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "negative argument");
          }
          ;
          var result2 = [], converted = self4.$to_a();
          for (var i = 0; i < other; i++) {
            result2 = result2.concat(converted);
          }
          return toArraySubclass(result2, self4.$class());
          ;
        }, $Array_$$6.$$arity = 1);
        Opal2.def(self3, "$+", $Array_$plus$7 = function(other) {
          var self4 = this;
          other = function() {
            if ($truthy2($$2($nesting3, "Array")["$==="](other))) {
              return other.$to_a();
            } else {
              return $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "Array"), "to_ary").$to_a();
            }
            ;
            return nil2;
          }();
          return self4.concat(other);
          ;
        }, $Array_$plus$7.$$arity = 1);
        Opal2.def(self3, "$-", $Array_$minus$8 = function(other) {
          var self4 = this;
          other = function() {
            if ($truthy2($$2($nesting3, "Array")["$==="](other))) {
              return other.$to_a();
            } else {
              return $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "Array"), "to_ary").$to_a();
            }
            ;
            return nil2;
          }();
          if ($truthy2(self4.length === 0)) {
            return [];
          }
          ;
          if ($truthy2(other.length === 0)) {
            return self4.slice();
          }
          ;
          var result2 = [], hash = $hash22([], {}), i, length, item;
          for (i = 0, length = other.length; i < length; i++) {
            Opal2.hash_put(hash, other[i], true);
          }
          for (i = 0, length = self4.length; i < length; i++) {
            item = self4[i];
            if (Opal2.hash_get(hash, item) === void 0) {
              result2.push(item);
            }
          }
          return result2;
          ;
        }, $Array_$minus$8.$$arity = 1);
        Opal2.def(self3, "$<<", $Array_$lt$lt$9 = function(object) {
          var self4 = this;
          self4.push(object);
          return self4;
        }, $Array_$lt$lt$9.$$arity = 1);
        Opal2.def(self3, "$<=>", $Array_$lt_eq_gt$10 = function(other) {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Array")["$==="](other))) {
            other = other.$to_a();
          } else if ($truthy2(other["$respond_to?"]("to_ary"))) {
            other = other.$to_ary().$to_a();
          } else {
            return nil2;
          }
          ;
          if (self4.$hash() === other.$hash()) {
            return 0;
          }
          var count = Math.min(self4.length, other.length);
          for (var i = 0; i < count; i++) {
            var tmp = self4[i]["$<=>"](other[i]);
            if (tmp !== 0) {
              return tmp;
            }
          }
          return self4.length["$<=>"](other.length);
          ;
        }, $Array_$lt_eq_gt$10.$$arity = 1);
        Opal2.def(self3, "$==", $Array_$eq_eq$11 = function(other) {
          var self4 = this;
          var recursed = {};
          function _eqeq(array, other2) {
            var i, length, a, b;
            if (array === other2)
              return true;
            if (!other2.$$is_array) {
              if ($$2($nesting3, "Opal")["$respond_to?"](other2, "to_ary")) {
                return other2["$=="](array);
              } else {
                return false;
              }
            }
            if (array.$$constructor !== Array)
              array = array.$to_a();
            if (other2.$$constructor !== Array)
              other2 = other2.$to_a();
            if (array.length !== other2.length) {
              return false;
            }
            recursed[array.$object_id()] = true;
            for (i = 0, length = array.length; i < length; i++) {
              a = array[i];
              b = other2[i];
              if (a.$$is_array) {
                if (b.$$is_array && b.length !== a.length) {
                  return false;
                }
                if (!recursed.hasOwnProperty(a.$object_id())) {
                  if (!_eqeq(a, b)) {
                    return false;
                  }
                }
              } else {
                if (!a["$=="](b)) {
                  return false;
                }
              }
            }
            return true;
          }
          return _eqeq(self4, other);
        }, $Array_$eq_eq$11.$$arity = 1);
        function $array_slice_range(self4, index) {
          var size = self4.length, exclude, from, to, result2;
          exclude = index.excl;
          from = Opal2.Opal.$coerce_to(index.begin, Opal2.Integer, "to_int");
          to = Opal2.Opal.$coerce_to(index.end, Opal2.Integer, "to_int");
          if (from < 0) {
            from += size;
            if (from < 0) {
              return nil2;
            }
          }
          if (from > size) {
            return nil2;
          }
          if (to < 0) {
            to += size;
            if (to < 0) {
              return [];
            }
          }
          if (!exclude) {
            to += 1;
          }
          result2 = self4.slice(from, to);
          return toArraySubclass(result2, self4.$class());
        }
        function $array_slice_index_length(self4, index, length) {
          var size = self4.length, exclude, from, to, result2;
          index = Opal2.Opal.$coerce_to(index, Opal2.Integer, "to_int");
          if (index < 0) {
            index += size;
            if (index < 0) {
              return nil2;
            }
          }
          if (length === void 0) {
            if (index >= size || index < 0) {
              return nil2;
            }
            return self4[index];
          } else {
            length = Opal2.Opal.$coerce_to(length, Opal2.Integer, "to_int");
            if (length < 0 || index > size || index < 0) {
              return nil2;
            }
            result2 = self4.slice(index, index + length);
          }
          return toArraySubclass(result2, self4.$class());
        }
        ;
        Opal2.def(self3, "$[]", $Array_$$$12 = function(index, length) {
          var self4 = this;
          ;
          if (index.$$is_range) {
            return $array_slice_range(self4, index);
          } else {
            return $array_slice_index_length(self4, index, length);
          }
          ;
        }, $Array_$$$12.$$arity = -2);
        Opal2.def(self3, "$[]=", $Array_$$$eq$13 = function(index, value, extra) {
          var self4 = this, data = nil2, length = nil2;
          ;
          var i, size = self4.length;
          ;
          if ($truthy2($$2($nesting3, "Range")["$==="](index))) {
            data = function() {
              if ($truthy2($$2($nesting3, "Array")["$==="](value))) {
                return value.$to_a();
              } else if ($truthy2(value["$respond_to?"]("to_ary"))) {
                return value.$to_ary().$to_a();
              } else {
                return [value];
              }
              ;
              return nil2;
            }();
            var exclude = index.excl, from = $$2($nesting3, "Opal").$coerce_to(index.begin, $$2($nesting3, "Integer"), "to_int"), to = $$2($nesting3, "Opal").$coerce_to(index.end, $$2($nesting3, "Integer"), "to_int");
            if (from < 0) {
              from += size;
              if (from < 0) {
                self4.$raise($$2($nesting3, "RangeError"), "" + index.$inspect() + " out of range");
              }
            }
            if (to < 0) {
              to += size;
            }
            if (!exclude) {
              to += 1;
            }
            if (from > size) {
              for (i = size; i < from; i++) {
                self4[i] = nil2;
              }
            }
            if (to < 0) {
              self4.splice.apply(self4, [from, 0].concat(data));
            } else {
              self4.splice.apply(self4, [from, to - from].concat(data));
            }
            return value;
            ;
          } else {
            if ($truthy2(extra === void 0)) {
              length = 1;
            } else {
              length = value;
              value = extra;
              data = function() {
                if ($truthy2($$2($nesting3, "Array")["$==="](value))) {
                  return value.$to_a();
                } else if ($truthy2(value["$respond_to?"]("to_ary"))) {
                  return value.$to_ary().$to_a();
                } else {
                  return [value];
                }
                ;
                return nil2;
              }();
            }
            ;
            var old2;
            index = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
            length = $$2($nesting3, "Opal").$coerce_to(length, $$2($nesting3, "Integer"), "to_int");
            if (index < 0) {
              old2 = index;
              index += size;
              if (index < 0) {
                self4.$raise($$2($nesting3, "IndexError"), "index " + old2 + " too small for array; minimum " + -self4.length);
              }
            }
            if (length < 0) {
              self4.$raise($$2($nesting3, "IndexError"), "negative length (" + length + ")");
            }
            if (index > size) {
              for (i = size; i < index; i++) {
                self4[i] = nil2;
              }
            }
            if (extra === void 0) {
              self4[index] = value;
            } else {
              self4.splice.apply(self4, [index, length].concat(data));
            }
            return value;
            ;
          }
          ;
        }, $Array_$$$eq$13.$$arity = -3);
        Opal2.def(self3, "$any?", $Array_any$ques$14 = function(pattern) {
          var $iter2 = $Array_any$ques$14.$$p, block2 = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Array_any$ques$14.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($iter2)
            $Array_any$ques$14.$$p = null;
          ;
          ;
          if (self4.length === 0)
            return false;
          return $send2(self4, Opal2.find_super_dispatcher(self4, "any?", $Array_any$ques$14, false), $zuper, $iter2);
        }, $Array_any$ques$14.$$arity = -1);
        Opal2.def(self3, "$assoc", $Array_assoc$15 = function $$assoc(object) {
          var self4 = this;
          for (var i = 0, length = self4.length, item; i < length; i++) {
            if (item = self4[i], item.length && item[0]["$=="](object)) {
              return item;
            }
          }
          return nil2;
        }, $Array_assoc$15.$$arity = 1);
        Opal2.def(self3, "$at", $Array_at$16 = function $$at(index) {
          var self4 = this;
          index = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
          if (index < 0) {
            index += self4.length;
          }
          if (index < 0 || index >= self4.length) {
            return nil2;
          }
          return self4[index];
          ;
        }, $Array_at$16.$$arity = 1);
        Opal2.def(self3, "$bsearch_index", $Array_bsearch_index$17 = function $$bsearch_index() {
          var $iter2 = $Array_bsearch_index$17.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_bsearch_index$17.$$p = null;
          if ($iter2)
            $Array_bsearch_index$17.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("bsearch_index");
          }
          ;
          var min = 0, max = self4.length, mid, val, ret, smaller = false, satisfied = nil2;
          while (min < max) {
            mid = min + Math.floor((max - min) / 2);
            val = self4[mid];
            ret = Opal2.yield1(block2, val);
            if (ret === true) {
              satisfied = mid;
              smaller = true;
            } else if (ret === false || ret === nil2) {
              smaller = false;
            } else if (ret.$$is_number) {
              if (ret === 0) {
                return mid;
              }
              smaller = ret < 0;
            } else {
              self4.$raise($$2($nesting3, "TypeError"), "wrong argument type " + ret.$class() + " (must be numeric, true, false or nil)");
            }
            if (smaller) {
              max = mid;
            } else {
              min = mid + 1;
            }
          }
          return satisfied;
          ;
        }, $Array_bsearch_index$17.$$arity = 0);
        Opal2.def(self3, "$bsearch", $Array_bsearch$18 = function $$bsearch() {
          var $iter2 = $Array_bsearch$18.$$p, block2 = $iter2 || nil2, self4 = this, index = nil2;
          if ($iter2)
            $Array_bsearch$18.$$p = null;
          if ($iter2)
            $Array_bsearch$18.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("bsearch");
          }
          ;
          index = $send2(self4, "bsearch_index", [], block2.$to_proc());
          if (index != null && index.$$is_number) {
            return self4[index];
          } else {
            return index;
          }
          ;
        }, $Array_bsearch$18.$$arity = 0);
        Opal2.def(self3, "$cycle", $Array_cycle$19 = function $$cycle(n) {
          var $iter2 = $Array_cycle$19.$$p, block2 = $iter2 || nil2, $$20, $a2, self4 = this;
          if ($iter2)
            $Array_cycle$19.$$p = null;
          if ($iter2)
            $Array_cycle$19.$$p = null;
          ;
          if (n == null) {
            n = nil2;
          }
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["cycle", n], ($$20 = function() {
              var self5 = $$20.$$s || this;
              if ($truthy2(n["$nil?"]())) {
                return $$$2($$2($nesting3, "Float"), "INFINITY");
              } else {
                n = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
                if ($truthy2($rb_gt2(n, 0))) {
                  return $rb_times(self5.$enumerator_size(), n);
                } else {
                  return 0;
                }
                ;
              }
            }, $$20.$$s = self4, $$20.$$arity = 0, $$20));
          }
          ;
          if ($truthy2($truthy2($a2 = self4["$empty?"]()) ? $a2 : n["$=="](0))) {
            return nil2;
          }
          ;
          var i, length, value;
          if (n === nil2) {
            while (true) {
              for (i = 0, length = self4.length; i < length; i++) {
                value = Opal2.yield1(block2, self4[i]);
              }
            }
          } else {
            n = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
            if (n <= 0) {
              return self4;
            }
            while (n > 0) {
              for (i = 0, length = self4.length; i < length; i++) {
                value = Opal2.yield1(block2, self4[i]);
              }
              n--;
            }
          }
          ;
          return self4;
        }, $Array_cycle$19.$$arity = -1);
        Opal2.def(self3, "$clear", $Array_clear$21 = function $$clear() {
          var self4 = this;
          self4.splice(0, self4.length);
          return self4;
        }, $Array_clear$21.$$arity = 0);
        Opal2.def(self3, "$count", $Array_count$22 = function $$count(object) {
          var $iter2 = $Array_count$22.$$p, block2 = $iter2 || nil2, $a2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Array_count$22.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($iter2)
            $Array_count$22.$$p = null;
          ;
          if (object == null) {
            object = nil2;
          }
          ;
          if ($truthy2($truthy2($a2 = object) ? $a2 : block2)) {
            return $send2(self4, Opal2.find_super_dispatcher(self4, "count", $Array_count$22, false), $zuper, $iter2);
          } else {
            return self4.$size();
          }
          ;
        }, $Array_count$22.$$arity = -1);
        Opal2.def(self3, "$initialize_copy", $Array_initialize_copy$23 = function $$initialize_copy(other) {
          var self4 = this;
          return self4.$replace(other);
        }, $Array_initialize_copy$23.$$arity = 1);
        Opal2.def(self3, "$collect", $Array_collect$24 = function $$collect() {
          var $iter2 = $Array_collect$24.$$p, block2 = $iter2 || nil2, $$25, self4 = this;
          if ($iter2)
            $Array_collect$24.$$p = null;
          if ($iter2)
            $Array_collect$24.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["collect"], ($$25 = function() {
              var self5 = $$25.$$s || this;
              return self5.$size();
            }, $$25.$$s = self4, $$25.$$arity = 0, $$25));
          }
          ;
          var result2 = [];
          for (var i = 0, length = self4.length; i < length; i++) {
            var value = Opal2.yield1(block2, self4[i]);
            result2.push(value);
          }
          return result2;
          ;
        }, $Array_collect$24.$$arity = 0);
        Opal2.def(self3, "$collect!", $Array_collect$excl$26 = function() {
          var $iter2 = $Array_collect$excl$26.$$p, block2 = $iter2 || nil2, $$27, self4 = this;
          if ($iter2)
            $Array_collect$excl$26.$$p = null;
          if ($iter2)
            $Array_collect$excl$26.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["collect!"], ($$27 = function() {
              var self5 = $$27.$$s || this;
              return self5.$size();
            }, $$27.$$s = self4, $$27.$$arity = 0, $$27));
          }
          ;
          for (var i = 0, length = self4.length; i < length; i++) {
            var value = Opal2.yield1(block2, self4[i]);
            self4[i] = value;
          }
          ;
          return self4;
        }, $Array_collect$excl$26.$$arity = 0);
        function binomial_coefficient(n, k) {
          if (n === k || k === 0) {
            return 1;
          }
          if (k > 0 && n > k) {
            return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
          }
          return 0;
        }
        ;
        Opal2.def(self3, "$combination", $Array_combination$28 = function $$combination(n) {
          var $$29, $iter2 = $Array_combination$28.$$p, $yield = $iter2 || nil2, self4 = this, num = nil2;
          if ($iter2)
            $Array_combination$28.$$p = null;
          num = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["combination", num], ($$29 = function() {
              var self5 = $$29.$$s || this;
              return binomial_coefficient(self5.length, num);
            }, $$29.$$s = self4, $$29.$$arity = 0, $$29));
          }
          ;
          var i, length, stack, chosen, lev, done, next;
          if (num === 0) {
            Opal2.yield1($yield, []);
          } else if (num === 1) {
            for (i = 0, length = self4.length; i < length; i++) {
              Opal2.yield1($yield, [self4[i]]);
            }
          } else if (num === self4.length) {
            Opal2.yield1($yield, self4.slice());
          } else if (num >= 0 && num < self4.length) {
            stack = [];
            for (i = 0; i <= num + 1; i++) {
              stack.push(0);
            }
            chosen = [];
            lev = 0;
            done = false;
            stack[0] = -1;
            while (!done) {
              chosen[lev] = self4[stack[lev + 1]];
              while (lev < num - 1) {
                lev++;
                next = stack[lev + 1] = stack[lev] + 1;
                chosen[lev] = self4[next];
              }
              Opal2.yield1($yield, chosen.slice());
              lev++;
              do {
                done = lev === 0;
                stack[lev]++;
                lev--;
              } while (stack[lev + 1] + num === self4.length + lev + 1);
            }
          }
          ;
          return self4;
        }, $Array_combination$28.$$arity = 1);
        Opal2.def(self3, "$repeated_combination", $Array_repeated_combination$30 = function $$repeated_combination(n) {
          var $$31, $iter2 = $Array_repeated_combination$30.$$p, $yield = $iter2 || nil2, self4 = this, num = nil2;
          if ($iter2)
            $Array_repeated_combination$30.$$p = null;
          num = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["repeated_combination", num], ($$31 = function() {
              var self5 = $$31.$$s || this;
              return binomial_coefficient(self5.length + num - 1, num);
            }, $$31.$$s = self4, $$31.$$arity = 0, $$31));
          }
          ;
          function iterate(max, from, buffer, self5) {
            if (buffer.length == max) {
              var copy = buffer.slice();
              Opal2.yield1($yield, copy);
              return;
            }
            for (var i = from; i < self5.length; i++) {
              buffer.push(self5[i]);
              iterate(max, i, buffer, self5);
              buffer.pop();
            }
          }
          if (num >= 0) {
            iterate(num, 0, [], self4);
          }
          ;
          return self4;
        }, $Array_repeated_combination$30.$$arity = 1);
        Opal2.def(self3, "$compact", $Array_compact$32 = function $$compact() {
          var self4 = this;
          var result2 = [];
          for (var i = 0, length = self4.length, item; i < length; i++) {
            if ((item = self4[i]) !== nil2) {
              result2.push(item);
            }
          }
          return result2;
        }, $Array_compact$32.$$arity = 0);
        Opal2.def(self3, "$compact!", $Array_compact$excl$33 = function() {
          var self4 = this;
          var original = self4.length;
          for (var i = 0, length = self4.length; i < length; i++) {
            if (self4[i] === nil2) {
              self4.splice(i, 1);
              length--;
              i--;
            }
          }
          return self4.length === original ? nil2 : self4;
        }, $Array_compact$excl$33.$$arity = 0);
        Opal2.def(self3, "$concat", $Array_concat$34 = function $$concat($a2) {
          var $post_args2, others, $$35, $$36, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          others = $post_args2;
          ;
          others = $send2(others, "map", [], ($$35 = function(other) {
            var self5 = $$35.$$s || this;
            if (other == null) {
              other = nil2;
            }
            ;
            other = function() {
              if ($truthy2($$2($nesting3, "Array")["$==="](other))) {
                return other.$to_a();
              } else {
                return $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "Array"), "to_ary").$to_a();
              }
              ;
              return nil2;
            }();
            if ($truthy2(other["$equal?"](self5))) {
              other = other.$dup();
            }
            ;
            return other;
          }, $$35.$$s = self4, $$35.$$arity = 1, $$35));
          $send2(others, "each", [], ($$36 = function(other) {
            var self5 = $$36.$$s || this;
            if (other == null) {
              other = nil2;
            }
            ;
            for (var i = 0, length = other.length; i < length; i++) {
              self5.push(other[i]);
            }
            ;
          }, $$36.$$s = self4, $$36.$$arity = 1, $$36));
          return self4;
        }, $Array_concat$34.$$arity = -1);
        Opal2.def(self3, "$delete", $Array_delete$37 = function(object) {
          var $iter2 = $Array_delete$37.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_delete$37.$$p = null;
          var original = self4.length;
          for (var i = 0, length = original; i < length; i++) {
            if (self4[i]["$=="](object)) {
              self4.splice(i, 1);
              length--;
              i--;
            }
          }
          if (self4.length === original) {
            if ($yield !== nil2) {
              return Opal2.yieldX($yield, []);
            }
            return nil2;
          }
          return object;
        }, $Array_delete$37.$$arity = 1);
        Opal2.def(self3, "$delete_at", $Array_delete_at$38 = function $$delete_at(index) {
          var self4 = this;
          index = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
          if (index < 0) {
            index += self4.length;
          }
          if (index < 0 || index >= self4.length) {
            return nil2;
          }
          var result2 = self4[index];
          self4.splice(index, 1);
          return result2;
        }, $Array_delete_at$38.$$arity = 1);
        Opal2.def(self3, "$delete_if", $Array_delete_if$39 = function $$delete_if() {
          var $iter2 = $Array_delete_if$39.$$p, block2 = $iter2 || nil2, $$40, self4 = this;
          if ($iter2)
            $Array_delete_if$39.$$p = null;
          if ($iter2)
            $Array_delete_if$39.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["delete_if"], ($$40 = function() {
              var self5 = $$40.$$s || this;
              return self5.$size();
            }, $$40.$$s = self4, $$40.$$arity = 0, $$40));
          }
          ;
          for (var i = 0, length = self4.length, value; i < length; i++) {
            value = block2(self4[i]);
            if (value !== false && value !== nil2) {
              self4.splice(i, 1);
              length--;
              i--;
            }
          }
          ;
          return self4;
        }, $Array_delete_if$39.$$arity = 0);
        Opal2.def(self3, "$dig", $Array_dig$41 = function $$dig(idx, $a2) {
          var $post_args2, idxs, self4 = this, item = nil2;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          idxs = $post_args2;
          ;
          item = self4["$[]"](idx);
          if (item === nil2 || idxs.length === 0) {
            return item;
          }
          ;
          if ($truthy2(item["$respond_to?"]("dig"))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "" + item.$class() + " does not have #dig method");
          }
          ;
          return $send2(item, "dig", Opal2.to_a(idxs));
        }, $Array_dig$41.$$arity = -2);
        Opal2.def(self3, "$drop", $Array_drop$42 = function $$drop(number) {
          var self4 = this;
          if (number < 0) {
            self4.$raise($$2($nesting3, "ArgumentError"));
          }
          return self4.slice(number);
        }, $Array_drop$42.$$arity = 1);
        Opal2.def(self3, "$dup", $Array_dup$43 = function $$dup() {
          var $iter2 = $Array_dup$43.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Array_dup$43.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if (self4.$$class === Opal2.Array && self4.$$class.$allocate.$$pristine && self4.$copy_instance_variables.$$pristine && self4.$initialize_dup.$$pristine) {
            return self4.slice(0);
          }
          ;
          return $send2(self4, Opal2.find_super_dispatcher(self4, "dup", $Array_dup$43, false), $zuper, $iter2);
        }, $Array_dup$43.$$arity = 0);
        Opal2.def(self3, "$each", $Array_each$44 = function $$each() {
          var $iter2 = $Array_each$44.$$p, block2 = $iter2 || nil2, $$45, self4 = this;
          if ($iter2)
            $Array_each$44.$$p = null;
          if ($iter2)
            $Array_each$44.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each"], ($$45 = function() {
              var self5 = $$45.$$s || this;
              return self5.$size();
            }, $$45.$$s = self4, $$45.$$arity = 0, $$45));
          }
          ;
          for (var i = 0, length = self4.length; i < length; i++) {
            var value = Opal2.yield1(block2, self4[i]);
          }
          ;
          return self4;
        }, $Array_each$44.$$arity = 0);
        Opal2.def(self3, "$each_index", $Array_each_index$46 = function $$each_index() {
          var $iter2 = $Array_each_index$46.$$p, block2 = $iter2 || nil2, $$472, self4 = this;
          if ($iter2)
            $Array_each_index$46.$$p = null;
          if ($iter2)
            $Array_each_index$46.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each_index"], ($$472 = function() {
              var self5 = $$472.$$s || this;
              return self5.$size();
            }, $$472.$$s = self4, $$472.$$arity = 0, $$472));
          }
          ;
          for (var i = 0, length = self4.length; i < length; i++) {
            var value = Opal2.yield1(block2, i);
          }
          ;
          return self4;
        }, $Array_each_index$46.$$arity = 0);
        Opal2.def(self3, "$empty?", $Array_empty$ques$48 = function() {
          var self4 = this;
          return self4.length === 0;
        }, $Array_empty$ques$48.$$arity = 0);
        Opal2.def(self3, "$eql?", $Array_eql$ques$49 = function(other) {
          var self4 = this;
          var recursed = {};
          function _eql(array, other2) {
            var i, length, a, b;
            if (!other2.$$is_array) {
              return false;
            }
            other2 = other2.$to_a();
            if (array.length !== other2.length) {
              return false;
            }
            recursed[array.$object_id()] = true;
            for (i = 0, length = array.length; i < length; i++) {
              a = array[i];
              b = other2[i];
              if (a.$$is_array) {
                if (b.$$is_array && b.length !== a.length) {
                  return false;
                }
                if (!recursed.hasOwnProperty(a.$object_id())) {
                  if (!_eql(a, b)) {
                    return false;
                  }
                }
              } else {
                if (!a["$eql?"](b)) {
                  return false;
                }
              }
            }
            return true;
          }
          return _eql(self4, other);
        }, $Array_eql$ques$49.$$arity = 1);
        Opal2.def(self3, "$fetch", $Array_fetch$50 = function $$fetch(index, defaults) {
          var $iter2 = $Array_fetch$50.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_fetch$50.$$p = null;
          if ($iter2)
            $Array_fetch$50.$$p = null;
          ;
          ;
          var original = index;
          index = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
          if (index < 0) {
            index += self4.length;
          }
          if (index >= 0 && index < self4.length) {
            return self4[index];
          }
          if (block2 !== nil2 && defaults != null) {
            self4.$warn("warning: block supersedes default value argument");
          }
          if (block2 !== nil2) {
            return block2(original);
          }
          if (defaults != null) {
            return defaults;
          }
          if (self4.length === 0) {
            self4.$raise($$2($nesting3, "IndexError"), "index " + original + " outside of array bounds: 0...0");
          } else {
            self4.$raise($$2($nesting3, "IndexError"), "index " + original + " outside of array bounds: -" + self4.length + "..." + self4.length);
          }
          ;
        }, $Array_fetch$50.$$arity = -2);
        Opal2.def(self3, "$fill", $Array_fill$51 = function $$fill($a2) {
          var $iter2 = $Array_fill$51.$$p, block2 = $iter2 || nil2, $post_args2, args2, $b2, $c, self4 = this, one = nil2, two = nil2, obj = nil2, left = nil2, right = nil2;
          if ($iter2)
            $Array_fill$51.$$p = null;
          if ($iter2)
            $Array_fill$51.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          var i, length, value;
          ;
          if ($truthy2(block2)) {
            if ($truthy2(args2.length > 2)) {
              self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + args2.$length() + " for 0..2)");
            }
            ;
            $c = args2, $b2 = Opal2.to_ary($c), one = $b2[0] == null ? nil2 : $b2[0], two = $b2[1] == null ? nil2 : $b2[1], $c;
          } else {
            if ($truthy2(args2.length == 0)) {
              self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (0 for 1..3)");
            } else if ($truthy2(args2.length > 3)) {
              self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + args2.$length() + " for 1..3)");
            }
            ;
            $c = args2, $b2 = Opal2.to_ary($c), obj = $b2[0] == null ? nil2 : $b2[0], one = $b2[1] == null ? nil2 : $b2[1], two = $b2[2] == null ? nil2 : $b2[2], $c;
          }
          ;
          if ($truthy2($$2($nesting3, "Range")["$==="](one))) {
            if ($truthy2(two)) {
              self4.$raise($$2($nesting3, "TypeError"), "length invalid with range");
            }
            ;
            left = $$2($nesting3, "Opal").$coerce_to(one.$begin(), $$2($nesting3, "Integer"), "to_int");
            if ($truthy2(left < 0)) {
              left += this.length;
            }
            ;
            if ($truthy2(left < 0)) {
              self4.$raise($$2($nesting3, "RangeError"), "" + one.$inspect() + " out of range");
            }
            ;
            right = $$2($nesting3, "Opal").$coerce_to(one.$end(), $$2($nesting3, "Integer"), "to_int");
            if ($truthy2(right < 0)) {
              right += this.length;
            }
            ;
            if ($truthy2(one["$exclude_end?"]())) {
            } else {
              right += 1;
            }
            ;
            if ($truthy2(right <= left)) {
              return self4;
            }
            ;
          } else if ($truthy2(one)) {
            left = $$2($nesting3, "Opal").$coerce_to(one, $$2($nesting3, "Integer"), "to_int");
            if ($truthy2(left < 0)) {
              left += this.length;
            }
            ;
            if ($truthy2(left < 0)) {
              left = 0;
            }
            ;
            if ($truthy2(two)) {
              right = $$2($nesting3, "Opal").$coerce_to(two, $$2($nesting3, "Integer"), "to_int");
              if ($truthy2(right == 0)) {
                return self4;
              }
              ;
              right += left;
            } else {
              right = this.length;
            }
            ;
          } else {
            left = 0;
            right = this.length;
          }
          ;
          if ($truthy2(left > this.length)) {
            for (i = this.length; i < right; i++) {
              self4[i] = nil2;
            }
          }
          ;
          if ($truthy2(right > this.length)) {
            this.length = right;
          }
          ;
          if ($truthy2(block2)) {
            for (length = this.length; left < right; left++) {
              value = block2(left);
              self4[left] = value;
            }
          } else {
            for (length = this.length; left < right; left++) {
              self4[left] = obj;
            }
          }
          ;
          return self4;
        }, $Array_fill$51.$$arity = -1);
        Opal2.def(self3, "$first", $Array_first$52 = function $$first(count) {
          var self4 = this;
          ;
          if (count == null) {
            return self4.length === 0 ? nil2 : self4[0];
          }
          count = $$2($nesting3, "Opal").$coerce_to(count, $$2($nesting3, "Integer"), "to_int");
          if (count < 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "negative array size");
          }
          return self4.slice(0, count);
          ;
        }, $Array_first$52.$$arity = -1);
        Opal2.def(self3, "$flatten", $Array_flatten$53 = function $$flatten(level) {
          var self4 = this;
          ;
          function _flatten(array, level2) {
            var result2 = [], i, length, item, ary;
            array = array.$to_a();
            for (i = 0, length = array.length; i < length; i++) {
              item = array[i];
              if (!$$2($nesting3, "Opal")["$respond_to?"](item, "to_ary", true)) {
                result2.push(item);
                continue;
              }
              ary = item.$to_ary();
              if (ary === nil2) {
                result2.push(item);
                continue;
              }
              if (!ary.$$is_array) {
                self4.$raise($$2($nesting3, "TypeError"));
              }
              if (ary === self4) {
                self4.$raise($$2($nesting3, "ArgumentError"));
              }
              switch (level2) {
                case void 0:
                  result2 = result2.concat(_flatten(ary));
                  break;
                case 0:
                  result2.push(ary);
                  break;
                default:
                  result2.push.apply(result2, _flatten(ary, level2 - 1));
              }
            }
            return result2;
          }
          if (level !== void 0) {
            level = $$2($nesting3, "Opal").$coerce_to(level, $$2($nesting3, "Integer"), "to_int");
          }
          return toArraySubclass(_flatten(self4, level), self4.$class());
          ;
        }, $Array_flatten$53.$$arity = -1);
        Opal2.def(self3, "$flatten!", $Array_flatten$excl$54 = function(level) {
          var self4 = this;
          ;
          var flattened = self4.$flatten(level);
          if (self4.length == flattened.length) {
            for (var i = 0, length = self4.length; i < length; i++) {
              if (self4[i] !== flattened[i]) {
                break;
              }
            }
            if (i == length) {
              return nil2;
            }
          }
          self4.$replace(flattened);
          ;
          return self4;
        }, $Array_flatten$excl$54.$$arity = -1);
        Opal2.def(self3, "$hash", $Array_hash$55 = function $$hash() {
          var self4 = this;
          var top = Opal2.hash_ids === void 0, result2 = ["A"], hash_id = self4.$object_id(), item, i, key;
          try {
            if (top) {
              Opal2.hash_ids = Object.create(null);
            }
            if (Opal2.hash_ids[hash_id]) {
              return "self";
            }
            for (key in Opal2.hash_ids) {
              item = Opal2.hash_ids[key];
              if (self4["$eql?"](item)) {
                return "self";
              }
            }
            Opal2.hash_ids[hash_id] = self4;
            for (i = 0; i < self4.length; i++) {
              item = self4[i];
              result2.push(item.$hash());
            }
            return result2.join(",");
          } finally {
            if (top) {
              Opal2.hash_ids = void 0;
            }
          }
        }, $Array_hash$55.$$arity = 0);
        Opal2.def(self3, "$include?", $Array_include$ques$56 = function(member) {
          var self4 = this;
          for (var i = 0, length = self4.length; i < length; i++) {
            if (self4[i]["$=="](member)) {
              return true;
            }
          }
          return false;
        }, $Array_include$ques$56.$$arity = 1);
        Opal2.def(self3, "$index", $Array_index$57 = function $$index(object) {
          var $iter2 = $Array_index$57.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_index$57.$$p = null;
          if ($iter2)
            $Array_index$57.$$p = null;
          ;
          ;
          var i, length, value;
          if (object != null && block2 !== nil2) {
            self4.$warn("warning: given block not used");
          }
          if (object != null) {
            for (i = 0, length = self4.length; i < length; i++) {
              if (self4[i]["$=="](object)) {
                return i;
              }
            }
          } else if (block2 !== nil2) {
            for (i = 0, length = self4.length; i < length; i++) {
              value = block2(self4[i]);
              if (value !== false && value !== nil2) {
                return i;
              }
            }
          } else {
            return self4.$enum_for("index");
          }
          return nil2;
          ;
        }, $Array_index$57.$$arity = -1);
        Opal2.def(self3, "$insert", $Array_insert$58 = function $$insert(index, $a2) {
          var $post_args2, objects, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          objects = $post_args2;
          ;
          index = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
          if (objects.length > 0) {
            if (index < 0) {
              index += self4.length + 1;
              if (index < 0) {
                self4.$raise($$2($nesting3, "IndexError"), "" + index + " is out of bounds");
              }
            }
            if (index > self4.length) {
              for (var i = self4.length; i < index; i++) {
                self4.push(nil2);
              }
            }
            self4.splice.apply(self4, [index, 0].concat(objects));
          }
          ;
          return self4;
        }, $Array_insert$58.$$arity = -2);
        Opal2.def(self3, "$inspect", $Array_inspect$59 = function $$inspect() {
          var self4 = this;
          var result2 = [], id = self4.$__id__();
          for (var i = 0, length = self4.length; i < length; i++) {
            var item = self4["$[]"](i);
            if (item.$__id__() === id) {
              result2.push("[...]");
            } else {
              result2.push(item.$inspect());
            }
          }
          return "[" + result2.join(", ") + "]";
        }, $Array_inspect$59.$$arity = 0);
        Opal2.def(self3, "$join", $Array_join$60 = function $$join(sep) {
          var self4 = this;
          if ($gvars[","] == null)
            $gvars[","] = nil2;
          if (sep == null) {
            sep = nil2;
          }
          ;
          if ($truthy2(self4.length === 0)) {
            return "";
          }
          ;
          if ($truthy2(sep === nil2)) {
            sep = $gvars[","];
          }
          ;
          var result2 = [];
          var i, length, item, tmp;
          for (i = 0, length = self4.length; i < length; i++) {
            item = self4[i];
            if ($$2($nesting3, "Opal")["$respond_to?"](item, "to_str")) {
              tmp = item.$to_str();
              if (tmp !== nil2) {
                result2.push(tmp.$to_s());
                continue;
              }
            }
            if ($$2($nesting3, "Opal")["$respond_to?"](item, "to_ary")) {
              tmp = item.$to_ary();
              if (tmp === self4) {
                self4.$raise($$2($nesting3, "ArgumentError"));
              }
              if (tmp !== nil2) {
                result2.push(tmp.$join(sep));
                continue;
              }
            }
            if ($$2($nesting3, "Opal")["$respond_to?"](item, "to_s")) {
              tmp = item.$to_s();
              if (tmp !== nil2) {
                result2.push(tmp);
                continue;
              }
            }
            self4.$raise($$2($nesting3, "NoMethodError").$new("" + Opal2.inspect(item) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
          }
          if (sep === nil2) {
            return result2.join("");
          } else {
            return result2.join($$2($nesting3, "Opal")["$coerce_to!"](sep, $$2($nesting3, "String"), "to_str").$to_s());
          }
          ;
        }, $Array_join$60.$$arity = -1);
        Opal2.def(self3, "$keep_if", $Array_keep_if$61 = function $$keep_if() {
          var $iter2 = $Array_keep_if$61.$$p, block2 = $iter2 || nil2, $$62, self4 = this;
          if ($iter2)
            $Array_keep_if$61.$$p = null;
          if ($iter2)
            $Array_keep_if$61.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["keep_if"], ($$62 = function() {
              var self5 = $$62.$$s || this;
              return self5.$size();
            }, $$62.$$s = self4, $$62.$$arity = 0, $$62));
          }
          ;
          for (var i = 0, length = self4.length, value; i < length; i++) {
            value = block2(self4[i]);
            if (value === false || value === nil2) {
              self4.splice(i, 1);
              length--;
              i--;
            }
          }
          ;
          return self4;
        }, $Array_keep_if$61.$$arity = 0);
        Opal2.def(self3, "$last", $Array_last$63 = function $$last(count) {
          var self4 = this;
          ;
          if (count == null) {
            return self4.length === 0 ? nil2 : self4[self4.length - 1];
          }
          count = $$2($nesting3, "Opal").$coerce_to(count, $$2($nesting3, "Integer"), "to_int");
          if (count < 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "negative array size");
          }
          if (count > self4.length) {
            count = self4.length;
          }
          return self4.slice(self4.length - count, self4.length);
          ;
        }, $Array_last$63.$$arity = -1);
        Opal2.def(self3, "$length", $Array_length$64 = function $$length() {
          var self4 = this;
          return self4.length;
        }, $Array_length$64.$$arity = 0);
        Opal2.alias(self3, "map", "collect");
        Opal2.alias(self3, "map!", "collect!");
        Opal2.def(self3, "$max", $Array_max$65 = function $$max(n) {
          var $iter2 = $Array_max$65.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_max$65.$$p = null;
          if ($iter2)
            $Array_max$65.$$p = null;
          ;
          ;
          return $send2(self4.$each(), "max", [n], block2.$to_proc());
        }, $Array_max$65.$$arity = -1);
        Opal2.def(self3, "$min", $Array_min$66 = function $$min() {
          var $iter2 = $Array_min$66.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_min$66.$$p = null;
          if ($iter2)
            $Array_min$66.$$p = null;
          ;
          return $send2(self4.$each(), "min", [], block2.$to_proc());
        }, $Array_min$66.$$arity = 0);
        function descending_factorial(from, how_many) {
          var count = how_many >= 0 ? 1 : 0;
          while (how_many) {
            count *= from;
            from--;
            how_many--;
          }
          return count;
        }
        ;
        Opal2.def(self3, "$permutation", $Array_permutation$67 = function $$permutation(num) {
          var $iter2 = $Array_permutation$67.$$p, block2 = $iter2 || nil2, $$68, self4 = this, perm = nil2, used = nil2;
          if ($iter2)
            $Array_permutation$67.$$p = null;
          if ($iter2)
            $Array_permutation$67.$$p = null;
          ;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["permutation", num], ($$68 = function() {
              var self5 = $$68.$$s || this;
              return descending_factorial(self5.length, num === void 0 ? self5.length : num);
            }, $$68.$$s = self4, $$68.$$arity = 0, $$68));
          }
          ;
          var permute, offensive, output;
          if (num === void 0) {
            num = self4.length;
          } else {
            num = $$2($nesting3, "Opal").$coerce_to(num, $$2($nesting3, "Integer"), "to_int");
          }
          if (num < 0 || self4.length < num) {
          } else if (num === 0) {
            Opal2.yield1(block2, []);
          } else if (num === 1) {
            for (var i = 0; i < self4.length; i++) {
              Opal2.yield1(block2, [self4[i]]);
            }
          } else {
            perm = $$2($nesting3, "Array").$new(num);
            used = $$2($nesting3, "Array").$new(self4.length, false);
            permute = function(num2, perm2, index, used2, blk) {
              self4 = this;
              for (var i2 = 0; i2 < self4.length; i2++) {
                if (used2["$[]"](i2)["$!"]()) {
                  perm2[index] = i2;
                  if (index < num2 - 1) {
                    used2[i2] = true;
                    permute.call(self4, num2, perm2, index + 1, used2, blk);
                    used2[i2] = false;
                  } else {
                    output = [];
                    for (var j = 0; j < perm2.length; j++) {
                      output.push(self4[perm2[j]]);
                    }
                    Opal2.yield1(blk, output);
                  }
                }
              }
            };
            if (block2 !== nil2) {
              offensive = self4.slice();
              permute.call(offensive, num, perm, 0, used, block2);
            } else {
              permute.call(self4, num, perm, 0, used, block2);
            }
          }
          ;
          return self4;
        }, $Array_permutation$67.$$arity = -1);
        Opal2.def(self3, "$repeated_permutation", $Array_repeated_permutation$69 = function $$repeated_permutation(n) {
          var $$70, $iter2 = $Array_repeated_permutation$69.$$p, $yield = $iter2 || nil2, self4 = this, num = nil2;
          if ($iter2)
            $Array_repeated_permutation$69.$$p = null;
          num = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["repeated_permutation", num], ($$70 = function() {
              var self5 = $$70.$$s || this;
              if ($truthy2($rb_ge(num, 0))) {
                return self5.$size()["$**"](num);
              } else {
                return 0;
              }
            }, $$70.$$s = self4, $$70.$$arity = 0, $$70));
          }
          ;
          function iterate(max, buffer, self5) {
            if (buffer.length == max) {
              var copy = buffer.slice();
              Opal2.yield1($yield, copy);
              return;
            }
            for (var i = 0; i < self5.length; i++) {
              buffer.push(self5[i]);
              iterate(max, buffer, self5);
              buffer.pop();
            }
          }
          iterate(num, [], self4.slice());
          ;
          return self4;
        }, $Array_repeated_permutation$69.$$arity = 1);
        Opal2.def(self3, "$pop", $Array_pop$71 = function $$pop(count) {
          var self4 = this;
          ;
          if ($truthy2(count === void 0)) {
            if ($truthy2(self4.length === 0)) {
              return nil2;
            }
            ;
            return self4.pop();
          }
          ;
          count = $$2($nesting3, "Opal").$coerce_to(count, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2(count < 0)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "negative array size");
          }
          ;
          if ($truthy2(self4.length === 0)) {
            return [];
          }
          ;
          if ($truthy2(count > self4.length)) {
            return self4.splice(0, self4.length);
          } else {
            return self4.splice(self4.length - count, self4.length);
          }
          ;
        }, $Array_pop$71.$$arity = -1);
        Opal2.def(self3, "$product", $Array_product$72 = function $$product($a2) {
          var $iter2 = $Array_product$72.$$p, block2 = $iter2 || nil2, $post_args2, args2, self4 = this;
          if ($iter2)
            $Array_product$72.$$p = null;
          if ($iter2)
            $Array_product$72.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          var result2 = block2 !== nil2 ? null : [], n = args2.length + 1, counters = new Array(n), lengths = new Array(n), arrays = new Array(n), i, m, subarray, len, resultlen = 1;
          arrays[0] = self4;
          for (i = 1; i < n; i++) {
            arrays[i] = $$2($nesting3, "Opal").$coerce_to(args2[i - 1], $$2($nesting3, "Array"), "to_ary");
          }
          for (i = 0; i < n; i++) {
            len = arrays[i].length;
            if (len === 0) {
              return result2 || self4;
            }
            resultlen *= len;
            if (resultlen > 2147483647) {
              self4.$raise($$2($nesting3, "RangeError"), "too big to product");
            }
            lengths[i] = len;
            counters[i] = 0;
          }
          outer_loop:
            for (; ; ) {
              subarray = [];
              for (i = 0; i < n; i++) {
                subarray.push(arrays[i][counters[i]]);
              }
              if (result2) {
                result2.push(subarray);
              } else {
                Opal2.yield1(block2, subarray);
              }
              m = n - 1;
              counters[m]++;
              while (counters[m] === lengths[m]) {
                counters[m] = 0;
                if (--m < 0)
                  break outer_loop;
                counters[m]++;
              }
            }
          return result2 || self4;
          ;
        }, $Array_product$72.$$arity = -1);
        Opal2.def(self3, "$push", $Array_push$73 = function $$push($a2) {
          var $post_args2, objects, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          objects = $post_args2;
          ;
          for (var i = 0, length = objects.length; i < length; i++) {
            self4.push(objects[i]);
          }
          ;
          return self4;
        }, $Array_push$73.$$arity = -1);
        Opal2.alias(self3, "append", "push");
        Opal2.def(self3, "$rassoc", $Array_rassoc$74 = function $$rassoc(object) {
          var self4 = this;
          for (var i = 0, length = self4.length, item; i < length; i++) {
            item = self4[i];
            if (item.length && item[1] !== void 0) {
              if (item[1]["$=="](object)) {
                return item;
              }
            }
          }
          return nil2;
        }, $Array_rassoc$74.$$arity = 1);
        Opal2.def(self3, "$reject", $Array_reject$75 = function $$reject() {
          var $iter2 = $Array_reject$75.$$p, block2 = $iter2 || nil2, $$76, self4 = this;
          if ($iter2)
            $Array_reject$75.$$p = null;
          if ($iter2)
            $Array_reject$75.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["reject"], ($$76 = function() {
              var self5 = $$76.$$s || this;
              return self5.$size();
            }, $$76.$$s = self4, $$76.$$arity = 0, $$76));
          }
          ;
          var result2 = [];
          for (var i = 0, length = self4.length, value; i < length; i++) {
            value = block2(self4[i]);
            if (value === false || value === nil2) {
              result2.push(self4[i]);
            }
          }
          return result2;
          ;
        }, $Array_reject$75.$$arity = 0);
        Opal2.def(self3, "$reject!", $Array_reject$excl$77 = function() {
          var $iter2 = $Array_reject$excl$77.$$p, block2 = $iter2 || nil2, $$78, self4 = this, original = nil2;
          if ($iter2)
            $Array_reject$excl$77.$$p = null;
          if ($iter2)
            $Array_reject$excl$77.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["reject!"], ($$78 = function() {
              var self5 = $$78.$$s || this;
              return self5.$size();
            }, $$78.$$s = self4, $$78.$$arity = 0, $$78));
          }
          ;
          original = self4.$length();
          $send2(self4, "delete_if", [], block2.$to_proc());
          if (self4.$length()["$=="](original)) {
            return nil2;
          } else {
            return self4;
          }
          ;
        }, $Array_reject$excl$77.$$arity = 0);
        Opal2.def(self3, "$replace", $Array_replace$79 = function $$replace(other) {
          var self4 = this;
          other = function() {
            if ($truthy2($$2($nesting3, "Array")["$==="](other))) {
              return other.$to_a();
            } else {
              return $$2($nesting3, "Opal").$coerce_to(other, $$2($nesting3, "Array"), "to_ary").$to_a();
            }
            ;
            return nil2;
          }();
          self4.splice(0, self4.length);
          self4.push.apply(self4, other);
          ;
          return self4;
        }, $Array_replace$79.$$arity = 1);
        Opal2.def(self3, "$reverse", $Array_reverse$80 = function $$reverse() {
          var self4 = this;
          return self4.slice(0).reverse();
        }, $Array_reverse$80.$$arity = 0);
        Opal2.def(self3, "$reverse!", $Array_reverse$excl$81 = function() {
          var self4 = this;
          return self4.reverse();
        }, $Array_reverse$excl$81.$$arity = 0);
        Opal2.def(self3, "$reverse_each", $Array_reverse_each$82 = function $$reverse_each() {
          var $iter2 = $Array_reverse_each$82.$$p, block2 = $iter2 || nil2, $$83, self4 = this;
          if ($iter2)
            $Array_reverse_each$82.$$p = null;
          if ($iter2)
            $Array_reverse_each$82.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["reverse_each"], ($$83 = function() {
              var self5 = $$83.$$s || this;
              return self5.$size();
            }, $$83.$$s = self4, $$83.$$arity = 0, $$83));
          }
          ;
          $send2(self4.$reverse(), "each", [], block2.$to_proc());
          return self4;
        }, $Array_reverse_each$82.$$arity = 0);
        Opal2.def(self3, "$rindex", $Array_rindex$84 = function $$rindex(object) {
          var $iter2 = $Array_rindex$84.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_rindex$84.$$p = null;
          if ($iter2)
            $Array_rindex$84.$$p = null;
          ;
          ;
          var i, value;
          if (object != null && block2 !== nil2) {
            self4.$warn("warning: given block not used");
          }
          if (object != null) {
            for (i = self4.length - 1; i >= 0; i--) {
              if (i >= self4.length) {
                break;
              }
              if (self4[i]["$=="](object)) {
                return i;
              }
            }
          } else if (block2 !== nil2) {
            for (i = self4.length - 1; i >= 0; i--) {
              if (i >= self4.length) {
                break;
              }
              value = block2(self4[i]);
              if (value !== false && value !== nil2) {
                return i;
              }
            }
          } else if (object == null) {
            return self4.$enum_for("rindex");
          }
          return nil2;
          ;
        }, $Array_rindex$84.$$arity = -1);
        Opal2.def(self3, "$rotate", $Array_rotate$85 = function $$rotate(n) {
          var self4 = this;
          if (n == null) {
            n = 1;
          }
          ;
          n = $$2($nesting3, "Opal").$coerce_to(n, $$2($nesting3, "Integer"), "to_int");
          var ary, idx, firstPart, lastPart;
          if (self4.length === 1) {
            return self4.slice();
          }
          if (self4.length === 0) {
            return [];
          }
          ary = self4.slice();
          idx = n % ary.length;
          firstPart = ary.slice(idx);
          lastPart = ary.slice(0, idx);
          return firstPart.concat(lastPart);
          ;
        }, $Array_rotate$85.$$arity = -1);
        Opal2.def(self3, "$rotate!", $Array_rotate$excl$86 = function(cnt) {
          var self4 = this, ary = nil2;
          if (cnt == null) {
            cnt = 1;
          }
          ;
          if (self4.length === 0 || self4.length === 1) {
            return self4;
          }
          ;
          cnt = $$2($nesting3, "Opal").$coerce_to(cnt, $$2($nesting3, "Integer"), "to_int");
          ary = self4.$rotate(cnt);
          return self4.$replace(ary);
        }, $Array_rotate$excl$86.$$arity = -1);
        (function($base3, $super3, $parent_nesting3) {
          var self4 = $klass2($base3, $super3, "SampleRandom");
          var $nesting4 = [self4].concat($parent_nesting3), $SampleRandom_initialize$87, $SampleRandom_rand$88;
          self4.$$prototype.rng = nil2;
          Opal2.def(self4, "$initialize", $SampleRandom_initialize$87 = function $$initialize(rng) {
            var self5 = this;
            return self5.rng = rng;
          }, $SampleRandom_initialize$87.$$arity = 1);
          return (Opal2.def(self4, "$rand", $SampleRandom_rand$88 = function $$rand(size) {
            var self5 = this, random = nil2;
            random = $$2($nesting4, "Opal").$coerce_to(self5.rng.$rand(size), $$2($nesting4, "Integer"), "to_int");
            if ($truthy2(random < 0)) {
              self5.$raise($$2($nesting4, "RangeError"), "random value must be >= 0");
            }
            ;
            if ($truthy2(random < size)) {
            } else {
              self5.$raise($$2($nesting4, "RangeError"), "random value must be less than Array size");
            }
            ;
            return random;
          }, $SampleRandom_rand$88.$$arity = 1), nil2) && "rand";
        })($nesting3[0], null, $nesting3);
        Opal2.def(self3, "$sample", $Array_sample$89 = function $$sample(count, options) {
          var $a2, self4 = this, o = nil2, rng = nil2;
          ;
          ;
          if ($truthy2(count === void 0)) {
            return self4.$at($$2($nesting3, "Kernel").$rand(self4.length));
          }
          ;
          if ($truthy2(options === void 0)) {
            if ($truthy2(o = $$2($nesting3, "Opal")["$coerce_to?"](count, $$2($nesting3, "Hash"), "to_hash"))) {
              options = o;
              count = nil2;
            } else {
              options = nil2;
              count = $$2($nesting3, "Opal").$coerce_to(count, $$2($nesting3, "Integer"), "to_int");
            }
          } else {
            count = $$2($nesting3, "Opal").$coerce_to(count, $$2($nesting3, "Integer"), "to_int");
            options = $$2($nesting3, "Opal").$coerce_to(options, $$2($nesting3, "Hash"), "to_hash");
          }
          ;
          if ($truthy2($truthy2($a2 = count) ? count < 0 : $a2)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "count must be greater than 0");
          }
          ;
          if ($truthy2(options)) {
            rng = options["$[]"]("random");
          }
          ;
          rng = function() {
            if ($truthy2($truthy2($a2 = rng) ? rng["$respond_to?"]("rand") : $a2)) {
              return $$2($nesting3, "SampleRandom").$new(rng);
            } else {
              return $$2($nesting3, "Kernel");
            }
            ;
            return nil2;
          }();
          if ($truthy2(count)) {
          } else {
            return self4[rng.$rand(self4.length)];
          }
          ;
          var abandon, spin, result2, i, j, k, targetIndex, oldValue;
          if (count > self4.length) {
            count = self4.length;
          }
          switch (count) {
            case 0:
              return [];
              break;
            case 1:
              return [self4[rng.$rand(self4.length)]];
              break;
            case 2:
              i = rng.$rand(self4.length);
              j = rng.$rand(self4.length);
              if (i === j) {
                j = i === 0 ? i + 1 : i - 1;
              }
              return [self4[i], self4[j]];
              break;
            default:
              if (self4.length / count > 3) {
                abandon = false;
                spin = 0;
                result2 = $$2($nesting3, "Array").$new(count);
                i = 1;
                result2[0] = rng.$rand(self4.length);
                while (i < count) {
                  k = rng.$rand(self4.length);
                  j = 0;
                  while (j < i) {
                    while (k === result2[j]) {
                      spin++;
                      if (spin > 100) {
                        abandon = true;
                        break;
                      }
                      k = rng.$rand(self4.length);
                    }
                    if (abandon) {
                      break;
                    }
                    j++;
                  }
                  if (abandon) {
                    break;
                  }
                  result2[i] = k;
                  i++;
                }
                if (!abandon) {
                  i = 0;
                  while (i < count) {
                    result2[i] = self4[result2[i]];
                    i++;
                  }
                  return result2;
                }
              }
              result2 = self4.slice();
              for (var c = 0; c < count; c++) {
                targetIndex = rng.$rand(self4.length);
                oldValue = result2[c];
                result2[c] = result2[targetIndex];
                result2[targetIndex] = oldValue;
              }
              return count === self4.length ? result2 : result2["$[]"](0, count);
          }
          ;
        }, $Array_sample$89.$$arity = -1);
        Opal2.def(self3, "$select", $Array_select$90 = function $$select() {
          var $iter2 = $Array_select$90.$$p, block2 = $iter2 || nil2, $$91, self4 = this;
          if ($iter2)
            $Array_select$90.$$p = null;
          if ($iter2)
            $Array_select$90.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["select"], ($$91 = function() {
              var self5 = $$91.$$s || this;
              return self5.$size();
            }, $$91.$$s = self4, $$91.$$arity = 0, $$91));
          }
          ;
          var result2 = [];
          for (var i = 0, length = self4.length, item, value; i < length; i++) {
            item = self4[i];
            value = Opal2.yield1(block2, item);
            if (Opal2.truthy(value)) {
              result2.push(item);
            }
          }
          return result2;
          ;
        }, $Array_select$90.$$arity = 0);
        Opal2.def(self3, "$select!", $Array_select$excl$92 = function() {
          var $iter2 = $Array_select$excl$92.$$p, block2 = $iter2 || nil2, $$93, self4 = this;
          if ($iter2)
            $Array_select$excl$92.$$p = null;
          if ($iter2)
            $Array_select$excl$92.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["select!"], ($$93 = function() {
              var self5 = $$93.$$s || this;
              return self5.$size();
            }, $$93.$$s = self4, $$93.$$arity = 0, $$93));
          }
          ;
          var original = self4.length;
          $send2(self4, "keep_if", [], block2.$to_proc());
          return self4.length === original ? nil2 : self4;
          ;
        }, $Array_select$excl$92.$$arity = 0);
        Opal2.def(self3, "$shift", $Array_shift$94 = function $$shift(count) {
          var self4 = this;
          ;
          if ($truthy2(count === void 0)) {
            if ($truthy2(self4.length === 0)) {
              return nil2;
            }
            ;
            return shiftNoArg(self4);
          }
          ;
          count = $$2($nesting3, "Opal").$coerce_to(count, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2(count < 0)) {
            self4.$raise($$2($nesting3, "ArgumentError"), "negative array size");
          }
          ;
          if ($truthy2(self4.length === 0)) {
            return [];
          }
          ;
          return self4.splice(0, count);
          ;
        }, $Array_shift$94.$$arity = -1);
        Opal2.alias(self3, "size", "length");
        Opal2.def(self3, "$shuffle", $Array_shuffle$95 = function $$shuffle(rng) {
          var self4 = this;
          ;
          return self4.$dup().$to_a()["$shuffle!"](rng);
        }, $Array_shuffle$95.$$arity = -1);
        Opal2.def(self3, "$shuffle!", $Array_shuffle$excl$96 = function(rng) {
          var self4 = this;
          ;
          var randgen, i = self4.length, j, tmp;
          if (rng !== void 0) {
            rng = $$2($nesting3, "Opal")["$coerce_to?"](rng, $$2($nesting3, "Hash"), "to_hash");
            if (rng !== nil2) {
              rng = rng["$[]"]("random");
              if (rng !== nil2 && rng["$respond_to?"]("rand")) {
                randgen = rng;
              }
            }
          }
          while (i) {
            if (randgen) {
              j = randgen.$rand(i).$to_int();
              if (j < 0) {
                self4.$raise($$2($nesting3, "RangeError"), "random number too small " + j);
              }
              if (j >= i) {
                self4.$raise($$2($nesting3, "RangeError"), "random number too big " + j);
              }
            } else {
              j = self4.$rand(i);
            }
            tmp = self4[--i];
            self4[i] = self4[j];
            self4[j] = tmp;
          }
          return self4;
          ;
        }, $Array_shuffle$excl$96.$$arity = -1);
        Opal2.alias(self3, "slice", "[]");
        Opal2.def(self3, "$slice!", $Array_slice$excl$97 = function(index, length) {
          var self4 = this, result2 = nil2, range = nil2, range_start = nil2, range_end = nil2, start = nil2;
          ;
          result2 = nil2;
          if ($truthy2(length === void 0)) {
            if ($truthy2($$2($nesting3, "Range")["$==="](index))) {
              range = index;
              result2 = self4["$[]"](range);
              range_start = $$2($nesting3, "Opal").$coerce_to(range.$begin(), $$2($nesting3, "Integer"), "to_int");
              range_end = $$2($nesting3, "Opal").$coerce_to(range.$end(), $$2($nesting3, "Integer"), "to_int");
              if (range_start < 0) {
                range_start += self4.length;
              }
              if (range_end < 0) {
                range_end += self4.length;
              } else if (range_end >= self4.length) {
                range_end = self4.length - 1;
                if (range.excl) {
                  range_end += 1;
                }
              }
              var range_length = range_end - range_start;
              if (range.excl) {
                range_end -= 1;
              } else {
                range_length += 1;
              }
              if (range_start < self4.length && range_start >= 0 && range_end < self4.length && range_end >= 0 && range_length > 0) {
                self4.splice(range_start, range_length);
              }
              ;
            } else {
              start = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
              if (start < 0) {
                start += self4.length;
              }
              if (start < 0 || start >= self4.length) {
                return nil2;
              }
              result2 = self4[start];
              if (start === 0) {
                self4.shift();
              } else {
                self4.splice(start, 1);
              }
              ;
            }
          } else {
            start = $$2($nesting3, "Opal").$coerce_to(index, $$2($nesting3, "Integer"), "to_int");
            length = $$2($nesting3, "Opal").$coerce_to(length, $$2($nesting3, "Integer"), "to_int");
            if (length < 0) {
              return nil2;
            }
            var end = start + length;
            result2 = self4["$[]"](start, length);
            if (start < 0) {
              start += self4.length;
            }
            if (start + length > self4.length) {
              length = self4.length - start;
            }
            if (start < self4.length && start >= 0) {
              self4.splice(start, length);
            }
            ;
          }
          ;
          return result2;
        }, $Array_slice$excl$97.$$arity = -2);
        Opal2.def(self3, "$sort", $Array_sort$98 = function $$sort() {
          var $iter2 = $Array_sort$98.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_sort$98.$$p = null;
          if ($iter2)
            $Array_sort$98.$$p = null;
          ;
          if ($truthy2(self4.length > 1)) {
          } else {
            return self4;
          }
          ;
          if (block2 === nil2) {
            block2 = function(a, b) {
              return a["$<=>"](b);
            };
          }
          return self4.slice().sort(function(x, y) {
            var ret = block2(x, y);
            if (ret === nil2) {
              self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + x.$inspect() + " with " + y.$inspect() + " failed");
            }
            return $rb_gt2(ret, 0) ? 1 : $rb_lt2(ret, 0) ? -1 : 0;
          });
          ;
        }, $Array_sort$98.$$arity = 0);
        Opal2.def(self3, "$sort!", $Array_sort$excl$99 = function() {
          var $iter2 = $Array_sort$excl$99.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_sort$excl$99.$$p = null;
          if ($iter2)
            $Array_sort$excl$99.$$p = null;
          ;
          var result2;
          if (block2 !== nil2) {
            result2 = $send2(self4.slice(), "sort", [], block2.$to_proc());
          } else {
            result2 = self4.slice().$sort();
          }
          self4.length = 0;
          for (var i = 0, length = result2.length; i < length; i++) {
            self4.push(result2[i]);
          }
          return self4;
          ;
        }, $Array_sort$excl$99.$$arity = 0);
        Opal2.def(self3, "$sort_by!", $Array_sort_by$excl$100 = function() {
          var $iter2 = $Array_sort_by$excl$100.$$p, block2 = $iter2 || nil2, $$101, self4 = this;
          if ($iter2)
            $Array_sort_by$excl$100.$$p = null;
          if ($iter2)
            $Array_sort_by$excl$100.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["sort_by!"], ($$101 = function() {
              var self5 = $$101.$$s || this;
              return self5.$size();
            }, $$101.$$s = self4, $$101.$$arity = 0, $$101));
          }
          ;
          return self4.$replace($send2(self4, "sort_by", [], block2.$to_proc()));
        }, $Array_sort_by$excl$100.$$arity = 0);
        Opal2.def(self3, "$take", $Array_take$102 = function $$take(count) {
          var self4 = this;
          if (count < 0) {
            self4.$raise($$2($nesting3, "ArgumentError"));
          }
          return self4.slice(0, count);
        }, $Array_take$102.$$arity = 1);
        Opal2.def(self3, "$take_while", $Array_take_while$103 = function $$take_while() {
          var $iter2 = $Array_take_while$103.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_take_while$103.$$p = null;
          if ($iter2)
            $Array_take_while$103.$$p = null;
          ;
          var result2 = [];
          for (var i = 0, length = self4.length, item, value; i < length; i++) {
            item = self4[i];
            value = block2(item);
            if (value === false || value === nil2) {
              return result2;
            }
            result2.push(item);
          }
          return result2;
          ;
        }, $Array_take_while$103.$$arity = 0);
        Opal2.def(self3, "$to_a", $Array_to_a$104 = function $$to_a() {
          var self4 = this;
          return self4;
        }, $Array_to_a$104.$$arity = 0);
        Opal2.alias(self3, "to_ary", "to_a");
        Opal2.def(self3, "$to_h", $Array_to_h$105 = function $$to_h() {
          var self4 = this;
          var i, len = self4.length, ary, key, val, hash = $hash22([], {});
          for (i = 0; i < len; i++) {
            ary = $$2($nesting3, "Opal")["$coerce_to?"](self4[i], $$2($nesting3, "Array"), "to_ary");
            if (!ary.$$is_array) {
              self4.$raise($$2($nesting3, "TypeError"), "wrong element type " + ary.$class() + " at " + i + " (expected array)");
            }
            if (ary.length !== 2) {
              self4.$raise($$2($nesting3, "ArgumentError"), "wrong array length at " + i + " (expected 2, was " + ary.$length() + ")");
            }
            key = ary[0];
            val = ary[1];
            Opal2.hash_put(hash, key, val);
          }
          return hash;
        }, $Array_to_h$105.$$arity = 0);
        Opal2.alias(self3, "to_s", "inspect");
        Opal2.def(self3, "$transpose", $Array_transpose$106 = function $$transpose() {
          var $$107, self4 = this, result2 = nil2, max = nil2;
          if ($truthy2(self4["$empty?"]())) {
            return [];
          }
          ;
          result2 = [];
          max = nil2;
          $send2(self4, "each", [], ($$107 = function(row) {
            var self5 = $$107.$$s || this, $a2, $$108;
            if (row == null) {
              row = nil2;
            }
            ;
            row = function() {
              if ($truthy2($$2($nesting3, "Array")["$==="](row))) {
                return row.$to_a();
              } else {
                return $$2($nesting3, "Opal").$coerce_to(row, $$2($nesting3, "Array"), "to_ary").$to_a();
              }
              ;
              return nil2;
            }();
            max = $truthy2($a2 = max) ? $a2 : row.length;
            if ($truthy2(row.length["$!="](max))) {
              self5.$raise($$2($nesting3, "IndexError"), "element size differs (" + row.length + " should be " + max + ")");
            }
            ;
            return $send2(row.length, "times", [], ($$108 = function(i) {
              var self6 = $$108.$$s || this, $b2, entry = nil2, $writer = nil2;
              if (i == null) {
                i = nil2;
              }
              ;
              entry = $truthy2($b2 = result2["$[]"](i)) ? $b2 : ($writer = [i, []], $send2(result2, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              return entry["$<<"](row.$at(i));
            }, $$108.$$s = self5, $$108.$$arity = 1, $$108));
          }, $$107.$$s = self4, $$107.$$arity = 1, $$107));
          return result2;
        }, $Array_transpose$106.$$arity = 0);
        Opal2.def(self3, "$uniq", $Array_uniq$109 = function $$uniq() {
          var $iter2 = $Array_uniq$109.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_uniq$109.$$p = null;
          if ($iter2)
            $Array_uniq$109.$$p = null;
          ;
          var hash = $hash22([], {}), i, length, item, key;
          if (block2 === nil2) {
            for (i = 0, length = self4.length; i < length; i++) {
              item = self4[i];
              if (Opal2.hash_get(hash, item) === void 0) {
                Opal2.hash_put(hash, item, item);
              }
            }
          } else {
            for (i = 0, length = self4.length; i < length; i++) {
              item = self4[i];
              key = Opal2.yield1(block2, item);
              if (Opal2.hash_get(hash, key) === void 0) {
                Opal2.hash_put(hash, key, item);
              }
            }
          }
          return toArraySubclass(hash.$values(), self4.$class());
          ;
        }, $Array_uniq$109.$$arity = 0);
        Opal2.def(self3, "$uniq!", $Array_uniq$excl$110 = function() {
          var $iter2 = $Array_uniq$excl$110.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Array_uniq$excl$110.$$p = null;
          if ($iter2)
            $Array_uniq$excl$110.$$p = null;
          ;
          var original_length = self4.length, hash = $hash22([], {}), i, length, item, key;
          for (i = 0, length = original_length; i < length; i++) {
            item = self4[i];
            key = block2 === nil2 ? item : Opal2.yield1(block2, item);
            if (Opal2.hash_get(hash, key) === void 0) {
              Opal2.hash_put(hash, key, item);
              continue;
            }
            self4.splice(i, 1);
            length--;
            i--;
          }
          return self4.length === original_length ? nil2 : self4;
          ;
        }, $Array_uniq$excl$110.$$arity = 0);
        Opal2.def(self3, "$unshift", $Array_unshift$111 = function $$unshift($a2) {
          var $post_args2, objects, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          objects = $post_args2;
          ;
          for (var i = objects.length - 1; i >= 0; i--) {
            self4.unshift(objects[i]);
          }
          ;
          return self4;
        }, $Array_unshift$111.$$arity = -1);
        Opal2.alias(self3, "prepend", "unshift");
        Opal2.def(self3, "$values_at", $Array_values_at$112 = function $$values_at($a2) {
          var $post_args2, args2, $$113, self4 = this, out = nil2;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          out = [];
          $send2(args2, "each", [], ($$113 = function(elem) {
            var self5 = $$113.$$s || this, $$114, finish = nil2, start = nil2, i = nil2;
            if (elem == null) {
              elem = nil2;
            }
            ;
            if ($truthy2(elem["$is_a?"]($$2($nesting3, "Range")))) {
              finish = $$2($nesting3, "Opal").$coerce_to(elem.$last(), $$2($nesting3, "Integer"), "to_int");
              start = $$2($nesting3, "Opal").$coerce_to(elem.$first(), $$2($nesting3, "Integer"), "to_int");
              if (start < 0) {
                start = start + self5.length;
                return nil2;
                ;
              }
              ;
              if (finish < 0) {
                finish = finish + self5.length;
              }
              if (elem["$exclude_end?"]()) {
                finish--;
              }
              if (finish < start) {
                return nil2;
                ;
              }
              ;
              return $send2(start, "upto", [finish], ($$114 = function(i2) {
                var self6 = $$114.$$s || this;
                if (i2 == null) {
                  i2 = nil2;
                }
                ;
                return out["$<<"](self6.$at(i2));
              }, $$114.$$s = self5, $$114.$$arity = 1, $$114));
            } else {
              i = $$2($nesting3, "Opal").$coerce_to(elem, $$2($nesting3, "Integer"), "to_int");
              return out["$<<"](self5.$at(i));
            }
            ;
          }, $$113.$$s = self4, $$113.$$arity = 1, $$113));
          return out;
        }, $Array_values_at$112.$$arity = -1);
        Opal2.def(self3, "$zip", $Array_zip$115 = function $$zip($a2) {
          var $iter2 = $Array_zip$115.$$p, block2 = $iter2 || nil2, $post_args2, others, $b2, self4 = this;
          if ($iter2)
            $Array_zip$115.$$p = null;
          if ($iter2)
            $Array_zip$115.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          others = $post_args2;
          ;
          var result2 = [], size = self4.length, part, o, i, j, jj;
          for (j = 0, jj = others.length; j < jj; j++) {
            o = others[j];
            if (o.$$is_array) {
              continue;
            }
            if (o.$$is_enumerator) {
              if (o.$size() === Infinity) {
                others[j] = o.$take(size);
              } else {
                others[j] = o.$to_a();
              }
              continue;
            }
            others[j] = ($truthy2($b2 = $$2($nesting3, "Opal")["$coerce_to?"](o, $$2($nesting3, "Array"), "to_ary")) ? $b2 : $$2($nesting3, "Opal")["$coerce_to!"](o, $$2($nesting3, "Enumerator"), "each")).$to_a();
          }
          for (i = 0; i < size; i++) {
            part = [self4[i]];
            for (j = 0, jj = others.length; j < jj; j++) {
              o = others[j][i];
              if (o == null) {
                o = nil2;
              }
              part[j + 1] = o;
            }
            result2[i] = part;
          }
          if (block2 !== nil2) {
            for (i = 0; i < size; i++) {
              block2(result2[i]);
            }
            return nil2;
          }
          return result2;
          ;
        }, $Array_zip$115.$$arity = -1);
        Opal2.defs(self3, "$inherited", $Array_inherited$116 = function $$inherited(klass) {
          var self4 = this;
          klass.$$prototype.$to_a = function() {
            return this.slice(0, this.length);
          };
        }, $Array_inherited$116.$$arity = 1);
        Opal2.def(self3, "$instance_variables", $Array_instance_variables$117 = function $$instance_variables() {
          var $$118, $iter2 = $Array_instance_variables$117.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Array_instance_variables$117.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return $send2($send2(self4, Opal2.find_super_dispatcher(self4, "instance_variables", $Array_instance_variables$117, false), $zuper, $iter2), "reject", [], ($$118 = function(ivar) {
            var self5 = $$118.$$s || this, $a2;
            if (ivar == null) {
              ivar = nil2;
            }
            ;
            return $truthy2($a2 = /^@\d+$/.test(ivar)) ? $a2 : ivar["$=="]("@length");
          }, $$118.$$s = self4, $$118.$$arity = 1, $$118));
        }, $Array_instance_variables$117.$$arity = 0);
        $$2($nesting3, "Opal").$pristine(self3.$singleton_class(), "allocate");
        $$2($nesting3, "Opal").$pristine(self3, "copy_instance_variables", "initialize_dup");
        return (Opal2.def(self3, "$pack", $Array_pack$119 = function $$pack($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          return self4.$raise("To use Array#pack, you must first require 'corelib/array/pack'.");
        }, $Array_pack$119.$$arity = -1), nil2) && "pack";
      }($nesting2[0], Array, $nesting2);
    };
    Opal.modules["corelib/hash"] = function(Opal2) {
      function $rb_ge(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
      }
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $send2 = Opal2.send, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$require", "$include", "$coerce_to?", "$[]", "$merge!", "$allocate", "$raise", "$coerce_to!", "$each", "$fetch", "$>=", "$>", "$==", "$compare_by_identity", "$lambda?", "$abs", "$arity", "$enum_for", "$size", "$respond_to?", "$class", "$dig", "$new", "$inspect", "$map", "$to_proc", "$flatten", "$eql?", "$default", "$dup", "$default_proc", "$default_proc=", "$-", "$default=", "$proc"]);
      self2.$require("corelib/enumerable");
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Hash");
        var $nesting3 = [self3].concat($parent_nesting2), $Hash_$$$1, $Hash_allocate$2, $Hash_try_convert$3, $Hash_initialize$4, $Hash_$eq_eq$5, $Hash_$gt_eq$6, $Hash_$gt$8, $Hash_$lt$9, $Hash_$lt_eq$10, $Hash_$$$11, $Hash_$$$eq$12, $Hash_assoc$13, $Hash_clear$14, $Hash_clone$15, $Hash_compact$16, $Hash_compact$excl$17, $Hash_compare_by_identity$18, $Hash_compare_by_identity$ques$19, $Hash_default$20, $Hash_default$eq$21, $Hash_default_proc$22, $Hash_default_proc$eq$23, $Hash_delete$24, $Hash_delete_if$25, $Hash_dig$27, $Hash_each$28, $Hash_each_key$30, $Hash_each_value$32, $Hash_empty$ques$34, $Hash_fetch$35, $Hash_fetch_values$36, $Hash_flatten$38, $Hash_has_key$ques$39, $Hash_has_value$ques$40, $Hash_hash$41, $Hash_index$42, $Hash_indexes$43, $Hash_inspect$44, $Hash_invert$45, $Hash_keep_if$46, $Hash_keys$48, $Hash_length$49, $Hash_merge$50, $Hash_merge$excl$51, $Hash_rassoc$52, $Hash_rehash$53, $Hash_reject$54, $Hash_reject$excl$56, $Hash_replace$58, $Hash_select$59, $Hash_select$excl$61, $Hash_shift$63, $Hash_slice$64, $Hash_to_a$65, $Hash_to_h$66, $Hash_to_hash$67, $Hash_to_proc$68, $Hash_transform_keys$70, $Hash_transform_keys$excl$72, $Hash_transform_values$74, $Hash_transform_values$excl$76, $Hash_values$78;
        self3.$include($$2($nesting3, "Enumerable"));
        self3.$$prototype.$$is_hash = true;
        Opal2.defs(self3, "$[]", $Hash_$$$1 = function($a2) {
          var $post_args2, argv, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          argv = $post_args2;
          ;
          var hash, argc = argv.length, i;
          if (argc === 1) {
            hash = $$2($nesting3, "Opal")["$coerce_to?"](argv["$[]"](0), $$2($nesting3, "Hash"), "to_hash");
            if (hash !== nil2) {
              return self4.$allocate()["$merge!"](hash);
            }
            argv = $$2($nesting3, "Opal")["$coerce_to?"](argv["$[]"](0), $$2($nesting3, "Array"), "to_ary");
            if (argv === nil2) {
              self4.$raise($$2($nesting3, "ArgumentError"), "odd number of arguments for Hash");
            }
            argc = argv.length;
            hash = self4.$allocate();
            for (i = 0; i < argc; i++) {
              if (!argv[i].$$is_array)
                continue;
              switch (argv[i].length) {
                case 1:
                  hash.$store(argv[i][0], nil2);
                  break;
                case 2:
                  hash.$store(argv[i][0], argv[i][1]);
                  break;
                default:
                  self4.$raise($$2($nesting3, "ArgumentError"), "invalid number of elements (" + argv[i].length + " for 1..2)");
              }
            }
            return hash;
          }
          if (argc % 2 !== 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "odd number of arguments for Hash");
          }
          hash = self4.$allocate();
          for (i = 0; i < argc; i += 2) {
            hash.$store(argv[i], argv[i + 1]);
          }
          return hash;
          ;
        }, $Hash_$$$1.$$arity = -1);
        Opal2.defs(self3, "$allocate", $Hash_allocate$2 = function $$allocate() {
          var self4 = this;
          var hash = new self4.$$constructor();
          Opal2.hash_init(hash);
          hash.$$none = nil2;
          hash.$$proc = nil2;
          return hash;
        }, $Hash_allocate$2.$$arity = 0);
        Opal2.defs(self3, "$try_convert", $Hash_try_convert$3 = function $$try_convert(obj) {
          var self4 = this;
          return $$2($nesting3, "Opal")["$coerce_to?"](obj, $$2($nesting3, "Hash"), "to_hash");
        }, $Hash_try_convert$3.$$arity = 1);
        Opal2.def(self3, "$initialize", $Hash_initialize$4 = function $$initialize(defaults) {
          var $iter2 = $Hash_initialize$4.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Hash_initialize$4.$$p = null;
          if ($iter2)
            $Hash_initialize$4.$$p = null;
          ;
          ;
          if (defaults !== void 0 && block2 !== nil2) {
            self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (1 for 0)");
          }
          self4.$$none = defaults === void 0 ? nil2 : defaults;
          self4.$$proc = block2;
          return self4;
          ;
        }, $Hash_initialize$4.$$arity = -1);
        Opal2.def(self3, "$==", $Hash_$eq_eq$5 = function(other) {
          var self4 = this;
          if (self4 === other) {
            return true;
          }
          if (!other.$$is_hash) {
            return false;
          }
          if (self4.$$keys.length !== other.$$keys.length) {
            return false;
          }
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
              other_value = other.$$smap[key];
            } else {
              value = key.value;
              other_value = Opal2.hash_get(other, key.key);
            }
            if (other_value === void 0 || !value["$eql?"](other_value)) {
              return false;
            }
          }
          return true;
        }, $Hash_$eq_eq$5.$$arity = 1);
        Opal2.def(self3, "$>=", $Hash_$gt_eq$6 = function(other) {
          var $$7, self4 = this, result2 = nil2;
          other = $$2($nesting3, "Opal")["$coerce_to!"](other, $$2($nesting3, "Hash"), "to_hash");
          if (self4.$$keys.length < other.$$keys.length) {
            return false;
          }
          ;
          result2 = true;
          $send2(other, "each", [], ($$7 = function(other_key, other_val) {
            var self5 = $$7.$$s || this, val = nil2;
            if (other_key == null) {
              other_key = nil2;
            }
            ;
            if (other_val == null) {
              other_val = nil2;
            }
            ;
            val = self5.$fetch(other_key, null);
            if (val == null || val !== other_val) {
              result2 = false;
              return;
            }
            ;
          }, $$7.$$s = self4, $$7.$$arity = 2, $$7));
          return result2;
        }, $Hash_$gt_eq$6.$$arity = 1);
        Opal2.def(self3, "$>", $Hash_$gt$8 = function(other) {
          var self4 = this;
          other = $$2($nesting3, "Opal")["$coerce_to!"](other, $$2($nesting3, "Hash"), "to_hash");
          if (self4.$$keys.length <= other.$$keys.length) {
            return false;
          }
          ;
          return $rb_ge(self4, other);
        }, $Hash_$gt$8.$$arity = 1);
        Opal2.def(self3, "$<", $Hash_$lt$9 = function(other) {
          var self4 = this;
          other = $$2($nesting3, "Opal")["$coerce_to!"](other, $$2($nesting3, "Hash"), "to_hash");
          return $rb_gt2(other, self4);
        }, $Hash_$lt$9.$$arity = 1);
        Opal2.def(self3, "$<=", $Hash_$lt_eq$10 = function(other) {
          var self4 = this;
          other = $$2($nesting3, "Opal")["$coerce_to!"](other, $$2($nesting3, "Hash"), "to_hash");
          return $rb_ge(other, self4);
        }, $Hash_$lt_eq$10.$$arity = 1);
        Opal2.def(self3, "$[]", $Hash_$$$11 = function(key) {
          var self4 = this;
          var value = Opal2.hash_get(self4, key);
          if (value !== void 0) {
            return value;
          }
          return self4.$default(key);
        }, $Hash_$$$11.$$arity = 1);
        Opal2.def(self3, "$[]=", $Hash_$$$eq$12 = function(key, value) {
          var self4 = this;
          Opal2.hash_put(self4, key, value);
          return value;
        }, $Hash_$$$eq$12.$$arity = 2);
        Opal2.def(self3, "$assoc", $Hash_assoc$13 = function $$assoc(object) {
          var self4 = this;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              if (key["$=="](object)) {
                return [key, self4.$$smap[key]];
              }
            } else {
              if (key.key["$=="](object)) {
                return [key.key, key.value];
              }
            }
          }
          return nil2;
        }, $Hash_assoc$13.$$arity = 1);
        Opal2.def(self3, "$clear", $Hash_clear$14 = function $$clear() {
          var self4 = this;
          Opal2.hash_init(self4);
          return self4;
        }, $Hash_clear$14.$$arity = 0);
        Opal2.def(self3, "$clone", $Hash_clone$15 = function $$clone() {
          var self4 = this;
          var hash = new self4.$$class();
          Opal2.hash_init(hash);
          Opal2.hash_clone(self4, hash);
          return hash;
        }, $Hash_clone$15.$$arity = 0);
        Opal2.def(self3, "$compact", $Hash_compact$16 = function $$compact() {
          var self4 = this;
          var hash = Opal2.hash();
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            if (value !== nil2) {
              Opal2.hash_put(hash, key, value);
            }
          }
          return hash;
        }, $Hash_compact$16.$$arity = 0);
        Opal2.def(self3, "$compact!", $Hash_compact$excl$17 = function() {
          var self4 = this;
          var changes_were_made = false;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            if (value === nil2) {
              if (Opal2.hash_delete(self4, key) !== void 0) {
                changes_were_made = true;
                length--;
                i--;
              }
            }
          }
          return changes_were_made ? self4 : nil2;
        }, $Hash_compact$excl$17.$$arity = 0);
        Opal2.def(self3, "$compare_by_identity", $Hash_compare_by_identity$18 = function $$compare_by_identity() {
          var self4 = this;
          var i, ii, key, keys = self4.$$keys, identity_hash;
          if (self4.$$by_identity)
            return self4;
          if (self4.$$keys.length === 0) {
            self4.$$by_identity = true;
            return self4;
          }
          identity_hash = $hash22([], {}).$compare_by_identity();
          for (i = 0, ii = keys.length; i < ii; i++) {
            key = keys[i];
            if (!key.$$is_string)
              key = key.key;
            Opal2.hash_put(identity_hash, key, Opal2.hash_get(self4, key));
          }
          self4.$$by_identity = true;
          self4.$$map = identity_hash.$$map;
          self4.$$smap = identity_hash.$$smap;
          return self4;
        }, $Hash_compare_by_identity$18.$$arity = 0);
        Opal2.def(self3, "$compare_by_identity?", $Hash_compare_by_identity$ques$19 = function() {
          var self4 = this;
          return self4.$$by_identity === true;
        }, $Hash_compare_by_identity$ques$19.$$arity = 0);
        Opal2.def(self3, "$default", $Hash_default$20 = function(key) {
          var self4 = this;
          ;
          if (key !== void 0 && self4.$$proc !== nil2 && self4.$$proc !== void 0) {
            return self4.$$proc.$call(self4, key);
          }
          if (self4.$$none === void 0) {
            return nil2;
          }
          return self4.$$none;
          ;
        }, $Hash_default$20.$$arity = -1);
        Opal2.def(self3, "$default=", $Hash_default$eq$21 = function(object) {
          var self4 = this;
          self4.$$proc = nil2;
          self4.$$none = object;
          return object;
        }, $Hash_default$eq$21.$$arity = 1);
        Opal2.def(self3, "$default_proc", $Hash_default_proc$22 = function $$default_proc() {
          var self4 = this;
          if (self4.$$proc !== void 0) {
            return self4.$$proc;
          }
          return nil2;
        }, $Hash_default_proc$22.$$arity = 0);
        Opal2.def(self3, "$default_proc=", $Hash_default_proc$eq$23 = function(default_proc) {
          var self4 = this;
          var proc = default_proc;
          if (proc !== nil2) {
            proc = $$2($nesting3, "Opal")["$coerce_to!"](proc, $$2($nesting3, "Proc"), "to_proc");
            if (proc["$lambda?"]() && proc.$arity().$abs() !== 2) {
              self4.$raise($$2($nesting3, "TypeError"), "default_proc takes two arguments");
            }
          }
          self4.$$none = nil2;
          self4.$$proc = proc;
          return default_proc;
        }, $Hash_default_proc$eq$23.$$arity = 1);
        Opal2.def(self3, "$delete", $Hash_delete$24 = function(key) {
          var $iter2 = $Hash_delete$24.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Hash_delete$24.$$p = null;
          if ($iter2)
            $Hash_delete$24.$$p = null;
          ;
          var value = Opal2.hash_delete(self4, key);
          if (value !== void 0) {
            return value;
          }
          if (block2 !== nil2) {
            return Opal2.yield1(block2, key);
          }
          return nil2;
          ;
        }, $Hash_delete$24.$$arity = 1);
        Opal2.def(self3, "$delete_if", $Hash_delete_if$25 = function $$delete_if() {
          var $iter2 = $Hash_delete_if$25.$$p, block2 = $iter2 || nil2, $$26, self4 = this;
          if ($iter2)
            $Hash_delete_if$25.$$p = null;
          if ($iter2)
            $Hash_delete_if$25.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["delete_if"], ($$26 = function() {
              var self5 = $$26.$$s || this;
              return self5.$size();
            }, $$26.$$s = self4, $$26.$$arity = 0, $$26));
          }
          ;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            obj = block2(key, value);
            if (obj !== false && obj !== nil2) {
              if (Opal2.hash_delete(self4, key) !== void 0) {
                length--;
                i--;
              }
            }
          }
          return self4;
          ;
        }, $Hash_delete_if$25.$$arity = 0);
        Opal2.alias(self3, "dup", "clone");
        Opal2.def(self3, "$dig", $Hash_dig$27 = function $$dig(key, $a2) {
          var $post_args2, keys, self4 = this, item = nil2;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          keys = $post_args2;
          ;
          item = self4["$[]"](key);
          if (item === nil2 || keys.length === 0) {
            return item;
          }
          ;
          if ($truthy2(item["$respond_to?"]("dig"))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "" + item.$class() + " does not have #dig method");
          }
          ;
          return $send2(item, "dig", Opal2.to_a(keys));
        }, $Hash_dig$27.$$arity = -2);
        Opal2.def(self3, "$each", $Hash_each$28 = function $$each() {
          var $iter2 = $Hash_each$28.$$p, block2 = $iter2 || nil2, $$29, self4 = this;
          if ($iter2)
            $Hash_each$28.$$p = null;
          if ($iter2)
            $Hash_each$28.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["each"], ($$29 = function() {
              var self5 = $$29.$$s || this;
              return self5.$size();
            }, $$29.$$s = self4, $$29.$$arity = 0, $$29));
          }
          ;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            Opal2.yield1(block2, [key, value]);
          }
          return self4;
          ;
        }, $Hash_each$28.$$arity = 0);
        Opal2.def(self3, "$each_key", $Hash_each_key$30 = function $$each_key() {
          var $iter2 = $Hash_each_key$30.$$p, block2 = $iter2 || nil2, $$31, self4 = this;
          if ($iter2)
            $Hash_each_key$30.$$p = null;
          if ($iter2)
            $Hash_each_key$30.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["each_key"], ($$31 = function() {
              var self5 = $$31.$$s || this;
              return self5.$size();
            }, $$31.$$s = self4, $$31.$$arity = 0, $$31));
          }
          ;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key; i < length; i++) {
            key = keys[i];
            block2(key.$$is_string ? key : key.key);
          }
          return self4;
          ;
        }, $Hash_each_key$30.$$arity = 0);
        Opal2.alias(self3, "each_pair", "each");
        Opal2.def(self3, "$each_value", $Hash_each_value$32 = function $$each_value() {
          var $iter2 = $Hash_each_value$32.$$p, block2 = $iter2 || nil2, $$33, self4 = this;
          if ($iter2)
            $Hash_each_value$32.$$p = null;
          if ($iter2)
            $Hash_each_value$32.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["each_value"], ($$33 = function() {
              var self5 = $$33.$$s || this;
              return self5.$size();
            }, $$33.$$s = self4, $$33.$$arity = 0, $$33));
          }
          ;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key; i < length; i++) {
            key = keys[i];
            block2(key.$$is_string ? self4.$$smap[key] : key.value);
          }
          return self4;
          ;
        }, $Hash_each_value$32.$$arity = 0);
        Opal2.def(self3, "$empty?", $Hash_empty$ques$34 = function() {
          var self4 = this;
          return self4.$$keys.length === 0;
        }, $Hash_empty$ques$34.$$arity = 0);
        Opal2.alias(self3, "eql?", "==");
        Opal2.def(self3, "$fetch", $Hash_fetch$35 = function $$fetch(key, defaults) {
          var $iter2 = $Hash_fetch$35.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Hash_fetch$35.$$p = null;
          if ($iter2)
            $Hash_fetch$35.$$p = null;
          ;
          ;
          var value = Opal2.hash_get(self4, key);
          if (value !== void 0) {
            return value;
          }
          if (block2 !== nil2) {
            return block2(key);
          }
          if (defaults !== void 0) {
            return defaults;
          }
          ;
          return self4.$raise($$2($nesting3, "KeyError").$new("key not found: " + key.$inspect(), $hash22(["key", "receiver"], { "key": key, "receiver": self4 })));
        }, $Hash_fetch$35.$$arity = -2);
        Opal2.def(self3, "$fetch_values", $Hash_fetch_values$36 = function $$fetch_values($a2) {
          var $iter2 = $Hash_fetch_values$36.$$p, block2 = $iter2 || nil2, $post_args2, keys, $$37, self4 = this;
          if ($iter2)
            $Hash_fetch_values$36.$$p = null;
          if ($iter2)
            $Hash_fetch_values$36.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          keys = $post_args2;
          ;
          return $send2(keys, "map", [], ($$37 = function(key) {
            var self5 = $$37.$$s || this;
            if (key == null) {
              key = nil2;
            }
            ;
            return $send2(self5, "fetch", [key], block2.$to_proc());
          }, $$37.$$s = self4, $$37.$$arity = 1, $$37));
        }, $Hash_fetch_values$36.$$arity = -1);
        Opal2.def(self3, "$flatten", $Hash_flatten$38 = function $$flatten(level) {
          var self4 = this;
          if (level == null) {
            level = 1;
          }
          ;
          level = $$2($nesting3, "Opal")["$coerce_to!"](level, $$2($nesting3, "Integer"), "to_int");
          var result2 = [];
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            result2.push(key);
            if (value.$$is_array) {
              if (level === 1) {
                result2.push(value);
                continue;
              }
              result2 = result2.concat(value.$flatten(level - 2));
              continue;
            }
            result2.push(value);
          }
          return result2;
          ;
        }, $Hash_flatten$38.$$arity = -1);
        Opal2.def(self3, "$has_key?", $Hash_has_key$ques$39 = function(key) {
          var self4 = this;
          return Opal2.hash_get(self4, key) !== void 0;
        }, $Hash_has_key$ques$39.$$arity = 1);
        Opal2.def(self3, "$has_value?", $Hash_has_value$ques$40 = function(value) {
          var self4 = this;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key; i < length; i++) {
            key = keys[i];
            if ((key.$$is_string ? self4.$$smap[key] : key.value)["$=="](value)) {
              return true;
            }
          }
          return false;
        }, $Hash_has_value$ques$40.$$arity = 1);
        Opal2.def(self3, "$hash", $Hash_hash$41 = function $$hash() {
          var self4 = this;
          var top = Opal2.hash_ids === void 0, hash_id = self4.$object_id(), result2 = ["Hash"], key, item;
          try {
            if (top) {
              Opal2.hash_ids = Object.create(null);
            }
            if (Opal2[hash_id]) {
              return "self";
            }
            for (key in Opal2.hash_ids) {
              item = Opal2.hash_ids[key];
              if (self4["$eql?"](item)) {
                return "self";
              }
            }
            Opal2.hash_ids[hash_id] = self4;
            for (var i = 0, keys = self4.$$keys, length = keys.length; i < length; i++) {
              key = keys[i];
              if (key.$$is_string) {
                result2.push([key, self4.$$smap[key].$hash()]);
              } else {
                result2.push([key.key_hash, key.value.$hash()]);
              }
            }
            return result2.sort().join();
          } finally {
            if (top) {
              Opal2.hash_ids = void 0;
            }
          }
        }, $Hash_hash$41.$$arity = 0);
        Opal2.alias(self3, "include?", "has_key?");
        Opal2.def(self3, "$index", $Hash_index$42 = function $$index(object) {
          var self4 = this;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            if (value["$=="](object)) {
              return key;
            }
          }
          return nil2;
        }, $Hash_index$42.$$arity = 1);
        Opal2.def(self3, "$indexes", $Hash_indexes$43 = function $$indexes($a2) {
          var $post_args2, args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          var result2 = [];
          for (var i = 0, length = args2.length, key, value; i < length; i++) {
            key = args2[i];
            value = Opal2.hash_get(self4, key);
            if (value === void 0) {
              result2.push(self4.$default());
              continue;
            }
            result2.push(value);
          }
          return result2;
          ;
        }, $Hash_indexes$43.$$arity = -1);
        Opal2.alias(self3, "indices", "indexes");
        var inspect_ids;
        Opal2.def(self3, "$inspect", $Hash_inspect$44 = function $$inspect() {
          var self4 = this;
          var top = inspect_ids === void 0, hash_id = self4.$object_id(), result2 = [];
          try {
            if (top) {
              inspect_ids = {};
            }
            if (inspect_ids.hasOwnProperty(hash_id)) {
              return "{...}";
            }
            inspect_ids[hash_id] = true;
            for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
              key = keys[i];
              if (key.$$is_string) {
                value = self4.$$smap[key];
              } else {
                value = key.value;
                key = key.key;
              }
              result2.push(key.$inspect() + "=>" + value.$inspect());
            }
            return "{" + result2.join(", ") + "}";
          } finally {
            if (top) {
              inspect_ids = void 0;
            }
          }
        }, $Hash_inspect$44.$$arity = 0);
        Opal2.def(self3, "$invert", $Hash_invert$45 = function $$invert() {
          var self4 = this;
          var hash = Opal2.hash();
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            Opal2.hash_put(hash, value, key);
          }
          return hash;
        }, $Hash_invert$45.$$arity = 0);
        Opal2.def(self3, "$keep_if", $Hash_keep_if$46 = function $$keep_if() {
          var $iter2 = $Hash_keep_if$46.$$p, block2 = $iter2 || nil2, $$472, self4 = this;
          if ($iter2)
            $Hash_keep_if$46.$$p = null;
          if ($iter2)
            $Hash_keep_if$46.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["keep_if"], ($$472 = function() {
              var self5 = $$472.$$s || this;
              return self5.$size();
            }, $$472.$$s = self4, $$472.$$arity = 0, $$472));
          }
          ;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            obj = block2(key, value);
            if (obj === false || obj === nil2) {
              if (Opal2.hash_delete(self4, key) !== void 0) {
                length--;
                i--;
              }
            }
          }
          return self4;
          ;
        }, $Hash_keep_if$46.$$arity = 0);
        Opal2.alias(self3, "key", "index");
        Opal2.alias(self3, "key?", "has_key?");
        Opal2.def(self3, "$keys", $Hash_keys$48 = function $$keys() {
          var self4 = this;
          var result2 = [];
          for (var i = 0, keys = self4.$$keys, length = keys.length, key; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              result2.push(key);
            } else {
              result2.push(key.key);
            }
          }
          return result2;
        }, $Hash_keys$48.$$arity = 0);
        Opal2.def(self3, "$length", $Hash_length$49 = function $$length() {
          var self4 = this;
          return self4.$$keys.length;
        }, $Hash_length$49.$$arity = 0);
        Opal2.alias(self3, "member?", "has_key?");
        Opal2.def(self3, "$merge", $Hash_merge$50 = function $$merge(other) {
          var $iter2 = $Hash_merge$50.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Hash_merge$50.$$p = null;
          if ($iter2)
            $Hash_merge$50.$$p = null;
          ;
          return $send2(self4.$dup(), "merge!", [other], block2.$to_proc());
        }, $Hash_merge$50.$$arity = 1);
        Opal2.def(self3, "$merge!", $Hash_merge$excl$51 = function(other) {
          var $iter2 = $Hash_merge$excl$51.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Hash_merge$excl$51.$$p = null;
          if ($iter2)
            $Hash_merge$excl$51.$$p = null;
          ;
          if (!other.$$is_hash) {
            other = $$2($nesting3, "Opal")["$coerce_to!"](other, $$2($nesting3, "Hash"), "to_hash");
          }
          var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;
          if (block2 === nil2) {
            for (i = 0; i < length; i++) {
              key = other_keys[i];
              if (key.$$is_string) {
                other_value = other.$$smap[key];
              } else {
                other_value = key.value;
                key = key.key;
              }
              Opal2.hash_put(self4, key, other_value);
            }
            return self4;
          }
          for (i = 0; i < length; i++) {
            key = other_keys[i];
            if (key.$$is_string) {
              other_value = other.$$smap[key];
            } else {
              other_value = key.value;
              key = key.key;
            }
            value = Opal2.hash_get(self4, key);
            if (value === void 0) {
              Opal2.hash_put(self4, key, other_value);
              continue;
            }
            Opal2.hash_put(self4, key, block2(key, value, other_value));
          }
          return self4;
          ;
        }, $Hash_merge$excl$51.$$arity = 1);
        Opal2.def(self3, "$rassoc", $Hash_rassoc$52 = function $$rassoc(object) {
          var self4 = this;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            if (value["$=="](object)) {
              return [key, value];
            }
          }
          return nil2;
        }, $Hash_rassoc$52.$$arity = 1);
        Opal2.def(self3, "$rehash", $Hash_rehash$53 = function $$rehash() {
          var self4 = this;
          Opal2.hash_rehash(self4);
          return self4;
        }, $Hash_rehash$53.$$arity = 0);
        Opal2.def(self3, "$reject", $Hash_reject$54 = function $$reject() {
          var $iter2 = $Hash_reject$54.$$p, block2 = $iter2 || nil2, $$55, self4 = this;
          if ($iter2)
            $Hash_reject$54.$$p = null;
          if ($iter2)
            $Hash_reject$54.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["reject"], ($$55 = function() {
              var self5 = $$55.$$s || this;
              return self5.$size();
            }, $$55.$$s = self4, $$55.$$arity = 0, $$55));
          }
          ;
          var hash = Opal2.hash();
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            obj = block2(key, value);
            if (obj === false || obj === nil2) {
              Opal2.hash_put(hash, key, value);
            }
          }
          return hash;
          ;
        }, $Hash_reject$54.$$arity = 0);
        Opal2.def(self3, "$reject!", $Hash_reject$excl$56 = function() {
          var $iter2 = $Hash_reject$excl$56.$$p, block2 = $iter2 || nil2, $$57, self4 = this;
          if ($iter2)
            $Hash_reject$excl$56.$$p = null;
          if ($iter2)
            $Hash_reject$excl$56.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["reject!"], ($$57 = function() {
              var self5 = $$57.$$s || this;
              return self5.$size();
            }, $$57.$$s = self4, $$57.$$arity = 0, $$57));
          }
          ;
          var changes_were_made = false;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            obj = block2(key, value);
            if (obj !== false && obj !== nil2) {
              if (Opal2.hash_delete(self4, key) !== void 0) {
                changes_were_made = true;
                length--;
                i--;
              }
            }
          }
          return changes_were_made ? self4 : nil2;
          ;
        }, $Hash_reject$excl$56.$$arity = 0);
        Opal2.def(self3, "$replace", $Hash_replace$58 = function $$replace(other) {
          var self4 = this, $writer = nil2;
          other = $$2($nesting3, "Opal")["$coerce_to!"](other, $$2($nesting3, "Hash"), "to_hash");
          Opal2.hash_init(self4);
          for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
            key = other_keys[i];
            if (key.$$is_string) {
              other_value = other.$$smap[key];
            } else {
              other_value = key.value;
              key = key.key;
            }
            Opal2.hash_put(self4, key, other_value);
          }
          ;
          if ($truthy2(other.$default_proc())) {
            $writer = [other.$default_proc()];
            $send2(self4, "default_proc=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else {
            $writer = [other.$default()];
            $send2(self4, "default=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }
          ;
          return self4;
        }, $Hash_replace$58.$$arity = 1);
        Opal2.def(self3, "$select", $Hash_select$59 = function $$select() {
          var $iter2 = $Hash_select$59.$$p, block2 = $iter2 || nil2, $$60, self4 = this;
          if ($iter2)
            $Hash_select$59.$$p = null;
          if ($iter2)
            $Hash_select$59.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["select"], ($$60 = function() {
              var self5 = $$60.$$s || this;
              return self5.$size();
            }, $$60.$$s = self4, $$60.$$arity = 0, $$60));
          }
          ;
          var hash = Opal2.hash();
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            obj = block2(key, value);
            if (obj !== false && obj !== nil2) {
              Opal2.hash_put(hash, key, value);
            }
          }
          return hash;
          ;
        }, $Hash_select$59.$$arity = 0);
        Opal2.def(self3, "$select!", $Hash_select$excl$61 = function() {
          var $iter2 = $Hash_select$excl$61.$$p, block2 = $iter2 || nil2, $$62, self4 = this;
          if ($iter2)
            $Hash_select$excl$61.$$p = null;
          if ($iter2)
            $Hash_select$excl$61.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["select!"], ($$62 = function() {
              var self5 = $$62.$$s || this;
              return self5.$size();
            }, $$62.$$s = self4, $$62.$$arity = 0, $$62));
          }
          ;
          var result2 = nil2;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value, obj; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            obj = block2(key, value);
            if (obj === false || obj === nil2) {
              if (Opal2.hash_delete(self4, key) !== void 0) {
                length--;
                i--;
              }
              result2 = self4;
            }
          }
          return result2;
          ;
        }, $Hash_select$excl$61.$$arity = 0);
        Opal2.def(self3, "$shift", $Hash_shift$63 = function $$shift() {
          var self4 = this;
          var keys = self4.$$keys, key;
          if (keys.length > 0) {
            key = keys[0];
            key = key.$$is_string ? key : key.key;
            return [key, Opal2.hash_delete(self4, key)];
          }
          return self4.$default(nil2);
        }, $Hash_shift$63.$$arity = 0);
        Opal2.alias(self3, "size", "length");
        Opal2.def(self3, "$slice", $Hash_slice$64 = function $$slice($a2) {
          var $post_args2, keys, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          keys = $post_args2;
          ;
          var result2 = Opal2.hash();
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], value = Opal2.hash_get(self4, key);
            if (value !== void 0) {
              Opal2.hash_put(result2, key, value);
            }
          }
          return result2;
          ;
        }, $Hash_slice$64.$$arity = -1);
        Opal2.alias(self3, "store", "[]=");
        Opal2.def(self3, "$to_a", $Hash_to_a$65 = function $$to_a() {
          var self4 = this;
          var result2 = [];
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            result2.push([key, value]);
          }
          return result2;
        }, $Hash_to_a$65.$$arity = 0);
        Opal2.def(self3, "$to_h", $Hash_to_h$66 = function $$to_h() {
          var self4 = this;
          if (self4.$$class === Opal2.Hash) {
            return self4;
          }
          var hash = new Opal2.Hash();
          Opal2.hash_init(hash);
          Opal2.hash_clone(self4, hash);
          return hash;
        }, $Hash_to_h$66.$$arity = 0);
        Opal2.def(self3, "$to_hash", $Hash_to_hash$67 = function $$to_hash() {
          var self4 = this;
          return self4;
        }, $Hash_to_hash$67.$$arity = 0);
        Opal2.def(self3, "$to_proc", $Hash_to_proc$68 = function $$to_proc() {
          var $$69, self4 = this;
          return $send2(self4, "proc", [], ($$69 = function(key) {
            var self5 = $$69.$$s || this;
            ;
            if (key == null) {
              self5.$raise($$2($nesting3, "ArgumentError"), "no key given");
            }
            ;
            return self5["$[]"](key);
          }, $$69.$$s = self4, $$69.$$arity = -1, $$69));
        }, $Hash_to_proc$68.$$arity = 0);
        Opal2.alias(self3, "to_s", "inspect");
        Opal2.def(self3, "$transform_keys", $Hash_transform_keys$70 = function $$transform_keys() {
          var $iter2 = $Hash_transform_keys$70.$$p, block2 = $iter2 || nil2, $$71, self4 = this;
          if ($iter2)
            $Hash_transform_keys$70.$$p = null;
          if ($iter2)
            $Hash_transform_keys$70.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["transform_keys"], ($$71 = function() {
              var self5 = $$71.$$s || this;
              return self5.$size();
            }, $$71.$$s = self4, $$71.$$arity = 0, $$71));
          }
          ;
          var result2 = Opal2.hash();
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            key = Opal2.yield1(block2, key);
            Opal2.hash_put(result2, key, value);
          }
          return result2;
          ;
        }, $Hash_transform_keys$70.$$arity = 0);
        Opal2.def(self3, "$transform_keys!", $Hash_transform_keys$excl$72 = function() {
          var $iter2 = $Hash_transform_keys$excl$72.$$p, block2 = $iter2 || nil2, $$73, self4 = this;
          if ($iter2)
            $Hash_transform_keys$excl$72.$$p = null;
          if ($iter2)
            $Hash_transform_keys$excl$72.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["transform_keys!"], ($$73 = function() {
              var self5 = $$73.$$s || this;
              return self5.$size();
            }, $$73.$$s = self4, $$73.$$arity = 0, $$73));
          }
          ;
          var keys = Opal2.slice.call(self4.$$keys), i, length = keys.length, key, value, new_key;
          for (i = 0; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            new_key = Opal2.yield1(block2, key);
            Opal2.hash_delete(self4, key);
            Opal2.hash_put(self4, new_key, value);
          }
          return self4;
          ;
        }, $Hash_transform_keys$excl$72.$$arity = 0);
        Opal2.def(self3, "$transform_values", $Hash_transform_values$74 = function $$transform_values() {
          var $iter2 = $Hash_transform_values$74.$$p, block2 = $iter2 || nil2, $$75, self4 = this;
          if ($iter2)
            $Hash_transform_values$74.$$p = null;
          if ($iter2)
            $Hash_transform_values$74.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["transform_values"], ($$75 = function() {
              var self5 = $$75.$$s || this;
              return self5.$size();
            }, $$75.$$s = self4, $$75.$$arity = 0, $$75));
          }
          ;
          var result2 = Opal2.hash();
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            value = Opal2.yield1(block2, value);
            Opal2.hash_put(result2, key, value);
          }
          return result2;
          ;
        }, $Hash_transform_values$74.$$arity = 0);
        Opal2.def(self3, "$transform_values!", $Hash_transform_values$excl$76 = function() {
          var $iter2 = $Hash_transform_values$excl$76.$$p, block2 = $iter2 || nil2, $$77, self4 = this;
          if ($iter2)
            $Hash_transform_values$excl$76.$$p = null;
          if ($iter2)
            $Hash_transform_values$excl$76.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["transform_values!"], ($$77 = function() {
              var self5 = $$77.$$s || this;
              return self5.$size();
            }, $$77.$$s = self4, $$77.$$arity = 0, $$77));
          }
          ;
          for (var i = 0, keys = self4.$$keys, length = keys.length, key, value; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              value = self4.$$smap[key];
            } else {
              value = key.value;
              key = key.key;
            }
            value = Opal2.yield1(block2, value);
            Opal2.hash_put(self4, key, value);
          }
          return self4;
          ;
        }, $Hash_transform_values$excl$76.$$arity = 0);
        Opal2.alias(self3, "update", "merge!");
        Opal2.alias(self3, "value?", "has_value?");
        Opal2.alias(self3, "values_at", "indexes");
        return (Opal2.def(self3, "$values", $Hash_values$78 = function $$values() {
          var self4 = this;
          var result2 = [];
          for (var i = 0, keys = self4.$$keys, length = keys.length, key; i < length; i++) {
            key = keys[i];
            if (key.$$is_string) {
              result2.push(self4.$$smap[key]);
            } else {
              result2.push(key.value);
            }
          }
          return result2;
        }, $Hash_values$78.$$arity = 0), nil2) && "values";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/number"] = function(Opal2) {
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      function $rb_divide(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs / rhs : lhs["$/"](rhs);
      }
      function $rb_times(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
      }
      function $rb_le(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
      }
      function $rb_ge(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $hash22 = Opal2.hash2;
      Opal2.add_stubs(["$require", "$bridge", "$raise", "$name", "$class", "$Float", "$respond_to?", "$coerce_to!", "$__coerced__", "$===", "$!", "$>", "$**", "$new", "$<", "$to_f", "$==", "$nan?", "$infinite?", "$enum_for", "$+", "$-", "$gcd", "$lcm", "$%", "$/", "$frexp", "$to_i", "$ldexp", "$rationalize", "$*", "$<<", "$to_r", "$truncate", "$-@", "$size", "$<=", "$>=", "$<=>", "$compare", "$any?"]);
      self2.$require("corelib/numeric");
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Number");
        var $nesting3 = [self3].concat($parent_nesting2), $Number_coerce$2, $Number___id__$3, $Number_$plus$4, $Number_$minus$5, $Number_$$6, $Number_$slash$7, $Number_$percent$8, $Number_$$9, $Number_$$10, $Number_$$11, $Number_$lt$12, $Number_$lt_eq$13, $Number_$gt$14, $Number_$gt_eq$15, $Number_$lt_eq_gt$16, $Number_$lt$lt$17, $Number_$gt$gt$18, $Number_$$$19, $Number_$plus$$20, $Number_$minus$$21, $Number_$$22, $Number_$$$23, $Number_$eq_eq_eq$24, $Number_$eq_eq$25, $Number_abs$26, $Number_abs2$27, $Number_allbits$ques$28, $Number_anybits$ques$29, $Number_angle$30, $Number_bit_length$31, $Number_ceil$32, $Number_chr$33, $Number_denominator$34, $Number_downto$35, $Number_equal$ques$37, $Number_even$ques$38, $Number_floor$39, $Number_gcd$40, $Number_gcdlcm$41, $Number_integer$ques$42, $Number_is_a$ques$43, $Number_instance_of$ques$44, $Number_lcm$45, $Number_next$46, $Number_nobits$ques$47, $Number_nonzero$ques$48, $Number_numerator$49, $Number_odd$ques$50, $Number_ord$51, $Number_pow$52, $Number_pred$53, $Number_quo$54, $Number_rationalize$55, $Number_remainder$56, $Number_round$57, $Number_step$58, $Number_times$60, $Number_to_f$62, $Number_to_i$63, $Number_to_r$64, $Number_to_s$65, $Number_truncate$66, $Number_digits$67, $Number_divmod$68, $Number_upto$69, $Number_zero$ques$71, $Number_size$72, $Number_nan$ques$73, $Number_finite$ques$74, $Number_infinite$ques$75, $Number_positive$ques$76, $Number_negative$ques$77;
        $$2($nesting3, "Opal").$bridge(Number, self3);
        Opal2.defineProperty(self3.$$prototype, "$$is_number", true);
        self3.$$is_number_class = true;
        (function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $allocate$1;
          Opal2.def(self4, "$allocate", $allocate$1 = function $$allocate() {
            var self5 = this;
            return self5.$raise($$2($nesting4, "TypeError"), "allocator undefined for " + self5.$name());
          }, $allocate$1.$$arity = 0);
          Opal2.udef(self4, "$new");
          ;
          return nil2;
          ;
        })(Opal2.get_singleton_class(self3), $nesting3);
        Opal2.def(self3, "$coerce", $Number_coerce$2 = function $$coerce(other) {
          var self4 = this;
          if (other === nil2) {
            self4.$raise($$2($nesting3, "TypeError"), "can't convert " + other.$class() + " into Float");
          } else if (other.$$is_string) {
            return [self4.$Float(other), self4];
          } else if (other["$respond_to?"]("to_f")) {
            return [$$2($nesting3, "Opal")["$coerce_to!"](other, $$2($nesting3, "Float"), "to_f"), self4];
          } else if (other.$$is_number) {
            return [other, self4];
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "can't convert " + other.$class() + " into Float");
          }
        }, $Number_coerce$2.$$arity = 1);
        Opal2.def(self3, "$__id__", $Number___id__$3 = function $$__id__() {
          var self4 = this;
          return self4 * 2 + 1;
        }, $Number___id__$3.$$arity = 0);
        Opal2.alias(self3, "object_id", "__id__");
        Opal2.def(self3, "$+", $Number_$plus$4 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 + other;
          } else {
            return self4.$__coerced__("+", other);
          }
        }, $Number_$plus$4.$$arity = 1);
        Opal2.def(self3, "$-", $Number_$minus$5 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 - other;
          } else {
            return self4.$__coerced__("-", other);
          }
        }, $Number_$minus$5.$$arity = 1);
        Opal2.def(self3, "$*", $Number_$$6 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 * other;
          } else {
            return self4.$__coerced__("*", other);
          }
        }, $Number_$$6.$$arity = 1);
        Opal2.def(self3, "$/", $Number_$slash$7 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 / other;
          } else {
            return self4.$__coerced__("/", other);
          }
        }, $Number_$slash$7.$$arity = 1);
        Opal2.alias(self3, "fdiv", "/");
        Opal2.def(self3, "$%", $Number_$percent$8 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            if (other == -Infinity) {
              return other;
            } else if (other == 0) {
              self4.$raise($$2($nesting3, "ZeroDivisionError"), "divided by 0");
            } else if (other < 0 || self4 < 0) {
              return (self4 % other + other) % other;
            } else {
              return self4 % other;
            }
          } else {
            return self4.$__coerced__("%", other);
          }
        }, $Number_$percent$8.$$arity = 1);
        Opal2.def(self3, "$&", $Number_$$9 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 & other;
          } else {
            return self4.$__coerced__("&", other);
          }
        }, $Number_$$9.$$arity = 1);
        Opal2.def(self3, "$|", $Number_$$10 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 | other;
          } else {
            return self4.$__coerced__("|", other);
          }
        }, $Number_$$10.$$arity = 1);
        Opal2.def(self3, "$^", $Number_$$11 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 ^ other;
          } else {
            return self4.$__coerced__("^", other);
          }
        }, $Number_$$11.$$arity = 1);
        Opal2.def(self3, "$<", $Number_$lt$12 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 < other;
          } else {
            return self4.$__coerced__("<", other);
          }
        }, $Number_$lt$12.$$arity = 1);
        Opal2.def(self3, "$<=", $Number_$lt_eq$13 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 <= other;
          } else {
            return self4.$__coerced__("<=", other);
          }
        }, $Number_$lt_eq$13.$$arity = 1);
        Opal2.def(self3, "$>", $Number_$gt$14 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 > other;
          } else {
            return self4.$__coerced__(">", other);
          }
        }, $Number_$gt$14.$$arity = 1);
        Opal2.def(self3, "$>=", $Number_$gt_eq$15 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4 >= other;
          } else {
            return self4.$__coerced__(">=", other);
          }
        }, $Number_$gt_eq$15.$$arity = 1);
        var spaceship_operator = function(self4, other) {
          if (other.$$is_number) {
            if (isNaN(self4) || isNaN(other)) {
              return nil2;
            }
            if (self4 > other) {
              return 1;
            } else if (self4 < other) {
              return -1;
            } else {
              return 0;
            }
          } else {
            return self4.$__coerced__("<=>", other);
          }
        };
        Opal2.def(self3, "$<=>", $Number_$lt_eq_gt$16 = function(other) {
          var self4 = this;
          try {
            return spaceship_operator(self4, other);
          } catch ($err) {
            if (Opal2.rescue($err, [$$2($nesting3, "ArgumentError")])) {
              try {
                return nil2;
              } finally {
                Opal2.pop_exception();
              }
            } else {
              throw $err;
            }
          }
        }, $Number_$lt_eq_gt$16.$$arity = 1);
        Opal2.def(self3, "$<<", $Number_$lt$lt$17 = function(count) {
          var self4 = this;
          count = $$2($nesting3, "Opal")["$coerce_to!"](count, $$2($nesting3, "Integer"), "to_int");
          return count > 0 ? self4 << count : self4 >> -count;
        }, $Number_$lt$lt$17.$$arity = 1);
        Opal2.def(self3, "$>>", $Number_$gt$gt$18 = function(count) {
          var self4 = this;
          count = $$2($nesting3, "Opal")["$coerce_to!"](count, $$2($nesting3, "Integer"), "to_int");
          return count > 0 ? self4 >> count : self4 << -count;
        }, $Number_$gt$gt$18.$$arity = 1);
        Opal2.def(self3, "$[]", $Number_$$$19 = function(bit) {
          var self4 = this;
          bit = $$2($nesting3, "Opal")["$coerce_to!"](bit, $$2($nesting3, "Integer"), "to_int");
          if (bit < 0) {
            return 0;
          }
          if (bit >= 32) {
            return self4 < 0 ? 1 : 0;
          }
          return self4 >> bit & 1;
          ;
        }, $Number_$$$19.$$arity = 1);
        Opal2.def(self3, "$+@", $Number_$plus$$20 = function() {
          var self4 = this;
          return +self4;
        }, $Number_$plus$$20.$$arity = 0);
        Opal2.def(self3, "$-@", $Number_$minus$$21 = function() {
          var self4 = this;
          return -self4;
        }, $Number_$minus$$21.$$arity = 0);
        Opal2.def(self3, "$~", $Number_$$22 = function() {
          var self4 = this;
          return ~self4;
        }, $Number_$$22.$$arity = 0);
        Opal2.def(self3, "$**", $Number_$$$23 = function(other) {
          var $a2, $b2, self4 = this;
          if ($truthy2($$2($nesting3, "Integer")["$==="](other))) {
            if ($truthy2($truthy2($a2 = $$2($nesting3, "Integer")["$==="](self4)["$!"]()) ? $a2 : $rb_gt2(other, 0))) {
              return Math.pow(self4, other);
            } else {
              return $$2($nesting3, "Rational").$new(self4, 1)["$**"](other);
            }
          } else if ($truthy2(($a2 = $rb_lt2(self4, 0)) ? $truthy2($b2 = $$2($nesting3, "Float")["$==="](other)) ? $b2 : $$2($nesting3, "Rational")["$==="](other) : $rb_lt2(self4, 0))) {
            return $$2($nesting3, "Complex").$new(self4, 0)["$**"](other.$to_f());
          } else if ($truthy2(other.$$is_number != null)) {
            return Math.pow(self4, other);
          } else {
            return self4.$__coerced__("**", other);
          }
        }, $Number_$$$23.$$arity = 1);
        Opal2.def(self3, "$===", $Number_$eq_eq_eq$24 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4.valueOf() === other.valueOf();
          } else if (other["$respond_to?"]("==")) {
            return other["$=="](self4);
          } else {
            return false;
          }
        }, $Number_$eq_eq_eq$24.$$arity = 1);
        Opal2.def(self3, "$==", $Number_$eq_eq$25 = function(other) {
          var self4 = this;
          if (other.$$is_number) {
            return self4.valueOf() === other.valueOf();
          } else if (other["$respond_to?"]("==")) {
            return other["$=="](self4);
          } else {
            return false;
          }
        }, $Number_$eq_eq$25.$$arity = 1);
        Opal2.def(self3, "$abs", $Number_abs$26 = function $$abs() {
          var self4 = this;
          return Math.abs(self4);
        }, $Number_abs$26.$$arity = 0);
        Opal2.def(self3, "$abs2", $Number_abs2$27 = function $$abs2() {
          var self4 = this;
          return Math.abs(self4 * self4);
        }, $Number_abs2$27.$$arity = 0);
        Opal2.def(self3, "$allbits?", $Number_allbits$ques$28 = function(mask) {
          var self4 = this;
          mask = $$2($nesting3, "Opal")["$coerce_to!"](mask, $$2($nesting3, "Integer"), "to_int");
          return (self4 & mask) == mask;
          ;
        }, $Number_allbits$ques$28.$$arity = 1);
        Opal2.def(self3, "$anybits?", $Number_anybits$ques$29 = function(mask) {
          var self4 = this;
          mask = $$2($nesting3, "Opal")["$coerce_to!"](mask, $$2($nesting3, "Integer"), "to_int");
          return (self4 & mask) !== 0;
          ;
        }, $Number_anybits$ques$29.$$arity = 1);
        Opal2.def(self3, "$angle", $Number_angle$30 = function $$angle() {
          var self4 = this;
          if ($truthy2(self4["$nan?"]())) {
            return self4;
          }
          ;
          if (self4 == 0) {
            if (1 / self4 > 0) {
              return 0;
            } else {
              return Math.PI;
            }
          } else if (self4 < 0) {
            return Math.PI;
          } else {
            return 0;
          }
          ;
        }, $Number_angle$30.$$arity = 0);
        Opal2.alias(self3, "arg", "angle");
        Opal2.alias(self3, "phase", "angle");
        Opal2.def(self3, "$bit_length", $Number_bit_length$31 = function $$bit_length() {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Integer")["$==="](self4))) {
          } else {
            self4.$raise($$2($nesting3, "NoMethodError").$new("undefined method `bit_length` for " + self4 + ":Float", "bit_length"));
          }
          ;
          if (self4 === 0 || self4 === -1) {
            return 0;
          }
          var result2 = 0, value = self4 < 0 ? ~self4 : self4;
          while (value != 0) {
            result2 += 1;
            value >>>= 1;
          }
          return result2;
          ;
        }, $Number_bit_length$31.$$arity = 0);
        Opal2.def(self3, "$ceil", $Number_ceil$32 = function $$ceil(ndigits) {
          var self4 = this;
          if (ndigits == null) {
            ndigits = 0;
          }
          ;
          var f = self4.$to_f();
          if (f % 1 === 0 && ndigits >= 0) {
            return f;
          }
          var factor = Math.pow(10, ndigits), result2 = Math.ceil(f * factor) / factor;
          if (f % 1 === 0) {
            result2 = Math.round(result2);
          }
          return result2;
          ;
        }, $Number_ceil$32.$$arity = -1);
        Opal2.def(self3, "$chr", $Number_chr$33 = function $$chr(encoding) {
          var self4 = this;
          ;
          return String.fromCharCode(self4);
          ;
        }, $Number_chr$33.$$arity = -1);
        Opal2.def(self3, "$denominator", $Number_denominator$34 = function $$denominator() {
          var $a2, $iter2 = $Number_denominator$34.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Number_denominator$34.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy2($truthy2($a2 = self4["$nan?"]()) ? $a2 : self4["$infinite?"]())) {
            return 1;
          } else {
            return $send2(self4, Opal2.find_super_dispatcher(self4, "denominator", $Number_denominator$34, false), $zuper, $iter2);
          }
        }, $Number_denominator$34.$$arity = 0);
        Opal2.def(self3, "$downto", $Number_downto$35 = function $$downto(stop) {
          var $iter2 = $Number_downto$35.$$p, block2 = $iter2 || nil2, $$36, self4 = this;
          if ($iter2)
            $Number_downto$35.$$p = null;
          if ($iter2)
            $Number_downto$35.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["downto", stop], ($$36 = function() {
              var self5 = $$36.$$s || this;
              if ($truthy2($$2($nesting3, "Numeric")["$==="](stop))) {
              } else {
                self5.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self5.$class() + " with " + stop.$class() + " failed");
              }
              ;
              if ($truthy2($rb_gt2(stop, self5))) {
                return 0;
              } else {
                return $rb_plus($rb_minus(self5, stop), 1);
              }
              ;
            }, $$36.$$s = self4, $$36.$$arity = 0, $$36));
          }
          ;
          if (!stop.$$is_number) {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self4.$class() + " with " + stop.$class() + " failed");
          }
          for (var i = self4; i >= stop; i--) {
            block2(i);
          }
          ;
          return self4;
        }, $Number_downto$35.$$arity = 1);
        Opal2.alias(self3, "eql?", "==");
        Opal2.def(self3, "$equal?", $Number_equal$ques$37 = function(other) {
          var $a2, self4 = this;
          return $truthy2($a2 = self4["$=="](other)) ? $a2 : isNaN(self4) && isNaN(other);
        }, $Number_equal$ques$37.$$arity = 1);
        Opal2.def(self3, "$even?", $Number_even$ques$38 = function() {
          var self4 = this;
          return self4 % 2 === 0;
        }, $Number_even$ques$38.$$arity = 0);
        Opal2.def(self3, "$floor", $Number_floor$39 = function $$floor(ndigits) {
          var self4 = this;
          if (ndigits == null) {
            ndigits = 0;
          }
          ;
          var f = self4.$to_f();
          if (f % 1 === 0 && ndigits >= 0) {
            return f;
          }
          var factor = Math.pow(10, ndigits), result2 = Math.floor(f * factor) / factor;
          if (f % 1 === 0) {
            result2 = Math.round(result2);
          }
          return result2;
          ;
        }, $Number_floor$39.$$arity = -1);
        Opal2.def(self3, "$gcd", $Number_gcd$40 = function $$gcd(other) {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Integer")["$==="](other))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "not an integer");
          }
          ;
          var min = Math.abs(self4), max = Math.abs(other);
          while (min > 0) {
            var tmp = min;
            min = max % min;
            max = tmp;
          }
          return max;
          ;
        }, $Number_gcd$40.$$arity = 1);
        Opal2.def(self3, "$gcdlcm", $Number_gcdlcm$41 = function $$gcdlcm(other) {
          var self4 = this;
          return [self4.$gcd(), self4.$lcm()];
        }, $Number_gcdlcm$41.$$arity = 1);
        Opal2.def(self3, "$integer?", $Number_integer$ques$42 = function() {
          var self4 = this;
          return self4 % 1 === 0;
        }, $Number_integer$ques$42.$$arity = 0);
        Opal2.def(self3, "$is_a?", $Number_is_a$ques$43 = function(klass) {
          var $a2, $iter2 = $Number_is_a$ques$43.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Number_is_a$ques$43.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy2(($a2 = klass["$=="]($$2($nesting3, "Integer"))) ? $$2($nesting3, "Integer")["$==="](self4) : klass["$=="]($$2($nesting3, "Integer")))) {
            return true;
          }
          ;
          if ($truthy2(($a2 = klass["$=="]($$2($nesting3, "Integer"))) ? $$2($nesting3, "Integer")["$==="](self4) : klass["$=="]($$2($nesting3, "Integer")))) {
            return true;
          }
          ;
          if ($truthy2(($a2 = klass["$=="]($$2($nesting3, "Float"))) ? $$2($nesting3, "Float")["$==="](self4) : klass["$=="]($$2($nesting3, "Float")))) {
            return true;
          }
          ;
          return $send2(self4, Opal2.find_super_dispatcher(self4, "is_a?", $Number_is_a$ques$43, false), $zuper, $iter2);
        }, $Number_is_a$ques$43.$$arity = 1);
        Opal2.alias(self3, "kind_of?", "is_a?");
        Opal2.def(self3, "$instance_of?", $Number_instance_of$ques$44 = function(klass) {
          var $a2, $iter2 = $Number_instance_of$ques$44.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Number_instance_of$ques$44.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy2(($a2 = klass["$=="]($$2($nesting3, "Integer"))) ? $$2($nesting3, "Integer")["$==="](self4) : klass["$=="]($$2($nesting3, "Integer")))) {
            return true;
          }
          ;
          if ($truthy2(($a2 = klass["$=="]($$2($nesting3, "Integer"))) ? $$2($nesting3, "Integer")["$==="](self4) : klass["$=="]($$2($nesting3, "Integer")))) {
            return true;
          }
          ;
          if ($truthy2(($a2 = klass["$=="]($$2($nesting3, "Float"))) ? $$2($nesting3, "Float")["$==="](self4) : klass["$=="]($$2($nesting3, "Float")))) {
            return true;
          }
          ;
          return $send2(self4, Opal2.find_super_dispatcher(self4, "instance_of?", $Number_instance_of$ques$44, false), $zuper, $iter2);
        }, $Number_instance_of$ques$44.$$arity = 1);
        Opal2.def(self3, "$lcm", $Number_lcm$45 = function $$lcm(other) {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Integer")["$==="](other))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "not an integer");
          }
          ;
          if (self4 == 0 || other == 0) {
            return 0;
          } else {
            return Math.abs(self4 * other / self4.$gcd(other));
          }
          ;
        }, $Number_lcm$45.$$arity = 1);
        Opal2.alias(self3, "magnitude", "abs");
        Opal2.alias(self3, "modulo", "%");
        Opal2.def(self3, "$next", $Number_next$46 = function $$next() {
          var self4 = this;
          return self4 + 1;
        }, $Number_next$46.$$arity = 0);
        Opal2.def(self3, "$nobits?", $Number_nobits$ques$47 = function(mask) {
          var self4 = this;
          mask = $$2($nesting3, "Opal")["$coerce_to!"](mask, $$2($nesting3, "Integer"), "to_int");
          return (self4 & mask) == 0;
          ;
        }, $Number_nobits$ques$47.$$arity = 1);
        Opal2.def(self3, "$nonzero?", $Number_nonzero$ques$48 = function() {
          var self4 = this;
          return self4 == 0 ? nil2 : self4;
        }, $Number_nonzero$ques$48.$$arity = 0);
        Opal2.def(self3, "$numerator", $Number_numerator$49 = function $$numerator() {
          var $a2, $iter2 = $Number_numerator$49.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Number_numerator$49.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy2($truthy2($a2 = self4["$nan?"]()) ? $a2 : self4["$infinite?"]())) {
            return self4;
          } else {
            return $send2(self4, Opal2.find_super_dispatcher(self4, "numerator", $Number_numerator$49, false), $zuper, $iter2);
          }
        }, $Number_numerator$49.$$arity = 0);
        Opal2.def(self3, "$odd?", $Number_odd$ques$50 = function() {
          var self4 = this;
          return self4 % 2 !== 0;
        }, $Number_odd$ques$50.$$arity = 0);
        Opal2.def(self3, "$ord", $Number_ord$51 = function $$ord() {
          var self4 = this;
          return self4;
        }, $Number_ord$51.$$arity = 0);
        Opal2.def(self3, "$pow", $Number_pow$52 = function $$pow(b, m) {
          var self4 = this;
          ;
          if (self4 == 0) {
            self4.$raise($$2($nesting3, "ZeroDivisionError"), "divided by 0");
          }
          if (m === void 0) {
            return self4["$**"](b);
          } else {
            if (!$$2($nesting3, "Integer")["$==="](b)) {
              self4.$raise($$2($nesting3, "TypeError"), "Integer#pow() 2nd argument not allowed unless a 1st argument is integer");
            }
            if (b < 0) {
              self4.$raise($$2($nesting3, "TypeError"), "Integer#pow() 1st argument cannot be negative when 2nd argument specified");
            }
            if (!$$2($nesting3, "Integer")["$==="](m)) {
              self4.$raise($$2($nesting3, "TypeError"), "Integer#pow() 2nd argument not allowed unless all arguments are integers");
            }
            if (m === 0) {
              self4.$raise($$2($nesting3, "ZeroDivisionError"), "divided by 0");
            }
            return self4["$**"](b)["$%"](m);
          }
          ;
        }, $Number_pow$52.$$arity = -2);
        Opal2.def(self3, "$pred", $Number_pred$53 = function $$pred() {
          var self4 = this;
          return self4 - 1;
        }, $Number_pred$53.$$arity = 0);
        Opal2.def(self3, "$quo", $Number_quo$54 = function $$quo(other) {
          var $iter2 = $Number_quo$54.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Number_quo$54.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy2($$2($nesting3, "Integer")["$==="](self4))) {
            return $send2(self4, Opal2.find_super_dispatcher(self4, "quo", $Number_quo$54, false), $zuper, $iter2);
          } else {
            return $rb_divide(self4, other);
          }
        }, $Number_quo$54.$$arity = 1);
        Opal2.def(self3, "$rationalize", $Number_rationalize$55 = function $$rationalize(eps) {
          var $a2, $b2, self4 = this, f = nil2, n = nil2;
          ;
          if (arguments.length > 1) {
            self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + arguments.length + " for 0..1)");
          }
          ;
          if ($truthy2($$2($nesting3, "Integer")["$==="](self4))) {
            return $$2($nesting3, "Rational").$new(self4, 1);
          } else if ($truthy2(self4["$infinite?"]())) {
            return self4.$raise($$2($nesting3, "FloatDomainError"), "Infinity");
          } else if ($truthy2(self4["$nan?"]())) {
            return self4.$raise($$2($nesting3, "FloatDomainError"), "NaN");
          } else if ($truthy2(eps == null)) {
            $b2 = $$2($nesting3, "Math").$frexp(self4), $a2 = Opal2.to_ary($b2), f = $a2[0] == null ? nil2 : $a2[0], n = $a2[1] == null ? nil2 : $a2[1], $b2;
            f = $$2($nesting3, "Math").$ldexp(f, $$$2($$2($nesting3, "Float"), "MANT_DIG")).$to_i();
            n = $rb_minus(n, $$$2($$2($nesting3, "Float"), "MANT_DIG"));
            return $$2($nesting3, "Rational").$new($rb_times(2, f), 1["$<<"]($rb_minus(1, n))).$rationalize($$2($nesting3, "Rational").$new(1, 1["$<<"]($rb_minus(1, n))));
          } else {
            return self4.$to_r().$rationalize(eps);
          }
          ;
        }, $Number_rationalize$55.$$arity = -1);
        Opal2.def(self3, "$remainder", $Number_remainder$56 = function $$remainder(y) {
          var self4 = this;
          return $rb_minus(self4, $rb_times(y, $rb_divide(self4, y).$truncate()));
        }, $Number_remainder$56.$$arity = 1);
        Opal2.def(self3, "$round", $Number_round$57 = function $$round(ndigits) {
          var $a2, $b2, self4 = this, _ = nil2, exp = nil2;
          ;
          if ($truthy2($$2($nesting3, "Integer")["$==="](self4))) {
            if ($truthy2(ndigits == null)) {
              return self4;
            }
            ;
            if ($truthy2($truthy2($a2 = $$2($nesting3, "Float")["$==="](ndigits)) ? ndigits["$infinite?"]() : $a2)) {
              self4.$raise($$2($nesting3, "RangeError"), "Infinity");
            }
            ;
            ndigits = $$2($nesting3, "Opal")["$coerce_to!"](ndigits, $$2($nesting3, "Integer"), "to_int");
            if ($truthy2($rb_lt2(ndigits, $$$2($$2($nesting3, "Integer"), "MIN")))) {
              self4.$raise($$2($nesting3, "RangeError"), "out of bounds");
            }
            ;
            if ($truthy2(ndigits >= 0)) {
              return self4;
            }
            ;
            ndigits = ndigits["$-@"]();
            if (0.415241 * ndigits - 0.125 > self4.$size()) {
              return 0;
            }
            var f = Math.pow(10, ndigits), x = Math.floor((Math.abs(x) + f / 2) / f) * f;
            return self4 < 0 ? -x : x;
            ;
          } else {
            if ($truthy2($truthy2($a2 = self4["$nan?"]()) ? ndigits == null : $a2)) {
              self4.$raise($$2($nesting3, "FloatDomainError"), "NaN");
            }
            ;
            ndigits = $$2($nesting3, "Opal")["$coerce_to!"](ndigits || 0, $$2($nesting3, "Integer"), "to_int");
            if ($truthy2($rb_le(ndigits, 0))) {
              if ($truthy2(self4["$nan?"]())) {
                self4.$raise($$2($nesting3, "RangeError"), "NaN");
              } else if ($truthy2(self4["$infinite?"]())) {
                self4.$raise($$2($nesting3, "FloatDomainError"), "Infinity");
              }
            } else if (ndigits["$=="](0)) {
              return Math.round(self4);
            } else if ($truthy2($truthy2($a2 = self4["$nan?"]()) ? $a2 : self4["$infinite?"]())) {
              return self4;
            }
            ;
            $b2 = $$2($nesting3, "Math").$frexp(self4), $a2 = Opal2.to_ary($b2), _ = $a2[0] == null ? nil2 : $a2[0], exp = $a2[1] == null ? nil2 : $a2[1], $b2;
            if ($truthy2($rb_ge(ndigits, $rb_minus($rb_plus($$$2($$2($nesting3, "Float"), "DIG"), 2), function() {
              if ($truthy2($rb_gt2(exp, 0))) {
                return $rb_divide(exp, 4);
              } else {
                return $rb_minus($rb_divide(exp, 3), 1);
              }
              ;
              return nil2;
            }())))) {
              return self4;
            }
            ;
            if ($truthy2($rb_lt2(ndigits, function() {
              if ($truthy2($rb_gt2(exp, 0))) {
                return $rb_plus($rb_divide(exp, 3), 1);
              } else {
                return $rb_divide(exp, 4);
              }
              ;
              return nil2;
            }()["$-@"]()))) {
              return 0;
            }
            ;
            return Math.round(self4 * Math.pow(10, ndigits)) / Math.pow(10, ndigits);
            ;
          }
          ;
        }, $Number_round$57.$$arity = -1);
        Opal2.def(self3, "$step", $Number_step$58 = function $$step($a2, $b2, $c) {
          var $iter2 = $Number_step$58.$$p, block2 = $iter2 || nil2, $post_args2, $kwargs, limit, step, to, by, $$59, self4 = this, positional_args = nil2, keyword_args = nil2;
          if ($iter2)
            $Number_step$58.$$p = null;
          if ($iter2)
            $Number_step$58.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          $kwargs = Opal2.extract_kwargs($post_args2);
          if ($kwargs == null) {
            $kwargs = $hash22([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal2.ArgumentError.$new("expected kwargs");
          }
          ;
          if ($post_args2.length > 0) {
            limit = $post_args2[0];
            $post_args2.splice(0, 1);
          }
          ;
          if ($post_args2.length > 0) {
            step = $post_args2[0];
            $post_args2.splice(0, 1);
          }
          ;
          to = $kwargs.$$smap["to"];
          ;
          by = $kwargs.$$smap["by"];
          ;
          if (limit !== void 0 && to !== void 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "to is given twice");
          }
          if (step !== void 0 && by !== void 0) {
            self4.$raise($$2($nesting3, "ArgumentError"), "step is given twice");
          }
          function validateParameters() {
            if (to !== void 0) {
              limit = to;
            }
            if (limit === void 0) {
              limit = nil2;
            }
            if (step === nil2) {
              self4.$raise($$2($nesting3, "TypeError"), "step must be numeric");
            }
            if (step === 0) {
              self4.$raise($$2($nesting3, "ArgumentError"), "step can't be 0");
            }
            if (by !== void 0) {
              step = by;
            }
            if (step === nil2 || step == null) {
              step = 1;
            }
            var sign = step["$<=>"](0);
            if (sign === nil2) {
              self4.$raise($$2($nesting3, "ArgumentError"), "0 can't be coerced into " + step.$class());
            }
            if (limit === nil2 || limit == null) {
              limit = sign > 0 ? $$$2($$2($nesting3, "Float"), "INFINITY") : $$$2($$2($nesting3, "Float"), "INFINITY")["$-@"]();
            }
            $$2($nesting3, "Opal").$compare(self4, limit);
          }
          function stepFloatSize() {
            if (step > 0 && self4 > limit || step < 0 && self4 < limit) {
              return 0;
            } else if (step === Infinity || step === -Infinity) {
              return 1;
            } else {
              var abs = Math.abs, floor = Math.floor, err = (abs(self4) + abs(limit) + abs(limit - self4)) / abs(step) * $$$2($$2($nesting3, "Float"), "EPSILON");
              if (err === Infinity || err === -Infinity) {
                return 0;
              } else {
                if (err > 0.5) {
                  err = 0.5;
                }
                return floor((limit - self4) / step + err) + 1;
              }
            }
          }
          function stepSize() {
            validateParameters();
            if (step === 0) {
              return Infinity;
            }
            if (step % 1 !== 0) {
              return stepFloatSize();
            } else if (step > 0 && self4 > limit || step < 0 && self4 < limit) {
              return 0;
            } else {
              var ceil = Math.ceil, abs = Math.abs, lhs = abs(self4 - limit) + 1, rhs = abs(step);
              return ceil(lhs / rhs);
            }
          }
          ;
          if (block2 !== nil2) {
          } else {
            positional_args = [];
            keyword_args = $hash22([], {});
            if (limit !== void 0) {
              positional_args.push(limit);
            }
            if (step !== void 0) {
              positional_args.push(step);
            }
            if (to !== void 0) {
              Opal2.hash_put(keyword_args, "to", to);
            }
            if (by !== void 0) {
              Opal2.hash_put(keyword_args, "by", by);
            }
            if (keyword_args["$any?"]()) {
              positional_args.push(keyword_args);
            }
            ;
            return $send2(self4, "enum_for", ["step"].concat(Opal2.to_a(positional_args)), ($$59 = function() {
              var self5 = $$59.$$s || this;
              return stepSize();
            }, $$59.$$s = self4, $$59.$$arity = 0, $$59));
          }
          ;
          validateParameters();
          if (step === 0) {
            while (true) {
              block2(self4);
            }
          }
          if (self4 % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {
            var n = stepFloatSize();
            if (n > 0) {
              if (step === Infinity || step === -Infinity) {
                block2(self4);
              } else {
                var i = 0, d;
                if (step > 0) {
                  while (i < n) {
                    d = i * step + self4;
                    if (limit < d) {
                      d = limit;
                    }
                    block2(d);
                    i += 1;
                  }
                } else {
                  while (i < n) {
                    d = i * step + self4;
                    if (limit > d) {
                      d = limit;
                    }
                    block2(d);
                    i += 1;
                  }
                }
              }
            }
          } else {
            var value = self4;
            if (step > 0) {
              while (value <= limit) {
                block2(value);
                value += step;
              }
            } else {
              while (value >= limit) {
                block2(value);
                value += step;
              }
            }
          }
          return self4;
          ;
        }, $Number_step$58.$$arity = -1);
        Opal2.alias(self3, "succ", "next");
        Opal2.def(self3, "$times", $Number_times$60 = function $$times() {
          var $iter2 = $Number_times$60.$$p, block2 = $iter2 || nil2, $$61, self4 = this;
          if ($iter2)
            $Number_times$60.$$p = null;
          if ($iter2)
            $Number_times$60.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            return $send2(self4, "enum_for", ["times"], ($$61 = function() {
              var self5 = $$61.$$s || this;
              return self5;
            }, $$61.$$s = self4, $$61.$$arity = 0, $$61));
          }
          ;
          for (var i = 0; i < self4; i++) {
            block2(i);
          }
          ;
          return self4;
        }, $Number_times$60.$$arity = 0);
        Opal2.def(self3, "$to_f", $Number_to_f$62 = function $$to_f() {
          var self4 = this;
          return self4;
        }, $Number_to_f$62.$$arity = 0);
        Opal2.def(self3, "$to_i", $Number_to_i$63 = function $$to_i() {
          var self4 = this;
          return parseInt(self4, 10);
        }, $Number_to_i$63.$$arity = 0);
        Opal2.alias(self3, "to_int", "to_i");
        Opal2.def(self3, "$to_r", $Number_to_r$64 = function $$to_r() {
          var $a2, $b2, self4 = this, f = nil2, e = nil2;
          if ($truthy2($$2($nesting3, "Integer")["$==="](self4))) {
            return $$2($nesting3, "Rational").$new(self4, 1);
          } else {
            $b2 = $$2($nesting3, "Math").$frexp(self4), $a2 = Opal2.to_ary($b2), f = $a2[0] == null ? nil2 : $a2[0], e = $a2[1] == null ? nil2 : $a2[1], $b2;
            f = $$2($nesting3, "Math").$ldexp(f, $$$2($$2($nesting3, "Float"), "MANT_DIG")).$to_i();
            e = $rb_minus(e, $$$2($$2($nesting3, "Float"), "MANT_DIG"));
            return $rb_times(f, $$$2($$2($nesting3, "Float"), "RADIX")["$**"](e)).$to_r();
          }
        }, $Number_to_r$64.$$arity = 0);
        Opal2.def(self3, "$to_s", $Number_to_s$65 = function $$to_s(base) {
          var $a2, self4 = this;
          if (base == null) {
            base = 10;
          }
          ;
          base = $$2($nesting3, "Opal")["$coerce_to!"](base, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2($truthy2($a2 = $rb_lt2(base, 2)) ? $a2 : $rb_gt2(base, 36))) {
            self4.$raise($$2($nesting3, "ArgumentError"), "invalid radix " + base);
          }
          ;
          return self4.toString(base);
          ;
        }, $Number_to_s$65.$$arity = -1);
        Opal2.def(self3, "$truncate", $Number_truncate$66 = function $$truncate(ndigits) {
          var self4 = this;
          if (ndigits == null) {
            ndigits = 0;
          }
          ;
          var f = self4.$to_f();
          if (f % 1 === 0 && ndigits >= 0) {
            return f;
          }
          var factor = Math.pow(10, ndigits), result2 = parseInt(f * factor, 10) / factor;
          if (f % 1 === 0) {
            result2 = Math.round(result2);
          }
          return result2;
          ;
        }, $Number_truncate$66.$$arity = -1);
        Opal2.alias(self3, "inspect", "to_s");
        Opal2.def(self3, "$digits", $Number_digits$67 = function $$digits(base) {
          var self4 = this;
          if (base == null) {
            base = 10;
          }
          ;
          if ($rb_lt2(self4, 0)) {
            self4.$raise($$$2($$2($nesting3, "Math"), "DomainError"), "out of domain");
          }
          ;
          base = $$2($nesting3, "Opal")["$coerce_to!"](base, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2($rb_lt2(base, 2))) {
            self4.$raise($$2($nesting3, "ArgumentError"), "invalid radix " + base);
          }
          ;
          var value = self4, result2 = [];
          while (value !== 0) {
            result2.push(value % base);
            value = parseInt(value / base, 10);
          }
          return result2;
          ;
        }, $Number_digits$67.$$arity = -1);
        Opal2.def(self3, "$divmod", $Number_divmod$68 = function $$divmod(other) {
          var $a2, $iter2 = $Number_divmod$68.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Number_divmod$68.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy2($truthy2($a2 = self4["$nan?"]()) ? $a2 : other["$nan?"]())) {
            return self4.$raise($$2($nesting3, "FloatDomainError"), "NaN");
          } else if ($truthy2(self4["$infinite?"]())) {
            return self4.$raise($$2($nesting3, "FloatDomainError"), "Infinity");
          } else {
            return $send2(self4, Opal2.find_super_dispatcher(self4, "divmod", $Number_divmod$68, false), $zuper, $iter2);
          }
        }, $Number_divmod$68.$$arity = 1);
        Opal2.def(self3, "$upto", $Number_upto$69 = function $$upto(stop) {
          var $iter2 = $Number_upto$69.$$p, block2 = $iter2 || nil2, $$70, self4 = this;
          if ($iter2)
            $Number_upto$69.$$p = null;
          if ($iter2)
            $Number_upto$69.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["upto", stop], ($$70 = function() {
              var self5 = $$70.$$s || this;
              if ($truthy2($$2($nesting3, "Numeric")["$==="](stop))) {
              } else {
                self5.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self5.$class() + " with " + stop.$class() + " failed");
              }
              ;
              if ($truthy2($rb_lt2(stop, self5))) {
                return 0;
              } else {
                return $rb_plus($rb_minus(stop, self5), 1);
              }
              ;
            }, $$70.$$s = self4, $$70.$$arity = 0, $$70));
          }
          ;
          if (!stop.$$is_number) {
            self4.$raise($$2($nesting3, "ArgumentError"), "comparison of " + self4.$class() + " with " + stop.$class() + " failed");
          }
          for (var i = self4; i <= stop; i++) {
            block2(i);
          }
          ;
          return self4;
        }, $Number_upto$69.$$arity = 1);
        Opal2.def(self3, "$zero?", $Number_zero$ques$71 = function() {
          var self4 = this;
          return self4 == 0;
        }, $Number_zero$ques$71.$$arity = 0);
        Opal2.def(self3, "$size", $Number_size$72 = function $$size() {
          var self4 = this;
          return 4;
        }, $Number_size$72.$$arity = 0);
        Opal2.def(self3, "$nan?", $Number_nan$ques$73 = function() {
          var self4 = this;
          return isNaN(self4);
        }, $Number_nan$ques$73.$$arity = 0);
        Opal2.def(self3, "$finite?", $Number_finite$ques$74 = function() {
          var self4 = this;
          return self4 != Infinity && self4 != -Infinity && !isNaN(self4);
        }, $Number_finite$ques$74.$$arity = 0);
        Opal2.def(self3, "$infinite?", $Number_infinite$ques$75 = function() {
          var self4 = this;
          if (self4 == Infinity) {
            return 1;
          } else if (self4 == -Infinity) {
            return -1;
          } else {
            return nil2;
          }
        }, $Number_infinite$ques$75.$$arity = 0);
        Opal2.def(self3, "$positive?", $Number_positive$ques$76 = function() {
          var self4 = this;
          return self4 != 0 && (self4 == Infinity || 1 / self4 > 0);
        }, $Number_positive$ques$76.$$arity = 0);
        return (Opal2.def(self3, "$negative?", $Number_negative$ques$77 = function() {
          var self4 = this;
          return self4 == -Infinity || 1 / self4 < 0;
        }, $Number_negative$ques$77.$$arity = 0), nil2) && "negative?";
      })($nesting2[0], $$2($nesting2, "Numeric"), $nesting2);
      Opal2.const_set($nesting2[0], "Fixnum", $$2($nesting2, "Number"));
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Integer");
        var $nesting3 = [self3].concat($parent_nesting2);
        self3.$$is_number_class = true;
        (function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $allocate$78, $eq_eq_eq$79, $sqrt$80;
          Opal2.def(self4, "$allocate", $allocate$78 = function $$allocate() {
            var self5 = this;
            return self5.$raise($$2($nesting4, "TypeError"), "allocator undefined for " + self5.$name());
          }, $allocate$78.$$arity = 0);
          Opal2.udef(self4, "$new");
          ;
          Opal2.def(self4, "$===", $eq_eq_eq$79 = function(other) {
            var self5 = this;
            if (!other.$$is_number) {
              return false;
            }
            return other % 1 === 0;
          }, $eq_eq_eq$79.$$arity = 1);
          return (Opal2.def(self4, "$sqrt", $sqrt$80 = function $$sqrt(n) {
            var self5 = this;
            n = $$2($nesting4, "Opal")["$coerce_to!"](n, $$2($nesting4, "Integer"), "to_int");
            if (n < 0) {
              self5.$raise($$$2($$2($nesting4, "Math"), "DomainError"), 'Numerical argument is out of domain - "isqrt"');
            }
            return parseInt(Math.sqrt(n), 10);
            ;
          }, $sqrt$80.$$arity = 1), nil2) && "sqrt";
        })(Opal2.get_singleton_class(self3), $nesting3);
        Opal2.const_set($nesting3[0], "MAX", Math.pow(2, 30) - 1);
        return Opal2.const_set($nesting3[0], "MIN", -Math.pow(2, 30));
      })($nesting2[0], $$2($nesting2, "Numeric"), $nesting2);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Float");
        var $nesting3 = [self3].concat($parent_nesting2);
        self3.$$is_number_class = true;
        (function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $allocate$81, $eq_eq_eq$82;
          Opal2.def(self4, "$allocate", $allocate$81 = function $$allocate() {
            var self5 = this;
            return self5.$raise($$2($nesting4, "TypeError"), "allocator undefined for " + self5.$name());
          }, $allocate$81.$$arity = 0);
          Opal2.udef(self4, "$new");
          ;
          return (Opal2.def(self4, "$===", $eq_eq_eq$82 = function(other) {
            var self5 = this;
            return !!other.$$is_number;
          }, $eq_eq_eq$82.$$arity = 1), nil2) && "===";
        })(Opal2.get_singleton_class(self3), $nesting3);
        Opal2.const_set($nesting3[0], "INFINITY", Infinity);
        Opal2.const_set($nesting3[0], "MAX", Number.MAX_VALUE);
        Opal2.const_set($nesting3[0], "MIN", Number.MIN_VALUE);
        Opal2.const_set($nesting3[0], "NAN", NaN);
        Opal2.const_set($nesting3[0], "DIG", 15);
        Opal2.const_set($nesting3[0], "MANT_DIG", 53);
        Opal2.const_set($nesting3[0], "RADIX", 2);
        return Opal2.const_set($nesting3[0], "EPSILON", Number.EPSILON || 2220446049250313e-31);
      }($nesting2[0], $$2($nesting2, "Numeric"), $nesting2);
    };
    Opal.modules["corelib/range"] = function(Opal2) {
      function $rb_le(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      function $rb_divide(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs / rhs : lhs["$/"](rhs);
      }
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      function $rb_times(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
      }
      function $rb_ge(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
      Opal2.add_stubs(["$require", "$include", "$attr_reader", "$raise", "$<=>", "$include?", "$<=", "$<", "$enum_for", "$upto", "$to_proc", "$respond_to?", "$class", "$succ", "$!", "$==", "$===", "$exclude_end?", "$eql?", "$begin", "$end", "$last", "$to_a", "$>", "$-", "$abs", "$to_i", "$coerce_to!", "$ceil", "$/", "$size", "$loop", "$+", "$*", "$>=", "$each_with_index", "$%", "$bsearch", "$inspect", "$[]", "$hash"]);
      self2.$require("corelib/enumerable");
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Range");
        var $nesting3 = [self3].concat($parent_nesting2), $Range_initialize$1, $Range_$eq_eq$2, $Range_$eq_eq_eq$3, $Range_cover$ques$4, $Range_each$5, $Range_eql$ques$6, $Range_exclude_end$ques$7, $Range_first$8, $Range_last$9, $Range_max$10, $Range_min$11, $Range_size$12, $Range_step$13, $Range_bsearch$17, $Range_to_s$18, $Range_inspect$19, $Range_marshal_load$20, $Range_hash$21;
        self3.$$prototype.begin = self3.$$prototype.end = self3.$$prototype.excl = nil2;
        self3.$include($$2($nesting3, "Enumerable"));
        self3.$$prototype.$$is_range = true;
        self3.$attr_reader("begin", "end");
        Opal2.def(self3, "$initialize", $Range_initialize$1 = function $$initialize(first, last, exclude) {
          var self4 = this;
          if (exclude == null) {
            exclude = false;
          }
          ;
          if ($truthy2(self4.begin)) {
            self4.$raise($$2($nesting3, "NameError"), "'initialize' called twice");
          }
          ;
          if ($truthy2(first["$<=>"](last))) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "bad value for range");
          }
          ;
          self4.begin = first;
          self4.end = last;
          return self4.excl = exclude;
        }, $Range_initialize$1.$$arity = -3);
        Opal2.def(self3, "$==", $Range_$eq_eq$2 = function(other) {
          var self4 = this;
          if (!other.$$is_range) {
            return false;
          }
          return self4.excl === other.excl && self4.begin == other.begin && self4.end == other.end;
        }, $Range_$eq_eq$2.$$arity = 1);
        Opal2.def(self3, "$===", $Range_$eq_eq_eq$3 = function(value) {
          var self4 = this;
          return self4["$include?"](value);
        }, $Range_$eq_eq_eq$3.$$arity = 1);
        Opal2.def(self3, "$cover?", $Range_cover$ques$4 = function(value) {
          var $a2, self4 = this, beg_cmp = nil2, end_cmp = nil2;
          beg_cmp = self4.begin["$<=>"](value);
          if ($truthy2($truthy2($a2 = beg_cmp) ? $rb_le(beg_cmp, 0) : $a2)) {
          } else {
            return false;
          }
          ;
          end_cmp = value["$<=>"](self4.end);
          if ($truthy2(self4.excl)) {
            return $truthy2($a2 = end_cmp) ? $rb_lt2(end_cmp, 0) : $a2;
          } else {
            return $truthy2($a2 = end_cmp) ? $rb_le(end_cmp, 0) : $a2;
          }
          ;
        }, $Range_cover$ques$4.$$arity = 1);
        Opal2.def(self3, "$each", $Range_each$5 = function $$each() {
          var $iter2 = $Range_each$5.$$p, block2 = $iter2 || nil2, $a2, self4 = this, current = nil2, last = nil2;
          if ($iter2)
            $Range_each$5.$$p = null;
          if ($iter2)
            $Range_each$5.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("each");
          }
          ;
          var i, limit;
          if (self4.begin.$$is_number && self4.end.$$is_number) {
            if (self4.begin % 1 !== 0 || self4.end % 1 !== 0) {
              self4.$raise($$2($nesting3, "TypeError"), "can't iterate from Float");
            }
            for (i = self4.begin, limit = self4.end + function() {
              if ($truthy2(self4.excl)) {
                return 0;
              } else {
                return 1;
              }
              ;
              return nil2;
            }(); i < limit; i++) {
              block2(i);
            }
            return self4;
          }
          if (self4.begin.$$is_string && self4.end.$$is_string) {
            $send2(self4.begin, "upto", [self4.end, self4.excl], block2.$to_proc());
            return self4;
          }
          ;
          current = self4.begin;
          last = self4.end;
          if ($truthy2(current["$respond_to?"]("succ"))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "can't iterate from " + current.$class());
          }
          ;
          while ($truthy2($rb_lt2(current["$<=>"](last), 0))) {
            Opal2.yield1(block2, current);
            current = current.$succ();
          }
          ;
          if ($truthy2($truthy2($a2 = self4.excl["$!"]()) ? current["$=="](last) : $a2)) {
            Opal2.yield1(block2, current);
          }
          ;
          return self4;
        }, $Range_each$5.$$arity = 0);
        Opal2.def(self3, "$eql?", $Range_eql$ques$6 = function(other) {
          var $a2, $b2, self4 = this;
          if ($truthy2($$2($nesting3, "Range")["$==="](other))) {
          } else {
            return false;
          }
          ;
          return $truthy2($a2 = $truthy2($b2 = self4.excl["$==="](other["$exclude_end?"]())) ? self4.begin["$eql?"](other.$begin()) : $b2) ? self4.end["$eql?"](other.$end()) : $a2;
        }, $Range_eql$ques$6.$$arity = 1);
        Opal2.def(self3, "$exclude_end?", $Range_exclude_end$ques$7 = function() {
          var self4 = this;
          return self4.excl;
        }, $Range_exclude_end$ques$7.$$arity = 0);
        Opal2.def(self3, "$first", $Range_first$8 = function $$first(n) {
          var $iter2 = $Range_first$8.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Range_first$8.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          ;
          if ($truthy2(n == null)) {
            return self4.begin;
          }
          ;
          return $send2(self4, Opal2.find_super_dispatcher(self4, "first", $Range_first$8, false), $zuper, $iter2);
        }, $Range_first$8.$$arity = -1);
        Opal2.alias(self3, "include?", "cover?");
        Opal2.def(self3, "$last", $Range_last$9 = function $$last(n) {
          var self4 = this;
          ;
          if ($truthy2(n == null)) {
            return self4.end;
          }
          ;
          return self4.$to_a().$last(n);
        }, $Range_last$9.$$arity = -1);
        Opal2.def(self3, "$max", $Range_max$10 = function $$max() {
          var $a2, $iter2 = $Range_max$10.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Range_max$10.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($yield !== nil2) {
            return $send2(self4, Opal2.find_super_dispatcher(self4, "max", $Range_max$10, false), $zuper, $iter2);
          } else if ($truthy2($rb_gt2(self4.begin, self4.end))) {
            return nil2;
          } else if ($truthy2($truthy2($a2 = self4.excl) ? self4.begin["$=="](self4.end) : $a2)) {
            return nil2;
          } else {
            return self4.excl ? self4.end - 1 : self4.end;
          }
        }, $Range_max$10.$$arity = 0);
        Opal2.alias(self3, "member?", "cover?");
        Opal2.def(self3, "$min", $Range_min$11 = function $$min() {
          var $a2, $iter2 = $Range_min$11.$$p, $yield = $iter2 || nil2, self4 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
          if ($iter2)
            $Range_min$11.$$p = null;
          for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($yield !== nil2) {
            return $send2(self4, Opal2.find_super_dispatcher(self4, "min", $Range_min$11, false), $zuper, $iter2);
          } else if ($truthy2($rb_gt2(self4.begin, self4.end))) {
            return nil2;
          } else if ($truthy2($truthy2($a2 = self4.excl) ? self4.begin["$=="](self4.end) : $a2)) {
            return nil2;
          } else {
            return self4.begin;
          }
        }, $Range_min$11.$$arity = 0);
        Opal2.def(self3, "$size", $Range_size$12 = function $$size() {
          var $a2, self4 = this, range_begin = nil2, range_end = nil2, infinity = nil2;
          range_begin = self4.begin;
          range_end = self4.end;
          if ($truthy2(self4.excl)) {
            range_end = $rb_minus(range_end, 1);
          }
          ;
          if ($truthy2($truthy2($a2 = $$2($nesting3, "Numeric")["$==="](range_begin)) ? $$2($nesting3, "Numeric")["$==="](range_end) : $a2)) {
          } else {
            return nil2;
          }
          ;
          if ($truthy2($rb_lt2(range_end, range_begin))) {
            return 0;
          }
          ;
          infinity = $$$2($$2($nesting3, "Float"), "INFINITY");
          if ($truthy2([range_begin.$abs(), range_end.$abs()]["$include?"](infinity))) {
            return infinity;
          }
          ;
          return (Math.abs(range_end - range_begin) + 1).$to_i();
        }, $Range_size$12.$$arity = 0);
        Opal2.def(self3, "$step", $Range_step$13 = function $$step(n) {
          var $$14, $$15, $$16, $iter2 = $Range_step$13.$$p, $yield = $iter2 || nil2, self4 = this, i = nil2;
          if ($iter2)
            $Range_step$13.$$p = null;
          if (n == null) {
            n = 1;
          }
          ;
          function coerceStepSize() {
            if (!n.$$is_number) {
              n = $$2($nesting3, "Opal")["$coerce_to!"](n, $$2($nesting3, "Integer"), "to_int");
            }
            if (n < 0) {
              self4.$raise($$2($nesting3, "ArgumentError"), "step can't be negative");
            } else if (n === 0) {
              self4.$raise($$2($nesting3, "ArgumentError"), "step can't be 0");
            }
          }
          function enumeratorSize() {
            if (!self4.begin["$respond_to?"]("succ")) {
              return nil2;
            }
            if (self4.begin.$$is_string && self4.end.$$is_string) {
              return nil2;
            }
            if (n % 1 === 0) {
              return $rb_divide(self4.$size(), n).$ceil();
            } else {
              var begin = self4.begin, end = self4.end, abs = Math.abs, floor = Math.floor, err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$2($$2($nesting3, "Float"), "EPSILON"), size;
              if (err > 0.5) {
                err = 0.5;
              }
              if (self4.excl) {
                size = floor((end - begin) / n - err);
                if (size * n + begin < end) {
                  size++;
                }
              } else {
                size = floor((end - begin) / n + err) + 1;
              }
              return size;
            }
          }
          ;
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["step", n], ($$14 = function() {
              var self5 = $$14.$$s || this;
              coerceStepSize();
              return enumeratorSize();
            }, $$14.$$s = self4, $$14.$$arity = 0, $$14));
          }
          ;
          coerceStepSize();
          if ($truthy2(self4.begin.$$is_number && self4.end.$$is_number)) {
            i = 0;
            (function() {
              var $brk = Opal2.new_brk();
              try {
                return $send2(self4, "loop", [], ($$15 = function() {
                  var self5 = $$15.$$s || this, current = nil2;
                  if (self5.begin == null)
                    self5.begin = nil2;
                  if (self5.excl == null)
                    self5.excl = nil2;
                  if (self5.end == null)
                    self5.end = nil2;
                  current = $rb_plus(self5.begin, $rb_times(i, n));
                  if ($truthy2(self5.excl)) {
                    if ($truthy2($rb_ge(current, self5.end))) {
                      Opal2.brk(nil2, $brk);
                    }
                  } else if ($truthy2($rb_gt2(current, self5.end))) {
                    Opal2.brk(nil2, $brk);
                  }
                  ;
                  Opal2.yield1($yield, current);
                  return i = $rb_plus(i, 1);
                }, $$15.$$s = self4, $$15.$$brk = $brk, $$15.$$arity = 0, $$15));
              } catch (err) {
                if (err === $brk) {
                  return err.$v;
                } else {
                  throw err;
                }
              }
            })();
          } else {
            if (self4.begin.$$is_string && self4.end.$$is_string && n % 1 !== 0) {
              self4.$raise($$2($nesting3, "TypeError"), "no implicit conversion to float from string");
            }
            ;
            $send2(self4, "each_with_index", [], ($$16 = function(value, idx) {
              var self5 = $$16.$$s || this;
              if (value == null) {
                value = nil2;
              }
              ;
              if (idx == null) {
                idx = nil2;
              }
              ;
              if (idx["$%"](n)["$=="](0)) {
                return Opal2.yield1($yield, value);
              } else {
                return nil2;
              }
              ;
            }, $$16.$$s = self4, $$16.$$arity = 2, $$16));
          }
          ;
          return self4;
        }, $Range_step$13.$$arity = -1);
        Opal2.def(self3, "$bsearch", $Range_bsearch$17 = function $$bsearch() {
          var $iter2 = $Range_bsearch$17.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Range_bsearch$17.$$p = null;
          if ($iter2)
            $Range_bsearch$17.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("bsearch");
          }
          ;
          if ($truthy2(self4.begin.$$is_number && self4.end.$$is_number)) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "can't do binary search for " + self4.begin.$class());
          }
          ;
          return $send2(self4.$to_a(), "bsearch", [], block2.$to_proc());
        }, $Range_bsearch$17.$$arity = 0);
        Opal2.def(self3, "$to_s", $Range_to_s$18 = function $$to_s() {
          var self4 = this;
          return "" + self4.begin + function() {
            if ($truthy2(self4.excl)) {
              return "...";
            } else {
              return "..";
            }
            ;
            return nil2;
          }() + self4.end;
        }, $Range_to_s$18.$$arity = 0);
        Opal2.def(self3, "$inspect", $Range_inspect$19 = function $$inspect() {
          var self4 = this;
          return "" + self4.begin.$inspect() + function() {
            if ($truthy2(self4.excl)) {
              return "...";
            } else {
              return "..";
            }
            ;
            return nil2;
          }() + self4.end.$inspect();
        }, $Range_inspect$19.$$arity = 0);
        Opal2.def(self3, "$marshal_load", $Range_marshal_load$20 = function $$marshal_load(args2) {
          var self4 = this;
          self4.begin = args2["$[]"]("begin");
          self4.end = args2["$[]"]("end");
          return self4.excl = args2["$[]"]("excl");
        }, $Range_marshal_load$20.$$arity = 1);
        return (Opal2.def(self3, "$hash", $Range_hash$21 = function $$hash() {
          var self4 = this;
          return [self4.begin, self4.end, self4.excl].$hash();
        }, $Range_hash$21.$$arity = 0), nil2) && "hash";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/proc"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$raise", "$coerce_to!"]);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Proc");
        var $nesting3 = [self3].concat($parent_nesting2), $Proc_new$1, $Proc_call$2, $Proc_to_proc$3, $Proc_lambda$ques$4, $Proc_arity$5, $Proc_source_location$6, $Proc_binding$7, $Proc_parameters$8, $Proc_curry$9, $Proc_dup$10;
        Opal2.defineProperty(self3.$$prototype, "$$is_proc", true);
        Opal2.defineProperty(self3.$$prototype, "$$is_lambda", false);
        Opal2.defs(self3, "$new", $Proc_new$1 = function() {
          var $iter2 = $Proc_new$1.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Proc_new$1.$$p = null;
          if ($iter2)
            $Proc_new$1.$$p = null;
          ;
          if ($truthy2(block2)) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "tried to create a Proc object without a block");
          }
          ;
          return block2;
        }, $Proc_new$1.$$arity = 0);
        Opal2.def(self3, "$call", $Proc_call$2 = function $$call($a2) {
          var $iter2 = $Proc_call$2.$$p, block2 = $iter2 || nil2, $post_args2, args2, self4 = this;
          if ($iter2)
            $Proc_call$2.$$p = null;
          if ($iter2)
            $Proc_call$2.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if (block2 !== nil2) {
            self4.$$p = block2;
          }
          var result2, $brk = self4.$$brk;
          if ($brk) {
            try {
              if (self4.$$is_lambda) {
                result2 = self4.apply(null, args2);
              } else {
                result2 = Opal2.yieldX(self4, args2);
              }
            } catch (err) {
              if (err === $brk) {
                return $brk.$v;
              } else {
                throw err;
              }
            }
          } else {
            if (self4.$$is_lambda) {
              result2 = self4.apply(null, args2);
            } else {
              result2 = Opal2.yieldX(self4, args2);
            }
          }
          return result2;
          ;
        }, $Proc_call$2.$$arity = -1);
        Opal2.alias(self3, "[]", "call");
        Opal2.alias(self3, "===", "call");
        Opal2.alias(self3, "yield", "call");
        Opal2.def(self3, "$to_proc", $Proc_to_proc$3 = function $$to_proc() {
          var self4 = this;
          return self4;
        }, $Proc_to_proc$3.$$arity = 0);
        Opal2.def(self3, "$lambda?", $Proc_lambda$ques$4 = function() {
          var self4 = this;
          return !!self4.$$is_lambda;
        }, $Proc_lambda$ques$4.$$arity = 0);
        Opal2.def(self3, "$arity", $Proc_arity$5 = function $$arity() {
          var self4 = this;
          if (self4.$$is_curried) {
            return -1;
          } else {
            return self4.$$arity;
          }
        }, $Proc_arity$5.$$arity = 0);
        Opal2.def(self3, "$source_location", $Proc_source_location$6 = function $$source_location() {
          var self4 = this;
          if (self4.$$is_curried) {
            return nil2;
          }
          ;
          return nil2;
        }, $Proc_source_location$6.$$arity = 0);
        Opal2.def(self3, "$binding", $Proc_binding$7 = function $$binding() {
          var self4 = this;
          if (self4.$$is_curried) {
            self4.$raise($$2($nesting3, "ArgumentError"), "Can't create Binding");
          }
          ;
          return nil2;
        }, $Proc_binding$7.$$arity = 0);
        Opal2.def(self3, "$parameters", $Proc_parameters$8 = function $$parameters() {
          var self4 = this;
          if (self4.$$is_curried) {
            return [["rest"]];
          } else if (self4.$$parameters) {
            if (self4.$$is_lambda) {
              return self4.$$parameters;
            } else {
              var result2 = [], i, length;
              for (i = 0, length = self4.$$parameters.length; i < length; i++) {
                var parameter = self4.$$parameters[i];
                if (parameter[0] === "req") {
                  parameter = ["opt", parameter[1]];
                }
                result2.push(parameter);
              }
              return result2;
            }
          } else {
            return [];
          }
        }, $Proc_parameters$8.$$arity = 0);
        Opal2.def(self3, "$curry", $Proc_curry$9 = function $$curry(arity) {
          var self4 = this;
          ;
          if (arity === void 0) {
            arity = self4.length;
          } else {
            arity = $$2($nesting3, "Opal")["$coerce_to!"](arity, $$2($nesting3, "Integer"), "to_int");
            if (self4.$$is_lambda && arity !== self4.length) {
              self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + arity + " for " + self4.length + ")");
            }
          }
          function curried() {
            var args2 = $slice2.call(arguments), length = args2.length, result2;
            if (length > arity && self4.$$is_lambda && !self4.$$is_curried) {
              self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (" + length + " for " + arity + ")");
            }
            if (length >= arity) {
              return self4.$call.apply(self4, args2);
            }
            result2 = function() {
              return curried.apply(null, args2.concat($slice2.call(arguments)));
            };
            result2.$$is_lambda = self4.$$is_lambda;
            result2.$$is_curried = true;
            return result2;
          }
          ;
          curried.$$is_lambda = self4.$$is_lambda;
          curried.$$is_curried = true;
          return curried;
          ;
        }, $Proc_curry$9.$$arity = -1);
        Opal2.def(self3, "$dup", $Proc_dup$10 = function $$dup() {
          var self4 = this;
          var original_proc = self4.$$original_proc || self4, proc = function() {
            return original_proc.apply(this, arguments);
          };
          for (var prop in self4) {
            if (self4.hasOwnProperty(prop)) {
              proc[prop] = self4[prop];
            }
          }
          return proc;
        }, $Proc_dup$10.$$arity = 0);
        return Opal2.alias(self3, "clone", "dup");
      }($nesting2[0], Function, $nesting2);
    };
    Opal.modules["corelib/method"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$attr_reader", "$arity", "$new", "$class", "$join", "$source_location", "$raise"]);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Method");
        var $nesting3 = [self3].concat($parent_nesting2), $Method_initialize$1, $Method_arity$2, $Method_parameters$3, $Method_source_location$4, $Method_comments$5, $Method_call$6, $Method_unbind$7, $Method_to_proc$8, $Method_inspect$9;
        self3.$$prototype.method = self3.$$prototype.receiver = self3.$$prototype.owner = self3.$$prototype.name = nil2;
        self3.$attr_reader("owner", "receiver", "name");
        Opal2.def(self3, "$initialize", $Method_initialize$1 = function $$initialize(receiver, owner, method, name) {
          var self4 = this;
          self4.receiver = receiver;
          self4.owner = owner;
          self4.name = name;
          return self4.method = method;
        }, $Method_initialize$1.$$arity = 4);
        Opal2.def(self3, "$arity", $Method_arity$2 = function $$arity() {
          var self4 = this;
          return self4.method.$arity();
        }, $Method_arity$2.$$arity = 0);
        Opal2.def(self3, "$parameters", $Method_parameters$3 = function $$parameters() {
          var self4 = this;
          return self4.method.$$parameters;
        }, $Method_parameters$3.$$arity = 0);
        Opal2.def(self3, "$source_location", $Method_source_location$4 = function $$source_location() {
          var $a2, self4 = this;
          return $truthy2($a2 = self4.method.$$source_location) ? $a2 : ["(eval)", 0];
        }, $Method_source_location$4.$$arity = 0);
        Opal2.def(self3, "$comments", $Method_comments$5 = function $$comments() {
          var $a2, self4 = this;
          return $truthy2($a2 = self4.method.$$comments) ? $a2 : [];
        }, $Method_comments$5.$$arity = 0);
        Opal2.def(self3, "$call", $Method_call$6 = function $$call($a2) {
          var $iter2 = $Method_call$6.$$p, block2 = $iter2 || nil2, $post_args2, args2, self4 = this;
          if ($iter2)
            $Method_call$6.$$p = null;
          if ($iter2)
            $Method_call$6.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          self4.method.$$p = block2;
          return self4.method.apply(self4.receiver, args2);
          ;
        }, $Method_call$6.$$arity = -1);
        Opal2.alias(self3, "[]", "call");
        Opal2.def(self3, "$unbind", $Method_unbind$7 = function $$unbind() {
          var self4 = this;
          return $$2($nesting3, "UnboundMethod").$new(self4.receiver.$class(), self4.owner, self4.method, self4.name);
        }, $Method_unbind$7.$$arity = 0);
        Opal2.def(self3, "$to_proc", $Method_to_proc$8 = function $$to_proc() {
          var self4 = this;
          var proc = self4.$call.bind(self4);
          proc.$$unbound = self4.method;
          proc.$$is_lambda = true;
          proc.$$arity = self4.method.$$arity;
          proc.$$parameters = self4.method.$$parameters;
          return proc;
        }, $Method_to_proc$8.$$arity = 0);
        return (Opal2.def(self3, "$inspect", $Method_inspect$9 = function $$inspect() {
          var self4 = this;
          return "#<" + self4.$class() + ": " + self4.receiver.$class() + "#" + self4.name + " (defined in " + self4.owner + " in " + self4.$source_location().$join(":") + ")>";
        }, $Method_inspect$9.$$arity = 0), nil2) && "inspect";
      })($nesting2[0], null, $nesting2);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "UnboundMethod");
        var $nesting3 = [self3].concat($parent_nesting2), $UnboundMethod_initialize$10, $UnboundMethod_arity$11, $UnboundMethod_parameters$12, $UnboundMethod_source_location$13, $UnboundMethod_comments$14, $UnboundMethod_bind$15, $UnboundMethod_inspect$16;
        self3.$$prototype.method = self3.$$prototype.owner = self3.$$prototype.name = self3.$$prototype.source = nil2;
        self3.$attr_reader("source", "owner", "name");
        Opal2.def(self3, "$initialize", $UnboundMethod_initialize$10 = function $$initialize(source, owner, method, name) {
          var self4 = this;
          self4.source = source;
          self4.owner = owner;
          self4.method = method;
          return self4.name = name;
        }, $UnboundMethod_initialize$10.$$arity = 4);
        Opal2.def(self3, "$arity", $UnboundMethod_arity$11 = function $$arity() {
          var self4 = this;
          return self4.method.$arity();
        }, $UnboundMethod_arity$11.$$arity = 0);
        Opal2.def(self3, "$parameters", $UnboundMethod_parameters$12 = function $$parameters() {
          var self4 = this;
          return self4.method.$$parameters;
        }, $UnboundMethod_parameters$12.$$arity = 0);
        Opal2.def(self3, "$source_location", $UnboundMethod_source_location$13 = function $$source_location() {
          var $a2, self4 = this;
          return $truthy2($a2 = self4.method.$$source_location) ? $a2 : ["(eval)", 0];
        }, $UnboundMethod_source_location$13.$$arity = 0);
        Opal2.def(self3, "$comments", $UnboundMethod_comments$14 = function $$comments() {
          var $a2, self4 = this;
          return $truthy2($a2 = self4.method.$$comments) ? $a2 : [];
        }, $UnboundMethod_comments$14.$$arity = 0);
        Opal2.def(self3, "$bind", $UnboundMethod_bind$15 = function $$bind(object) {
          var self4 = this;
          if (self4.owner.$$is_module || Opal2.is_a(object, self4.owner)) {
            return $$2($nesting3, "Method").$new(object, self4.owner, self4.method, self4.name);
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "can't bind singleton method to a different class (expected " + object + ".kind_of?(" + self4.owner + " to be true)");
          }
        }, $UnboundMethod_bind$15.$$arity = 1);
        return (Opal2.def(self3, "$inspect", $UnboundMethod_inspect$16 = function $$inspect() {
          var self4 = this;
          return "#<" + self4.$class() + ": " + self4.source + "#" + self4.name + " (defined in " + self4.owner + " in " + self4.$source_location().$join(":") + ")>";
        }, $UnboundMethod_inspect$16.$$arity = 0), nil2) && "inspect";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/variables"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $gvars = Opal2.gvars, $hash22 = Opal2.hash2;
      Opal2.add_stubs(["$new"]);
      $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil2;
      $gvars.LOADED_FEATURES = $gvars['"'] = Opal2.loaded_features;
      $gvars.LOAD_PATH = $gvars[":"] = [];
      $gvars["/"] = "\n";
      $gvars[","] = nil2;
      Opal2.const_set($nesting2[0], "ARGV", []);
      Opal2.const_set($nesting2[0], "ARGF", $$2($nesting2, "Object").$new());
      Opal2.const_set($nesting2[0], "ENV", $hash22([], {}));
      $gvars.VERBOSE = false;
      $gvars.DEBUG = false;
      return $gvars.SAFE = 0;
    };
    Opal.modules["opal/regexp_anchors"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module;
      Opal2.add_stubs(["$==", "$new"]);
      return function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Opal");
        var $nesting3 = [self3].concat($parent_nesting2);
        Opal2.const_set($nesting3[0], "REGEXP_START", function() {
          if ($$2($nesting3, "RUBY_ENGINE")["$=="]("opal")) {
            return "^";
          } else {
            return nil2;
          }
          ;
          return nil2;
        }());
        Opal2.const_set($nesting3[0], "REGEXP_END", function() {
          if ($$2($nesting3, "RUBY_ENGINE")["$=="]("opal")) {
            return "$";
          } else {
            return nil2;
          }
          ;
          return nil2;
        }());
        Opal2.const_set($nesting3[0], "FORBIDDEN_STARTING_IDENTIFIER_CHARS", "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
        Opal2.const_set($nesting3[0], "FORBIDDEN_ENDING_IDENTIFIER_CHARS", "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
        Opal2.const_set($nesting3[0], "INLINE_IDENTIFIER_REGEXP", $$2($nesting3, "Regexp").$new("[^" + $$2($nesting3, "FORBIDDEN_STARTING_IDENTIFIER_CHARS") + "]*[^" + $$2($nesting3, "FORBIDDEN_ENDING_IDENTIFIER_CHARS") + "]"));
        Opal2.const_set($nesting3[0], "FORBIDDEN_CONST_NAME_CHARS", "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
        Opal2.const_set($nesting3[0], "CONST_NAME_REGEXP", $$2($nesting3, "Regexp").$new("" + $$2($nesting3, "REGEXP_START") + "(::)?[A-Z][^" + $$2($nesting3, "FORBIDDEN_CONST_NAME_CHARS") + "]*" + $$2($nesting3, "REGEXP_END")));
      }($nesting2[0], $nesting2);
    };
    Opal.modules["opal/mini"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
      Opal2.add_stubs(["$require"]);
      self2.$require("opal/base");
      self2.$require("corelib/nil");
      self2.$require("corelib/boolean");
      self2.$require("corelib/string");
      self2.$require("corelib/comparable");
      self2.$require("corelib/enumerable");
      self2.$require("corelib/enumerator");
      self2.$require("corelib/array");
      self2.$require("corelib/hash");
      self2.$require("corelib/number");
      self2.$require("corelib/range");
      self2.$require("corelib/proc");
      self2.$require("corelib/method");
      self2.$require("corelib/regexp");
      self2.$require("corelib/variables");
      return self2.$require("opal/regexp_anchors");
    };
    Opal.modules["corelib/string/encoding"] = function(Opal2) {
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      var $$11, $$14, $$17, $$20, $$23, self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
      Opal2.add_stubs(["$require", "$+", "$[]", "$new", "$to_proc", "$each", "$const_set", "$sub", "$==", "$default_external", "$upcase", "$raise", "$attr_accessor", "$attr_reader", "$register", "$length", "$bytes", "$to_a", "$each_byte", "$dup", "$bytesize", "$enum_for", "$coerce_to!", "$find", "$<"]);
      self2.$require("corelib/string");
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Encoding");
        var $nesting3 = [self3].concat($parent_nesting2), $Encoding_register$1, $Encoding_find$3, $Encoding_initialize$4, $Encoding_ascii_compatible$ques$5, $Encoding_dummy$ques$6, $Encoding_to_s$7, $Encoding_inspect$8, $Encoding_each_byte$9, $Encoding_bytesize$10;
        self3.$$prototype.ascii = self3.$$prototype.dummy = self3.$$prototype.name = nil2;
        Opal2.defineProperty(self3, "$$register", {});
        Opal2.defs(self3, "$register", $Encoding_register$1 = function $$register(name, options) {
          var $iter2 = $Encoding_register$1.$$p, block2 = $iter2 || nil2, $a2, $$22, self4 = this, names = nil2, encoding = nil2, register = nil2;
          if ($iter2)
            $Encoding_register$1.$$p = null;
          if ($iter2)
            $Encoding_register$1.$$p = null;
          ;
          if (options == null) {
            options = $hash22([], {});
          }
          ;
          names = $rb_plus([name], $truthy2($a2 = options["$[]"]("aliases")) ? $a2 : []);
          encoding = $send2($$2($nesting3, "Class"), "new", [self4], block2.$to_proc()).$new(name, names, $truthy2($a2 = options["$[]"]("ascii")) ? $a2 : false, $truthy2($a2 = options["$[]"]("dummy")) ? $a2 : false);
          register = self4["$$register"];
          return $send2(names, "each", [], ($$22 = function(encoding_name) {
            var self5 = $$22.$$s || this;
            if (encoding_name == null) {
              encoding_name = nil2;
            }
            ;
            self5.$const_set(encoding_name.$sub("-", "_"), encoding);
            return register["$$" + encoding_name] = encoding;
          }, $$22.$$s = self4, $$22.$$arity = 1, $$22));
        }, $Encoding_register$1.$$arity = -2);
        Opal2.defs(self3, "$find", $Encoding_find$3 = function $$find(name) {
          var $a2, self4 = this, register = nil2, encoding = nil2;
          if (name["$=="]("default_external")) {
            return self4.$default_external();
          }
          ;
          register = self4["$$register"];
          encoding = $truthy2($a2 = register["$$" + name]) ? $a2 : register["$$" + name.$upcase()];
          if ($truthy2(encoding)) {
          } else {
            self4.$raise($$2($nesting3, "ArgumentError"), "unknown encoding name - " + name);
          }
          ;
          return encoding;
        }, $Encoding_find$3.$$arity = 1);
        (function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3);
          return self4.$attr_accessor("default_external");
        })(Opal2.get_singleton_class(self3), $nesting3);
        self3.$attr_reader("name", "names");
        Opal2.def(self3, "$initialize", $Encoding_initialize$4 = function $$initialize(name, names, ascii, dummy) {
          var self4 = this;
          self4.name = name;
          self4.names = names;
          self4.ascii = ascii;
          return self4.dummy = dummy;
        }, $Encoding_initialize$4.$$arity = 4);
        Opal2.def(self3, "$ascii_compatible?", $Encoding_ascii_compatible$ques$5 = function() {
          var self4 = this;
          return self4.ascii;
        }, $Encoding_ascii_compatible$ques$5.$$arity = 0);
        Opal2.def(self3, "$dummy?", $Encoding_dummy$ques$6 = function() {
          var self4 = this;
          return self4.dummy;
        }, $Encoding_dummy$ques$6.$$arity = 0);
        Opal2.def(self3, "$to_s", $Encoding_to_s$7 = function $$to_s() {
          var self4 = this;
          return self4.name;
        }, $Encoding_to_s$7.$$arity = 0);
        Opal2.def(self3, "$inspect", $Encoding_inspect$8 = function $$inspect() {
          var self4 = this;
          return "#<Encoding:" + self4.name + function() {
            if ($truthy2(self4.dummy)) {
              return " (dummy)";
            } else {
              return nil2;
            }
            ;
            return nil2;
          }() + ">";
        }, $Encoding_inspect$8.$$arity = 0);
        Opal2.def(self3, "$each_byte", $Encoding_each_byte$9 = function $$each_byte($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"));
        }, $Encoding_each_byte$9.$$arity = -1);
        Opal2.def(self3, "$bytesize", $Encoding_bytesize$10 = function $$bytesize($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"));
        }, $Encoding_bytesize$10.$$arity = -1);
        (function($base3, $super3, $parent_nesting3) {
          var self4 = $klass2($base3, $super3, "EncodingError");
          var $nesting4 = [self4].concat($parent_nesting3);
          return nil2;
        })($nesting3[0], $$2($nesting3, "StandardError"), $nesting3);
        return function($base3, $super3, $parent_nesting3) {
          var self4 = $klass2($base3, $super3, "CompatibilityError");
          var $nesting4 = [self4].concat($parent_nesting3);
          return nil2;
        }($nesting3[0], $$2($nesting3, "EncodingError"), $nesting3);
      })($nesting2[0], null, $nesting2);
      $send2($$2($nesting2, "Encoding"), "register", ["UTF-8", $hash22(["aliases", "ascii"], { "aliases": ["CP65001"], "ascii": true })], ($$11 = function() {
        var self3 = $$11.$$s || this, $each_byte$12, $bytesize$13;
        Opal2.def(self3, "$each_byte", $each_byte$12 = function $$each_byte(string2) {
          var $iter2 = $each_byte$12.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $each_byte$12.$$p = null;
          if ($iter2)
            $each_byte$12.$$p = null;
          ;
          var units = Infinity;
          var codePoint;
          var length = string2.length;
          var leadSurrogate = null;
          for (var i = 0; i < length; ++i) {
            codePoint = string2.charCodeAt(i);
            if (codePoint > 55295 && codePoint < 57344) {
              if (!leadSurrogate) {
                if (codePoint > 56319) {
                  if ((units -= 3) > -1) {
                    Opal2.yield1(block2, 239);
                    Opal2.yield1(block2, 191);
                    Opal2.yield1(block2, 189);
                  }
                  continue;
                } else if (i + 1 === length) {
                  if ((units -= 3) > -1) {
                    Opal2.yield1(block2, 239);
                    Opal2.yield1(block2, 191);
                    Opal2.yield1(block2, 189);
                  }
                  continue;
                }
                leadSurrogate = codePoint;
                continue;
              }
              if (codePoint < 56320) {
                if ((units -= 3) > -1) {
                  Opal2.yield1(block2, 239);
                  Opal2.yield1(block2, 191);
                  Opal2.yield1(block2, 189);
                }
                leadSurrogate = codePoint;
                continue;
              }
              codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
            } else if (leadSurrogate) {
              if ((units -= 3) > -1) {
                Opal2.yield1(block2, 239);
                Opal2.yield1(block2, 191);
                Opal2.yield1(block2, 189);
              }
            }
            leadSurrogate = null;
            if (codePoint < 128) {
              if ((units -= 1) < 0)
                break;
              Opal2.yield1(block2, codePoint);
            } else if (codePoint < 2048) {
              if ((units -= 2) < 0)
                break;
              Opal2.yield1(block2, codePoint >> 6 | 192);
              Opal2.yield1(block2, codePoint & 63 | 128);
            } else if (codePoint < 65536) {
              if ((units -= 3) < 0)
                break;
              Opal2.yield1(block2, codePoint >> 12 | 224);
              Opal2.yield1(block2, codePoint >> 6 & 63 | 128);
              Opal2.yield1(block2, codePoint & 63 | 128);
            } else if (codePoint < 1114112) {
              if ((units -= 4) < 0)
                break;
              Opal2.yield1(block2, codePoint >> 18 | 240);
              Opal2.yield1(block2, codePoint >> 12 & 63 | 128);
              Opal2.yield1(block2, codePoint >> 6 & 63 | 128);
              Opal2.yield1(block2, codePoint & 63 | 128);
            } else {
            }
          }
          ;
        }, $each_byte$12.$$arity = 1);
        return (Opal2.def(self3, "$bytesize", $bytesize$13 = function $$bytesize(string2) {
          var self4 = this;
          return string2.$bytes().$length();
        }, $bytesize$13.$$arity = 1), nil2) && "bytesize";
      }, $$11.$$s = self2, $$11.$$arity = 0, $$11));
      $send2($$2($nesting2, "Encoding"), "register", ["UTF-16LE"], ($$14 = function() {
        var self3 = $$14.$$s || this, $each_byte$15, $bytesize$16;
        Opal2.def(self3, "$each_byte", $each_byte$15 = function $$each_byte(string2) {
          var $iter2 = $each_byte$15.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $each_byte$15.$$p = null;
          if ($iter2)
            $each_byte$15.$$p = null;
          ;
          for (var i = 0, length = string2.length; i < length; i++) {
            var code = string2.charCodeAt(i);
            Opal2.yield1(block2, code & 255);
            Opal2.yield1(block2, code >> 8);
          }
          ;
        }, $each_byte$15.$$arity = 1);
        return (Opal2.def(self3, "$bytesize", $bytesize$16 = function $$bytesize(string2) {
          var self4 = this;
          return string2.$bytes().$length();
        }, $bytesize$16.$$arity = 1), nil2) && "bytesize";
      }, $$14.$$s = self2, $$14.$$arity = 0, $$14));
      $send2($$2($nesting2, "Encoding"), "register", ["UTF-16BE"], ($$17 = function() {
        var self3 = $$17.$$s || this, $each_byte$18, $bytesize$19;
        Opal2.def(self3, "$each_byte", $each_byte$18 = function $$each_byte(string2) {
          var $iter2 = $each_byte$18.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $each_byte$18.$$p = null;
          if ($iter2)
            $each_byte$18.$$p = null;
          ;
          for (var i = 0, length = string2.length; i < length; i++) {
            var code = string2.charCodeAt(i);
            Opal2.yield1(block2, code >> 8);
            Opal2.yield1(block2, code & 255);
          }
          ;
        }, $each_byte$18.$$arity = 1);
        return (Opal2.def(self3, "$bytesize", $bytesize$19 = function $$bytesize(string2) {
          var self4 = this;
          return string2.$bytes().$length();
        }, $bytesize$19.$$arity = 1), nil2) && "bytesize";
      }, $$17.$$s = self2, $$17.$$arity = 0, $$17));
      $send2($$2($nesting2, "Encoding"), "register", ["UTF-32LE"], ($$20 = function() {
        var self3 = $$20.$$s || this, $each_byte$21, $bytesize$22;
        Opal2.def(self3, "$each_byte", $each_byte$21 = function $$each_byte(string2) {
          var $iter2 = $each_byte$21.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $each_byte$21.$$p = null;
          if ($iter2)
            $each_byte$21.$$p = null;
          ;
          for (var i = 0, length = string2.length; i < length; i++) {
            var code = string2.charCodeAt(i);
            Opal2.yield1(block2, code & 255);
            Opal2.yield1(block2, code >> 8);
          }
          ;
        }, $each_byte$21.$$arity = 1);
        return (Opal2.def(self3, "$bytesize", $bytesize$22 = function $$bytesize(string2) {
          var self4 = this;
          return string2.$bytes().$length();
        }, $bytesize$22.$$arity = 1), nil2) && "bytesize";
      }, $$20.$$s = self2, $$20.$$arity = 0, $$20));
      $send2($$2($nesting2, "Encoding"), "register", ["ASCII-8BIT", $hash22(["aliases", "ascii", "dummy"], { "aliases": ["BINARY", "US-ASCII", "ASCII"], "ascii": true, "dummy": true })], ($$23 = function() {
        var self3 = $$23.$$s || this, $each_byte$24, $bytesize$25;
        Opal2.def(self3, "$each_byte", $each_byte$24 = function $$each_byte(string2) {
          var $iter2 = $each_byte$24.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $each_byte$24.$$p = null;
          if ($iter2)
            $each_byte$24.$$p = null;
          ;
          for (var i = 0, length = string2.length; i < length; i++) {
            var code = string2.charCodeAt(i);
            Opal2.yield1(block2, code & 255);
            Opal2.yield1(block2, code >> 8);
          }
          ;
        }, $each_byte$24.$$arity = 1);
        return (Opal2.def(self3, "$bytesize", $bytesize$25 = function $$bytesize(string2) {
          var self4 = this;
          return string2.$bytes().$length();
        }, $bytesize$25.$$arity = 1), nil2) && "bytesize";
      }, $$23.$$s = self2, $$23.$$arity = 0, $$23));
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "String");
        var $nesting3 = [self3].concat($parent_nesting2), $String_bytes$26, $String_bytesize$27, $String_each_byte$28, $String_encode$29, $String_force_encoding$30, $String_getbyte$31, $String_valid_encoding$ques$32;
        self3.$$prototype.bytes = self3.$$prototype.internal_encoding = nil2;
        self3.$attr_reader("encoding");
        self3.$attr_reader("internal_encoding");
        Opal2.defineProperty(String.prototype, "bytes", nil2);
        Opal2.defineProperty(String.prototype, "encoding", $$$2($$2($nesting3, "Encoding"), "UTF_8"));
        Opal2.defineProperty(String.prototype, "internal_encoding", $$$2($$2($nesting3, "Encoding"), "UTF_8"));
        Opal2.def(self3, "$bytes", $String_bytes$26 = function $$bytes() {
          var $a2, self4 = this;
          self4.bytes = $truthy2($a2 = self4.bytes) ? $a2 : self4.$each_byte().$to_a();
          return self4.bytes.$dup();
        }, $String_bytes$26.$$arity = 0);
        Opal2.def(self3, "$bytesize", $String_bytesize$27 = function $$bytesize() {
          var self4 = this;
          return self4.internal_encoding.$bytesize(self4);
        }, $String_bytesize$27.$$arity = 0);
        Opal2.def(self3, "$each_byte", $String_each_byte$28 = function $$each_byte() {
          var $iter2 = $String_each_byte$28.$$p, block2 = $iter2 || nil2, self4 = this;
          if ($iter2)
            $String_each_byte$28.$$p = null;
          if ($iter2)
            $String_each_byte$28.$$p = null;
          ;
          if (block2 !== nil2) {
          } else {
            return self4.$enum_for("each_byte");
          }
          ;
          $send2(self4.internal_encoding, "each_byte", [self4], block2.$to_proc());
          return self4;
        }, $String_each_byte$28.$$arity = 0);
        Opal2.def(self3, "$encode", $String_encode$29 = function $$encode(encoding) {
          var self4 = this;
          return Opal2.enc(self4, encoding);
        }, $String_encode$29.$$arity = 1);
        Opal2.def(self3, "$force_encoding", $String_force_encoding$30 = function $$force_encoding(encoding) {
          var self4 = this;
          if (encoding === self4.encoding) {
            return self4;
          }
          encoding = $$2($nesting3, "Opal")["$coerce_to!"](encoding, $$2($nesting3, "String"), "to_s");
          encoding = $$2($nesting3, "Encoding").$find(encoding);
          if (encoding === self4.encoding) {
            return self4;
          }
          self4.encoding = encoding;
          return self4;
        }, $String_force_encoding$30.$$arity = 1);
        Opal2.def(self3, "$getbyte", $String_getbyte$31 = function $$getbyte(idx) {
          var self4 = this, string_bytes = nil2;
          string_bytes = self4.$bytes();
          idx = $$2($nesting3, "Opal")["$coerce_to!"](idx, $$2($nesting3, "Integer"), "to_int");
          if ($truthy2($rb_lt2(string_bytes.$length(), idx))) {
            return nil2;
          }
          ;
          return string_bytes["$[]"](idx);
        }, $String_getbyte$31.$$arity = 1);
        return (Opal2.def(self3, "$valid_encoding?", $String_valid_encoding$ques$32 = function() {
          var self4 = this;
          return true;
        }, $String_valid_encoding$ques$32.$$arity = 0), nil2) && "valid_encoding?";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/struct"] = function(Opal2) {
      function $rb_gt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
      }
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      function $rb_lt2(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
      }
      function $rb_ge(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
      }
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
      Opal2.add_stubs(["$require", "$include", "$const_name!", "$unshift", "$map", "$coerce_to!", "$new", "$each", "$define_struct_attribute", "$allocate", "$initialize", "$alias_method", "$module_eval", "$to_proc", "$const_set", "$==", "$raise", "$<<", "$members", "$define_method", "$instance_eval", "$class", "$last", "$>", "$length", "$-", "$keys", "$any?", "$join", "$[]", "$[]=", "$each_with_index", "$hash", "$===", "$<", "$-@", "$size", "$>=", "$include?", "$to_sym", "$instance_of?", "$__id__", "$eql?", "$enum_for", "$name", "$+", "$each_pair", "$inspect", "$each_with_object", "$flatten", "$to_a", "$respond_to?", "$dig"]);
      self2.$require("corelib/enumerable");
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Struct");
        var $nesting3 = [self3].concat($parent_nesting2), $Struct_new$1, $Struct_define_struct_attribute$6, $Struct_members$9, $Struct_inherited$10, $Struct_initialize$12, $Struct_members$15, $Struct_hash$16, $Struct_$$$17, $Struct_$$$eq$18, $Struct_$eq_eq$19, $Struct_eql$ques$20, $Struct_each$21, $Struct_each_pair$24, $Struct_length$27, $Struct_to_a$28, $Struct_inspect$30, $Struct_to_h$32, $Struct_values_at$34, $Struct_dig$36;
        self3.$include($$2($nesting3, "Enumerable"));
        Opal2.defs(self3, "$new", $Struct_new$1 = function(const_name, $a2, $b2) {
          var $iter2 = $Struct_new$1.$$p, block2 = $iter2 || nil2, $post_args2, $kwargs, args2, keyword_init, $$22, $$3, self4 = this, klass = nil2;
          if ($iter2)
            $Struct_new$1.$$p = null;
          if ($iter2)
            $Struct_new$1.$$p = null;
          ;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          $kwargs = Opal2.extract_kwargs($post_args2);
          if ($kwargs == null) {
            $kwargs = $hash22([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal2.ArgumentError.$new("expected kwargs");
          }
          ;
          args2 = $post_args2;
          ;
          keyword_init = $kwargs.$$smap["keyword_init"];
          if (keyword_init == null) {
            keyword_init = false;
          }
          ;
          if ($truthy2(const_name)) {
            try {
              const_name = $$2($nesting3, "Opal")["$const_name!"](const_name);
            } catch ($err) {
              if (Opal2.rescue($err, [$$2($nesting3, "TypeError"), $$2($nesting3, "NameError")])) {
                try {
                  args2.$unshift(const_name);
                  const_name = nil2;
                } finally {
                  Opal2.pop_exception();
                }
              } else {
                throw $err;
              }
            }
            ;
          }
          ;
          $send2(args2, "map", [], ($$22 = function(arg) {
            var self5 = $$22.$$s || this;
            if (arg == null) {
              arg = nil2;
            }
            ;
            return $$2($nesting3, "Opal")["$coerce_to!"](arg, $$2($nesting3, "String"), "to_str");
          }, $$22.$$s = self4, $$22.$$arity = 1, $$22));
          klass = $send2($$2($nesting3, "Class"), "new", [self4], ($$3 = function() {
            var self5 = $$3.$$s || this, $$4;
            $send2(args2, "each", [], ($$4 = function(arg) {
              var self6 = $$4.$$s || this;
              if (arg == null) {
                arg = nil2;
              }
              ;
              return self6.$define_struct_attribute(arg);
            }, $$4.$$s = self5, $$4.$$arity = 1, $$4));
            return function(self6, $parent_nesting3) {
              var $nesting4 = [self6].concat($parent_nesting3), $new$5;
              Opal2.def(self6, "$new", $new$5 = function($a3) {
                var $post_args3, args3, self7 = this, instance = nil2;
                $post_args3 = Opal2.slice.call(arguments, 0, arguments.length);
                args3 = $post_args3;
                ;
                instance = self7.$allocate();
                instance.$$data = {};
                $send2(instance, "initialize", Opal2.to_a(args3));
                return instance;
              }, $new$5.$$arity = -1);
              return self6.$alias_method("[]", "new");
            }(Opal2.get_singleton_class(self5), $nesting3);
          }, $$3.$$s = self4, $$3.$$arity = 0, $$3));
          if ($truthy2(block2)) {
            $send2(klass, "module_eval", [], block2.$to_proc());
          }
          ;
          klass.$$keyword_init = keyword_init;
          if ($truthy2(const_name)) {
            $$2($nesting3, "Struct").$const_set(const_name, klass);
          }
          ;
          return klass;
        }, $Struct_new$1.$$arity = -2);
        Opal2.defs(self3, "$define_struct_attribute", $Struct_define_struct_attribute$6 = function $$define_struct_attribute(name) {
          var $$7, $$8, self4 = this;
          if (self4["$=="]($$2($nesting3, "Struct"))) {
            self4.$raise($$2($nesting3, "ArgumentError"), "you cannot define attributes to the Struct class");
          }
          ;
          self4.$members()["$<<"](name);
          $send2(self4, "define_method", [name], ($$7 = function() {
            var self5 = $$7.$$s || this;
            return self5.$$data[name];
          }, $$7.$$s = self4, $$7.$$arity = 0, $$7));
          return $send2(self4, "define_method", ["" + name + "="], ($$8 = function(value) {
            var self5 = $$8.$$s || this;
            if (value == null) {
              value = nil2;
            }
            ;
            return self5.$$data[name] = value;
            ;
          }, $$8.$$s = self4, $$8.$$arity = 1, $$8));
        }, $Struct_define_struct_attribute$6.$$arity = 1);
        Opal2.defs(self3, "$members", $Struct_members$9 = function $$members() {
          var $a2, self4 = this;
          if (self4.members == null)
            self4.members = nil2;
          if (self4["$=="]($$2($nesting3, "Struct"))) {
            self4.$raise($$2($nesting3, "ArgumentError"), "the Struct class has no members");
          }
          ;
          return self4.members = $truthy2($a2 = self4.members) ? $a2 : [];
        }, $Struct_members$9.$$arity = 0);
        Opal2.defs(self3, "$inherited", $Struct_inherited$10 = function $$inherited(klass) {
          var $$11, self4 = this, members = nil2;
          if (self4.members == null)
            self4.members = nil2;
          members = self4.members;
          return $send2(klass, "instance_eval", [], ($$11 = function() {
            var self5 = $$11.$$s || this;
            return self5.members = members;
          }, $$11.$$s = self4, $$11.$$arity = 0, $$11));
        }, $Struct_inherited$10.$$arity = 1);
        Opal2.def(self3, "$initialize", $Struct_initialize$12 = function $$initialize($a2) {
          var $post_args2, args2, $b2, $$13, $$14, self4 = this, kwargs = nil2, extra = nil2;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          if ($truthy2(self4.$class().$$keyword_init)) {
            kwargs = $truthy2($b2 = args2.$last()) ? $b2 : $hash22([], {});
            if ($truthy2($truthy2($b2 = $rb_gt2(args2.$length(), 1)) ? $b2 : args2.length === 1 && !kwargs.$$is_hash)) {
              self4.$raise($$2($nesting3, "ArgumentError"), "wrong number of arguments (given " + args2.$length() + ", expected 0)");
            }
            ;
            extra = $rb_minus(kwargs.$keys(), self4.$class().$members());
            if ($truthy2(extra["$any?"]())) {
              self4.$raise($$2($nesting3, "ArgumentError"), "unknown keywords: " + extra.$join(", "));
            }
            ;
            return $send2(self4.$class().$members(), "each", [], ($$13 = function(name) {
              var self5 = $$13.$$s || this, $writer = nil2;
              if (name == null) {
                name = nil2;
              }
              ;
              $writer = [name, kwargs["$[]"](name)];
              $send2(self5, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $$13.$$s = self4, $$13.$$arity = 1, $$13));
          } else {
            if ($truthy2($rb_gt2(args2.$length(), self4.$class().$members().$length()))) {
              self4.$raise($$2($nesting3, "ArgumentError"), "struct size differs");
            }
            ;
            return $send2(self4.$class().$members(), "each_with_index", [], ($$14 = function(name, index) {
              var self5 = $$14.$$s || this, $writer = nil2;
              if (name == null) {
                name = nil2;
              }
              ;
              if (index == null) {
                index = nil2;
              }
              ;
              $writer = [name, args2["$[]"](index)];
              $send2(self5, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $$14.$$s = self4, $$14.$$arity = 2, $$14));
          }
          ;
        }, $Struct_initialize$12.$$arity = -1);
        Opal2.def(self3, "$members", $Struct_members$15 = function $$members() {
          var self4 = this;
          return self4.$class().$members();
        }, $Struct_members$15.$$arity = 0);
        Opal2.def(self3, "$hash", $Struct_hash$16 = function $$hash() {
          var self4 = this;
          return $$2($nesting3, "Hash").$new(self4.$$data).$hash();
        }, $Struct_hash$16.$$arity = 0);
        Opal2.def(self3, "$[]", $Struct_$$$17 = function(name) {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Integer")["$==="](name))) {
            if ($truthy2($rb_lt2(name, self4.$class().$members().$size()["$-@"]()))) {
              self4.$raise($$2($nesting3, "IndexError"), "offset " + name + " too small for struct(size:" + self4.$class().$members().$size() + ")");
            }
            ;
            if ($truthy2($rb_ge(name, self4.$class().$members().$size()))) {
              self4.$raise($$2($nesting3, "IndexError"), "offset " + name + " too large for struct(size:" + self4.$class().$members().$size() + ")");
            }
            ;
            name = self4.$class().$members()["$[]"](name);
          } else if ($truthy2($$2($nesting3, "String")["$==="](name))) {
            if (!self4.$$data.hasOwnProperty(name)) {
              self4.$raise($$2($nesting3, "NameError").$new("no member '" + name + "' in struct", name));
            }
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "no implicit conversion of " + name.$class() + " into Integer");
          }
          ;
          name = $$2($nesting3, "Opal")["$coerce_to!"](name, $$2($nesting3, "String"), "to_str");
          return self4.$$data[name];
          ;
        }, $Struct_$$$17.$$arity = 1);
        Opal2.def(self3, "$[]=", $Struct_$$$eq$18 = function(name, value) {
          var self4 = this;
          if ($truthy2($$2($nesting3, "Integer")["$==="](name))) {
            if ($truthy2($rb_lt2(name, self4.$class().$members().$size()["$-@"]()))) {
              self4.$raise($$2($nesting3, "IndexError"), "offset " + name + " too small for struct(size:" + self4.$class().$members().$size() + ")");
            }
            ;
            if ($truthy2($rb_ge(name, self4.$class().$members().$size()))) {
              self4.$raise($$2($nesting3, "IndexError"), "offset " + name + " too large for struct(size:" + self4.$class().$members().$size() + ")");
            }
            ;
            name = self4.$class().$members()["$[]"](name);
          } else if ($truthy2($$2($nesting3, "String")["$==="](name))) {
            if ($truthy2(self4.$class().$members()["$include?"](name.$to_sym()))) {
            } else {
              self4.$raise($$2($nesting3, "NameError").$new("no member '" + name + "' in struct", name));
            }
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "no implicit conversion of " + name.$class() + " into Integer");
          }
          ;
          name = $$2($nesting3, "Opal")["$coerce_to!"](name, $$2($nesting3, "String"), "to_str");
          return self4.$$data[name] = value;
          ;
        }, $Struct_$$$eq$18.$$arity = 2);
        Opal2.def(self3, "$==", $Struct_$eq_eq$19 = function(other) {
          var self4 = this;
          if ($truthy2(other["$instance_of?"](self4.$class()))) {
          } else {
            return false;
          }
          ;
          var recursed1 = {}, recursed2 = {};
          function _eqeq(struct, other2) {
            var key, a, b;
            recursed1[struct.$__id__()] = true;
            recursed2[other2.$__id__()] = true;
            for (key in struct.$$data) {
              a = struct.$$data[key];
              b = other2.$$data[key];
              if ($$2($nesting3, "Struct")["$==="](a)) {
                if (!recursed1.hasOwnProperty(a.$__id__()) || !recursed2.hasOwnProperty(b.$__id__())) {
                  if (!_eqeq(a, b)) {
                    return false;
                  }
                }
              } else {
                if (!a["$=="](b)) {
                  return false;
                }
              }
            }
            return true;
          }
          return _eqeq(self4, other);
          ;
        }, $Struct_$eq_eq$19.$$arity = 1);
        Opal2.def(self3, "$eql?", $Struct_eql$ques$20 = function(other) {
          var self4 = this;
          if ($truthy2(other["$instance_of?"](self4.$class()))) {
          } else {
            return false;
          }
          ;
          var recursed1 = {}, recursed2 = {};
          function _eqeq(struct, other2) {
            var key, a, b;
            recursed1[struct.$__id__()] = true;
            recursed2[other2.$__id__()] = true;
            for (key in struct.$$data) {
              a = struct.$$data[key];
              b = other2.$$data[key];
              if ($$2($nesting3, "Struct")["$==="](a)) {
                if (!recursed1.hasOwnProperty(a.$__id__()) || !recursed2.hasOwnProperty(b.$__id__())) {
                  if (!_eqeq(a, b)) {
                    return false;
                  }
                }
              } else {
                if (!a["$eql?"](b)) {
                  return false;
                }
              }
            }
            return true;
          }
          return _eqeq(self4, other);
          ;
        }, $Struct_eql$ques$20.$$arity = 1);
        Opal2.def(self3, "$each", $Struct_each$21 = function $$each() {
          var $$22, $$23, $iter2 = $Struct_each$21.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Struct_each$21.$$p = null;
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each"], ($$22 = function() {
              var self5 = $$22.$$s || this;
              return self5.$size();
            }, $$22.$$s = self4, $$22.$$arity = 0, $$22));
          }
          ;
          $send2(self4.$class().$members(), "each", [], ($$23 = function(name) {
            var self5 = $$23.$$s || this;
            if (name == null) {
              name = nil2;
            }
            ;
            return Opal2.yield1($yield, self5["$[]"](name));
            ;
          }, $$23.$$s = self4, $$23.$$arity = 1, $$23));
          return self4;
        }, $Struct_each$21.$$arity = 0);
        Opal2.def(self3, "$each_pair", $Struct_each_pair$24 = function $$each_pair() {
          var $$25, $$26, $iter2 = $Struct_each_pair$24.$$p, $yield = $iter2 || nil2, self4 = this;
          if ($iter2)
            $Struct_each_pair$24.$$p = null;
          if ($yield !== nil2) {
          } else {
            return $send2(self4, "enum_for", ["each_pair"], ($$25 = function() {
              var self5 = $$25.$$s || this;
              return self5.$size();
            }, $$25.$$s = self4, $$25.$$arity = 0, $$25));
          }
          ;
          $send2(self4.$class().$members(), "each", [], ($$26 = function(name) {
            var self5 = $$26.$$s || this;
            if (name == null) {
              name = nil2;
            }
            ;
            return Opal2.yield1($yield, [name, self5["$[]"](name)]);
            ;
          }, $$26.$$s = self4, $$26.$$arity = 1, $$26));
          return self4;
        }, $Struct_each_pair$24.$$arity = 0);
        Opal2.def(self3, "$length", $Struct_length$27 = function $$length() {
          var self4 = this;
          return self4.$class().$members().$length();
        }, $Struct_length$27.$$arity = 0);
        Opal2.alias(self3, "size", "length");
        Opal2.def(self3, "$to_a", $Struct_to_a$28 = function $$to_a() {
          var $$29, self4 = this;
          return $send2(self4.$class().$members(), "map", [], ($$29 = function(name) {
            var self5 = $$29.$$s || this;
            if (name == null) {
              name = nil2;
            }
            ;
            return self5["$[]"](name);
          }, $$29.$$s = self4, $$29.$$arity = 1, $$29));
        }, $Struct_to_a$28.$$arity = 0);
        Opal2.alias(self3, "values", "to_a");
        Opal2.def(self3, "$inspect", $Struct_inspect$30 = function $$inspect() {
          var $a2, $$31, self4 = this, result2 = nil2;
          result2 = "#<struct ";
          if ($truthy2($truthy2($a2 = $$2($nesting3, "Struct")["$==="](self4)) ? self4.$class().$name() : $a2)) {
            result2 = $rb_plus(result2, "" + self4.$class() + " ");
          }
          ;
          result2 = $rb_plus(result2, $send2(self4.$each_pair(), "map", [], ($$31 = function(name, value) {
            var self5 = $$31.$$s || this;
            if (name == null) {
              name = nil2;
            }
            ;
            if (value == null) {
              value = nil2;
            }
            ;
            return "" + name + "=" + value.$inspect();
          }, $$31.$$s = self4, $$31.$$arity = 2, $$31)).$join(", "));
          result2 = $rb_plus(result2, ">");
          return result2;
        }, $Struct_inspect$30.$$arity = 0);
        Opal2.alias(self3, "to_s", "inspect");
        Opal2.def(self3, "$to_h", $Struct_to_h$32 = function $$to_h() {
          var $$33, self4 = this;
          return $send2(self4.$class().$members(), "each_with_object", [$hash22([], {})], ($$33 = function(name, h) {
            var self5 = $$33.$$s || this, $writer = nil2;
            if (name == null) {
              name = nil2;
            }
            ;
            if (h == null) {
              h = nil2;
            }
            ;
            $writer = [name, self5["$[]"](name)];
            $send2(h, "[]=", Opal2.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $$33.$$s = self4, $$33.$$arity = 2, $$33));
        }, $Struct_to_h$32.$$arity = 0);
        Opal2.def(self3, "$values_at", $Struct_values_at$34 = function $$values_at($a2) {
          var $post_args2, args2, $$35, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          args2 = $post_args2;
          ;
          args2 = $send2(args2, "map", [], ($$35 = function(arg) {
            var self5 = $$35.$$s || this;
            if (arg == null) {
              arg = nil2;
            }
            ;
            return arg.$$is_range ? arg.$to_a() : arg;
          }, $$35.$$s = self4, $$35.$$arity = 1, $$35)).$flatten();
          var result2 = [];
          for (var i = 0, len = args2.length; i < len; i++) {
            if (!args2[i].$$is_number) {
              self4.$raise($$2($nesting3, "TypeError"), "no implicit conversion of " + args2[i].$class() + " into Integer");
            }
            result2.push(self4["$[]"](args2[i]));
          }
          return result2;
          ;
        }, $Struct_values_at$34.$$arity = -1);
        return (Opal2.def(self3, "$dig", $Struct_dig$36 = function $$dig(key, $a2) {
          var $post_args2, keys, self4 = this, item = nil2;
          $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
          keys = $post_args2;
          ;
          item = function() {
            if ($truthy2(key.$$is_string && self4.$$data.hasOwnProperty(key))) {
              return self4.$$data[key] || nil2;
            } else {
              return nil2;
            }
            ;
            return nil2;
          }();
          if (item === nil2 || keys.length === 0) {
            return item;
          }
          ;
          if ($truthy2(item["$respond_to?"]("dig"))) {
          } else {
            self4.$raise($$2($nesting3, "TypeError"), "" + item.$class() + " does not have #dig method");
          }
          ;
          return $send2(item, "dig", Opal2.to_a(keys));
        }, $Struct_dig$36.$$arity = -2), nil2) && "dig";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/io"] = function(Opal2) {
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $module = Opal2.module, $send2 = Opal2.send, $gvars = Opal2.gvars, $truthy2 = Opal2.truthy, $writer = nil2;
      Opal2.add_stubs(["$attr_accessor", "$size", "$write", "$join", "$map", "$String", "$empty?", "$concat", "$chomp", "$getbyte", "$getc", "$raise", "$new", "$write_proc=", "$-", "$extend"]);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "IO");
        var $nesting3 = [self3].concat($parent_nesting2), $IO_tty$ques$1, $IO_closed$ques$2, $IO_write$3, $IO_flush$4;
        self3.$$prototype.tty = self3.$$prototype.closed = nil2;
        Opal2.const_set($nesting3[0], "SEEK_SET", 0);
        Opal2.const_set($nesting3[0], "SEEK_CUR", 1);
        Opal2.const_set($nesting3[0], "SEEK_END", 2);
        Opal2.def(self3, "$tty?", $IO_tty$ques$1 = function() {
          var self4 = this;
          return self4.tty;
        }, $IO_tty$ques$1.$$arity = 0);
        Opal2.def(self3, "$closed?", $IO_closed$ques$2 = function() {
          var self4 = this;
          return self4.closed;
        }, $IO_closed$ques$2.$$arity = 0);
        self3.$attr_accessor("write_proc");
        Opal2.def(self3, "$write", $IO_write$3 = function $$write(string2) {
          var self4 = this;
          self4.write_proc(string2);
          return string2.$size();
        }, $IO_write$3.$$arity = 1);
        self3.$attr_accessor("sync", "tty");
        Opal2.def(self3, "$flush", $IO_flush$4 = function $$flush() {
          var self4 = this;
          return nil2;
        }, $IO_flush$4.$$arity = 0);
        (function($base3, $parent_nesting3) {
          var self4 = $module($base3, "Writable");
          var $nesting4 = [self4].concat($parent_nesting3), $Writable_$lt$lt$5, $Writable_print$6, $Writable_puts$8;
          Opal2.def(self4, "$<<", $Writable_$lt$lt$5 = function(string2) {
            var self5 = this;
            self5.$write(string2);
            return self5;
          }, $Writable_$lt$lt$5.$$arity = 1);
          Opal2.def(self4, "$print", $Writable_print$6 = function $$print($a2) {
            var $post_args2, args2, $$7, self5 = this;
            if ($gvars[","] == null)
              $gvars[","] = nil2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            args2 = $post_args2;
            ;
            self5.$write($send2(args2, "map", [], ($$7 = function(arg) {
              var self6 = $$7.$$s || this;
              if (arg == null) {
                arg = nil2;
              }
              ;
              return self6.$String(arg);
            }, $$7.$$s = self5, $$7.$$arity = 1, $$7)).$join($gvars[","]));
            return nil2;
          }, $Writable_print$6.$$arity = -1);
          Opal2.def(self4, "$puts", $Writable_puts$8 = function $$puts($a2) {
            var $post_args2, args2, $$92, self5 = this, newline = nil2;
            if ($gvars["/"] == null)
              $gvars["/"] = nil2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            args2 = $post_args2;
            ;
            newline = $gvars["/"];
            if ($truthy2(args2["$empty?"]())) {
              self5.$write($gvars["/"]);
            } else {
              self5.$write($send2(args2, "map", [], ($$92 = function(arg) {
                var self6 = $$92.$$s || this;
                if (arg == null) {
                  arg = nil2;
                }
                ;
                return self6.$String(arg).$chomp();
              }, $$92.$$s = self5, $$92.$$arity = 1, $$92)).$concat([nil2]).$join(newline));
            }
            ;
            return nil2;
          }, $Writable_puts$8.$$arity = -1);
        })($nesting3[0], $nesting3);
        return function($base3, $parent_nesting3) {
          var self4 = $module($base3, "Readable");
          var $nesting4 = [self4].concat($parent_nesting3), $Readable_readbyte$10, $Readable_readchar$11, $Readable_readline$12, $Readable_readpartial$13;
          Opal2.def(self4, "$readbyte", $Readable_readbyte$10 = function $$readbyte() {
            var self5 = this;
            return self5.$getbyte();
          }, $Readable_readbyte$10.$$arity = 0);
          Opal2.def(self4, "$readchar", $Readable_readchar$11 = function $$readchar() {
            var self5 = this;
            return self5.$getc();
          }, $Readable_readchar$11.$$arity = 0);
          Opal2.def(self4, "$readline", $Readable_readline$12 = function $$readline(sep) {
            var self5 = this;
            if ($gvars["/"] == null)
              $gvars["/"] = nil2;
            if (sep == null) {
              sep = $gvars["/"];
            }
            ;
            return self5.$raise($$2($nesting4, "NotImplementedError"));
          }, $Readable_readline$12.$$arity = -1);
          Opal2.def(self4, "$readpartial", $Readable_readpartial$13 = function $$readpartial(integer, outbuf) {
            var self5 = this;
            if (outbuf == null) {
              outbuf = nil2;
            }
            ;
            return self5.$raise($$2($nesting4, "NotImplementedError"));
          }, $Readable_readpartial$13.$$arity = -2);
        }($nesting3[0], $nesting3);
      })($nesting2[0], null, $nesting2);
      Opal2.const_set($nesting2[0], "STDERR", $gvars.stderr = $$2($nesting2, "IO").$new());
      Opal2.const_set($nesting2[0], "STDIN", $gvars.stdin = $$2($nesting2, "IO").$new());
      Opal2.const_set($nesting2[0], "STDOUT", $gvars.stdout = $$2($nesting2, "IO").$new());
      var console2 = Opal2.global.console;
      $writer = [typeof process === "object" && typeof process.stdout === "object" ? function(s) {
        process.stdout.write(s);
      } : function(s) {
        console2.log(s);
      }];
      $send2($$2($nesting2, "STDOUT"), "write_proc=", Opal2.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];
      ;
      $writer = [typeof process === "object" && typeof process.stderr === "object" ? function(s) {
        process.stderr.write(s);
      } : function(s) {
        console2.warn(s);
      }];
      $send2($$2($nesting2, "STDERR"), "write_proc=", Opal2.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];
      ;
      $$2($nesting2, "STDOUT").$extend($$$2($$2($nesting2, "IO"), "Writable"));
      return $$2($nesting2, "STDERR").$extend($$$2($$2($nesting2, "IO"), "Writable"));
    };
    Opal.modules["corelib/main"] = function(Opal2) {
      var $to_s$1, $include$2, self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
      Opal2.add_stubs(["$include"]);
      Opal2.defs(self2, "$to_s", $to_s$1 = function $$to_s() {
        var self3 = this;
        return "main";
      }, $to_s$1.$$arity = 0);
      return (Opal2.defs(self2, "$include", $include$2 = function $$include(mod) {
        var self3 = this;
        return $$2($nesting2, "Object").$include(mod);
      }, $include$2.$$arity = 1), nil2) && "include";
    };
    Opal.modules["corelib/dir"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$[]"]);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Dir");
        var $nesting3 = [self3].concat($parent_nesting2);
        return function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $chdir$1, $pwd$2, $home$3;
          Opal2.def(self4, "$chdir", $chdir$1 = function $$chdir(dir) {
            var $iter2 = $chdir$1.$$p, $yield = $iter2 || nil2, self5 = this, prev_cwd = nil2;
            if ($iter2)
              $chdir$1.$$p = null;
            return function() {
              try {
                prev_cwd = Opal2.current_dir;
                Opal2.current_dir = dir;
                return Opal2.yieldX($yield, []);
                ;
              } finally {
                Opal2.current_dir = prev_cwd;
              }
              ;
            }();
          }, $chdir$1.$$arity = 1);
          Opal2.def(self4, "$pwd", $pwd$2 = function $$pwd() {
            var self5 = this;
            return Opal2.current_dir || ".";
          }, $pwd$2.$$arity = 0);
          Opal2.alias(self4, "getwd", "pwd");
          return (Opal2.def(self4, "$home", $home$3 = function $$home() {
            var $a2, self5 = this;
            return $truthy2($a2 = $$2($nesting4, "ENV")["$[]"]("HOME")) ? $a2 : ".";
          }, $home$3.$$arity = 0), nil2) && "home";
        }(Opal2.get_singleton_class(self3), $nesting3);
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/file"] = function(Opal2) {
      function $rb_plus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
      }
      function $rb_minus(lhs, rhs) {
        return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
      }
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $range2 = Opal2.range, $send2 = Opal2.send;
      Opal2.add_stubs(["$respond_to?", "$to_path", "$pwd", "$split", "$sub", "$+", "$unshift", "$join", "$home", "$raise", "$start_with?", "$absolute_path", "$coerce_to!", "$basename", "$empty?", "$rindex", "$[]", "$nil?", "$==", "$-", "$length", "$gsub", "$find", "$=~", "$map", "$each_with_index", "$flatten", "$reject", "$to_proc", "$end_with?"]);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "File");
        var $nesting3 = [self3].concat($parent_nesting2), windows_root_rx = nil2;
        Opal2.const_set($nesting3[0], "Separator", Opal2.const_set($nesting3[0], "SEPARATOR", "/"));
        Opal2.const_set($nesting3[0], "ALT_SEPARATOR", nil2);
        Opal2.const_set($nesting3[0], "PATH_SEPARATOR", ":");
        Opal2.const_set($nesting3[0], "FNM_SYSCASE", 0);
        windows_root_rx = /^[a-zA-Z]:(?:\\|\/)/;
        return function(self4, $parent_nesting3) {
          var $nesting4 = [self4].concat($parent_nesting3), $absolute_path$1, $expand_path$2, $dirname$3, $basename$4, $extname$5, $exist$ques$6, $directory$ques$7, $join$9, $split$12;
          Opal2.def(self4, "$absolute_path", $absolute_path$1 = function $$absolute_path(path, basedir) {
            var $a2, self5 = this, sep = nil2, sep_chars = nil2, new_parts = nil2, path_abs = nil2, basedir_abs = nil2, parts = nil2, leading_sep = nil2, abs = nil2, new_path = nil2;
            if (basedir == null) {
              basedir = nil2;
            }
            ;
            sep = $$2($nesting4, "SEPARATOR");
            sep_chars = $sep_chars();
            new_parts = [];
            path = function() {
              if ($truthy2(path["$respond_to?"]("to_path"))) {
                return path.$to_path();
              } else {
                return path;
              }
              ;
              return nil2;
            }();
            basedir = $truthy2($a2 = basedir) ? $a2 : $$2($nesting4, "Dir").$pwd();
            path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);
            basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);
            if ($truthy2(path_abs)) {
              parts = path.$split(new RegExp("[" + sep_chars + "]"));
              leading_sep = windows_root_rx.test(path) ? "" : path.$sub(new RegExp("^([" + sep_chars + "]+).*$"), "\\1");
              abs = true;
            } else {
              parts = $rb_plus(basedir.$split(new RegExp("[" + sep_chars + "]")), path.$split(new RegExp("[" + sep_chars + "]")));
              leading_sep = windows_root_rx.test(basedir) ? "" : basedir.$sub(new RegExp("^([" + sep_chars + "]+).*$"), "\\1");
              abs = basedir_abs;
            }
            ;
            var part;
            for (var i = 0, ii = parts.length; i < ii; i++) {
              part = parts[i];
              if (part === nil2 || part === "" && (new_parts.length === 0 || abs) || part === "." && (new_parts.length === 0 || abs)) {
                continue;
              }
              if (part === "..") {
                new_parts.pop();
              } else {
                new_parts.push(part);
              }
            }
            if (!abs && parts[0] !== ".") {
              new_parts.$unshift(".");
            }
            ;
            new_path = new_parts.$join(sep);
            if ($truthy2(abs)) {
              new_path = $rb_plus(leading_sep, new_path);
            }
            ;
            return new_path;
          }, $absolute_path$1.$$arity = -2);
          Opal2.def(self4, "$expand_path", $expand_path$2 = function $$expand_path(path, basedir) {
            var self5 = this, sep = nil2, sep_chars = nil2, home = nil2, leading_sep = nil2, home_path_regexp = nil2;
            if (basedir == null) {
              basedir = nil2;
            }
            ;
            sep = $$2($nesting4, "SEPARATOR");
            sep_chars = $sep_chars();
            if ($truthy2(path[0] === "~" || basedir && basedir[0] === "~")) {
              home = $$2($nesting4, "Dir").$home();
              if ($truthy2(home)) {
              } else {
                self5.$raise($$2($nesting4, "ArgumentError"), "couldn't find HOME environment -- expanding `~'");
              }
              ;
              leading_sep = windows_root_rx.test(home) ? "" : home.$sub(new RegExp("^([" + sep_chars + "]+).*$"), "\\1");
              if ($truthy2(home["$start_with?"](leading_sep))) {
              } else {
                self5.$raise($$2($nesting4, "ArgumentError"), "non-absolute home");
              }
              ;
              home = $rb_plus(home, sep);
              home_path_regexp = new RegExp("^\\~(?:" + sep + "|$)");
              path = path.$sub(home_path_regexp, home);
              if ($truthy2(basedir)) {
                basedir = basedir.$sub(home_path_regexp, home);
              }
              ;
            }
            ;
            return self5.$absolute_path(path, basedir);
          }, $expand_path$2.$$arity = -2);
          Opal2.alias(self4, "realpath", "expand_path");
          function $coerce_to_path(path) {
            if ($truthy2(path["$respond_to?"]("to_path"))) {
              path = path.$to_path();
            }
            path = $$2($nesting4, "Opal")["$coerce_to!"](path, $$2($nesting4, "String"), "to_str");
            return path;
          }
          function $sep_chars() {
            if ($$2($nesting4, "ALT_SEPARATOR") === nil2) {
              return Opal2.escape_regexp($$2($nesting4, "SEPARATOR"));
            } else {
              return Opal2.escape_regexp($rb_plus($$2($nesting4, "SEPARATOR"), $$2($nesting4, "ALT_SEPARATOR")));
            }
          }
          ;
          Opal2.def(self4, "$dirname", $dirname$3 = function $$dirname(path) {
            var self5 = this, sep_chars = nil2;
            sep_chars = $sep_chars();
            path = $coerce_to_path(path);
            var absolute = path.match(new RegExp("^[" + sep_chars + "]"));
            path = path.replace(new RegExp("[" + sep_chars + "]+$"), "");
            path = path.replace(new RegExp("[^" + sep_chars + "]+$"), "");
            path = path.replace(new RegExp("[" + sep_chars + "]+$"), "");
            if (path === "") {
              return absolute ? "/" : ".";
            }
            return path;
            ;
          }, $dirname$3.$$arity = 1);
          Opal2.def(self4, "$basename", $basename$4 = function $$basename(name, suffix) {
            var self5 = this, sep_chars = nil2;
            if (suffix == null) {
              suffix = nil2;
            }
            ;
            sep_chars = $sep_chars();
            name = $coerce_to_path(name);
            if (name.length == 0) {
              return name;
            }
            if (suffix !== nil2) {
              suffix = $$2($nesting4, "Opal")["$coerce_to!"](suffix, $$2($nesting4, "String"), "to_str");
            } else {
              suffix = null;
            }
            name = name.replace(new RegExp("(.)[" + sep_chars + "]*$"), "$1");
            name = name.replace(new RegExp("^(?:.*[" + sep_chars + "])?([^" + sep_chars + "]+)$"), "$1");
            if (suffix === ".*") {
              name = name.replace(/\.[^\.]+$/, "");
            } else if (suffix !== null) {
              suffix = Opal2.escape_regexp(suffix);
              name = name.replace(new RegExp("" + suffix + "$"), "");
            }
            return name;
            ;
          }, $basename$4.$$arity = -2);
          Opal2.def(self4, "$extname", $extname$5 = function $$extname(path) {
            var $a2, self5 = this, filename = nil2, last_dot_idx = nil2;
            path = $coerce_to_path(path);
            filename = self5.$basename(path);
            if ($truthy2(filename["$empty?"]())) {
              return "";
            }
            ;
            last_dot_idx = filename["$[]"]($range2(1, -1, false)).$rindex(".");
            if ($truthy2($truthy2($a2 = last_dot_idx["$nil?"]()) ? $a2 : $rb_plus(last_dot_idx, 1)["$=="]($rb_minus(filename.$length(), 1)))) {
              return "";
            } else {
              return filename["$[]"](Opal2.Range.$new($rb_plus(last_dot_idx, 1), -1, false));
            }
            ;
          }, $extname$5.$$arity = 1);
          Opal2.def(self4, "$exist?", $exist$ques$6 = function(path) {
            var self5 = this;
            return Opal2.modules[path] != null;
          }, $exist$ques$6.$$arity = 1);
          Opal2.alias(self4, "exists?", "exist?");
          Opal2.def(self4, "$directory?", $directory$ques$7 = function(path) {
            var $$8, self5 = this, files = nil2, file2 = nil2;
            files = [];
            for (var key in Opal2.modules) {
              files.push(key);
            }
            ;
            path = path.$gsub(new RegExp("(^." + $$2($nesting4, "SEPARATOR") + "+|" + $$2($nesting4, "SEPARATOR") + "+$)"));
            file2 = $send2(files, "find", [], ($$8 = function(f) {
              var self6 = $$8.$$s || this;
              if (f == null) {
                f = nil2;
              }
              ;
              return f["$=~"](new RegExp("^" + path));
            }, $$8.$$s = self5, $$8.$$arity = 1, $$8));
            return file2;
          }, $directory$ques$7.$$arity = 1);
          Opal2.def(self4, "$join", $join$9 = function $$join($a2) {
            var $post_args2, paths, $$10, $$11, self5 = this, result2 = nil2;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            paths = $post_args2;
            ;
            if ($truthy2(paths["$empty?"]())) {
              return "";
            }
            ;
            result2 = "";
            paths = $send2(paths.$flatten().$each_with_index(), "map", [], ($$10 = function(item, index) {
              var self6 = $$10.$$s || this, $b2;
              if (item == null) {
                item = nil2;
              }
              ;
              if (index == null) {
                index = nil2;
              }
              ;
              if ($truthy2(($b2 = index["$=="](0)) ? item["$empty?"]() : index["$=="](0))) {
                return $$2($nesting4, "SEPARATOR");
              } else if ($truthy2(($b2 = paths.$length()["$=="]($rb_plus(index, 1))) ? item["$empty?"]() : paths.$length()["$=="]($rb_plus(index, 1)))) {
                return $$2($nesting4, "SEPARATOR");
              } else {
                return item;
              }
              ;
            }, $$10.$$s = self5, $$10.$$arity = 2, $$10));
            paths = $send2(paths, "reject", [], "empty?".$to_proc());
            $send2(paths, "each_with_index", [], ($$11 = function(item, index) {
              var self6 = $$11.$$s || this, $b2, next_item = nil2;
              if (item == null) {
                item = nil2;
              }
              ;
              if (index == null) {
                index = nil2;
              }
              ;
              next_item = paths["$[]"]($rb_plus(index, 1));
              if ($truthy2(next_item["$nil?"]())) {
                return result2 = "" + result2 + item;
              } else {
                if ($truthy2($truthy2($b2 = item["$end_with?"]($$2($nesting4, "SEPARATOR"))) ? next_item["$start_with?"]($$2($nesting4, "SEPARATOR")) : $b2)) {
                  item = item.$sub(new RegExp("" + $$2($nesting4, "SEPARATOR") + "+$"), "");
                }
                ;
                return result2 = function() {
                  if ($truthy2($truthy2($b2 = item["$end_with?"]($$2($nesting4, "SEPARATOR"))) ? $b2 : next_item["$start_with?"]($$2($nesting4, "SEPARATOR")))) {
                    return "" + result2 + item;
                  } else {
                    return "" + result2 + item + $$2($nesting4, "SEPARATOR");
                  }
                  ;
                  return nil2;
                }();
              }
              ;
            }, $$11.$$s = self5, $$11.$$arity = 2, $$11));
            return result2;
          }, $join$9.$$arity = -1);
          return (Opal2.def(self4, "$split", $split$12 = function $$split(path) {
            var self5 = this;
            return path.$split($$2($nesting4, "SEPARATOR"));
          }, $split$12.$$arity = 1), nil2) && "split";
        }(Opal2.get_singleton_class(self3), $nesting3);
      }($nesting2[0], $$2($nesting2, "IO"), $nesting2);
    };
    Opal.modules["corelib/process"] = function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
      Opal2.add_stubs(["$const_set", "$size", "$<<", "$__register_clock__", "$to_f", "$now", "$new", "$[]", "$raise"]);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Process");
        var $nesting3 = [self3].concat($parent_nesting2), $Process___register_clock__$1, $Process_pid$2, $Process_times$3, $Process_clock_gettime$4, monotonic = nil2;
        self3.__clocks__ = [];
        Opal2.defs(self3, "$__register_clock__", $Process___register_clock__$1 = function $$__register_clock__(name, func) {
          var self4 = this;
          if (self4.__clocks__ == null)
            self4.__clocks__ = nil2;
          self4.$const_set(name, self4.__clocks__.$size());
          return self4.__clocks__["$<<"](func);
        }, $Process___register_clock__$1.$$arity = 2);
        self3.$__register_clock__("CLOCK_REALTIME", function() {
          return Date.now();
        });
        monotonic = false;
        if (Opal2.global.performance) {
          monotonic = function() {
            return performance.now();
          };
        } else if (Opal2.global.process && process.hrtime) {
          var hrtime_base = process.hrtime();
          monotonic = function() {
            var hrtime = process.hrtime(hrtime_base);
            var us = hrtime[1] / 1e3 | 0;
            return hrtime[0] * 1e3 + us / 1e3;
          };
        }
        ;
        if ($truthy2(monotonic)) {
          self3.$__register_clock__("CLOCK_MONOTONIC", monotonic);
        }
        ;
        Opal2.defs(self3, "$pid", $Process_pid$2 = function $$pid() {
          var self4 = this;
          return 0;
        }, $Process_pid$2.$$arity = 0);
        Opal2.defs(self3, "$times", $Process_times$3 = function $$times() {
          var self4 = this, t = nil2;
          t = $$2($nesting3, "Time").$now().$to_f();
          return $$$2($$2($nesting3, "Benchmark"), "Tms").$new(t, t, t, t, t);
        }, $Process_times$3.$$arity = 0);
        return (Opal2.defs(self3, "$clock_gettime", $Process_clock_gettime$4 = function $$clock_gettime(clock_id, unit) {
          var $a2, self4 = this, clock = nil2;
          if (self4.__clocks__ == null)
            self4.__clocks__ = nil2;
          if (unit == null) {
            unit = "float_second";
          }
          ;
          $truthy2($a2 = clock = self4.__clocks__["$[]"](clock_id)) ? $a2 : self4.$raise($$$2($$2($nesting3, "Errno"), "EINVAL"), "clock_gettime(" + clock_id + ") " + self4.__clocks__["$[]"](clock_id));
          var ms = clock();
          switch (unit) {
            case "float_second":
              return ms / 1e3;
            case "float_millisecond":
              return ms / 1;
            case "float_microsecond":
              return ms * 1e3;
            case "second":
              return ms / 1e3 | 0;
            case "millisecond":
              return ms / 1 | 0;
            case "microsecond":
              return ms * 1e3 | 0;
            case "nanosecond":
              return ms * 1e6 | 0;
            default:
              self4.$raise($$2($nesting3, "ArgumentError"), "unexpected unit: " + unit);
          }
          ;
        }, $Process_clock_gettime$4.$$arity = -2), nil2) && "clock_gettime";
      })($nesting2[0], null, $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Signal");
        var $nesting3 = [self3].concat($parent_nesting2), $Signal_trap$5;
        return (Opal2.defs(self3, "$trap", $Signal_trap$5 = function $$trap($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return nil2;
        }, $Signal_trap$5.$$arity = -1), nil2) && "trap";
      })($nesting2[0], null, $nesting2);
      return function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "GC");
        var $nesting3 = [self3].concat($parent_nesting2), $GC_start$6;
        return (Opal2.defs(self3, "$start", $GC_start$6 = function $$start() {
          var self4 = this;
          return nil2;
        }, $GC_start$6.$$arity = 0), nil2) && "start";
      }($nesting2[0], null, $nesting2);
    };
    Opal.modules["corelib/unsupported"] = function(Opal2) {
      var $public$35, $private$36, self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $module = Opal2.module;
      Opal2.add_stubs(["$raise", "$warn", "$%"]);
      var warnings = {};
      function handle_unsupported_feature(message) {
        switch (Opal2.config.unsupported_features_severity) {
          case "error":
            $$2($nesting2, "Kernel").$raise($$2($nesting2, "NotImplementedError"), message);
            break;
          case "warning":
            warn(message);
            break;
          default:
        }
      }
      function warn(string2) {
        if (warnings[string2]) {
          return;
        }
        warnings[string2] = true;
        self2.$warn(string2);
      }
      ;
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "String");
        var $nesting3 = [self3].concat($parent_nesting2), $String_$lt$lt$1, $String_capitalize$excl$2, $String_chomp$excl$3, $String_chop$excl$4, $String_downcase$excl$5, $String_gsub$excl$6, $String_lstrip$excl$7, $String_next$excl$8, $String_reverse$excl$9, $String_slice$excl$10, $String_squeeze$excl$11, $String_strip$excl$12, $String_sub$excl$13, $String_succ$excl$14, $String_swapcase$excl$15, $String_tr$excl$16, $String_tr_s$excl$17, $String_upcase$excl$18, $String_prepend$19, $String_$$$eq$20, $String_clear$21, $String_encode$excl$22, $String_unicode_normalize$excl$23;
        var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";
        Opal2.def(self3, "$<<", $String_$lt$lt$1 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("<<"));
        }, $String_$lt$lt$1.$$arity = -1);
        Opal2.def(self3, "$capitalize!", $String_capitalize$excl$2 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("capitalize!"));
        }, $String_capitalize$excl$2.$$arity = -1);
        Opal2.def(self3, "$chomp!", $String_chomp$excl$3 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("chomp!"));
        }, $String_chomp$excl$3.$$arity = -1);
        Opal2.def(self3, "$chop!", $String_chop$excl$4 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("chop!"));
        }, $String_chop$excl$4.$$arity = -1);
        Opal2.def(self3, "$downcase!", $String_downcase$excl$5 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("downcase!"));
        }, $String_downcase$excl$5.$$arity = -1);
        Opal2.def(self3, "$gsub!", $String_gsub$excl$6 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("gsub!"));
        }, $String_gsub$excl$6.$$arity = -1);
        Opal2.def(self3, "$lstrip!", $String_lstrip$excl$7 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("lstrip!"));
        }, $String_lstrip$excl$7.$$arity = -1);
        Opal2.def(self3, "$next!", $String_next$excl$8 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("next!"));
        }, $String_next$excl$8.$$arity = -1);
        Opal2.def(self3, "$reverse!", $String_reverse$excl$9 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("reverse!"));
        }, $String_reverse$excl$9.$$arity = -1);
        Opal2.def(self3, "$slice!", $String_slice$excl$10 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("slice!"));
        }, $String_slice$excl$10.$$arity = -1);
        Opal2.def(self3, "$squeeze!", $String_squeeze$excl$11 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("squeeze!"));
        }, $String_squeeze$excl$11.$$arity = -1);
        Opal2.def(self3, "$strip!", $String_strip$excl$12 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("strip!"));
        }, $String_strip$excl$12.$$arity = -1);
        Opal2.def(self3, "$sub!", $String_sub$excl$13 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("sub!"));
        }, $String_sub$excl$13.$$arity = -1);
        Opal2.def(self3, "$succ!", $String_succ$excl$14 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("succ!"));
        }, $String_succ$excl$14.$$arity = -1);
        Opal2.def(self3, "$swapcase!", $String_swapcase$excl$15 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("swapcase!"));
        }, $String_swapcase$excl$15.$$arity = -1);
        Opal2.def(self3, "$tr!", $String_tr$excl$16 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("tr!"));
        }, $String_tr$excl$16.$$arity = -1);
        Opal2.def(self3, "$tr_s!", $String_tr_s$excl$17 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("tr_s!"));
        }, $String_tr_s$excl$17.$$arity = -1);
        Opal2.def(self3, "$upcase!", $String_upcase$excl$18 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("upcase!"));
        }, $String_upcase$excl$18.$$arity = -1);
        Opal2.def(self3, "$prepend", $String_prepend$19 = function $$prepend($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("prepend"));
        }, $String_prepend$19.$$arity = -1);
        Opal2.def(self3, "$[]=", $String_$$$eq$20 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("[]="));
        }, $String_$$$eq$20.$$arity = -1);
        Opal2.def(self3, "$clear", $String_clear$21 = function $$clear($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("clear"));
        }, $String_clear$21.$$arity = -1);
        Opal2.def(self3, "$encode!", $String_encode$excl$22 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("encode!"));
        }, $String_encode$excl$22.$$arity = -1);
        return (Opal2.def(self3, "$unicode_normalize!", $String_unicode_normalize$excl$23 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), ERROR["$%"]("unicode_normalize!"));
        }, $String_unicode_normalize$excl$23.$$arity = -1), nil2) && "unicode_normalize!";
      })($nesting2[0], null, $nesting2);
      (function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Kernel");
        var $nesting3 = [self3].concat($parent_nesting2), $Kernel_freeze$24, $Kernel_frozen$ques$25;
        var ERROR = "Object freezing is not supported by Opal";
        Opal2.def(self3, "$freeze", $Kernel_freeze$24 = function $$freeze() {
          var self4 = this;
          handle_unsupported_feature(ERROR);
          return self4;
        }, $Kernel_freeze$24.$$arity = 0);
        Opal2.def(self3, "$frozen?", $Kernel_frozen$ques$25 = function() {
          var self4 = this;
          handle_unsupported_feature(ERROR);
          return false;
        }, $Kernel_frozen$ques$25.$$arity = 0);
      })($nesting2[0], $nesting2);
      (function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Kernel");
        var $nesting3 = [self3].concat($parent_nesting2), $Kernel_taint$26, $Kernel_untaint$27, $Kernel_tainted$ques$28;
        var ERROR = "Object tainting is not supported by Opal";
        Opal2.def(self3, "$taint", $Kernel_taint$26 = function $$taint() {
          var self4 = this;
          handle_unsupported_feature(ERROR);
          return self4;
        }, $Kernel_taint$26.$$arity = 0);
        Opal2.def(self3, "$untaint", $Kernel_untaint$27 = function $$untaint() {
          var self4 = this;
          handle_unsupported_feature(ERROR);
          return self4;
        }, $Kernel_untaint$27.$$arity = 0);
        Opal2.def(self3, "$tainted?", $Kernel_tainted$ques$28 = function() {
          var self4 = this;
          handle_unsupported_feature(ERROR);
          return false;
        }, $Kernel_tainted$ques$28.$$arity = 0);
      })($nesting2[0], $nesting2);
      (function($base2, $super2, $parent_nesting2) {
        var self3 = $klass2($base2, $super2, "Module");
        var $nesting3 = [self3].concat($parent_nesting2), $Module_public$29, $Module_private_class_method$30, $Module_private_method_defined$ques$31, $Module_private_constant$32;
        Opal2.def(self3, "$public", $Module_public$29 = function($a2) {
          var $post_args2, methods, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          methods = $post_args2;
          ;
          if (methods.length === 0) {
            self4.$$module_function = false;
          }
          return nil2;
          ;
        }, $Module_public$29.$$arity = -1);
        Opal2.alias(self3, "private", "public");
        Opal2.alias(self3, "protected", "public");
        Opal2.alias(self3, "nesting", "public");
        Opal2.def(self3, "$private_class_method", $Module_private_class_method$30 = function $$private_class_method($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4;
        }, $Module_private_class_method$30.$$arity = -1);
        Opal2.alias(self3, "public_class_method", "private_class_method");
        Opal2.def(self3, "$private_method_defined?", $Module_private_method_defined$ques$31 = function(obj) {
          var self4 = this;
          return false;
        }, $Module_private_method_defined$ques$31.$$arity = 1);
        Opal2.def(self3, "$private_constant", $Module_private_constant$32 = function $$private_constant($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return nil2;
        }, $Module_private_constant$32.$$arity = -1);
        Opal2.alias(self3, "protected_method_defined?", "private_method_defined?");
        Opal2.alias(self3, "public_instance_methods", "instance_methods");
        Opal2.alias(self3, "public_instance_method", "instance_method");
        return Opal2.alias(self3, "public_method_defined?", "method_defined?");
      })($nesting2[0], null, $nesting2);
      (function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Kernel");
        var $nesting3 = [self3].concat($parent_nesting2), $Kernel_private_methods$33;
        Opal2.def(self3, "$private_methods", $Kernel_private_methods$33 = function $$private_methods($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return [];
        }, $Kernel_private_methods$33.$$arity = -1);
        Opal2.alias(self3, "private_instance_methods", "private_methods");
      })($nesting2[0], $nesting2);
      (function($base2, $parent_nesting2) {
        var self3 = $module($base2, "Kernel");
        var $nesting3 = [self3].concat($parent_nesting2), $Kernel_eval$34;
        Opal2.def(self3, "$eval", $Kernel_eval$34 = function($a2) {
          var $post_args2, self4 = this;
          $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
          ;
          return self4.$raise($$2($nesting3, "NotImplementedError"), "To use Kernel#eval, you must first require 'opal-parser'. " + ("See https://github.com/opal/opal/blob/" + $$2($nesting3, "RUBY_ENGINE_VERSION") + "/docs/opal_parser.md for details."));
        }, $Kernel_eval$34.$$arity = -1);
      })($nesting2[0], $nesting2);
      Opal2.defs(self2, "$public", $public$35 = function($a2) {
        var $post_args2, self3 = this;
        $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
        ;
        return nil2;
      }, $public$35.$$arity = -1);
      return (Opal2.defs(self2, "$private", $private$36 = function($a2) {
        var $post_args2, self3 = this;
        $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
        ;
        return nil2;
      }, $private$36.$$arity = -1), nil2) && "private";
    };
    (function(Opal2) {
      var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
      Opal2.add_stubs(["$require"]);
      self2.$require("opal/base");
      self2.$require("opal/mini");
      self2.$require("corelib/string/encoding");
      self2.$require("corelib/struct");
      self2.$require("corelib/io");
      self2.$require("corelib/main");
      self2.$require("corelib/dir");
      self2.$require("corelib/file");
      self2.$require("corelib/process");
      return self2.$require("corelib/unsupported");
    })(Opal);
    (function(root, factory) {
      if (typeof module === "object" && module.exports) {
        module.exports = factory;
      } else if (typeof define === "function" && define.amd) {
        define("asciidoctor", ["module"], function(module2) {
          return factory(module2.config());
        });
      } else {
        root.Asciidoctor = factory;
      }
    })(exports, function(moduleConfig) {
      Opal.modules["asciidoctor/js/opal_ext/browser/file"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass;
        Opal2.add_stubs(["$new"]);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "File");
          var $nesting3 = [self3].concat($parent_nesting2), $File_read$1;
          return (Opal2.defs(self3, "$read", $File_read$1 = function $$read(path) {
            var self4 = this;
            var data = "";
            var status = -1;
            try {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", path, false);
              xhr.addEventListener("load", function() {
                status = this.status;
                if (status === 0 || status === 200) {
                  data = this.responseText;
                }
              });
              xhr.overrideMimeType("text/plain");
              xhr.send();
            } catch (e) {
              throw $$2($nesting3, "IOError").$new("Error reading file or directory: " + path + "; reason: " + e.message);
            }
            if (status === 404 || status === 0 && !data) {
              throw $$2($nesting3, "IOError").$new("No such file or directory: " + path);
            }
            return data;
          }, $File_read$1.$$arity = 1), nil2) && "read";
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/browser"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
        Opal2.add_stubs(["$require"]);
        var platform, engine, framework, ioModule;
        if (typeof moduleConfig === "object" && typeof moduleConfig.runtime === "object") {
          var runtime = moduleConfig.runtime;
          platform = runtime.platform;
          engine = runtime.engine;
          framework = runtime.framework;
          ioModule = runtime.ioModule;
        }
        ioModule = ioModule || "xmlhttprequest";
        platform = platform || "browser";
        engine = engine || "";
        framework = framework || "";
        ;
        Opal2.const_set($nesting2[0], "JAVASCRIPT_IO_MODULE", ioModule);
        Opal2.const_set($nesting2[0], "JAVASCRIPT_PLATFORM", platform);
        Opal2.const_set($nesting2[0], "JAVASCRIPT_ENGINE", engine);
        Opal2.const_set($nesting2[0], "JAVASCRIPT_FRAMEWORK", framework);
        return self2.$require("asciidoctor/js/opal_ext/browser/file");
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/browser/abstract_node"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$uriish?", "$[]", "$web_path", "$path_resolver", "$descends_from?", "$base_dir", "$start_with?", "$attr?", "$join", "$prepare_source_string", "$read", "$fetch", "$warn", "$logger", "$normalize_system_path", "$read_asset"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "AbstractNode");
            var $nesting4 = [self4].concat($parent_nesting3), $AbstractNode_read_contents$1, $AbstractNode_generate_data_uri_from_uri$2;
            self4.$$prototype.document = nil2;
            Opal2.def(self4, "$read_contents", $AbstractNode_read_contents$1 = function $$read_contents(target, opts) {
              var $a2, $b2, $c, self5 = this, doc = nil2, start = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              doc = self5.document;
              if ($truthy2($truthy2($a2 = $$2($nesting4, "Helpers")["$uriish?"](target)) ? $a2 : $truthy2($b2 = $truthy2($c = start = opts["$[]"]("start")) ? $$2($nesting4, "Helpers")["$uriish?"](start) : $c) ? target = doc.$path_resolver().$web_path(target, start) : $b2)) {
                if ($truthy2($truthy2($a2 = $truthy2($b2 = doc.$path_resolver()["$descends_from?"](target, doc.$base_dir())) ? $b2 : target["$start_with?"]("chrome://")) ? $a2 : doc["$attr?"]("allow-uri-read"))) {
                  try {
                    if ($truthy2(opts["$[]"]("normalize"))) {
                      return $$2($nesting4, "Helpers").$prepare_source_string($$$2("::", "File").$read(target)).$join($$2($nesting4, "LF"));
                    } else {
                      return $$$2("::", "File").$read(target);
                    }
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        if ($truthy2(opts.$fetch("warn_on_failure", true))) {
                          self5.$logger().$warn("could not retrieve contents of " + ($truthy2($a2 = opts["$[]"]("label")) ? $a2 : "asset") + " at URI: " + target);
                        }
                        ;
                        return nil2;
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                  ;
                } else {
                  if ($truthy2(opts.$fetch("warn_on_failure", true))) {
                    self5.$logger().$warn("cannot retrieve contents of " + ($truthy2($a2 = opts["$[]"]("label")) ? $a2 : "asset") + " at URI: " + target + " (allow-uri-read attribute not enabled)");
                  }
                  ;
                  return nil2;
                }
              } else {
                target = self5.$normalize_system_path(target, opts["$[]"]("start"), nil2, $hash22(["target_name"], { "target_name": $truthy2($a2 = opts["$[]"]("label")) ? $a2 : "asset" }));
                return self5.$read_asset(target, $hash22(["normalize", "warn_on_failure", "label"], { "normalize": opts["$[]"]("normalize"), "warn_on_failure": opts.$fetch("warn_on_failure", true), "label": opts["$[]"]("label") }));
              }
              ;
            }, $AbstractNode_read_contents$1.$$arity = -2);
            return (Opal2.def(self4, "$generate_data_uri_from_uri", $AbstractNode_generate_data_uri_from_uri$2 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {
              var self5 = this;
              if (cache_uri == null) {
                cache_uri = false;
              }
              ;
              var contentType = "";
              var b64encoded = "";
              var status = -1;
              try {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", image_uri, false);
                xhr.overrideMimeType("text/plain; charset=x-user-defined");
                xhr.addEventListener("load", function() {
                  status = this.status;
                  if (status === 0 || status === 200) {
                    var binary = "";
                    var rawText = this.responseText;
                    for (var i = 0, len = rawText.length; i < len; ++i) {
                      var c = rawText.charCodeAt(i);
                      var byteCode = c & 255;
                      binary += String.fromCharCode(byteCode);
                    }
                    b64encoded = btoa(binary);
                    contentType = this.getResponseHeader("content-type");
                  }
                });
                xhr.send(null);
                if (!contentType) {
                  if (image_uri.endsWith(".jpeg") || image_uri.endsWith(".jpg") || image_uri.endsWith(".jpe")) {
                    contentType = "image/jpg";
                  } else if (image_uri.endsWith(".png")) {
                    contentType = "image/png";
                  } else if (image_uri.endsWith(".svg")) {
                    contentType = "image/svg+xml";
                  } else if (image_uri.endsWith(".bmp")) {
                    contentType = "image/bmp";
                  } else if (image_uri.endsWith(".tif") || image_uri.endsWith(".tiff")) {
                    contentType = "image/tiff";
                  }
                }
              } catch (e) {
                status = 0;
              }
              if (status === 404 || status === 0 && (!b64encoded || !contentType)) {
                self5.$logger().$warn("could not retrieve image data from URI: " + image_uri);
                return image_uri;
              }
              return "data:" + contentType + ";base64," + b64encoded;
            }, $AbstractNode_generate_data_uri_from_uri$2.$$arity = -2), nil2) && "generate_data_uri_from_uri";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/browser/open_uri"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $send2 = Opal2.send;
        Opal2.add_stubs(["$new", "$path"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "OpenURI");
          var $nesting3 = [self3].concat($parent_nesting2), $OpenURI_open_uri$1;
          Opal2.defs($$2($nesting3, "OpenURI"), "$open_uri", $OpenURI_open_uri$1 = function $$open_uri(name, $a2) {
            var $post_args2, rest, $iter2 = $OpenURI_open_uri$1.$$p, $yield = $iter2 || nil2, self4 = this, file2 = nil2;
            if ($iter2)
              $OpenURI_open_uri$1.$$p = null;
            $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
            rest = $post_args2;
            ;
            file2 = $send2($$2($nesting3, "File"), "new", [self4.$path()].concat(Opal2.to_a(rest)));
            if ($yield !== nil2) {
              return Opal2.yield1($yield, file2);
            } else {
              return file2;
            }
            ;
          }, $OpenURI_open_uri$1.$$arity = -2);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/browser/path_resolver"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$absolute_path?", "$start_with?"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "PathResolver");
            var $nesting4 = [self4].concat($parent_nesting3), $PathResolver_root$ques$1;
            return (Opal2.def(self4, "$root?", $PathResolver_root$ques$1 = function(path) {
              var $a2, self5 = this;
              return $truthy2($a2 = self5["$absolute_path?"](path)) ? $a2 : path["$start_with?"]("file://", "http://", "https://", "chrome://");
            }, $PathResolver_root$ques$1.$$arity = 1), nil2) && "root?";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/browser/reader"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$posixify", "$new", "$base_dir", "$start_with?", "$uriish?", "$descends_from?", "$key?", "$attributes", "$replace_next_line", "$absolute_path?", "$==", "$empty?", "$!", "$slice", "$length"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "PreprocessorReader");
            var $nesting4 = [self4].concat($parent_nesting3), $PreprocessorReader_resolve_include_path$1;
            self4.$$prototype.path_resolver = self4.$$prototype.document = self4.$$prototype.include_stack = self4.$$prototype.dir = nil2;
            return (Opal2.def(self4, "$resolve_include_path", $PreprocessorReader_resolve_include_path$1 = function $$resolve_include_path(target, attrlist, attributes) {
              var $a2, self5 = this, p_target = nil2, target_type = nil2, base_dir = nil2, inc_path = nil2, relpath = nil2, ctx_dir = nil2, top_level = nil2, offset = nil2;
              p_target = (self5.path_resolver = $truthy2($a2 = self5.path_resolver) ? $a2 : $$2($nesting4, "PathResolver").$new("\\")).$posixify(target);
              $a2 = ["file", self5.document.$base_dir()], target_type = $a2[0], base_dir = $a2[1], $a2;
              if ($truthy2(p_target["$start_with?"]("file://"))) {
                inc_path = relpath = p_target;
              } else if ($truthy2($$2($nesting4, "Helpers")["$uriish?"](p_target))) {
                if ($truthy2($truthy2($a2 = self5.path_resolver["$descends_from?"](p_target, base_dir)) ? $a2 : self5.document.$attributes()["$key?"]("allow-uri-read"))) {
                } else {
                  return self5.$replace_next_line("link:" + target + "[" + attrlist + "]");
                }
                ;
                inc_path = relpath = p_target;
              } else if ($truthy2(self5.path_resolver["$absolute_path?"](p_target))) {
                inc_path = relpath = "file://" + function() {
                  if ($truthy2(p_target["$start_with?"]("/"))) {
                    return "";
                  } else {
                    return "/";
                  }
                  ;
                  return nil2;
                }() + p_target;
              } else if ((ctx_dir = function() {
                if ($truthy2(top_level = self5.include_stack["$empty?"]())) {
                  return base_dir;
                } else {
                  return self5.dir;
                }
                ;
                return nil2;
              }())["$=="](".")) {
                inc_path = relpath = p_target;
              } else if ($truthy2($truthy2($a2 = ctx_dir["$start_with?"]("file://")) ? $a2 : $$2($nesting4, "Helpers")["$uriish?"](ctx_dir)["$!"]())) {
                inc_path = "" + ctx_dir + "/" + p_target;
                if ($truthy2(top_level)) {
                  relpath = p_target;
                } else if ($truthy2($truthy2($a2 = base_dir["$=="](".")) ? $a2 : (offset = self5.path_resolver["$descends_from?"](inc_path, base_dir))["$!"]())) {
                  relpath = inc_path;
                } else {
                  relpath = inc_path.$slice(offset, inc_path.$length());
                }
                ;
              } else if ($truthy2(top_level)) {
                inc_path = "" + ctx_dir + "/" + (relpath = p_target);
              } else if ($truthy2($truthy2($a2 = offset = self5.path_resolver["$descends_from?"](ctx_dir, base_dir)) ? $a2 : self5.document.$attributes()["$key?"]("allow-uri-read"))) {
                inc_path = "" + ctx_dir + "/" + p_target;
                relpath = function() {
                  if ($truthy2(offset)) {
                    return inc_path.$slice(offset, inc_path.$length());
                  } else {
                    return p_target;
                  }
                  ;
                  return nil2;
                }();
              } else {
                return self5.$replace_next_line("link:" + target + "[" + attrlist + "]");
              }
              ;
              return [inc_path, "file", relpath];
            }, $PreprocessorReader_resolve_include_path$1.$$arity = 3), nil2) && "resolve_include_path";
          })($nesting3[0], $$2($nesting3, "Reader"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/browser"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
        Opal2.add_stubs(["$==", "$require"]);
        if ($$2($nesting2, "JAVASCRIPT_IO_MODULE")["$=="]("xmlhttprequest")) {
          self2.$require("asciidoctor/js/asciidoctor_ext/browser/abstract_node");
          self2.$require("asciidoctor/js/asciidoctor_ext/browser/open_uri");
          self2.$require("asciidoctor/js/asciidoctor_ext/browser/path_resolver");
          return self2.$require("asciidoctor/js/asciidoctor_ext/browser/reader");
        } else {
          return nil2;
        }
      };
      Opal.modules["set"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        function $rb_le(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $module = Opal2.module;
        Opal2.add_stubs(["$include", "$new", "$nil?", "$===", "$raise", "$each", "$add", "$merge", "$class", "$respond_to?", "$subtract", "$dup", "$join", "$to_a", "$equal?", "$instance_of?", "$==", "$instance_variable_get", "$is_a?", "$size", "$all?", "$include?", "$[]=", "$-", "$enum_for", "$[]", "$<<", "$replace", "$delete", "$select", "$each_key", "$to_proc", "$empty?", "$eql?", "$instance_eval", "$clear", "$<", "$<=", "$keys"]);
        (function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "Set");
          var $nesting3 = [self3].concat($parent_nesting2), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_add$ques$20, $Set_each$21, $Set_empty$ques$22, $Set_eql$ques$23, $Set_clear$25, $Set_include$ques$26, $Set_merge$27, $Set_replace$29, $Set_size$30, $Set_subtract$31, $Set_$$33, $Set_superset$ques$34, $Set_proper_superset$ques$36, $Set_subset$ques$38, $Set_proper_subset$ques$40, $Set_to_a$42;
          self3.$$prototype.hash = nil2;
          self3.$include($$2($nesting3, "Enumerable"));
          Opal2.defs(self3, "$[]", $Set_$$$1 = function($a2) {
            var $post_args2, ary, self4 = this;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            ary = $post_args2;
            ;
            return self4.$new(ary);
          }, $Set_$$$1.$$arity = -1);
          Opal2.def(self3, "$initialize", $Set_initialize$2 = function $$initialize(enum$) {
            var $iter2 = $Set_initialize$2.$$p, block2 = $iter2 || nil2, $$3, self4 = this;
            if ($iter2)
              $Set_initialize$2.$$p = null;
            if ($iter2)
              $Set_initialize$2.$$p = null;
            ;
            if (enum$ == null) {
              enum$ = nil2;
            }
            ;
            self4.hash = $hash22([], {});
            if ($truthy2(enum$["$nil?"]())) {
              return nil2;
            }
            ;
            if ($truthy2($$2($nesting3, "Enumerable")["$==="](enum$))) {
            } else {
              self4.$raise($$2($nesting3, "ArgumentError"), "value must be enumerable");
            }
            ;
            if ($truthy2(block2)) {
              return $send2(enum$, "each", [], ($$3 = function(item) {
                var self5 = $$3.$$s || this;
                if (item == null) {
                  item = nil2;
                }
                ;
                return self5.$add(Opal2.yield1(block2, item));
              }, $$3.$$s = self4, $$3.$$arity = 1, $$3));
            } else {
              return self4.$merge(enum$);
            }
            ;
          }, $Set_initialize$2.$$arity = -1);
          Opal2.def(self3, "$dup", $Set_dup$4 = function $$dup() {
            var self4 = this, result2 = nil2;
            result2 = self4.$class().$new();
            return result2.$merge(self4);
          }, $Set_dup$4.$$arity = 0);
          Opal2.def(self3, "$-", $Set_$minus$5 = function(enum$) {
            var self4 = this;
            if ($truthy2(enum$["$respond_to?"]("each"))) {
            } else {
              self4.$raise($$2($nesting3, "ArgumentError"), "value must be enumerable");
            }
            ;
            return self4.$dup().$subtract(enum$);
          }, $Set_$minus$5.$$arity = 1);
          Opal2.alias(self3, "difference", "-");
          Opal2.def(self3, "$inspect", $Set_inspect$6 = function $$inspect() {
            var self4 = this;
            return "#<Set: {" + self4.$to_a().$join(",") + "}>";
          }, $Set_inspect$6.$$arity = 0);
          Opal2.def(self3, "$==", $Set_$eq_eq$7 = function(other) {
            var $a2, $$8, self4 = this;
            if ($truthy2(self4["$equal?"](other))) {
              return true;
            } else if ($truthy2(other["$instance_of?"](self4.$class()))) {
              return self4.hash["$=="](other.$instance_variable_get("@hash"));
            } else if ($truthy2($truthy2($a2 = other["$is_a?"]($$2($nesting3, "Set"))) ? self4.$size()["$=="](other.$size()) : $a2)) {
              return $send2(other, "all?", [], ($$8 = function(o) {
                var self5 = $$8.$$s || this;
                if (self5.hash == null)
                  self5.hash = nil2;
                if (o == null) {
                  o = nil2;
                }
                ;
                return self5.hash["$include?"](o);
              }, $$8.$$s = self4, $$8.$$arity = 1, $$8));
            } else {
              return false;
            }
          }, $Set_$eq_eq$7.$$arity = 1);
          Opal2.def(self3, "$add", $Set_add$9 = function $$add(o) {
            var self4 = this, $writer = nil2;
            $writer = [o, true];
            $send2(self4.hash, "[]=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            return self4;
          }, $Set_add$9.$$arity = 1);
          Opal2.alias(self3, "<<", "add");
          Opal2.def(self3, "$classify", $Set_classify$10 = function $$classify() {
            var $iter2 = $Set_classify$10.$$p, block2 = $iter2 || nil2, $$11, $$12, self4 = this, result2 = nil2;
            if ($iter2)
              $Set_classify$10.$$p = null;
            if ($iter2)
              $Set_classify$10.$$p = null;
            ;
            if (block2 !== nil2) {
            } else {
              return self4.$enum_for("classify");
            }
            ;
            result2 = $send2($$2($nesting3, "Hash"), "new", [], ($$11 = function(h, k) {
              var self5 = $$11.$$s || this, $writer = nil2;
              if (h == null) {
                h = nil2;
              }
              ;
              if (k == null) {
                k = nil2;
              }
              ;
              $writer = [k, self5.$class().$new()];
              $send2(h, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $$11.$$s = self4, $$11.$$arity = 2, $$11));
            $send2(self4, "each", [], ($$12 = function(item) {
              var self5 = $$12.$$s || this;
              if (item == null) {
                item = nil2;
              }
              ;
              return result2["$[]"](Opal2.yield1(block2, item)).$add(item);
            }, $$12.$$s = self4, $$12.$$arity = 1, $$12));
            return result2;
          }, $Set_classify$10.$$arity = 0);
          Opal2.def(self3, "$collect!", $Set_collect$excl$13 = function() {
            var $iter2 = $Set_collect$excl$13.$$p, block2 = $iter2 || nil2, $$14, self4 = this, result2 = nil2;
            if ($iter2)
              $Set_collect$excl$13.$$p = null;
            if ($iter2)
              $Set_collect$excl$13.$$p = null;
            ;
            if (block2 !== nil2) {
            } else {
              return self4.$enum_for("collect!");
            }
            ;
            result2 = self4.$class().$new();
            $send2(self4, "each", [], ($$14 = function(item) {
              var self5 = $$14.$$s || this;
              if (item == null) {
                item = nil2;
              }
              ;
              return result2["$<<"](Opal2.yield1(block2, item));
            }, $$14.$$s = self4, $$14.$$arity = 1, $$14));
            return self4.$replace(result2);
          }, $Set_collect$excl$13.$$arity = 0);
          Opal2.alias(self3, "map!", "collect!");
          Opal2.def(self3, "$delete", $Set_delete$15 = function(o) {
            var self4 = this;
            self4.hash.$delete(o);
            return self4;
          }, $Set_delete$15.$$arity = 1);
          Opal2.def(self3, "$delete?", $Set_delete$ques$16 = function(o) {
            var self4 = this;
            if ($truthy2(self4["$include?"](o))) {
              self4.$delete(o);
              return self4;
            } else {
              return nil2;
            }
          }, $Set_delete$ques$16.$$arity = 1);
          Opal2.def(self3, "$delete_if", $Set_delete_if$17 = function $$delete_if() {
            var $$18, $$19, $iter2 = $Set_delete_if$17.$$p, $yield = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Set_delete_if$17.$$p = null;
            if ($yield !== nil2) {
            } else {
              return self4.$enum_for("delete_if");
            }
            ;
            $send2($send2(self4, "select", [], ($$18 = function(o) {
              var self5 = $$18.$$s || this;
              if (o == null) {
                o = nil2;
              }
              ;
              return Opal2.yield1($yield, o);
              ;
            }, $$18.$$s = self4, $$18.$$arity = 1, $$18)), "each", [], ($$19 = function(o) {
              var self5 = $$19.$$s || this;
              if (self5.hash == null)
                self5.hash = nil2;
              if (o == null) {
                o = nil2;
              }
              ;
              return self5.hash.$delete(o);
            }, $$19.$$s = self4, $$19.$$arity = 1, $$19));
            return self4;
          }, $Set_delete_if$17.$$arity = 0);
          Opal2.def(self3, "$add?", $Set_add$ques$20 = function(o) {
            var self4 = this;
            if ($truthy2(self4["$include?"](o))) {
              return nil2;
            } else {
              return self4.$add(o);
            }
          }, $Set_add$ques$20.$$arity = 1);
          Opal2.def(self3, "$each", $Set_each$21 = function $$each() {
            var $iter2 = $Set_each$21.$$p, block2 = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Set_each$21.$$p = null;
            if ($iter2)
              $Set_each$21.$$p = null;
            ;
            if (block2 !== nil2) {
            } else {
              return self4.$enum_for("each");
            }
            ;
            $send2(self4.hash, "each_key", [], block2.$to_proc());
            return self4;
          }, $Set_each$21.$$arity = 0);
          Opal2.def(self3, "$empty?", $Set_empty$ques$22 = function() {
            var self4 = this;
            return self4.hash["$empty?"]();
          }, $Set_empty$ques$22.$$arity = 0);
          Opal2.def(self3, "$eql?", $Set_eql$ques$23 = function(other) {
            var $$24, self4 = this;
            return self4.hash["$eql?"]($send2(other, "instance_eval", [], ($$24 = function() {
              var self5 = $$24.$$s || this;
              if (self5.hash == null)
                self5.hash = nil2;
              return self5.hash;
            }, $$24.$$s = self4, $$24.$$arity = 0, $$24)));
          }, $Set_eql$ques$23.$$arity = 1);
          Opal2.def(self3, "$clear", $Set_clear$25 = function $$clear() {
            var self4 = this;
            self4.hash.$clear();
            return self4;
          }, $Set_clear$25.$$arity = 0);
          Opal2.def(self3, "$include?", $Set_include$ques$26 = function(o) {
            var self4 = this;
            return self4.hash["$include?"](o);
          }, $Set_include$ques$26.$$arity = 1);
          Opal2.alias(self3, "member?", "include?");
          Opal2.def(self3, "$merge", $Set_merge$27 = function $$merge(enum$) {
            var $$28, self4 = this;
            $send2(enum$, "each", [], ($$28 = function(item) {
              var self5 = $$28.$$s || this;
              if (item == null) {
                item = nil2;
              }
              ;
              return self5.$add(item);
            }, $$28.$$s = self4, $$28.$$arity = 1, $$28));
            return self4;
          }, $Set_merge$27.$$arity = 1);
          Opal2.def(self3, "$replace", $Set_replace$29 = function $$replace(enum$) {
            var self4 = this;
            self4.$clear();
            self4.$merge(enum$);
            return self4;
          }, $Set_replace$29.$$arity = 1);
          Opal2.def(self3, "$size", $Set_size$30 = function $$size() {
            var self4 = this;
            return self4.hash.$size();
          }, $Set_size$30.$$arity = 0);
          Opal2.alias(self3, "length", "size");
          Opal2.def(self3, "$subtract", $Set_subtract$31 = function $$subtract(enum$) {
            var $$32, self4 = this;
            $send2(enum$, "each", [], ($$32 = function(item) {
              var self5 = $$32.$$s || this;
              if (item == null) {
                item = nil2;
              }
              ;
              return self5.$delete(item);
            }, $$32.$$s = self4, $$32.$$arity = 1, $$32));
            return self4;
          }, $Set_subtract$31.$$arity = 1);
          Opal2.def(self3, "$|", $Set_$$33 = function(enum$) {
            var self4 = this;
            if ($truthy2(enum$["$respond_to?"]("each"))) {
            } else {
              self4.$raise($$2($nesting3, "ArgumentError"), "value must be enumerable");
            }
            ;
            return self4.$dup().$merge(enum$);
          }, $Set_$$33.$$arity = 1);
          Opal2.def(self3, "$superset?", $Set_superset$ques$34 = function(set) {
            var $a2, $$35, self4 = this;
            $truthy2($a2 = set["$is_a?"]($$2($nesting3, "Set"))) ? $a2 : self4.$raise($$2($nesting3, "ArgumentError"), "value must be a set");
            if ($truthy2($rb_lt2(self4.$size(), set.$size()))) {
              return false;
            }
            ;
            return $send2(set, "all?", [], ($$35 = function(o) {
              var self5 = $$35.$$s || this;
              if (o == null) {
                o = nil2;
              }
              ;
              return self5["$include?"](o);
            }, $$35.$$s = self4, $$35.$$arity = 1, $$35));
          }, $Set_superset$ques$34.$$arity = 1);
          Opal2.alias(self3, ">=", "superset?");
          Opal2.def(self3, "$proper_superset?", $Set_proper_superset$ques$36 = function(set) {
            var $a2, $$37, self4 = this;
            $truthy2($a2 = set["$is_a?"]($$2($nesting3, "Set"))) ? $a2 : self4.$raise($$2($nesting3, "ArgumentError"), "value must be a set");
            if ($truthy2($rb_le(self4.$size(), set.$size()))) {
              return false;
            }
            ;
            return $send2(set, "all?", [], ($$37 = function(o) {
              var self5 = $$37.$$s || this;
              if (o == null) {
                o = nil2;
              }
              ;
              return self5["$include?"](o);
            }, $$37.$$s = self4, $$37.$$arity = 1, $$37));
          }, $Set_proper_superset$ques$36.$$arity = 1);
          Opal2.alias(self3, ">", "proper_superset?");
          Opal2.def(self3, "$subset?", $Set_subset$ques$38 = function(set) {
            var $a2, $$39, self4 = this;
            $truthy2($a2 = set["$is_a?"]($$2($nesting3, "Set"))) ? $a2 : self4.$raise($$2($nesting3, "ArgumentError"), "value must be a set");
            if ($truthy2($rb_lt2(set.$size(), self4.$size()))) {
              return false;
            }
            ;
            return $send2(self4, "all?", [], ($$39 = function(o) {
              var self5 = $$39.$$s || this;
              if (o == null) {
                o = nil2;
              }
              ;
              return set["$include?"](o);
            }, $$39.$$s = self4, $$39.$$arity = 1, $$39));
          }, $Set_subset$ques$38.$$arity = 1);
          Opal2.alias(self3, "<=", "subset?");
          Opal2.def(self3, "$proper_subset?", $Set_proper_subset$ques$40 = function(set) {
            var $a2, $$41, self4 = this;
            $truthy2($a2 = set["$is_a?"]($$2($nesting3, "Set"))) ? $a2 : self4.$raise($$2($nesting3, "ArgumentError"), "value must be a set");
            if ($truthy2($rb_le(set.$size(), self4.$size()))) {
              return false;
            }
            ;
            return $send2(self4, "all?", [], ($$41 = function(o) {
              var self5 = $$41.$$s || this;
              if (o == null) {
                o = nil2;
              }
              ;
              return set["$include?"](o);
            }, $$41.$$s = self4, $$41.$$arity = 1, $$41));
          }, $Set_proper_subset$ques$40.$$arity = 1);
          Opal2.alias(self3, "<", "proper_subset?");
          Opal2.alias(self3, "+", "|");
          Opal2.alias(self3, "union", "|");
          return (Opal2.def(self3, "$to_a", $Set_to_a$42 = function $$to_a() {
            var self4 = this;
            return self4.hash.$keys();
          }, $Set_to_a$42.$$arity = 0), nil2) && "to_a";
        })($nesting2[0], null, $nesting2);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Enumerable");
          var $nesting3 = [self3].concat($parent_nesting2), $Enumerable_to_set$43;
          Opal2.def(self3, "$to_set", $Enumerable_to_set$43 = function $$to_set($a2, $b2) {
            var $iter2 = $Enumerable_to_set$43.$$p, block2 = $iter2 || nil2, $post_args2, klass, args2, self4 = this;
            if ($iter2)
              $Enumerable_to_set$43.$$p = null;
            if ($iter2)
              $Enumerable_to_set$43.$$p = null;
            ;
            $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
            if ($post_args2.length > 0) {
              klass = $post_args2[0];
              $post_args2.splice(0, 1);
            }
            if (klass == null) {
              klass = $$2($nesting3, "Set");
            }
            ;
            args2 = $post_args2;
            ;
            return $send2(klass, "new", [self4].concat(Opal2.to_a(args2)), block2.$to_proc());
          }, $Enumerable_to_set$43.$$arity = -1);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/kernel"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $send2 = Opal2.send;
        Opal2.add_stubs(["$new"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Kernel");
          var $nesting3 = [self3].concat($parent_nesting2), $Kernel_open$1, $Kernel___dir__$2;
          Opal2.def(self3, "$open", $Kernel_open$1 = function $$open(path, $a2) {
            var $post_args2, rest, $iter2 = $Kernel_open$1.$$p, $yield = $iter2 || nil2, self4 = this, file2 = nil2;
            if ($iter2)
              $Kernel_open$1.$$p = null;
            $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
            rest = $post_args2;
            ;
            file2 = $send2($$2($nesting3, "File"), "new", [path].concat(Opal2.to_a(rest)));
            if ($yield !== nil2) {
              return Opal2.yield1($yield, file2);
            } else {
              return file2;
            }
            ;
          }, $Kernel_open$1.$$arity = -2);
          Opal2.def(self3, "$__dir__", $Kernel___dir__$2 = function $$__dir__() {
            var self4 = this;
            return "";
          }, $Kernel___dir__$2.$$arity = 0);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/file"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$attr_reader", "$delete", "$gsub", "$read", "$size", "$to_enum", "$chomp", "$each_line", "$readlines", "$split"]);
        (function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "File");
          var $nesting3 = [self3].concat($parent_nesting2), $File_initialize$1, $File_read$2, $File_each_line$3, $File_readlines$4;
          self3.$$prototype.eof = self3.$$prototype.path = nil2;
          self3.$attr_reader("eof");
          self3.$attr_reader("lineno");
          self3.$attr_reader("path");
          Opal2.def(self3, "$initialize", $File_initialize$1 = function $$initialize(path, flags) {
            var self4 = this, encoding_flag_regexp = nil2;
            if (flags == null) {
              flags = "r";
            }
            ;
            self4.path = path;
            self4.contents = nil2;
            self4.eof = false;
            self4.lineno = 0;
            flags = flags.$delete("b");
            encoding_flag_regexp = /:(.*)/;
            flags = flags.$gsub(encoding_flag_regexp, "");
            return self4.flags = flags;
          }, $File_initialize$1.$$arity = -2);
          Opal2.def(self3, "$read", $File_read$2 = function $$read() {
            var self4 = this, res = nil2;
            if ($truthy2(self4.eof)) {
              return "";
            } else {
              res = $$2($nesting3, "File").$read(self4.path);
              self4.eof = true;
              self4.lineno = res.$size();
              return res;
            }
          }, $File_read$2.$$arity = 0);
          Opal2.def(self3, "$each_line", $File_each_line$3 = function $$each_line(separator) {
            var $iter2 = $File_each_line$3.$$p, block2 = $iter2 || nil2, self4 = this, lines = nil2;
            if ($gvars["/"] == null)
              $gvars["/"] = nil2;
            if ($iter2)
              $File_each_line$3.$$p = null;
            if ($iter2)
              $File_each_line$3.$$p = null;
            ;
            if (separator == null) {
              separator = $gvars["/"];
            }
            ;
            if ($truthy2(self4.eof)) {
              return function() {
                if (block2 !== nil2) {
                  return self4;
                } else {
                  return [].$to_enum();
                }
                ;
                return nil2;
              }();
            }
            ;
            if (block2 !== nil2) {
              lines = $$2($nesting3, "File").$read(self4.path);
              self4.eof = false;
              self4.lineno = 0;
              var chomped = lines.$chomp(), trailing = lines.length != chomped.length, splitted = chomped.split(separator);
              for (var i = 0, length = splitted.length; i < length; i++) {
                self4.lineno += 1;
                if (i < length - 1 || trailing) {
                  Opal2.yield1(block2, splitted[i] + separator);
                } else {
                  Opal2.yield1(block2, splitted[i]);
                }
              }
              self4.eof = true;
              ;
              return self4;
            } else {
              return self4.$read().$each_line();
            }
            ;
          }, $File_each_line$3.$$arity = -1);
          Opal2.def(self3, "$readlines", $File_readlines$4 = function $$readlines() {
            var self4 = this;
            return $$2($nesting3, "File").$readlines(self4.path);
          }, $File_readlines$4.$$arity = 0);
          return function(self4, $parent_nesting3) {
            var $nesting4 = [self4].concat($parent_nesting3), $readlines$5, $file$ques$6, $readable$ques$7, $read$8;
            Opal2.def(self4, "$readlines", $readlines$5 = function $$readlines(path, separator) {
              var self5 = this, content = nil2;
              if ($gvars["/"] == null)
                $gvars["/"] = nil2;
              if (separator == null) {
                separator = $gvars["/"];
              }
              ;
              content = $$2($nesting4, "File").$read(path);
              return content.$split(separator);
            }, $readlines$5.$$arity = -2);
            Opal2.def(self4, "$file?", $file$ques$6 = function(path) {
              var self5 = this;
              return true;
            }, $file$ques$6.$$arity = 1);
            Opal2.def(self4, "$readable?", $readable$ques$7 = function(path) {
              var self5 = this;
              return true;
            }, $readable$ques$7.$$arity = 1);
            return (Opal2.def(self4, "$read", $read$8 = function $$read(path) {
              var self5 = this;
              return "";
            }, $read$8.$$arity = 1), nil2) && "read";
          }(Opal2.get_singleton_class(self3), $nesting3);
        })($nesting2[0], null, $nesting2);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "IO");
          var $nesting3 = [self3].concat($parent_nesting2), $IO_read$9;
          return (Opal2.defs(self3, "$read", $IO_read$9 = function $$read(path) {
            var self4 = this;
            return $$2($nesting3, "File").$read(path);
          }, $IO_read$9.$$arity = 1), nil2) && "read";
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/match_data"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $send2 = Opal2.send;
        Opal2.add_stubs(["$[]=", "$-"]);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "MatchData");
          var $nesting3 = [self3].concat($parent_nesting2), $MatchData_$$$eq$1;
          self3.$$prototype.matches = nil2;
          return (Opal2.def(self3, "$[]=", $MatchData_$$$eq$1 = function(idx, val) {
            var self4 = this, $writer = nil2;
            $writer = [idx, val];
            $send2(self4.matches, "[]=", Opal2.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $MatchData_$$$eq$1.$$arity = 2), nil2) && "[]=";
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/string"] = function(Opal2) {
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        function $rb_ge(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$method_defined?", "$<", "$length", "$bytes", "$to_s", "$byteslice", "$==", "$>=", "$-", "$_original_byteslice", "$_original_unpack"]);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "String");
          var $nesting3 = [self3].concat($parent_nesting2), $String_limit_bytesize$1, $String_byteslice$2, $String_unpack$3;
          if ($truthy2(self3["$method_defined?"]("limit_bytesize"))) {
          } else {
            Opal2.def(self3, "$limit_bytesize", $String_limit_bytesize$1 = function $$limit_bytesize(size) {
              var self4 = this, result2 = nil2;
              if ($truthy2($rb_lt2(size, self4.$bytes().$length()))) {
              } else {
                return self4.$to_s();
              }
              ;
              result2 = self4.$byteslice(0, size);
              return result2.$to_s();
            }, $String_limit_bytesize$1.$$arity = 1);
          }
          ;
          if ($truthy2(self3["$method_defined?"]("limit"))) {
          } else {
            Opal2.alias(self3, "limit", "limit_bytesize");
          }
          ;
          Opal2.alias(self3, "_original_byteslice", "byteslice");
          Opal2.def(self3, "$byteslice", $String_byteslice$2 = function $$byteslice(index, length) {
            var $a2, $b2, self4 = this;
            if (length == null) {
              length = 1;
            }
            ;
            if ($truthy2($truthy2($a2 = ($b2 = index["$=="](3)) ? $rb_ge(length, index) : index["$=="](3)) ? self4.charCodeAt() === 65279 : $a2)) {
              return self4.substr(1).$byteslice(0, $rb_minus(length, 3));
            } else {
              return self4.$_original_byteslice(index, length);
            }
            ;
          }, $String_byteslice$2.$$arity = -2);
          Opal2.alias(self3, "_original_unpack", "unpack");
          return (Opal2.def(self3, "$unpack", $String_unpack$3 = function $$unpack(format) {
            var self4 = this;
            if (format["$=="]("C3")) {
              if ($truthy2(self4.charCodeAt() === 65279)) {
                return [239, 187, 191];
              } else {
                var bytes = [];
                for (var i = 0; i < 3; i++) {
                  if (i < self4.length) {
                    bytes.push(self4.charCodeAt(i));
                  } else {
                    bytes.push(nil2);
                  }
                }
                return bytes;
              }
            } else {
              return self4.$_original_unpack(format);
            }
          }, $String_unpack$3.$$arity = 1), nil2) && "unpack";
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/uri"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module;
        Opal2.add_stubs(["$extend"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "URI");
          var $nesting3 = [self3].concat($parent_nesting2), $URI_parse$1, $URI_path$2;
          Opal2.defs(self3, "$parse", $URI_parse$1 = function $$parse(str) {
            var self4 = this;
            return str.$extend($$2($nesting3, "URI"));
          }, $URI_parse$1.$$arity = 1);
          Opal2.def(self3, "$path", $URI_path$2 = function $$path() {
            var self4 = this;
            return self4;
          }, $URI_path$2.$$arity = 0);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/base64"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$delete"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Base64");
          var $nesting3 = [self3].concat($parent_nesting2), $Base64_decode64$1, $Base64_encode64$2, $Base64_strict_decode64$3, $Base64_strict_encode64$4, $Base64_urlsafe_decode64$5, $Base64_urlsafe_encode64$6;
          var encode, decode;
          encode = Opal2.global.btoa || function(input) {
            var buffer;
            if (input instanceof Buffer) {
              buffer = input;
            } else {
              buffer = Buffer.from(input.toString(), "binary");
            }
            return buffer.toString("base64");
          };
          decode = Opal2.global.atob || function(input) {
            return Buffer.from(input, "base64").toString("binary");
          };
          ;
          Opal2.defs(self3, "$decode64", $Base64_decode64$1 = function $$decode64(string2) {
            var self4 = this;
            return decode(string2.replace(/\r?\n/g, ""));
          }, $Base64_decode64$1.$$arity = 1);
          Opal2.defs(self3, "$encode64", $Base64_encode64$2 = function $$encode64(string2) {
            var self4 = this;
            return encode(string2).replace(/(.{60})/g, "$1\n").replace(/([^\n])$/g, "$1\n");
          }, $Base64_encode64$2.$$arity = 1);
          Opal2.defs(self3, "$strict_decode64", $Base64_strict_decode64$3 = function $$strict_decode64(string2) {
            var self4 = this;
            return decode(string2);
          }, $Base64_strict_decode64$3.$$arity = 1);
          Opal2.defs(self3, "$strict_encode64", $Base64_strict_encode64$4 = function $$strict_encode64(string2) {
            var self4 = this;
            return encode(string2);
          }, $Base64_strict_encode64$4.$$arity = 1);
          Opal2.defs(self3, "$urlsafe_decode64", $Base64_urlsafe_decode64$5 = function $$urlsafe_decode64(string2) {
            var self4 = this;
            return decode(string2.replace(/\-/g, "+").replace(/_/g, "/"));
          }, $Base64_urlsafe_decode64$5.$$arity = 1);
          Opal2.defs(self3, "$urlsafe_encode64", $Base64_urlsafe_encode64$6 = function $$urlsafe_encode64(string2, $kwargs) {
            var padding, self4 = this, str = nil2;
            if ($kwargs == null) {
              $kwargs = $hash22([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal2.ArgumentError.$new("expected kwargs");
            }
            ;
            padding = $kwargs.$$smap["padding"];
            if (padding == null) {
              padding = true;
            }
            ;
            str = encode(string2).replace(/\+/g, "-").replace(/\//g, "_");
            if ($truthy2(padding)) {
            } else {
              str = str.$delete("=");
            }
            ;
            return str;
          }, $Base64_urlsafe_encode64$6.$$arity = -2);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext/number"] = function(Opal2) {
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$coerce_to!", "$>"]);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "Number");
          var $nesting3 = [self3].concat($parent_nesting2), $Number_round$1;
          return (Opal2.def(self3, "$round", $Number_round$1 = function $$round(ndigits) {
            var self4 = this;
            ;
            ndigits = $$2($nesting3, "Opal")["$coerce_to!"](ndigits, $$2($nesting3, "Integer"), "to_int");
            if ($truthy2($rb_gt2(ndigits, 0))) {
              return Number(self4.toFixed(ndigits));
            } else {
              return Math.round(self4);
            }
            ;
          }, $Number_round$1.$$arity = -1), nil2) && "round";
        }($nesting2[0], $$2($nesting2, "Numeric"), $nesting2);
      };
      Opal.modules["asciidoctor/js/opal_ext"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
        Opal2.add_stubs(["$require"]);
        self2.$require("asciidoctor/js/opal_ext/kernel");
        self2.$require("asciidoctor/js/opal_ext/file");
        self2.$require("asciidoctor/js/opal_ext/match_data");
        self2.$require("asciidoctor/js/opal_ext/string");
        self2.$require("asciidoctor/js/opal_ext/uri");
        self2.$require("asciidoctor/js/opal_ext/base64");
        self2.$require("asciidoctor/js/opal_ext/number");
        Opal2.config.unsupported_features_severity = "ignore";
        self2.$require("asciidoctor/js/opal_ext/browser");
        ;
      };
      Opal.modules["asciidoctor/js/rx"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $send2 = Opal2.send, $gvars = Opal2.gvars, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$gsub", "$+", "$unpack_hex_range"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2), $Asciidoctor_unpack_hex_range$1;
          Opal2.const_set($nesting3[0], "HEX_RANGE_RX", /([A-F0-9]{4})(?:-([A-F0-9]{4}))?/);
          Opal2.defs(self3, "$unpack_hex_range", $Asciidoctor_unpack_hex_range$1 = function $$unpack_hex_range(str) {
            var $$22, self4 = this;
            return $send2(str, "gsub", [$$2($nesting3, "HEX_RANGE_RX")], ($$22 = function() {
              var self5 = $$22.$$s || this, $a2, $b2;
              return "\\u" + (($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1)) + ($truthy2($a2 = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](2)) ? "-\\u" + (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](2)) : $a2);
            }, $$22.$$s = self4, $$22.$$arity = 0, $$22));
          }, $Asciidoctor_unpack_hex_range$1.$$arity = 1);
          Opal2.const_set($nesting3[0], "P_L", $rb_plus("A-Za-z", self3.$unpack_hex_range("00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D037F03860388-038A038C038E-03A103A3-03F503F7-0481048A-052F0531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A0-08B20904-0939093D09500958-09610971-09800985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16F1-16F81700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191E1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A69DA6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A7ADA7B0A7B1A7F7-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFA9E0-A9E4A9E6-A9EFA9FA-A9FEAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA7E-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EAB30-AB5AAB5C-AB5FAB64AB65ABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC")));
          Opal2.const_set($nesting3[0], "P_Nl", self3.$unpack_hex_range("16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF"));
          Opal2.const_set($nesting3[0], "P_Nd", $rb_plus("0-9", self3.$unpack_hex_range("0660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0DE6-0DEF0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9A9F0-A9F9AA50-AA59ABF0-ABF9FF10-FF19")));
          Opal2.const_set($nesting3[0], "P_Pc", self3.$unpack_hex_range("005F203F20402054FE33FE34FE4D-FE4FFF3F"));
          Opal2.const_set($nesting3[0], "CC_ALPHA", "" + $$2($nesting3, "P_L") + $$2($nesting3, "P_Nl"));
          Opal2.const_set($nesting3[0], "CG_ALPHA", "[" + $$2($nesting3, "CC_ALPHA") + "]");
          Opal2.const_set($nesting3[0], "CC_ALNUM", "" + $$2($nesting3, "CC_ALPHA") + $$2($nesting3, "P_Nd"));
          Opal2.const_set($nesting3[0], "CG_ALNUM", "[" + $$2($nesting3, "CC_ALNUM") + "]");
          Opal2.const_set($nesting3[0], "CC_WORD", "" + $$2($nesting3, "CC_ALNUM") + $$2($nesting3, "P_Pc"));
          Opal2.const_set($nesting3[0], "CG_WORD", "[" + $$2($nesting3, "CC_WORD") + "]");
          Opal2.const_set($nesting3[0], "CG_BLANK", "[ \\t]");
          Opal2.const_set($nesting3[0], "CC_EOL", "(?=\\n|$)");
          Opal2.const_set($nesting3[0], "CG_GRAPH", "[^\\s\\x00-\\x1F\\x7F]");
          Opal2.const_set($nesting3[0], "CC_ALL", "[\\s\\S]");
          Opal2.const_set($nesting3[0], "CC_ANY", "[^\\n]");
        }($nesting2[0], $nesting2);
      };
      Opal.modules["strscan"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $send2 = Opal2.send;
        Opal2.add_stubs(["$attr_reader", "$anchor", "$scan_until", "$length", "$size", "$rest", "$pos=", "$-", "$private"]);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "StringScanner");
          var $nesting3 = [self3].concat($parent_nesting2), $StringScanner_initialize$1, $StringScanner_beginning_of_line$ques$2, $StringScanner_scan$3, $StringScanner_scan_until$4, $StringScanner_$$$5, $StringScanner_check$6, $StringScanner_check_until$7, $StringScanner_peek$8, $StringScanner_eos$ques$9, $StringScanner_exist$ques$10, $StringScanner_skip$11, $StringScanner_skip_until$12, $StringScanner_get_byte$13, $StringScanner_match$ques$14, $StringScanner_pos$eq$15, $StringScanner_matched_size$16, $StringScanner_post_match$17, $StringScanner_pre_match$18, $StringScanner_reset$19, $StringScanner_rest$20, $StringScanner_rest$ques$21, $StringScanner_rest_size$22, $StringScanner_terminate$23, $StringScanner_unscan$24, $StringScanner_anchor$25;
          self3.$$prototype.pos = self3.$$prototype.string = self3.$$prototype.working = self3.$$prototype.matched = self3.$$prototype.prev_pos = self3.$$prototype.match = nil2;
          self3.$attr_reader("pos");
          self3.$attr_reader("matched");
          Opal2.def(self3, "$initialize", $StringScanner_initialize$1 = function $$initialize(string2) {
            var self4 = this;
            self4.string = string2;
            self4.pos = 0;
            self4.matched = nil2;
            self4.working = string2;
            return self4.match = [];
          }, $StringScanner_initialize$1.$$arity = 1);
          self3.$attr_reader("string");
          Opal2.def(self3, "$beginning_of_line?", $StringScanner_beginning_of_line$ques$2 = function() {
            var self4 = this;
            return self4.pos === 0 || self4.string.charAt(self4.pos - 1) === "\n";
          }, $StringScanner_beginning_of_line$ques$2.$$arity = 0);
          Opal2.alias(self3, "bol?", "beginning_of_line?");
          Opal2.def(self3, "$scan", $StringScanner_scan$3 = function $$scan(pattern) {
            var self4 = this;
            pattern = self4.$anchor(pattern);
            var result2 = pattern.exec(self4.working);
            if (result2 == null) {
              return self4.matched = nil2;
            } else if (typeof result2 === "object") {
              self4.prev_pos = self4.pos;
              self4.pos += result2[0].length;
              self4.working = self4.working.substring(result2[0].length);
              self4.matched = result2[0];
              self4.match = result2;
              return result2[0];
            } else if (typeof result2 === "string") {
              self4.pos += result2.length;
              self4.working = self4.working.substring(result2.length);
              return result2;
            } else {
              return nil2;
            }
            ;
          }, $StringScanner_scan$3.$$arity = 1);
          Opal2.def(self3, "$scan_until", $StringScanner_scan_until$4 = function $$scan_until(pattern) {
            var self4 = this;
            pattern = self4.$anchor(pattern);
            var pos = self4.pos, working = self4.working, result2;
            while (true) {
              result2 = pattern.exec(working);
              pos += 1;
              working = working.substr(1);
              if (result2 == null) {
                if (working.length === 0) {
                  return self4.matched = nil2;
                }
                continue;
              }
              self4.matched = self4.string.substr(self4.pos, pos - self4.pos - 1 + result2[0].length);
              self4.prev_pos = pos - 1;
              self4.pos = pos;
              self4.working = working.substr(result2[0].length);
              return self4.matched;
            }
            ;
          }, $StringScanner_scan_until$4.$$arity = 1);
          Opal2.def(self3, "$[]", $StringScanner_$$$5 = function(idx) {
            var self4 = this;
            var match = self4.match;
            if (idx < 0) {
              idx += match.length;
            }
            if (idx < 0 || idx >= match.length) {
              return nil2;
            }
            if (match[idx] == null) {
              return nil2;
            }
            return match[idx];
          }, $StringScanner_$$$5.$$arity = 1);
          Opal2.def(self3, "$check", $StringScanner_check$6 = function $$check(pattern) {
            var self4 = this;
            pattern = self4.$anchor(pattern);
            var result2 = pattern.exec(self4.working);
            if (result2 == null) {
              return self4.matched = nil2;
            }
            return self4.matched = result2[0];
            ;
          }, $StringScanner_check$6.$$arity = 1);
          Opal2.def(self3, "$check_until", $StringScanner_check_until$7 = function $$check_until(pattern) {
            var self4 = this;
            var prev_pos = self4.prev_pos, pos = self4.pos;
            var result2 = self4.$scan_until(pattern);
            if (result2 !== nil2) {
              self4.matched = result2.substr(-1);
              self4.working = self4.string.substr(pos);
            }
            self4.prev_pos = prev_pos;
            self4.pos = pos;
            return result2;
          }, $StringScanner_check_until$7.$$arity = 1);
          Opal2.def(self3, "$peek", $StringScanner_peek$8 = function $$peek(length) {
            var self4 = this;
            return self4.working.substring(0, length);
          }, $StringScanner_peek$8.$$arity = 1);
          Opal2.def(self3, "$eos?", $StringScanner_eos$ques$9 = function() {
            var self4 = this;
            return self4.working.length === 0;
          }, $StringScanner_eos$ques$9.$$arity = 0);
          Opal2.def(self3, "$exist?", $StringScanner_exist$ques$10 = function(pattern) {
            var self4 = this;
            var result2 = pattern.exec(self4.working);
            if (result2 == null) {
              return nil2;
            } else if (result2.index == 0) {
              return 0;
            } else {
              return result2.index + 1;
            }
          }, $StringScanner_exist$ques$10.$$arity = 1);
          Opal2.def(self3, "$skip", $StringScanner_skip$11 = function $$skip(pattern) {
            var self4 = this;
            pattern = self4.$anchor(pattern);
            var result2 = pattern.exec(self4.working);
            if (result2 == null) {
              return self4.matched = nil2;
            } else {
              var match_str = result2[0];
              var match_len = match_str.length;
              self4.matched = match_str;
              self4.prev_pos = self4.pos;
              self4.pos += match_len;
              self4.working = self4.working.substring(match_len);
              return match_len;
            }
            ;
          }, $StringScanner_skip$11.$$arity = 1);
          Opal2.def(self3, "$skip_until", $StringScanner_skip_until$12 = function $$skip_until(pattern) {
            var self4 = this;
            var result2 = self4.$scan_until(pattern);
            if (result2 === nil2) {
              return nil2;
            } else {
              self4.matched = result2.substr(-1);
              return result2.length;
            }
          }, $StringScanner_skip_until$12.$$arity = 1);
          Opal2.def(self3, "$get_byte", $StringScanner_get_byte$13 = function $$get_byte() {
            var self4 = this;
            var result2 = nil2;
            if (self4.pos < self4.string.length) {
              self4.prev_pos = self4.pos;
              self4.pos += 1;
              result2 = self4.matched = self4.working.substring(0, 1);
              self4.working = self4.working.substring(1);
            } else {
              self4.matched = nil2;
            }
            return result2;
          }, $StringScanner_get_byte$13.$$arity = 0);
          Opal2.alias(self3, "getch", "get_byte");
          Opal2.def(self3, "$match?", $StringScanner_match$ques$14 = function(pattern) {
            var self4 = this;
            pattern = self4.$anchor(pattern);
            var result2 = pattern.exec(self4.working);
            if (result2 == null) {
              return nil2;
            } else {
              self4.prev_pos = self4.pos;
              return result2[0].length;
            }
            ;
          }, $StringScanner_match$ques$14.$$arity = 1);
          Opal2.def(self3, "$pos=", $StringScanner_pos$eq$15 = function(pos) {
            var self4 = this;
            if (pos < 0) {
              pos += self4.string.$length();
            }
            ;
            self4.pos = pos;
            return self4.working = self4.string.slice(pos);
          }, $StringScanner_pos$eq$15.$$arity = 1);
          Opal2.def(self3, "$matched_size", $StringScanner_matched_size$16 = function $$matched_size() {
            var self4 = this;
            if (self4.matched === nil2) {
              return nil2;
            }
            return self4.matched.length;
          }, $StringScanner_matched_size$16.$$arity = 0);
          Opal2.def(self3, "$post_match", $StringScanner_post_match$17 = function $$post_match() {
            var self4 = this;
            if (self4.matched === nil2) {
              return nil2;
            }
            return self4.string.substr(self4.pos);
          }, $StringScanner_post_match$17.$$arity = 0);
          Opal2.def(self3, "$pre_match", $StringScanner_pre_match$18 = function $$pre_match() {
            var self4 = this;
            if (self4.matched === nil2) {
              return nil2;
            }
            return self4.string.substr(0, self4.prev_pos);
          }, $StringScanner_pre_match$18.$$arity = 0);
          Opal2.def(self3, "$reset", $StringScanner_reset$19 = function $$reset() {
            var self4 = this;
            self4.working = self4.string;
            self4.matched = nil2;
            return self4.pos = 0;
          }, $StringScanner_reset$19.$$arity = 0);
          Opal2.def(self3, "$rest", $StringScanner_rest$20 = function $$rest() {
            var self4 = this;
            return self4.working;
          }, $StringScanner_rest$20.$$arity = 0);
          Opal2.def(self3, "$rest?", $StringScanner_rest$ques$21 = function() {
            var self4 = this;
            return self4.working.length !== 0;
          }, $StringScanner_rest$ques$21.$$arity = 0);
          Opal2.def(self3, "$rest_size", $StringScanner_rest_size$22 = function $$rest_size() {
            var self4 = this;
            return self4.$rest().$size();
          }, $StringScanner_rest_size$22.$$arity = 0);
          Opal2.def(self3, "$terminate", $StringScanner_terminate$23 = function $$terminate() {
            var self4 = this, $writer = nil2;
            self4.match = nil2;
            $writer = [self4.string.$length()];
            $send2(self4, "pos=", Opal2.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            ;
          }, $StringScanner_terminate$23.$$arity = 0);
          Opal2.def(self3, "$unscan", $StringScanner_unscan$24 = function $$unscan() {
            var self4 = this;
            self4.pos = self4.prev_pos;
            self4.prev_pos = nil2;
            self4.match = nil2;
            return self4;
          }, $StringScanner_unscan$24.$$arity = 0);
          self3.$private();
          return (Opal2.def(self3, "$anchor", $StringScanner_anchor$25 = function $$anchor(pattern) {
            var self4 = this;
            var flags = pattern.toString().match(/\/([^\/]+)$/);
            flags = flags ? flags[1] : void 0;
            return new RegExp("^(?:" + pattern.source + ")", flags);
          }, $StringScanner_anchor$25.$$arity = 1), nil2) && "anchor";
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/js"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
        Opal2.add_stubs(["$require"]);
        self2.$require("asciidoctor/js/opal_ext");
        self2.$require("asciidoctor/js/rx");
        return self2.$require("strscan");
      };
      Opal.modules["asciidoctor/core_ext/nil_or_empty"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$method_defined?"]);
        (function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "NilClass");
          var $nesting3 = [self3].concat($parent_nesting2);
          if ($truthy2(self3["$method_defined?"]("nil_or_empty?"))) {
            return nil2;
          } else {
            return Opal2.alias(self3, "nil_or_empty?", "nil?");
          }
        })($nesting2[0], null, $nesting2);
        (function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "String");
          var $nesting3 = [self3].concat($parent_nesting2);
          if ($truthy2(self3["$method_defined?"]("nil_or_empty?"))) {
            return nil2;
          } else {
            return Opal2.alias(self3, "nil_or_empty?", "empty?");
          }
        })($nesting2[0], null, $nesting2);
        (function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "Array");
          var $nesting3 = [self3].concat($parent_nesting2);
          if ($truthy2(self3["$method_defined?"]("nil_or_empty?"))) {
            return nil2;
          } else {
            return Opal2.alias(self3, "nil_or_empty?", "empty?");
          }
        })($nesting2[0], null, $nesting2);
        (function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "Hash");
          var $nesting3 = [self3].concat($parent_nesting2);
          if ($truthy2(self3["$method_defined?"]("nil_or_empty?"))) {
            return nil2;
          } else {
            return Opal2.alias(self3, "nil_or_empty?", "empty?");
          }
        })($nesting2[0], null, $nesting2);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "Numeric");
          var $nesting3 = [self3].concat($parent_nesting2);
          if ($truthy2(self3["$method_defined?"]("nil_or_empty?"))) {
            return nil2;
          } else {
            return Opal2.alias(self3, "nil_or_empty?", "nil?");
          }
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/core_ext/hash/merge"] = function(Opal2) {
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        var $$1, self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $send2 = Opal2.send, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$==", "$arity", "$instance_method", "$send", "$new", "$<", "$length", "$dup", "$>", "$inject", "$merge", "$[]"]);
        if ($$2($nesting2, "Hash").$instance_method("merge").$arity()["$=="](1)) {
          return $$2($nesting2, "Hash").$send("prepend", $send2($$2($nesting2, "Module"), "new", [], ($$1 = function() {
            var self3 = $$1.$$s || this, $merge$2;
            return (Opal2.def(self3, "$merge", $merge$2 = function $$merge($a2) {
              var $post_args2, args2, $$3, $iter2 = $merge$2.$$p, $yield = $iter2 || nil2, self4 = this, len = nil2;
              if ($iter2)
                $merge$2.$$p = null;
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              args2 = $post_args2;
              ;
              if ($truthy2($rb_lt2(len = args2.$length(), 1))) {
                return self4.$dup();
              } else {
                if ($truthy2($rb_gt2(len, 1))) {
                  return $send2(args2, "inject", [self4], ($$3 = function(acc, arg) {
                    var self5 = $$3.$$s || this;
                    if (acc == null) {
                      acc = nil2;
                    }
                    ;
                    if (arg == null) {
                      arg = nil2;
                    }
                    ;
                    return acc.$merge(arg);
                  }, $$3.$$s = self4, $$3.$$arity = 2, $$3));
                } else {
                  return $send2(self4, Opal2.find_super_dispatcher(self4, "merge", $merge$2, false), [args2["$[]"](0)], null);
                }
                ;
              }
              ;
            }, $merge$2.$$arity = -1), nil2) && "merge";
          }, $$1.$$s = self2, $$1.$$arity = 0, $$1)));
        } else {
          return nil2;
        }
      };
      Opal.modules["asciidoctor/core_ext/match_data/names"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $truthy2 = Opal2.truthy, $klass2 = Opal2.klass;
        Opal2.add_stubs(["$method_defined?"]);
        if ($truthy2($$2($nesting2, "MatchData")["$method_defined?"]("names"))) {
          return nil2;
        } else {
          return function($base2, $super2, $parent_nesting2) {
            var self3 = $klass2($base2, $super2, "MatchData");
            var $nesting3 = [self3].concat($parent_nesting2), $MatchData_names$1;
            return (Opal2.def(self3, "$names", $MatchData_names$1 = function $$names() {
              var self4 = this;
              return [];
            }, $MatchData_names$1.$$arity = 0), nil2) && "names";
          }($nesting2[0], null, $nesting2);
        }
      };
      Opal.modules["asciidoctor/core_ext"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
        Opal2.add_stubs(["$=="]);
        self2.$require("asciidoctor/core_ext.rb/../core_ext/nil_or_empty");
        self2.$require("asciidoctor/core_ext.rb/../core_ext/hash/merge");
        if ($$2($nesting2, "RUBY_ENGINE")["$=="]("opal")) {
          return self2.$require("asciidoctor/core_ext.rb/../core_ext/match_data/names");
        } else {
          return nil2;
        }
        ;
      };
      Opal.modules["asciidoctor/helpers"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_times(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $truthy2 = Opal2.truthy, $gvars = Opal2.gvars, $send2 = Opal2.send, $hash22 = Opal2.hash2;
        Opal2.add_stubs(["$module_function", "$require", "$include?", "$include", "$==", "$===", "$path", "$message", "$raise", "$warn", "$logger", "$chomp", "$empty?", "$slice", "$unpack", "$[]", "$byteslice", "$bytesize", "$[]=", "$-", "$map", "$rstrip", "$encode", "$encoding", "$nil_or_empty?", "$!=", "$tap", "$each_line", "$<<", "$match?", "$gsub", "$rindex", "$index", "$basename", "$extname", "$!", "$length", "$directory?", "$dirname", "$mkdir_p", "$mkdir", "$private_constant", "$join", "$divmod", "$*", "$+", "$to_s", "$to_i", "$succ", "$class_for_name", "$const_get"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Helpers");
            var $nesting4 = [self4].concat($parent_nesting3), $Helpers_require_library$1, $Helpers_prepare_source_array$2, $Helpers_prepare_source_string$11, $Helpers_uriish$ques$16, $Helpers_encode_uri_component$17, $Helpers_encode_spaces_in_uri$18, $Helpers_rootname$19, $Helpers_basename$20, $Helpers_extname$ques$21, $Helpers_extname$22, $Helpers_extname$23, $Helpers_mkdir_p$24, $Helpers_int_to_roman$25, $Helpers_nextval$27, $Helpers_resolve_class$28, $Helpers_class_for_name$29;
            self4.$module_function();
            Opal2.def(self4, "$require_library", $Helpers_require_library$1 = function $$require_library(name, gem_name, on_failure) {
              var self5 = this, $case = nil2, details = nil2;
              if ($gvars["!"] == null)
                $gvars["!"] = nil2;
              if (gem_name == null) {
                gem_name = true;
              }
              ;
              if (on_failure == null) {
                on_failure = "abort";
              }
              ;
              try {
                return self5.$require(name);
              } catch ($err) {
                if (Opal2.rescue($err, [$$$2("::", "LoadError")])) {
                  try {
                    if ($truthy2(self5["$include?"]($$2($nesting4, "Logging")))) {
                    } else {
                      self5.$include($$2($nesting4, "Logging"));
                    }
                    ;
                    if ($truthy2(gem_name)) {
                      if (gem_name["$=="](true)) {
                        gem_name = name;
                      }
                      ;
                      $case = on_failure;
                      if ("abort"["$==="]($case)) {
                        details = function() {
                          if ($gvars["!"].$path()["$=="](gem_name)) {
                            return "";
                          } else {
                            return " (reason: " + function() {
                              if ($truthy2($gvars["!"].$path())) {
                                return "cannot load '" + $gvars["!"].$path() + "'";
                              } else {
                                return $gvars["!"].$message();
                              }
                              ;
                              return nil2;
                            }() + ")";
                          }
                          ;
                          return nil2;
                        }();
                        self5.$raise($$$2("::", "LoadError"), "asciidoctor: FAILED: required gem '" + gem_name + "' is not available" + details + ". Processing aborted.");
                      } else if ("warn"["$==="]($case)) {
                        details = function() {
                          if ($gvars["!"].$path()["$=="](gem_name)) {
                            return "";
                          } else {
                            return " (reason: " + function() {
                              if ($truthy2($gvars["!"].$path())) {
                                return "cannot load '" + $gvars["!"].$path() + "'";
                              } else {
                                return $gvars["!"].$message();
                              }
                              ;
                              return nil2;
                            }() + ")";
                          }
                          ;
                          return nil2;
                        }();
                        self5.$logger().$warn("optional gem '" + gem_name + "' is not available" + details + ". Functionality disabled.");
                      }
                      ;
                    } else {
                      $case = on_failure;
                      if ("abort"["$==="]($case)) {
                        self5.$raise($$$2("::", "LoadError"), "asciidoctor: FAILED: " + $gvars["!"].$message().$chomp(".") + ". Processing aborted.");
                      } else if ("warn"["$==="]($case)) {
                        self5.$logger().$warn("" + $gvars["!"].$message().$chomp(".") + ". Functionality disabled.");
                      }
                    }
                    ;
                    return nil2;
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
              ;
            }, $Helpers_require_library$1.$$arity = -2);
            Opal2.def(self4, "$prepare_source_array", $Helpers_prepare_source_array$2 = function $$prepare_source_array(data, trim_end) {
              var $$3, $$4, $$5, $$6, $$7, $$8, $$92, $$10, self5 = this, leading_2_bytes = nil2, leading_bytes = nil2, first = nil2, $writer = nil2;
              if (trim_end == null) {
                trim_end = true;
              }
              ;
              if ($truthy2(data["$empty?"]())) {
                return [];
              }
              ;
              if ((leading_2_bytes = (leading_bytes = (first = data["$[]"](0)).$unpack("C3")).$slice(0, 2))["$=="]($$2($nesting4, "BOM_BYTES_UTF_16LE"))) {
                $writer = [0, first.$byteslice(2, first.$bytesize())];
                $send2(data, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                return function() {
                  if ($truthy2(trim_end)) {
                    return $send2(data, "map", [], ($$3 = function(line) {
                      var self6 = $$3.$$s || this;
                      if (line == null) {
                        line = nil2;
                      }
                      ;
                      return line.$encode($$2($nesting4, "UTF_8"), $$$2($$$2("::", "Encoding"), "UTF_16LE")).$rstrip();
                    }, $$3.$$s = self5, $$3.$$arity = 1, $$3));
                  } else {
                    return $send2(data, "map", [], ($$4 = function(line) {
                      var self6 = $$4.$$s || this;
                      if (line == null) {
                        line = nil2;
                      }
                      ;
                      return line.$encode($$2($nesting4, "UTF_8"), $$$2($$$2("::", "Encoding"), "UTF_16LE")).$chomp();
                    }, $$4.$$s = self5, $$4.$$arity = 1, $$4));
                  }
                  ;
                  return nil2;
                }();
              } else if (leading_2_bytes["$=="]($$2($nesting4, "BOM_BYTES_UTF_16BE"))) {
                $writer = [0, first.$byteslice(2, first.$bytesize())];
                $send2(data, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                return function() {
                  if ($truthy2(trim_end)) {
                    return $send2(data, "map", [], ($$5 = function(line) {
                      var self6 = $$5.$$s || this;
                      if (line == null) {
                        line = nil2;
                      }
                      ;
                      return line.$encode($$2($nesting4, "UTF_8"), $$$2($$$2("::", "Encoding"), "UTF_16BE")).$rstrip();
                    }, $$5.$$s = self5, $$5.$$arity = 1, $$5));
                  } else {
                    return $send2(data, "map", [], ($$6 = function(line) {
                      var self6 = $$6.$$s || this;
                      if (line == null) {
                        line = nil2;
                      }
                      ;
                      return line.$encode($$2($nesting4, "UTF_8"), $$$2($$$2("::", "Encoding"), "UTF_16BE")).$chomp();
                    }, $$6.$$s = self5, $$6.$$arity = 1, $$6));
                  }
                  ;
                  return nil2;
                }();
              } else if (leading_bytes["$=="]($$2($nesting4, "BOM_BYTES_UTF_8"))) {
                $writer = [0, first.$byteslice(3, first.$bytesize())];
                $send2(data, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if (first.$encoding()["$=="]($$2($nesting4, "UTF_8"))) {
                if ($truthy2(trim_end)) {
                  return $send2(data, "map", [], ($$7 = function(line) {
                    var self6 = $$7.$$s || this;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    return line.$rstrip();
                  }, $$7.$$s = self5, $$7.$$arity = 1, $$7));
                } else {
                  return $send2(data, "map", [], ($$8 = function(line) {
                    var self6 = $$8.$$s || this;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    return line.$chomp();
                  }, $$8.$$s = self5, $$8.$$arity = 1, $$8));
                }
              } else if ($truthy2(trim_end)) {
                return $send2(data, "map", [], ($$92 = function(line) {
                  var self6 = $$92.$$s || this;
                  if (line == null) {
                    line = nil2;
                  }
                  ;
                  return line.$encode($$2($nesting4, "UTF_8")).$rstrip();
                }, $$92.$$s = self5, $$92.$$arity = 1, $$92));
              } else {
                return $send2(data, "map", [], ($$10 = function(line) {
                  var self6 = $$10.$$s || this;
                  if (line == null) {
                    line = nil2;
                  }
                  ;
                  return line.$encode($$2($nesting4, "UTF_8")).$chomp();
                }, $$10.$$s = self5, $$10.$$arity = 1, $$10));
              }
              ;
            }, $Helpers_prepare_source_array$2.$$arity = -2);
            Opal2.def(self4, "$prepare_source_string", $Helpers_prepare_source_string$11 = function $$prepare_source_string(data, trim_end) {
              var $$12, $$14, self5 = this, leading_2_bytes = nil2, leading_bytes = nil2;
              if (trim_end == null) {
                trim_end = true;
              }
              ;
              if ($truthy2(data["$nil_or_empty?"]())) {
                return [];
              }
              ;
              if ((leading_2_bytes = (leading_bytes = data.$unpack("C3")).$slice(0, 2))["$=="]($$2($nesting4, "BOM_BYTES_UTF_16LE"))) {
                data = data.$byteslice(2, data.$bytesize()).$encode($$2($nesting4, "UTF_8"), $$$2($$$2("::", "Encoding"), "UTF_16LE"));
              } else if (leading_2_bytes["$=="]($$2($nesting4, "BOM_BYTES_UTF_16BE"))) {
                data = data.$byteslice(2, data.$bytesize()).$encode($$2($nesting4, "UTF_8"), $$$2($$$2("::", "Encoding"), "UTF_16BE"));
              } else if (leading_bytes["$=="]($$2($nesting4, "BOM_BYTES_UTF_8"))) {
                data = data.$byteslice(3, data.$bytesize());
                if (data.$encoding()["$=="]($$2($nesting4, "UTF_8"))) {
                } else {
                  data = data.$encode($$2($nesting4, "UTF_8"));
                }
                ;
              } else if ($truthy2(data.$encoding()["$!="]($$2($nesting4, "UTF_8")))) {
                data = data.$encode($$2($nesting4, "UTF_8"));
              }
              ;
              if ($truthy2(trim_end)) {
                return $send2([], "tap", [], ($$12 = function(lines) {
                  var self6 = $$12.$$s || this, $$13;
                  if (lines == null) {
                    lines = nil2;
                  }
                  ;
                  return $send2(data, "each_line", [], ($$13 = function(line) {
                    var self7 = $$13.$$s || this;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    return lines["$<<"](line.$rstrip());
                  }, $$13.$$s = self6, $$13.$$arity = 1, $$13));
                }, $$12.$$s = self5, $$12.$$arity = 1, $$12));
              } else {
                return $send2([], "tap", [], ($$14 = function(lines) {
                  var self6 = $$14.$$s || this, $$15;
                  if (lines == null) {
                    lines = nil2;
                  }
                  ;
                  return $send2(data, "each_line", [], ($$15 = function(line) {
                    var self7 = $$15.$$s || this;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    return lines["$<<"](line.$chomp());
                  }, $$15.$$s = self6, $$15.$$arity = 1, $$15));
                }, $$14.$$s = self5, $$14.$$arity = 1, $$14));
              }
              ;
            }, $Helpers_prepare_source_string$11.$$arity = -2);
            Opal2.def(self4, "$uriish?", $Helpers_uriish$ques$16 = function(str) {
              var $a2, self5 = this;
              return $truthy2($a2 = str["$include?"](":")) ? $$2($nesting4, "UriSniffRx")["$match?"](str) : $a2;
            }, $Helpers_uriish$ques$16.$$arity = 1);
            if ($$2($nesting4, "RUBY_ENGINE")["$=="]("opal")) {
              Opal2.def(self4, "$encode_uri_component", $Helpers_encode_uri_component$17 = function $$encode_uri_component(str) {
                var self5 = this;
                return encodeURIComponent(str).replace(/%20|[!'()*]/g, function(m) {
                  return m === "%20" ? "+" : "%" + m.charCodeAt(0).toString(16);
                });
              }, $Helpers_encode_uri_component$17.$$arity = 1);
            } else {
              nil2;
            }
            ;
            Opal2.def(self4, "$encode_spaces_in_uri", $Helpers_encode_spaces_in_uri$18 = function $$encode_spaces_in_uri(str) {
              var self5 = this;
              if ($truthy2(str["$include?"](" "))) {
                return str.$gsub(" ", "%20");
              } else {
                return str;
              }
            }, $Helpers_encode_spaces_in_uri$18.$$arity = 1);
            Opal2.def(self4, "$rootname", $Helpers_rootname$19 = function $$rootname(filename) {
              var self5 = this, last_dot_idx = nil2;
              if ($truthy2(last_dot_idx = filename.$rindex("."))) {
                if ($truthy2(filename.$index("/", last_dot_idx))) {
                  return filename;
                } else {
                  return filename.$slice(0, last_dot_idx);
                }
              } else {
                return filename;
              }
            }, $Helpers_rootname$19.$$arity = 1);
            Opal2.def(self4, "$basename", $Helpers_basename$20 = function $$basename(filename, drop_ext) {
              var self5 = this;
              if (drop_ext == null) {
                drop_ext = nil2;
              }
              ;
              if ($truthy2(drop_ext)) {
                return $$$2("::", "File").$basename(filename, function() {
                  if (drop_ext["$=="](true)) {
                    return self5.$extname(filename);
                  } else {
                    return drop_ext;
                  }
                  ;
                  return nil2;
                }());
              } else {
                return $$$2("::", "File").$basename(filename);
              }
              ;
            }, $Helpers_basename$20.$$arity = -2);
            Opal2.def(self4, "$extname?", $Helpers_extname$ques$21 = function(path) {
              var $a2, self5 = this, last_dot_idx = nil2;
              return $truthy2($a2 = last_dot_idx = path.$rindex(".")) ? path.$index("/", last_dot_idx)["$!"]() : $a2;
            }, $Helpers_extname$ques$21.$$arity = 1);
            if ($truthy2($$$2($$$2("::", "File"), "ALT_SEPARATOR"))) {
              Opal2.def(self4, "$extname", $Helpers_extname$22 = function $$extname(path, fallback) {
                var $a2, self5 = this, last_dot_idx = nil2;
                if (fallback == null) {
                  fallback = "";
                }
                ;
                if ($truthy2(last_dot_idx = path.$rindex("."))) {
                  if ($truthy2($truthy2($a2 = path.$index("/", last_dot_idx)) ? $a2 : path.$index($$$2($$$2("::", "File"), "ALT_SEPARATOR"), last_dot_idx))) {
                    return fallback;
                  } else {
                    return path.$slice(last_dot_idx, path.$length());
                  }
                } else {
                  return fallback;
                }
                ;
              }, $Helpers_extname$22.$$arity = -2);
            } else {
              Opal2.def(self4, "$extname", $Helpers_extname$23 = function $$extname(path, fallback) {
                var self5 = this, last_dot_idx = nil2;
                if (fallback == null) {
                  fallback = "";
                }
                ;
                if ($truthy2(last_dot_idx = path.$rindex("."))) {
                  if ($truthy2(path.$index("/", last_dot_idx))) {
                    return fallback;
                  } else {
                    return path.$slice(last_dot_idx, path.$length());
                  }
                } else {
                  return fallback;
                }
                ;
              }, $Helpers_extname$23.$$arity = -2);
            }
            ;
            Opal2.def(self4, "$mkdir_p", $Helpers_mkdir_p$24 = function $$mkdir_p(dir) {
              var self5 = this, parent_dir = nil2;
              if ($truthy2($$$2("::", "File")["$directory?"](dir))) {
                return nil2;
              } else {
                if ((parent_dir = $$$2("::", "File").$dirname(dir))["$=="](".")) {
                } else {
                  self5.$mkdir_p(parent_dir);
                }
                ;
                try {
                  return $$$2("::", "Dir").$mkdir(dir);
                } catch ($err) {
                  if (Opal2.rescue($err, [$$$2("::", "SystemCallError")])) {
                    try {
                      if ($truthy2($$$2("::", "File")["$directory?"](dir))) {
                        return nil2;
                      } else {
                        return self5.$raise();
                      }
                    } finally {
                      Opal2.pop_exception();
                    }
                  } else {
                    throw $err;
                  }
                }
                ;
                ;
              }
            }, $Helpers_mkdir_p$24.$$arity = 1);
            Opal2.const_set($nesting4[0], "ROMAN_NUMERALS", $hash22(["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"], { "M": 1e3, "CM": 900, "D": 500, "CD": 400, "C": 100, "XC": 90, "L": 50, "XL": 40, "X": 10, "IX": 9, "V": 5, "IV": 4, "I": 1 }));
            self4.$private_constant("ROMAN_NUMERALS");
            Opal2.def(self4, "$int_to_roman", $Helpers_int_to_roman$25 = function $$int_to_roman(val) {
              var $$26, self5 = this;
              return $send2($$2($nesting4, "ROMAN_NUMERALS"), "map", [], ($$26 = function(l, i) {
                var self6 = $$26.$$s || this, $a2, $b2, repeat = nil2;
                if (l == null) {
                  l = nil2;
                }
                ;
                if (i == null) {
                  i = nil2;
                }
                ;
                $b2 = val.$divmod(i), $a2 = Opal2.to_ary($b2), repeat = $a2[0] == null ? nil2 : $a2[0], val = $a2[1] == null ? nil2 : $a2[1], $b2;
                return $rb_times(l, repeat);
              }, $$26.$$s = self5, $$26.$$arity = 2, $$26)).$join();
            }, $Helpers_int_to_roman$25.$$arity = 1);
            Opal2.def(self4, "$nextval", $Helpers_nextval$27 = function $$nextval(current) {
              var self5 = this, intval = nil2;
              if ($truthy2($$$2("::", "Integer")["$==="](current))) {
                return $rb_plus(current, 1);
              } else if ((intval = current.$to_i()).$to_s()["$=="](current.$to_s())) {
                return $rb_plus(intval, 1);
              } else {
                return current.$succ();
              }
            }, $Helpers_nextval$27.$$arity = 1);
            Opal2.def(self4, "$resolve_class", $Helpers_resolve_class$28 = function $$resolve_class(object) {
              var self5 = this;
              if ($truthy2($$$2("::", "Class")["$==="](object))) {
                return object;
              } else {
                if ($truthy2($$$2("::", "String")["$==="](object))) {
                  return self5.$class_for_name(object);
                } else {
                  return nil2;
                }
                ;
              }
            }, $Helpers_resolve_class$28.$$arity = 1);
            Opal2.def(self4, "$class_for_name", $Helpers_class_for_name$29 = function $$class_for_name(qualified_name) {
              var self5 = this, resolved = nil2;
              try {
                if ($truthy2($$$2("::", "Class")["$==="](resolved = $$$2("::", "Object").$const_get(qualified_name, false)))) {
                } else {
                  self5.$raise();
                }
                ;
                return resolved;
              } catch ($err) {
                if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                  try {
                    return self5.$raise($$$2("::", "NameError"), "Could not resolve class for name: " + qualified_name);
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
            }, $Helpers_class_for_name$29.$$arity = 1);
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["logger"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_le(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $module = Opal2.module, $send2 = Opal2.send, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$include", "$to_h", "$map", "$constants", "$const_get", "$to_s", "$format", "$chr", "$strftime", "$message_as_string", "$===", "$+", "$message", "$class", "$join", "$backtrace", "$inspect", "$attr_reader", "$attr_accessor", "$new", "$key", "$upcase", "$raise", "$add", "$to_proc", "$<=", "$<", "$write", "$call", "$[]", "$now"]);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "Logger");
          var $nesting3 = [self3].concat($parent_nesting2), $Logger$1, $Logger_initialize$4, $Logger_level$eq$5, $Logger_info$6, $Logger_debug$7, $Logger_warn$8, $Logger_error$9, $Logger_fatal$10, $Logger_unknown$11, $Logger_info$ques$12, $Logger_debug$ques$13, $Logger_warn$ques$14, $Logger_error$ques$15, $Logger_fatal$ques$16, $Logger_add$17;
          self3.$$prototype.level = self3.$$prototype.progname = self3.$$prototype.pipe = self3.$$prototype.formatter = nil2;
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Severity");
            var $nesting4 = [self4].concat($parent_nesting3);
            Opal2.const_set($nesting4[0], "DEBUG", 0);
            Opal2.const_set($nesting4[0], "INFO", 1);
            Opal2.const_set($nesting4[0], "WARN", 2);
            Opal2.const_set($nesting4[0], "ERROR", 3);
            Opal2.const_set($nesting4[0], "FATAL", 4);
            Opal2.const_set($nesting4[0], "UNKNOWN", 5);
          })($nesting3[0], $nesting3);
          self3.$include($$2($nesting3, "Severity"));
          Opal2.const_set($nesting3[0], "SEVERITY_LABELS", $send2($$2($nesting3, "Severity").$constants(), "map", [], ($Logger$1 = function(s) {
            var self4 = $Logger$1.$$s || this;
            if (s == null) {
              s = nil2;
            }
            ;
            return [$$2($nesting3, "Severity").$const_get(s), s.$to_s()];
          }, $Logger$1.$$s = self3, $Logger$1.$$arity = 1, $Logger$1)).$to_h());
          (function($base3, $super3, $parent_nesting3) {
            var self4 = $klass2($base3, $super3, "Formatter");
            var $nesting4 = [self4].concat($parent_nesting3), $Formatter_call$2, $Formatter_message_as_string$3;
            Opal2.const_set($nesting4[0], "MESSAGE_FORMAT", "%s, [%s] %5s -- %s: %s\n");
            Opal2.const_set($nesting4[0], "DATE_TIME_FORMAT", "%Y-%m-%dT%H:%M:%S.%6N");
            Opal2.def(self4, "$call", $Formatter_call$2 = function $$call(severity, time, progname, msg) {
              var self5 = this;
              return self5.$format($$2($nesting4, "MESSAGE_FORMAT"), severity.$chr(), time.$strftime($$2($nesting4, "DATE_TIME_FORMAT")), severity, progname, self5.$message_as_string(msg));
            }, $Formatter_call$2.$$arity = 4);
            return (Opal2.def(self4, "$message_as_string", $Formatter_message_as_string$3 = function $$message_as_string(msg) {
              var $a2, self5 = this, $case = nil2;
              return function() {
                $case = msg;
                if ($$$2("::", "String")["$==="]($case)) {
                  return msg;
                } else if ($$$2("::", "Exception")["$==="]($case)) {
                  return $rb_plus("" + msg.$message() + " (" + msg.$class() + ")\n", ($truthy2($a2 = msg.$backtrace()) ? $a2 : []).$join("\n"));
                } else {
                  return msg.$inspect();
                }
              }();
            }, $Formatter_message_as_string$3.$$arity = 1), nil2) && "message_as_string";
          })($nesting3[0], null, $nesting3);
          self3.$attr_reader("level");
          self3.$attr_accessor("progname");
          self3.$attr_accessor("formatter");
          Opal2.def(self3, "$initialize", $Logger_initialize$4 = function $$initialize(pipe) {
            var self4 = this;
            self4.pipe = pipe;
            self4.level = $$2($nesting3, "DEBUG");
            return self4.formatter = $$2($nesting3, "Formatter").$new();
          }, $Logger_initialize$4.$$arity = 1);
          Opal2.def(self3, "$level=", $Logger_level$eq$5 = function(severity) {
            var self4 = this, level = nil2;
            if ($truthy2($$$2("::", "Integer")["$==="](severity))) {
              return self4.level = severity;
            } else if ($truthy2(level = $$2($nesting3, "SEVERITY_LABELS").$key(severity.$to_s().$upcase()))) {
              return self4.level = level;
            } else {
              return self4.$raise($$2($nesting3, "ArgumentError"), "invalid log level: " + severity);
            }
          }, $Logger_level$eq$5.$$arity = 1);
          Opal2.def(self3, "$info", $Logger_info$6 = function $$info(progname) {
            var $iter2 = $Logger_info$6.$$p, block2 = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Logger_info$6.$$p = null;
            if ($iter2)
              $Logger_info$6.$$p = null;
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            return $send2(self4, "add", [$$2($nesting3, "INFO"), nil2, progname], block2.$to_proc());
          }, $Logger_info$6.$$arity = -1);
          Opal2.def(self3, "$debug", $Logger_debug$7 = function $$debug(progname) {
            var $iter2 = $Logger_debug$7.$$p, block2 = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Logger_debug$7.$$p = null;
            if ($iter2)
              $Logger_debug$7.$$p = null;
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            return $send2(self4, "add", [$$2($nesting3, "DEBUG"), nil2, progname], block2.$to_proc());
          }, $Logger_debug$7.$$arity = -1);
          Opal2.def(self3, "$warn", $Logger_warn$8 = function $$warn(progname) {
            var $iter2 = $Logger_warn$8.$$p, block2 = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Logger_warn$8.$$p = null;
            if ($iter2)
              $Logger_warn$8.$$p = null;
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            return $send2(self4, "add", [$$2($nesting3, "WARN"), nil2, progname], block2.$to_proc());
          }, $Logger_warn$8.$$arity = -1);
          Opal2.def(self3, "$error", $Logger_error$9 = function $$error(progname) {
            var $iter2 = $Logger_error$9.$$p, block2 = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Logger_error$9.$$p = null;
            if ($iter2)
              $Logger_error$9.$$p = null;
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            return $send2(self4, "add", [$$2($nesting3, "ERROR"), nil2, progname], block2.$to_proc());
          }, $Logger_error$9.$$arity = -1);
          Opal2.def(self3, "$fatal", $Logger_fatal$10 = function $$fatal(progname) {
            var $iter2 = $Logger_fatal$10.$$p, block2 = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Logger_fatal$10.$$p = null;
            if ($iter2)
              $Logger_fatal$10.$$p = null;
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            return $send2(self4, "add", [$$2($nesting3, "FATAL"), nil2, progname], block2.$to_proc());
          }, $Logger_fatal$10.$$arity = -1);
          Opal2.def(self3, "$unknown", $Logger_unknown$11 = function $$unknown(progname) {
            var $iter2 = $Logger_unknown$11.$$p, block2 = $iter2 || nil2, self4 = this;
            if ($iter2)
              $Logger_unknown$11.$$p = null;
            if ($iter2)
              $Logger_unknown$11.$$p = null;
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            return $send2(self4, "add", [$$2($nesting3, "UNKNOWN"), nil2, progname], block2.$to_proc());
          }, $Logger_unknown$11.$$arity = -1);
          Opal2.def(self3, "$info?", $Logger_info$ques$12 = function() {
            var self4 = this;
            return $rb_le(self4.level, $$2($nesting3, "INFO"));
          }, $Logger_info$ques$12.$$arity = 0);
          Opal2.def(self3, "$debug?", $Logger_debug$ques$13 = function() {
            var self4 = this;
            return $rb_le(self4.level, $$2($nesting3, "DEBUG"));
          }, $Logger_debug$ques$13.$$arity = 0);
          Opal2.def(self3, "$warn?", $Logger_warn$ques$14 = function() {
            var self4 = this;
            return $rb_le(self4.level, $$2($nesting3, "WARN"));
          }, $Logger_warn$ques$14.$$arity = 0);
          Opal2.def(self3, "$error?", $Logger_error$ques$15 = function() {
            var self4 = this;
            return $rb_le(self4.level, $$2($nesting3, "ERROR"));
          }, $Logger_error$ques$15.$$arity = 0);
          Opal2.def(self3, "$fatal?", $Logger_fatal$ques$16 = function() {
            var self4 = this;
            return $rb_le(self4.level, $$2($nesting3, "FATAL"));
          }, $Logger_fatal$ques$16.$$arity = 0);
          return (Opal2.def(self3, "$add", $Logger_add$17 = function $$add(severity, message, progname) {
            var $iter2 = $Logger_add$17.$$p, block2 = $iter2 || nil2, $a2, self4 = this;
            if ($iter2)
              $Logger_add$17.$$p = null;
            if ($iter2)
              $Logger_add$17.$$p = null;
            ;
            if (message == null) {
              message = nil2;
            }
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            if ($truthy2($rb_lt2(severity = $truthy2($a2 = severity) ? $a2 : $$2($nesting3, "UNKNOWN"), self4.level))) {
              return true;
            }
            ;
            progname = $truthy2($a2 = progname) ? $a2 : self4.progname;
            if ($truthy2(message)) {
            } else if (block2 !== nil2) {
              message = Opal2.yieldX(block2, []);
            } else {
              message = progname;
              progname = self4.progname;
            }
            ;
            self4.pipe.$write(self4.formatter.$call($truthy2($a2 = $$2($nesting3, "SEVERITY_LABELS")["$[]"](severity)) ? $a2 : "ANY", $$$2("::", "Time").$now(), progname, message));
            return true;
          }, $Logger_add$17.$$arity = -2), nil2) && "add";
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/logging"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$require", "$attr_reader", "$progname=", "$-", "$new", "$formatter=", "$level=", "$>", "$[]", "$===", "$inspect", "$to_h", "$map", "$constants", "$const_get", "$<<", "$clear", "$empty?", "$max", "$attr_accessor", "$memoize_logger", "$private", "$extend", "$private_class_method", "$logger", "$merge"]);
        self2.$require("logger");
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Logger");
            var $nesting4 = [self4].concat($parent_nesting3), $Logger_initialize$1, $Logger_add$2;
            self4.$$prototype.max_severity = nil2;
            self4.$attr_reader("max_severity");
            Opal2.def(self4, "$initialize", $Logger_initialize$1 = function $$initialize($a2) {
              var $post_args2, args2, $iter2 = $Logger_initialize$1.$$p, $yield = $iter2 || nil2, self5 = this, $writer = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Logger_initialize$1.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              args2 = $post_args2;
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Logger_initialize$1, false), $zuper, $iter2);
              $writer = ["asciidoctor"];
              $send2(self5, "progname=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = [$$2($nesting4, "BasicFormatter").$new()];
              $send2(self5, "formatter=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = [$$2($nesting4, "WARN")];
              $send2(self5, "level=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              ;
            }, $Logger_initialize$1.$$arity = -1);
            Opal2.def(self4, "$add", $Logger_add$2 = function $$add(severity, message, progname) {
              var $a2, $iter2 = $Logger_add$2.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Logger_add$2.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (message == null) {
                message = nil2;
              }
              ;
              if (progname == null) {
                progname = nil2;
              }
              ;
              if ($truthy2($rb_gt2(severity = $truthy2($a2 = severity) ? $a2 : $$2($nesting4, "UNKNOWN"), self5.max_severity = $truthy2($a2 = self5.max_severity) ? $a2 : severity))) {
                self5.max_severity = severity;
              }
              ;
              return $send2(self5, Opal2.find_super_dispatcher(self5, "add", $Logger_add$2, false), $zuper, $iter2);
            }, $Logger_add$2.$$arity = -2);
            (function($base4, $super3, $parent_nesting4) {
              var self5 = $klass2($base4, $super3, "BasicFormatter");
              var $nesting5 = [self5].concat($parent_nesting4), $BasicFormatter_call$3;
              Opal2.const_set($nesting5[0], "SEVERITY_LABEL_SUBSTITUTES", $hash22(["WARN", "FATAL"], { "WARN": "WARNING", "FATAL": "FAILED" }));
              return (Opal2.def(self5, "$call", $BasicFormatter_call$3 = function $$call(severity, _, progname, msg) {
                var $a2, self6 = this;
                return "" + progname + ": " + ($truthy2($a2 = $$2($nesting5, "SEVERITY_LABEL_SUBSTITUTES")["$[]"](severity)) ? $a2 : severity) + ": " + function() {
                  if ($truthy2($$$2("::", "String")["$==="](msg))) {
                    return msg;
                  } else {
                    return msg.$inspect();
                  }
                  ;
                  return nil2;
                }() + $$2($nesting5, "LF");
              }, $BasicFormatter_call$3.$$arity = 4), nil2) && "call";
            })($nesting4[0], $$2($nesting4, "Formatter"), $nesting4);
            return function($base4, $parent_nesting4) {
              var self5 = $module($base4, "AutoFormattingMessage");
              var $nesting5 = [self5].concat($parent_nesting4), $AutoFormattingMessage_inspect$4;
              Opal2.def(self5, "$inspect", $AutoFormattingMessage_inspect$4 = function $$inspect() {
                var self6 = this, sloc = nil2;
                if ($truthy2(sloc = self6["$[]"]("source_location"))) {
                  return "" + sloc + ": " + self6["$[]"]("text");
                } else {
                  return self6["$[]"]("text");
                }
              }, $AutoFormattingMessage_inspect$4.$$arity = 0);
            }($nesting4[0], $nesting4);
          })($nesting3[0], $$$2("::", "Logger"), $nesting3);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "MemoryLogger");
            var $nesting4 = [self4].concat($parent_nesting3), $MemoryLogger$5, $MemoryLogger_initialize$6, $MemoryLogger_add$7, $MemoryLogger_clear$8, $MemoryLogger_empty$ques$9, $MemoryLogger_max_severity$10;
            self4.$$prototype.messages = nil2;
            Opal2.const_set($nesting4[0], "SEVERITY_SYMBOL_BY_VALUE", $send2($$2($nesting4, "Severity").$constants(false), "map", [], ($MemoryLogger$5 = function(c) {
              var self5 = $MemoryLogger$5.$$s || this;
              if (c == null) {
                c = nil2;
              }
              ;
              return [$$2($nesting4, "Severity").$const_get(c), c];
            }, $MemoryLogger$5.$$s = self4, $MemoryLogger$5.$$arity = 1, $MemoryLogger$5)).$to_h());
            self4.$attr_reader("messages");
            Opal2.def(self4, "$initialize", $MemoryLogger_initialize$6 = function $$initialize() {
              var self5 = this, $writer = nil2;
              $writer = [$$2($nesting4, "WARN")];
              $send2(self5, "level=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return self5.messages = [];
            }, $MemoryLogger_initialize$6.$$arity = 0);
            Opal2.def(self4, "$add", $MemoryLogger_add$7 = function $$add(severity, message, progname) {
              var $a2, $iter2 = $MemoryLogger_add$7.$$p, $yield = $iter2 || nil2, self5 = this;
              if ($iter2)
                $MemoryLogger_add$7.$$p = null;
              if (message == null) {
                message = nil2;
              }
              ;
              if (progname == null) {
                progname = nil2;
              }
              ;
              message = $truthy2($a2 = message) ? $a2 : function() {
                if ($yield !== nil2) {
                  return Opal2.yieldX($yield, []);
                } else {
                  return progname;
                }
                ;
                return nil2;
              }();
              self5.messages["$<<"]($hash22(["severity", "message"], { "severity": $$2($nesting4, "SEVERITY_SYMBOL_BY_VALUE")["$[]"]($truthy2($a2 = severity) ? $a2 : $$2($nesting4, "UNKNOWN")), "message": message }));
              return true;
            }, $MemoryLogger_add$7.$$arity = -2);
            Opal2.def(self4, "$clear", $MemoryLogger_clear$8 = function $$clear() {
              var self5 = this;
              return self5.messages.$clear();
            }, $MemoryLogger_clear$8.$$arity = 0);
            Opal2.def(self4, "$empty?", $MemoryLogger_empty$ques$9 = function() {
              var self5 = this;
              return self5.messages["$empty?"]();
            }, $MemoryLogger_empty$ques$9.$$arity = 0);
            return (Opal2.def(self4, "$max_severity", $MemoryLogger_max_severity$10 = function $$max_severity() {
              var $$11, self5 = this;
              if ($truthy2(self5["$empty?"]())) {
                return nil2;
              } else {
                return $send2(self5.messages, "map", [], ($$11 = function(m) {
                  var self6 = $$11.$$s || this;
                  if (m == null) {
                    m = nil2;
                  }
                  ;
                  return $$2($nesting4, "Severity").$const_get(m["$[]"]("severity"));
                }, $$11.$$s = self5, $$11.$$arity = 1, $$11)).$max();
              }
            }, $MemoryLogger_max_severity$10.$$arity = 0), nil2) && "max_severity";
          })($nesting3[0], $$$2("::", "Logger"), $nesting3);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "NullLogger");
            var $nesting4 = [self4].concat($parent_nesting3), $NullLogger_initialize$12, $NullLogger_add$13;
            self4.$$prototype.max_severity = nil2;
            self4.$attr_reader("max_severity");
            Opal2.def(self4, "$initialize", $NullLogger_initialize$12 = function $$initialize() {
              var self5 = this, $writer = nil2;
              $writer = [$$2($nesting4, "WARN")];
              $send2(self5, "level=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $NullLogger_initialize$12.$$arity = 0);
            return (Opal2.def(self4, "$add", $NullLogger_add$13 = function $$add(severity, message, progname) {
              var $a2, self5 = this;
              if (message == null) {
                message = nil2;
              }
              ;
              if (progname == null) {
                progname = nil2;
              }
              ;
              if ($truthy2($rb_gt2(severity = $truthy2($a2 = severity) ? $a2 : $$2($nesting4, "UNKNOWN"), self5.max_severity = $truthy2($a2 = self5.max_severity) ? $a2 : severity))) {
                self5.max_severity = severity;
              }
              ;
              return true;
            }, $NullLogger_add$13.$$arity = -2), nil2) && "add";
          })($nesting3[0], $$$2("::", "Logger"), $nesting3);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "LoggerManager");
            var $nesting4 = [self4].concat($parent_nesting3);
            self4.logger_class = $$2($nesting4, "Logger");
            (function(self5, $parent_nesting4) {
              var $nesting5 = [self5].concat($parent_nesting4), $logger$14, $logger$eq$15, $memoize_logger$16;
              self5.$attr_accessor("logger_class");
              Opal2.def(self5, "$logger", $logger$14 = function $$logger(pipe) {
                var $a2, self6 = this;
                if (self6.logger == null)
                  self6.logger = nil2;
                if (self6.logger_class == null)
                  self6.logger_class = nil2;
                if ($gvars.stderr == null)
                  $gvars.stderr = nil2;
                if (pipe == null) {
                  pipe = $gvars.stderr;
                }
                ;
                self6.$memoize_logger();
                return self6.logger = $truthy2($a2 = self6.logger) ? $a2 : self6.logger_class.$new(pipe);
              }, $logger$14.$$arity = -1);
              Opal2.def(self5, "$logger=", $logger$eq$15 = function(new_logger) {
                var $a2, self6 = this;
                if (self6.logger_class == null)
                  self6.logger_class = nil2;
                if ($gvars.stderr == null)
                  $gvars.stderr = nil2;
                return self6.logger = $truthy2($a2 = new_logger) ? $a2 : self6.logger_class.$new($gvars.stderr);
              }, $logger$eq$15.$$arity = 1);
              self5.$private();
              return (Opal2.def(self5, "$memoize_logger", $memoize_logger$16 = function $$memoize_logger() {
                var self6 = this;
                return function(self7, $parent_nesting5) {
                  var $nesting6 = [self7].concat($parent_nesting5);
                  Opal2.alias(self7, "logger", "logger");
                  return self7.$attr_reader("logger");
                }(Opal2.get_singleton_class(self6), $nesting5);
              }, $memoize_logger$16.$$arity = 0), nil2) && "memoize_logger";
            })(Opal2.get_singleton_class(self4), $nesting4);
          })($nesting3[0], $nesting3);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Logging");
            var $nesting4 = [self4].concat($parent_nesting3), $Logging_included$17, $Logging_logger$18, $Logging_message_with_context$19;
            Opal2.defs(self4, "$included", $Logging_included$17 = function $$included(into) {
              var self5 = this;
              return into.$extend($$2($nesting4, "Logging"));
            }, $Logging_included$17.$$arity = 1);
            self4.$private_class_method("included");
            Opal2.def(self4, "$logger", $Logging_logger$18 = function $$logger() {
              var self5 = this;
              return $$2($nesting4, "LoggerManager").$logger();
            }, $Logging_logger$18.$$arity = 0);
            Opal2.def(self4, "$message_with_context", $Logging_message_with_context$19 = function $$message_with_context(text, context) {
              var self5 = this;
              if (context == null) {
                context = $hash22([], {});
              }
              ;
              return $hash22(["text"], { "text": text }).$merge(context).$extend($$$2($$2($nesting4, "Logger"), "AutoFormattingMessage"));
            }, $Logging_message_with_context$19.$$arity = -2);
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/rx"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $hash = Opal2.hash;
        Opal2.add_stubs(["$==", "$join", "$to_a", "$new", "$empty?", "$escape", "$[]=", "$-"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2), $Asciidoctor$1, $Asciidoctor$2;
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Rx");
            var $nesting4 = [self4].concat($parent_nesting3);
            nil2;
          })($nesting3[0], $nesting3);
          Opal2.const_set($nesting3[0], "AuthorInfoLineRx", new RegExp("^(" + $$2($nesting3, "CG_WORD") + "[" + $$2($nesting3, "CC_WORD") + "\\-'.]*)(?: +(" + $$2($nesting3, "CG_WORD") + "[" + $$2($nesting3, "CC_WORD") + "\\-'.]*))?(?: +(" + $$2($nesting3, "CG_WORD") + "[" + $$2($nesting3, "CC_WORD") + "\\-'.]*))?(?: +<([^>]+)>)?$"));
          Opal2.const_set($nesting3[0], "AuthorDelimiterRx", /;(?: |$)/);
          Opal2.const_set($nesting3[0], "RevisionInfoLineRx", new RegExp("^(?:[^\\d{]*(" + $$2($nesting3, "CC_ANY") + "*?),)? *(?!:)(" + $$2($nesting3, "CC_ANY") + "*?)(?: *(?!^),?: *(" + $$2($nesting3, "CC_ANY") + "*))?$"));
          Opal2.const_set($nesting3[0], "ManpageTitleVolnumRx", new RegExp("^(" + $$2($nesting3, "CC_ANY") + "+?) *\\( *(" + $$2($nesting3, "CC_ANY") + "+?) *\\)$"));
          Opal2.const_set($nesting3[0], "ManpageNamePurposeRx", new RegExp("^(" + $$2($nesting3, "CC_ANY") + "+?) +- +(" + $$2($nesting3, "CC_ANY") + "+)$"));
          Opal2.const_set($nesting3[0], "ConditionalDirectiveRx", new RegExp("^(\\\\)?(ifdef|ifndef|ifeval|endif)::(\\S*?(?:([,+])\\S*?)?)\\[(" + $$2($nesting3, "CC_ANY") + "+)?\\]$"));
          Opal2.const_set($nesting3[0], "EvalExpressionRx", new RegExp("^(" + $$2($nesting3, "CC_ANY") + "+?) *([=!><]=|[><]) *(" + $$2($nesting3, "CC_ANY") + "+)$"));
          Opal2.const_set($nesting3[0], "IncludeDirectiveRx", new RegExp("^(\\\\)?include::([^\\[][^\\[]*)\\[(" + $$2($nesting3, "CC_ANY") + "+)?\\]$"));
          Opal2.const_set($nesting3[0], "TagDirectiveRx", /\b(?:tag|(e)nd)::(\S+?)\[\](?=$|[ \r])/m);
          Opal2.const_set($nesting3[0], "AttributeEntryRx", new RegExp("^:(!?" + $$2($nesting3, "CG_WORD") + "[^:]*):(?:[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*))?$"));
          Opal2.const_set($nesting3[0], "InvalidAttributeNameCharsRx", new RegExp("[^" + $$2($nesting3, "CC_WORD") + "-]"));
          if ($$2($nesting3, "RUBY_ENGINE")["$=="]("opal")) {
            Opal2.const_set($nesting3[0], "AttributeEntryPassMacroRx", new RegExp("^pass:([a-z]+(?:,[a-z-]+)*)?\\[(" + $$2($nesting3, "CC_ALL") + "*)\\]$"));
          } else {
            nil2;
          }
          ;
          Opal2.const_set($nesting3[0], "AttributeReferenceRx", new RegExp("(\\\\)?\\{(" + $$2($nesting3, "CG_WORD") + "[" + $$2($nesting3, "CC_WORD") + "-]*|(set|counter2?):" + $$2($nesting3, "CC_ANY") + "+?)(\\\\)?\\}"));
          Opal2.const_set($nesting3[0], "BlockAnchorRx", new RegExp("^\\[\\[(?:|([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)(?:, *(" + $$2($nesting3, "CC_ANY") + "+))?)\\]\\]$"));
          Opal2.const_set($nesting3[0], "BlockAttributeListRx", new RegExp("^\\[(|[" + $$2($nesting3, "CC_WORD") + `.#%{,"']` + $$2($nesting3, "CC_ANY") + "*)\\]$"));
          Opal2.const_set($nesting3[0], "BlockAttributeLineRx", new RegExp("^\\[(?:|[" + $$2($nesting3, "CC_WORD") + `.#%{,"']` + $$2($nesting3, "CC_ANY") + "*|\\[(?:|[" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*(?:, *" + $$2($nesting3, "CC_ANY") + "+)?)\\])\\]$"));
          Opal2.const_set($nesting3[0], "BlockTitleRx", new RegExp("^\\.(\\.?[^ \\t.]" + $$2($nesting3, "CC_ANY") + "*)$"));
          Opal2.const_set($nesting3[0], "AdmonitionParagraphRx", new RegExp("^(" + $$2($nesting3, "ADMONITION_STYLES").$to_a().$join("|") + "):[ \\t]+"));
          Opal2.const_set($nesting3[0], "LiteralParagraphRx", new RegExp("^([ \\t]+" + $$2($nesting3, "CC_ANY") + "*)$"));
          Opal2.const_set($nesting3[0], "AtxSectionTitleRx", new RegExp("^(=={0,5})[ \\t]+(" + $$2($nesting3, "CC_ANY") + "+?)(?:[ \\t]+\\1)?$"));
          Opal2.const_set($nesting3[0], "ExtAtxSectionTitleRx", new RegExp("^(=={0,5}|#\\#{0,5})[ \\t]+(" + $$2($nesting3, "CC_ANY") + "+?)(?:[ \\t]+\\1)?$"));
          Opal2.const_set($nesting3[0], "SetextSectionTitleRx", new RegExp("^((?!\\.)" + $$2($nesting3, "CC_ANY") + "*?" + $$2($nesting3, "CG_ALNUM") + $$2($nesting3, "CC_ANY") + "*)$"));
          Opal2.const_set($nesting3[0], "InlineSectionAnchorRx", new RegExp(" (\\\\)?\\[\\[([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)(?:, *(" + $$2($nesting3, "CC_ANY") + "+))?\\]\\]$"));
          Opal2.const_set($nesting3[0], "InvalidSectionIdCharsRx", new RegExp("<[^>]+>|&(?:[a-z][a-z]+\\d{0,2}|#\\d\\d\\d{0,4}|#x[\\da-f][\\da-f][\\da-f]{0,3});|[^ " + $$2($nesting3, "CC_WORD") + "\\-.]+?"));
          Opal2.const_set($nesting3[0], "SectionLevelStyleRx", /^sect\d$/);
          Opal2.const_set($nesting3[0], "AnyListRx", new RegExp("^(?:[ \\t]*(?:-|\\*\\**|\\.\\.*|\\u2022|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))[ \\t]|(?!//[^/])[ \\t]*[^ \\t]" + $$2($nesting3, "CC_ANY") + "*?(?::::{0,2}|;;)(?:$|[ \\t])|<(?:\\d+|\\.)>[ \\t])"));
          Opal2.const_set($nesting3[0], "UnorderedListRx", new RegExp("^[ \\t]*(-|\\*\\**|\\u2022)[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$"));
          Opal2.const_set($nesting3[0], "OrderedListRx", new RegExp("^[ \\t]*(\\.\\.*|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$"));
          Opal2.const_set($nesting3[0], "OrderedListMarkerRxMap", $hash22(["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"], { "arabic": /\d+\./, "loweralpha": /[a-z]\./, "lowerroman": /[ivx]+\)/, "upperalpha": /[A-Z]\./, "upperroman": /[IVX]+\)/ }));
          Opal2.const_set($nesting3[0], "DescriptionListRx", new RegExp("^(?!//[^/])[ \\t]*([^ \\t]" + $$2($nesting3, "CC_ANY") + "*?)(:::{0,2}|;;)(?:$|[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$)"));
          Opal2.const_set($nesting3[0], "DescriptionListSiblingRx", $hash22(["::", ":::", "::::", ";;"], { "::": new RegExp("^(?!//[^/])[ \\t]*([^ \\t]" + $$2($nesting3, "CC_ANY") + "*?[^:]|[^ \\t:])(::)(?:$|[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$)"), ":::": new RegExp("^(?!//[^/])[ \\t]*([^ \\t]" + $$2($nesting3, "CC_ANY") + "*?[^:]|[^ \\t:])(:::)(?:$|[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$)"), "::::": new RegExp("^(?!//[^/])[ \\t]*([^ \\t]" + $$2($nesting3, "CC_ANY") + "*?[^:]|[^ \\t:])(::::)(?:$|[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$)"), ";;": new RegExp("^(?!//[^/])[ \\t]*([^ \\t]" + $$2($nesting3, "CC_ANY") + "*?)(;;)(?:$|[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$)") }));
          Opal2.const_set($nesting3[0], "CalloutListRx", new RegExp("^<(\\d+|\\.)>[ \\t]+(" + $$2($nesting3, "CC_ANY") + "*)$"));
          Opal2.const_set($nesting3[0], "CalloutExtractRx", /((?:\/\/|#|--|;;) ?)?(\\)?<!?(|--)(\d+|\.)\3>(?=(?: ?\\?<!?\3(?:\d+|\.)\3>)*$)/);
          Opal2.const_set($nesting3[0], "CalloutExtractRxt", "(\\\\)?<()(\\d+|\\.)>(?=(?: ?\\\\?<(?:\\d+|\\.)>)*$)");
          Opal2.const_set($nesting3[0], "CalloutExtractRxMap", $send2($$$2("::", "Hash"), "new", [], ($Asciidoctor$1 = function(h, k) {
            var self4 = $Asciidoctor$1.$$s || this, $writer = nil2;
            if (h == null) {
              h = nil2;
            }
            ;
            if (k == null) {
              k = nil2;
            }
            ;
            $writer = [k, new RegExp("(" + function() {
              if ($truthy2(k["$empty?"]())) {
                return "";
              } else {
                return "" + $$$2("::", "Regexp").$escape(k) + " ?";
              }
              ;
              return nil2;
            }() + ")?" + $$2($nesting3, "CalloutExtractRxt"))];
            $send2(h, "[]=", Opal2.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $Asciidoctor$1.$$s = self3, $Asciidoctor$1.$$arity = 2, $Asciidoctor$1)));
          Opal2.const_set($nesting3[0], "CalloutScanRx", new RegExp("\\\\?<!?(|--)(\\d+|\\.)\\1>(?=(?: ?\\\\?<!?\\1(?:\\d+|\\.)\\1>)*" + $$2($nesting3, "CC_EOL") + ")"));
          Opal2.const_set($nesting3[0], "CalloutSourceRx", new RegExp("((?://|#|--|;;) ?)?(\\\\)?&lt;!?(|--)(\\d+|\\.)\\3&gt;(?=(?: ?\\\\?&lt;!?\\3(?:\\d+|\\.)\\3&gt;)*" + $$2($nesting3, "CC_EOL") + ")"));
          Opal2.const_set($nesting3[0], "CalloutSourceRxt", "(\\\\)?&lt;()(\\d+|\\.)&gt;(?=(?: ?\\\\?&lt;(?:\\d+|\\.)&gt;)*" + $$2($nesting3, "CC_EOL") + ")");
          Opal2.const_set($nesting3[0], "CalloutSourceRxMap", $send2($$$2("::", "Hash"), "new", [], ($Asciidoctor$2 = function(h, k) {
            var self4 = $Asciidoctor$2.$$s || this, $writer = nil2;
            if (h == null) {
              h = nil2;
            }
            ;
            if (k == null) {
              k = nil2;
            }
            ;
            $writer = [k, new RegExp("(" + function() {
              if ($truthy2(k["$empty?"]())) {
                return "";
              } else {
                return "" + $$$2("::", "Regexp").$escape(k) + " ?";
              }
              ;
              return nil2;
            }() + ")?" + $$2($nesting3, "CalloutSourceRxt"))];
            $send2(h, "[]=", Opal2.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $Asciidoctor$2.$$s = self3, $Asciidoctor$2.$$arity = 2, $Asciidoctor$2)));
          Opal2.const_set($nesting3[0], "ListRxMap", $hash22(["ulist", "olist", "dlist", "colist"], { "ulist": $$2($nesting3, "UnorderedListRx"), "olist": $$2($nesting3, "OrderedListRx"), "dlist": $$2($nesting3, "DescriptionListRx"), "colist": $$2($nesting3, "CalloutListRx") }));
          Opal2.const_set($nesting3[0], "ColumnSpecRx", /^(?:(\d+)\*)?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?(\d+%?|~)?([a-z])?$/);
          Opal2.const_set($nesting3[0], "CellSpecStartRx", /^[ \t]*(?:(\d+(?:\.\d*)?|(?:\d*\.)?\d+)([*+]))?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?([a-z])?$/);
          Opal2.const_set($nesting3[0], "CellSpecEndRx", /[ \t]+(?:(\d+(?:\.\d*)?|(?:\d*\.)?\d+)([*+]))?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?([a-z])?$/);
          Opal2.const_set($nesting3[0], "CustomBlockMacroRx", new RegExp("^(" + $$2($nesting3, "CG_WORD") + "[" + $$2($nesting3, "CC_WORD") + "-]*)::(|\\S|\\S" + $$2($nesting3, "CC_ANY") + "*?\\S)\\[(" + $$2($nesting3, "CC_ANY") + "+)?\\]$"));
          Opal2.const_set($nesting3[0], "BlockMediaMacroRx", new RegExp("^(image|video|audio)::(\\S|\\S" + $$2($nesting3, "CC_ANY") + "*?\\S)\\[(" + $$2($nesting3, "CC_ANY") + "+)?\\]$"));
          Opal2.const_set($nesting3[0], "BlockTocMacroRx", new RegExp("^toc::\\[(" + $$2($nesting3, "CC_ANY") + "+)?\\]$"));
          Opal2.const_set($nesting3[0], "InlineAnchorRx", new RegExp("(\\\\)?(?:\\[\\[([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)(?:, *(" + $$2($nesting3, "CC_ANY") + "+?))?\\]\\]|anchor:([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)\\[(?:\\]|(" + $$2($nesting3, "CC_ANY") + "*?[^\\\\])\\]))"));
          Opal2.const_set($nesting3[0], "InlineAnchorScanRx", new RegExp("(?:^|[^\\\\\\[])\\[\\[([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)(?:, *(" + $$2($nesting3, "CC_ANY") + "+?))?\\]\\]|(?:^|[^\\\\])anchor:([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)\\[(?:\\]|(" + $$2($nesting3, "CC_ANY") + "*?[^\\\\])\\])"));
          Opal2.const_set($nesting3[0], "LeadingInlineAnchorRx", new RegExp("^\\[\\[([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)(?:, *(" + $$2($nesting3, "CC_ANY") + "+?))?\\]\\]"));
          Opal2.const_set($nesting3[0], "InlineBiblioAnchorRx", new RegExp("^\\[\\[\\[([" + $$2($nesting3, "CC_ALPHA") + "_:][" + $$2($nesting3, "CC_WORD") + "\\-:.]*)(?:, *(" + $$2($nesting3, "CC_ANY") + "+?))?\\]\\]\\]"));
          Opal2.const_set($nesting3[0], "InlineEmailRx", new RegExp("([\\\\>:/])?" + $$2($nesting3, "CG_WORD") + "(?:&amp;|[" + $$2($nesting3, "CC_WORD") + "\\-.%+])*@" + $$2($nesting3, "CG_ALNUM") + "[" + $$2($nesting3, "CC_ALNUM") + "_\\-.]*\\.[a-zA-Z]{2,5}\\b"));
          Opal2.const_set($nesting3[0], "InlineFootnoteMacroRx", new RegExp("\\\\?footnote(?:(ref):|:([" + $$2($nesting3, "CC_WORD") + "-]+)?)\\[(?:|(" + $$2($nesting3, "CC_ALL") + "*?[^\\\\]))\\](?!</a>)", "m"));
          Opal2.const_set($nesting3[0], "InlineImageMacroRx", new RegExp("\\\\?i(?:mage|con):([^:\\s\\[](?:[^\\n\\[]*[^\\s\\[])?)\\[(|" + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\]", "m"));
          Opal2.const_set($nesting3[0], "InlineIndextermMacroRx", new RegExp("\\\\?(?:(indexterm2?):\\[(" + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\]|\\(\\((" + $$2($nesting3, "CC_ALL") + "+?)\\)\\)(?!\\)))", "m"));
          Opal2.const_set($nesting3[0], "InlineKbdBtnMacroRx", new RegExp("(\\\\)?(kbd|btn):\\[(" + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\]", "m"));
          Opal2.const_set($nesting3[0], "InlineLinkRx", new RegExp("(^|link:|" + $$2($nesting3, "CG_BLANK") + `|&lt;|[>\\(\\)\\[\\];"'])(\\\\?(?:https?|file|ftp|irc)://[^\\s\\[\\]<]*([^\\s.,\\[\\]<]))(?:\\[(|` + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\])?", "m"));
          Opal2.const_set($nesting3[0], "InlineLinkMacroRx", new RegExp("\\\\?(?:link|(mailto)):(|[^:\\s\\[][^\\s\\[]*)\\[(|" + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\]", "m"));
          Opal2.const_set($nesting3[0], "MacroNameRx", new RegExp("^" + $$2($nesting3, "CG_WORD") + "[" + $$2($nesting3, "CC_WORD") + "-]*$"));
          Opal2.const_set($nesting3[0], "InlineStemMacroRx", new RegExp("\\\\?(stem|(?:latex|ascii)math):([a-z]+(?:,[a-z-]+)*)?\\[(" + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\]", "m"));
          Opal2.const_set($nesting3[0], "InlineMenuMacroRx", new RegExp("\\\\?menu:(" + $$2($nesting3, "CG_WORD") + "|[" + $$2($nesting3, "CC_WORD") + "&][^\\n\\[]*[^\\s\\[])\\[ *(?:|(" + $$2($nesting3, "CC_ALL") + "*?[^\\\\]))\\]", "m"));
          Opal2.const_set($nesting3[0], "InlineMenuRx", new RegExp('\\\\?"([' + $$2($nesting3, "CC_WORD") + '&][^"]*?[ \\n]+&gt;[ \\n]+[^"]*)"'));
          Opal2.const_set($nesting3[0], "InlinePassRx", $hash(false, ["+", "`", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:])(?:\\[([^\\]]+)\\])?(\\\\?(\\+|`)(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)\\4)(?!" + $$2($nesting3, "CG_WORD") + ")", "m")], true, ["`", nil2, new RegExp("(^|[^`" + $$2($nesting3, "CC_WORD") + "])(?:\\[([^\\]]+)\\])?(\\\\?(`)([^`\\s]|[^`\\s]" + $$2($nesting3, "CC_ALL") + "*?\\S)\\4)(?![`" + $$2($nesting3, "CC_WORD") + "])", "m")]));
          Opal2.const_set($nesting3[0], "SinglePlusInlinePassRx", new RegExp("^(\\\\)?\\+(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)\\+$", "m"));
          Opal2.const_set($nesting3[0], "InlinePassMacroRx", new RegExp("(?:(?:(\\\\?)\\[([^\\]]+)\\])?(\\\\{0,2})(\\+\\+\\+?|\\$\\$)(" + $$2($nesting3, "CC_ALL") + "*?)\\4|(\\\\?)pass:([a-z]+(?:,[a-z-]+)*)?\\[(|" + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\])", "m"));
          Opal2.const_set($nesting3[0], "InlineXrefMacroRx", new RegExp("\\\\?(?:&lt;&lt;([" + $$2($nesting3, "CC_WORD") + "#/.:{]" + $$2($nesting3, "CC_ALL") + "*?)&gt;&gt;|xref:([" + $$2($nesting3, "CC_WORD") + "#/.:{]" + $$2($nesting3, "CC_ALL") + "*?)\\[(?:\\]|(" + $$2($nesting3, "CC_ALL") + "*?[^\\\\])\\]))", "m"));
          if ($$2($nesting3, "RUBY_ENGINE")["$=="]("opal")) {
            Opal2.const_set($nesting3[0], "HardLineBreakRx", new RegExp("^(" + $$2($nesting3, "CC_ANY") + "*) \\+$", "m"));
          } else {
            nil2;
          }
          ;
          Opal2.const_set($nesting3[0], "MarkdownThematicBreakRx", /^ {0,3}([-*_])( *)\1\2\1$/);
          Opal2.const_set($nesting3[0], "ExtLayoutBreakRx", /^(?:'{3,}|<{3,}|([-*_])( *)\1\2\1)$/);
          Opal2.const_set($nesting3[0], "BlankLineRx", /\n{2,}/);
          Opal2.const_set($nesting3[0], "EscapedSpaceRx", /\\([ \t\n])/);
          Opal2.const_set($nesting3[0], "ReplaceableTextRx", /[&']|--|\.\.\.|\([CRT]M?\)/);
          Opal2.const_set($nesting3[0], "SpaceDelimiterRx", /([^\\])[ \t\n]+/);
          Opal2.const_set($nesting3[0], "SubModifierSniffRx", /[+-]/);
          Opal2.const_set($nesting3[0], "TrailingDigitsRx", /\d+$/);
          Opal2.const_set($nesting3[0], "UriSniffRx", new RegExp("^" + $$2($nesting3, "CG_ALPHA") + "[" + $$2($nesting3, "CC_ALNUM") + ".+-]+:/{0,2}"));
          Opal2.const_set($nesting3[0], "XmlSanitizeRx", /<[^>]+>/);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/substitutors"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        function $rb_times(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $hash22 = Opal2.hash2, $hash = Opal2.hash, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$freeze", "$+", "$keys", "$empty?", "$!", "$===", "$[]", "$join", "$include?", "$extract_passthroughs", "$each", "$sub_specialchars", "$sub_quotes", "$sub_attributes", "$sub_replacements", "$sub_macros", "$highlight_source", "$sub_callouts", "$sub_post_replacements", "$warn", "$logger", "$restore_passthroughs", "$clear", "$split", "$apply_subs", "$==", "$gsub", "$match?", "$compat_mode", "$convert_quoted_text", "$attributes", "$shift", "$store_attribute", "$!=", "$attribute_undefined", "$counter", "$key?", "$downcase", "$attribute_missing", "$info", "$squeeze", "$delete", "$reject", "$start_with?", "$do_replacement", "$extensions", "$inline_macros?", "$inline_macros", "$regexp", "$instance", "$slice", "$length", "$names", "$config", "$merge", "$[]=", "$-", "$normalize_text", "$parse_attributes", "$process_method", "$expand_subs", "$text", "$text=", "$convert", "$class", "$strip", "$>", "$index", "$min", "$compact", "$end_with?", "$map", "$chop", "$new", "$pop", "$rstrip", "$register", "$tr", "$basename", "$parse", "$lstrip", "$split_simple_csv", "$partition", "$extract_attributes_from_text", "$sub", "$encode_uri_component", "$style", "$extname?", "$rindex", "$info?", "$catalog", "$fetch", "$outfilesuffix", "$natural_xrefs", "$resolve_id", "$find", "$footnotes", "$id", "$<", "$size", "$<<", "$attr?", "$attr", "$to_s", "$read_next_id", "$callouts", "$syntax_highlighter", "$highlight?", "$sub_source", "$extract_callouts", "$name", "$to_sym", "$to_i", "$resolve_lines_to_highlight", "$highlight", "$nil_or_empty?", "$restore_callouts", "$count", "$to_a", "$|", "$sort", "$*", "$parse_quoted_text_attributes", "$resolve_pass_subs", "$extract_inner_passthrough", "$basebackend?", "$error", "$chr", "$drop", "$&", "$resolve_subs", "$resolve_block_subs", "$parse_into", "$private", "$=~", "$shorthand_property_syntax", "$each_char"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Substitutors");
            var $nesting4 = [self4].concat($parent_nesting3), $Substitutors_apply_subs$1, $Substitutors_apply_normal_subs$3, $Substitutors_apply_header_subs$4, $Substitutors_apply_reftext_subs$5, $Substitutors_sub_specialchars$6, $Substitutors_sub_quotes$7, $Substitutors_sub_attributes$10, $Substitutors_sub_replacements$16, $Substitutors_sub_macros$19, $Substitutors_sub_post_replacements$42, $Substitutors_sub_source$45, $Substitutors_sub_callouts$46, $Substitutors_highlight_source$48, $Substitutors_resolve_lines_to_highlight$49, $Substitutors_extract_passthroughs$52, $Substitutors_restore_passthroughs$56, $Substitutors_resolve_subs$58, $Substitutors_resolve_block_subs$60, $Substitutors_resolve_pass_subs$61, $Substitutors_expand_subs$62, $Substitutors_commit_subs$64, $Substitutors_parse_attributes$65, $Substitutors_extract_attributes_from_text$66, $Substitutors_extract_callouts$67, $Substitutors_restore_callouts$70, $Substitutors_extract_inner_passthrough$73, $Substitutors_convert_quoted_text$74, $Substitutors_do_replacement$75, $Substitutors_parse_quoted_text_attributes$76, $Substitutors_normalize_text$77, $Substitutors_split_simple_csv$78;
            Opal2.const_set($nesting4[0], "SpecialCharsRx", /[<&>]/);
            Opal2.const_set($nesting4[0], "SpecialCharsTr", $hash22([">", "<", "&"], { ">": "&gt;", "<": "&lt;", "&": "&amp;" }));
            Opal2.const_set($nesting4[0], "QuotedTextSniffRx", $hash(false, /[*_`#^~]/, true, /[*'_+#^~]/));
            Opal2.const_set($nesting4[0], "BASIC_SUBS", ["specialcharacters"]).$freeze();
            Opal2.const_set($nesting4[0], "HEADER_SUBS", ["specialcharacters", "attributes"]).$freeze();
            Opal2.const_set($nesting4[0], "NO_SUBS", []).$freeze();
            Opal2.const_set($nesting4[0], "NORMAL_SUBS", ["specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"]).$freeze();
            Opal2.const_set($nesting4[0], "REFTEXT_SUBS", ["specialcharacters", "quotes", "replacements"]).$freeze();
            Opal2.const_set($nesting4[0], "VERBATIM_SUBS", ["specialcharacters", "callouts"]).$freeze();
            Opal2.const_set($nesting4[0], "SUB_GROUPS", $hash22(["none", "normal", "verbatim", "specialchars"], { "none": $$2($nesting4, "NO_SUBS"), "normal": $$2($nesting4, "NORMAL_SUBS"), "verbatim": $$2($nesting4, "VERBATIM_SUBS"), "specialchars": $$2($nesting4, "BASIC_SUBS") }));
            Opal2.const_set($nesting4[0], "SUB_HINTS", $hash22(["a", "m", "n", "p", "q", "r", "c", "v"], { "a": "attributes", "m": "macros", "n": "normal", "p": "post_replacements", "q": "quotes", "r": "replacements", "c": "specialcharacters", "v": "verbatim" }));
            Opal2.const_set($nesting4[0], "SUB_OPTIONS", $hash22(["block", "inline"], { "block": $rb_plus($rb_plus($$2($nesting4, "SUB_GROUPS").$keys(), $$2($nesting4, "NORMAL_SUBS")), ["callouts"]), "inline": $rb_plus($$2($nesting4, "SUB_GROUPS").$keys(), $$2($nesting4, "NORMAL_SUBS")) }));
            Opal2.const_set($nesting4[0], "CAN", "");
            Opal2.const_set($nesting4[0], "DEL", "\x7F");
            Opal2.const_set($nesting4[0], "PASS_START", "\x96");
            Opal2.const_set($nesting4[0], "PASS_END", "\x97");
            Opal2.const_set($nesting4[0], "PassSlotRx", new RegExp("" + $$2($nesting4, "PASS_START") + "(\\d+)" + $$2($nesting4, "PASS_END")));
            Opal2.const_set($nesting4[0], "HighlightedPassSlotRx", new RegExp("<span\\b[^>]*>" + $$2($nesting4, "PASS_START") + "</span>[^\\d]*(\\d+)[^\\d]*<span\\b[^>]*>" + $$2($nesting4, "PASS_END") + "</span>"));
            Opal2.const_set($nesting4[0], "RS", "\\");
            Opal2.const_set($nesting4[0], "R_SB", "]");
            Opal2.const_set($nesting4[0], "ESC_R_SB", "\\]");
            Opal2.const_set($nesting4[0], "PLUS", "+");
            Opal2.def(self4, "$apply_subs", $Substitutors_apply_subs$1 = function $$apply_subs(text, subs) {
              var $a2, $$22, self5 = this, is_multiline = nil2, passthrus = nil2, clear_passthrus = nil2;
              if (self5.passthroughs == null)
                self5.passthroughs = nil2;
              if (self5.passthroughs_locked == null)
                self5.passthroughs_locked = nil2;
              if (subs == null) {
                subs = $$2($nesting4, "NORMAL_SUBS");
              }
              ;
              if ($truthy2($truthy2($a2 = text["$empty?"]()) ? $a2 : subs["$!"]())) {
                return text;
              }
              ;
              if ($truthy2(is_multiline = $$$2("::", "Array")["$==="](text))) {
                text = function() {
                  if ($truthy2(text["$[]"](1))) {
                    return text.$join($$2($nesting4, "LF"));
                  } else {
                    return text["$[]"](0);
                  }
                  ;
                  return nil2;
                }();
              }
              ;
              if ($truthy2(subs["$include?"]("macros"))) {
                text = self5.$extract_passthroughs(text);
                if ($truthy2(self5.passthroughs["$empty?"]())) {
                } else {
                  passthrus = self5.passthroughs;
                  self5.passthroughs_locked = $truthy2($a2 = self5.passthroughs_locked) ? $a2 : clear_passthrus = true;
                }
                ;
              }
              ;
              $send2(subs, "each", [], ($$22 = function(type) {
                var self6 = $$22.$$s || this, $case = nil2;
                if (type == null) {
                  type = nil2;
                }
                ;
                return function() {
                  $case = type;
                  if ("specialcharacters"["$==="]($case)) {
                    return text = self6.$sub_specialchars(text);
                  } else if ("quotes"["$==="]($case)) {
                    return text = self6.$sub_quotes(text);
                  } else if ("attributes"["$==="]($case)) {
                    if ($truthy2(text["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                      return text = self6.$sub_attributes(text);
                    } else {
                      return nil2;
                    }
                  } else if ("replacements"["$==="]($case)) {
                    return text = self6.$sub_replacements(text);
                  } else if ("macros"["$==="]($case)) {
                    return text = self6.$sub_macros(text);
                  } else if ("highlight"["$==="]($case)) {
                    return text = self6.$highlight_source(text, subs["$include?"]("callouts"));
                  } else if ("callouts"["$==="]($case)) {
                    if ($truthy2(subs["$include?"]("highlight"))) {
                      return nil2;
                    } else {
                      return text = self6.$sub_callouts(text);
                    }
                  } else if ("post_replacements"["$==="]($case)) {
                    return text = self6.$sub_post_replacements(text);
                  } else {
                    return self6.$logger().$warn("unknown substitution type " + type);
                  }
                }();
              }, $$22.$$s = self5, $$22.$$arity = 1, $$22));
              if ($truthy2(passthrus)) {
                text = self5.$restore_passthroughs(text);
                if ($truthy2(clear_passthrus)) {
                  passthrus.$clear();
                  self5.passthroughs_locked = nil2;
                }
                ;
              }
              ;
              if ($truthy2(is_multiline)) {
                return text.$split($$2($nesting4, "LF"), -1);
              } else {
                return text;
              }
              ;
            }, $Substitutors_apply_subs$1.$$arity = -2);
            Opal2.def(self4, "$apply_normal_subs", $Substitutors_apply_normal_subs$3 = function $$apply_normal_subs(text) {
              var self5 = this;
              return self5.$apply_subs(text, $$2($nesting4, "NORMAL_SUBS"));
            }, $Substitutors_apply_normal_subs$3.$$arity = 1);
            Opal2.def(self4, "$apply_header_subs", $Substitutors_apply_header_subs$4 = function $$apply_header_subs(text) {
              var self5 = this;
              return self5.$apply_subs(text, $$2($nesting4, "HEADER_SUBS"));
            }, $Substitutors_apply_header_subs$4.$$arity = 1);
            Opal2.alias(self4, "apply_title_subs", "apply_subs");
            Opal2.def(self4, "$apply_reftext_subs", $Substitutors_apply_reftext_subs$5 = function $$apply_reftext_subs(text) {
              var self5 = this;
              return self5.$apply_subs(text, $$2($nesting4, "REFTEXT_SUBS"));
            }, $Substitutors_apply_reftext_subs$5.$$arity = 1);
            if ($$2($nesting4, "RUBY_ENGINE")["$=="]("opal")) {
              Opal2.def(self4, "$sub_specialchars", $Substitutors_sub_specialchars$6 = function $$sub_specialchars(text) {
                var $a2, $b2, self5 = this;
                if ($truthy2($truthy2($a2 = $truthy2($b2 = text["$include?"](">")) ? $b2 : text["$include?"]("&")) ? $a2 : text["$include?"]("<"))) {
                  return text.$gsub($$2($nesting4, "SpecialCharsRx"), $$2($nesting4, "SpecialCharsTr"));
                } else {
                  return text;
                }
              }, $Substitutors_sub_specialchars$6.$$arity = 1);
            } else {
              nil2;
            }
            ;
            Opal2.alias(self4, "sub_specialcharacters", "sub_specialchars");
            Opal2.def(self4, "$sub_quotes", $Substitutors_sub_quotes$7 = function $$sub_quotes(text) {
              var $$8, self5 = this, compat = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if ($truthy2($$2($nesting4, "QuotedTextSniffRx")["$[]"](compat = self5.document.$compat_mode())["$match?"](text))) {
                $send2($$2($nesting4, "QUOTE_SUBS")["$[]"](compat), "each", [], ($$8 = function(type, scope, pattern) {
                  var self6 = $$8.$$s || this, $$92;
                  if (type == null) {
                    type = nil2;
                  }
                  ;
                  if (scope == null) {
                    scope = nil2;
                  }
                  ;
                  if (pattern == null) {
                    pattern = nil2;
                  }
                  ;
                  return text = $send2(text, "gsub", [pattern], ($$92 = function() {
                    var self7 = $$92.$$s || this;
                    if ($gvars["~"] == null)
                      $gvars["~"] = nil2;
                    return self7.$convert_quoted_text($gvars["~"], type, scope);
                  }, $$92.$$s = self6, $$92.$$arity = 0, $$92));
                }, $$8.$$s = self5, $$8.$$arity = 3, $$8));
              }
              ;
              return text;
            }, $Substitutors_sub_quotes$7.$$arity = 1);
            Opal2.def(self4, "$sub_attributes", $Substitutors_sub_attributes$10 = function $$sub_attributes(text, opts) {
              var $$11, $$13, $$14, $$15, self5 = this, doc_attrs = nil2, drop = nil2, drop_line = nil2, drop_line_severity = nil2, drop_empty_line = nil2, attribute_undefined = nil2, attribute_missing = nil2, lines = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              doc_attrs = self5.document.$attributes();
              drop = drop_line = drop_line_severity = drop_empty_line = attribute_undefined = attribute_missing = nil2;
              text = $send2(text, "gsub", [$$2($nesting4, "AttributeReferenceRx")], ($$11 = function() {
                var self6 = $$11.$$s || this, $a2, $b2, $c, $$12, $case = nil2, args2 = nil2, _ = nil2, value = nil2, key = nil2;
                if (self6.document == null)
                  self6.document = nil2;
                if ($truthy2($truthy2($a2 = (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1))["$=="]($$2($nesting4, "RS"))) ? $a2 : (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](4))["$=="]($$2($nesting4, "RS")))) {
                  return "{" + (($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2)) + "}";
                } else if ($truthy2(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](3))) {
                  return function() {
                    $case = (args2 = (($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2)).$split(":", 3)).$shift();
                    if ("set"["$==="]($case)) {
                      $b2 = $$2($nesting4, "Parser").$store_attribute(args2["$[]"](0), $truthy2($c = args2["$[]"](1)) ? $c : "", self6.document), $a2 = Opal2.to_ary($b2), _ = $a2[0] == null ? nil2 : $a2[0], value = $a2[1] == null ? nil2 : $a2[1], $b2;
                      if ($truthy2($truthy2($a2 = value) ? $a2 : (attribute_undefined = $truthy2($b2 = attribute_undefined) ? $b2 : $truthy2($c = doc_attrs["$[]"]("attribute-undefined")) ? $c : $$2($nesting4, "Compliance").$attribute_undefined())["$!="]("drop-line"))) {
                        return drop = drop_empty_line = $$2($nesting4, "DEL");
                      } else {
                        return drop = drop_line = $$2($nesting4, "CAN");
                      }
                      ;
                    } else if ("counter2"["$==="]($case)) {
                      $send2(self6.document, "counter", Opal2.to_a(args2));
                      return drop = drop_empty_line = $$2($nesting4, "DEL");
                    } else {
                      return $send2(self6.document, "counter", Opal2.to_a(args2));
                    }
                  }();
                } else if ($truthy2(doc_attrs["$key?"](key = (($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2)).$downcase()))) {
                  return doc_attrs["$[]"](key);
                } else if ($truthy2(value = $$2($nesting4, "INTRINSIC_ATTRIBUTES")["$[]"](key))) {
                  return value;
                } else {
                  return function() {
                    $case = attribute_missing = $truthy2($a2 = attribute_missing) ? $a2 : $truthy2($b2 = $truthy2($c = opts["$[]"]("attribute_missing")) ? $c : doc_attrs["$[]"]("attribute-missing")) ? $b2 : $$2($nesting4, "Compliance").$attribute_missing();
                    if ("drop"["$==="]($case)) {
                      return drop = drop_empty_line = $$2($nesting4, "DEL");
                    } else if ("drop-line"["$==="]($case)) {
                      if ((drop_line_severity = $truthy2($a2 = drop_line_severity) ? $a2 : $truthy2($b2 = opts["$[]"]("drop_line_severity")) ? $b2 : "info")["$=="]("info")) {
                        $send2(self6.$logger(), "info", [], ($$12 = function() {
                          var self7 = $$12.$$s || this;
                          return "dropping line containing reference to missing attribute: " + key;
                        }, $$12.$$s = self6, $$12.$$arity = 0, $$12));
                      }
                      ;
                      return drop = drop_line = $$2($nesting4, "CAN");
                    } else if ("warn"["$==="]($case)) {
                      self6.$logger().$warn("skipping reference to missing attribute: " + key);
                      return ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](0);
                    } else {
                      return ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](0);
                    }
                  }();
                }
              }, $$11.$$s = self5, $$11.$$arity = 0, $$11));
              if ($truthy2(drop)) {
                if ($truthy2(drop_empty_line)) {
                  lines = text.$squeeze($$2($nesting4, "DEL")).$split($$2($nesting4, "LF"), -1);
                  if ($truthy2(drop_line)) {
                    return $send2(lines, "reject", [], ($$13 = function(line) {
                      var self6 = $$13.$$s || this, $a2, $b2, $c;
                      if (line == null) {
                        line = nil2;
                      }
                      ;
                      return $truthy2($a2 = $truthy2($b2 = $truthy2($c = line["$=="]($$2($nesting4, "DEL"))) ? $c : line["$=="]($$2($nesting4, "CAN"))) ? $b2 : line["$start_with?"]($$2($nesting4, "CAN"))) ? $a2 : line["$include?"]($$2($nesting4, "CAN"));
                    }, $$13.$$s = self5, $$13.$$arity = 1, $$13)).$join($$2($nesting4, "LF")).$delete($$2($nesting4, "DEL"));
                  } else {
                    return $send2(lines, "reject", [], ($$14 = function(line) {
                      var self6 = $$14.$$s || this;
                      if (line == null) {
                        line = nil2;
                      }
                      ;
                      return line["$=="]($$2($nesting4, "DEL"));
                    }, $$14.$$s = self5, $$14.$$arity = 1, $$14)).$join($$2($nesting4, "LF")).$delete($$2($nesting4, "DEL"));
                  }
                  ;
                } else if ($truthy2(text["$include?"]($$2($nesting4, "LF")))) {
                  return $send2(text.$split($$2($nesting4, "LF"), -1), "reject", [], ($$15 = function(line) {
                    var self6 = $$15.$$s || this, $a2, $b2;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    return $truthy2($a2 = $truthy2($b2 = line["$=="]($$2($nesting4, "CAN"))) ? $b2 : line["$start_with?"]($$2($nesting4, "CAN"))) ? $a2 : line["$include?"]($$2($nesting4, "CAN"));
                  }, $$15.$$s = self5, $$15.$$arity = 1, $$15)).$join($$2($nesting4, "LF"));
                } else {
                  return "";
                }
              } else {
                return text;
              }
              ;
            }, $Substitutors_sub_attributes$10.$$arity = -2);
            Opal2.def(self4, "$sub_replacements", $Substitutors_sub_replacements$16 = function $$sub_replacements(text) {
              var $$17, self5 = this;
              if ($truthy2($$2($nesting4, "ReplaceableTextRx")["$match?"](text))) {
                $send2($$2($nesting4, "REPLACEMENTS"), "each", [], ($$17 = function(pattern, replacement, restore) {
                  var self6 = $$17.$$s || this, $$18;
                  if (pattern == null) {
                    pattern = nil2;
                  }
                  ;
                  if (replacement == null) {
                    replacement = nil2;
                  }
                  ;
                  if (restore == null) {
                    restore = nil2;
                  }
                  ;
                  return text = $send2(text, "gsub", [pattern], ($$18 = function() {
                    var self7 = $$18.$$s || this;
                    if ($gvars["~"] == null)
                      $gvars["~"] = nil2;
                    return self7.$do_replacement($gvars["~"], replacement, restore);
                  }, $$18.$$s = self6, $$18.$$arity = 0, $$18));
                }, $$17.$$s = self5, $$17.$$arity = 3, $$17));
              }
              ;
              return text;
            }, $Substitutors_sub_replacements$16.$$arity = 1);
            Opal2.def(self4, "$sub_macros", $Substitutors_sub_macros$19 = function $$sub_macros(text) {
              var $a2, $$20, $b2, $$23, $$26, $$28, $$30, $$31, $$34, $$35, $$36, $$37, $$38, $$39, $$40, self5 = this, found_square_bracket = nil2, found_colon = nil2, found_macroish = nil2, found_macroish_short = nil2, doc_attrs = nil2, doc = nil2, extensions = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if (self5.context == null)
                self5.context = nil2;
              if (self5.parent == null)
                self5.parent = nil2;
              found_square_bracket = text["$include?"]("[");
              found_colon = text["$include?"](":");
              found_macroish = $truthy2($a2 = found_square_bracket) ? found_colon : $a2;
              found_macroish_short = $truthy2($a2 = found_macroish) ? text["$include?"](":[") : $a2;
              doc_attrs = (doc = self5.document).$attributes();
              if ($truthy2($truthy2($a2 = extensions = doc.$extensions()) ? extensions["$inline_macros?"]() : $a2)) {
                $send2(extensions.$inline_macros(), "each", [], ($$20 = function(extension) {
                  var self6 = $$20.$$s || this, $$21;
                  if (extension == null) {
                    extension = nil2;
                  }
                  ;
                  return text = $send2(text, "gsub", [extension.$instance().$regexp()], ($$21 = function() {
                    var self7 = $$21.$$s || this, $b3, $c, $$22, match = nil2, target = nil2, content = nil2, attributes = nil2, default_attrs = nil2, ext_config = nil2, $writer = nil2, replacement = nil2, inline_subs = nil2;
                    if ($gvars["~"] == null)
                      $gvars["~"] = nil2;
                    if ($truthy2((match = ($b3 = $gvars["~"]) === nil2 ? nil2 : $b3["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                      return (($b3 = $gvars["~"]) === nil2 ? nil2 : $b3["$[]"](0)).$slice(1, (($b3 = $gvars["~"]) === nil2 ? nil2 : $b3["$[]"](0)).$length());
                    }
                    ;
                    if ($truthy2($gvars["~"].$names()["$empty?"]())) {
                      $b3 = [($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1), ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2)], target = $b3[0], content = $b3[1], $b3;
                    } else {
                      $b3 = [function() {
                        try {
                          return $gvars["~"]["$[]"]("target");
                        } catch ($err) {
                          if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                            try {
                              return nil2;
                            } finally {
                              Opal2.pop_exception();
                            }
                          } else {
                            throw $err;
                          }
                        }
                      }(), function() {
                        try {
                          return $gvars["~"]["$[]"]("content");
                        } catch ($err) {
                          if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                            try {
                              return nil2;
                            } finally {
                              Opal2.pop_exception();
                            }
                          } else {
                            throw $err;
                          }
                        }
                      }()], target = $b3[0], content = $b3[1], $b3;
                    }
                    ;
                    attributes = function() {
                      if ($truthy2(default_attrs = (ext_config = extension.$config())["$[]"]("default_attrs"))) {
                        return default_attrs.$merge();
                      } else {
                        return $hash22([], {});
                      }
                      ;
                      return nil2;
                    }();
                    if ($truthy2(content)) {
                      if ($truthy2(content["$empty?"]())) {
                        if (ext_config["$[]"]("content_model")["$=="]("attributes")) {
                        } else {
                          $writer = ["text", content];
                          $send2(attributes, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                      } else {
                        content = self7.$normalize_text(content, true, true);
                        if (ext_config["$[]"]("content_model")["$=="]("attributes")) {
                          self7.$parse_attributes(content, $truthy2($b3 = $truthy2($c = ext_config["$[]"]("positional_attrs")) ? $c : ext_config["$[]"]("pos_attrs")) ? $b3 : [], $hash22(["into"], { "into": attributes }));
                        } else {
                          $writer = ["text", content];
                          $send2(attributes, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                        ;
                      }
                      ;
                      target = $truthy2($b3 = target) ? $b3 : function() {
                        if (ext_config["$[]"]("format")["$=="]("short")) {
                          return content;
                        } else {
                          return target;
                        }
                        ;
                        return nil2;
                      }();
                    }
                    ;
                    if ($truthy2($$2($nesting4, "Inline")["$==="](replacement = extension.$process_method()["$[]"](self7, target, attributes)))) {
                      if ($truthy2($truthy2($b3 = inline_subs = replacement.$attributes().$delete("subs")) ? inline_subs = self7.$expand_subs(inline_subs, "custom inline macro") : $b3)) {
                        $writer = [self7.$apply_subs(replacement.$text(), inline_subs)];
                        $send2(replacement, "text=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      return replacement.$convert();
                    } else if ($truthy2(replacement)) {
                      $send2(self7.$logger(), "info", [], ($$22 = function() {
                        var self8 = $$22.$$s || this;
                        return "expected substitution value for custom inline macro to be of type Inline; got " + replacement.$class() + ": " + match;
                      }, $$22.$$s = self7, $$22.$$arity = 0, $$22));
                      return replacement;
                    } else {
                      return "";
                    }
                    ;
                  }, $$21.$$s = self6, $$21.$$arity = 0, $$21));
                }, $$20.$$s = self5, $$20.$$arity = 1, $$20));
              }
              ;
              if ($truthy2(doc_attrs["$key?"]("experimental"))) {
                if ($truthy2($truthy2($a2 = found_macroish_short) ? $truthy2($b2 = text["$include?"]("kbd:")) ? $b2 : text["$include?"]("btn:") : $a2)) {
                  text = $send2(text, "gsub", [$$2($nesting4, "InlineKbdBtnMacroRx")], ($$23 = function() {
                    var self6 = $$23.$$s || this, $c, $$24, $$25, keys = nil2, delim_idx = nil2, delim = nil2, $writer = nil2;
                    if ($truthy2(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))) {
                      return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                    } else if ((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2))["$=="]("kbd")) {
                      if ($truthy2((keys = (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3)).$strip())["$include?"]($$2($nesting4, "R_SB")))) {
                        keys = keys.$gsub($$2($nesting4, "ESC_R_SB"), $$2($nesting4, "R_SB"));
                      }
                      ;
                      if ($truthy2($truthy2($c = $rb_gt2(keys.$length(), 1)) ? delim_idx = function() {
                        if ($truthy2(delim_idx = keys.$index(",", 1))) {
                          return [delim_idx, keys.$index("+", 1)].$compact().$min();
                        } else {
                          return keys.$index("+", 1);
                        }
                        ;
                        return nil2;
                      }() : $c)) {
                        delim = keys.$slice(delim_idx, 1);
                        if ($truthy2(keys["$end_with?"](delim))) {
                          keys = $send2(keys.$chop().$split(delim, -1), "map", [], ($$24 = function(key) {
                            var self7 = $$24.$$s || this;
                            if (key == null) {
                              key = nil2;
                            }
                            ;
                            return key.$strip();
                          }, $$24.$$s = self6, $$24.$$arity = 1, $$24));
                          $writer = [-1, $rb_plus(keys["$[]"](-1), delim)];
                          $send2(keys, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                          ;
                        } else {
                          keys = $send2(keys.$split(delim), "map", [], ($$25 = function(key) {
                            var self7 = $$25.$$s || this;
                            if (key == null) {
                              key = nil2;
                            }
                            ;
                            return key.$strip();
                          }, $$25.$$s = self6, $$25.$$arity = 1, $$25));
                        }
                        ;
                      } else {
                        keys = [keys];
                      }
                      ;
                      return $$2($nesting4, "Inline").$new(self6, "kbd", nil2, $hash22(["attributes"], { "attributes": $hash22(["keys"], { "keys": keys }) })).$convert();
                    } else {
                      return $$2($nesting4, "Inline").$new(self6, "button", self6.$normalize_text(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3), true, true)).$convert();
                    }
                  }, $$23.$$s = self5, $$23.$$arity = 0, $$23));
                }
                ;
                if ($truthy2($truthy2($a2 = found_macroish) ? text["$include?"]("menu:") : $a2)) {
                  text = $send2(text, "gsub", [$$2($nesting4, "InlineMenuMacroRx")], ($$26 = function() {
                    var self6 = $$26.$$s || this, $c, $$27, menu = nil2, items = nil2, delim = nil2, submenus = nil2, menuitem = nil2;
                    if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                      return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                    }
                    ;
                    menu = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1);
                    if ($truthy2(items = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2))) {
                      if ($truthy2(items["$include?"]($$2($nesting4, "R_SB")))) {
                        items = items.$gsub($$2($nesting4, "ESC_R_SB"), $$2($nesting4, "R_SB"));
                      }
                      ;
                      if ($truthy2(delim = function() {
                        if ($truthy2(items["$include?"]("&gt;"))) {
                          return "&gt;";
                        } else {
                          if ($truthy2(items["$include?"](","))) {
                            return ",";
                          } else {
                            return nil2;
                          }
                          ;
                        }
                        ;
                        return nil2;
                      }())) {
                        submenus = $send2(items.$split(delim), "map", [], ($$27 = function(it) {
                          var self7 = $$27.$$s || this;
                          if (it == null) {
                            it = nil2;
                          }
                          ;
                          return it.$strip();
                        }, $$27.$$s = self6, $$27.$$arity = 1, $$27));
                        menuitem = submenus.$pop();
                      } else {
                        $c = [[], items.$rstrip()], submenus = $c[0], menuitem = $c[1], $c;
                      }
                      ;
                    } else {
                      $c = [[], nil2], submenus = $c[0], menuitem = $c[1], $c;
                    }
                    ;
                    return $$2($nesting4, "Inline").$new(self6, "menu", nil2, $hash22(["attributes"], { "attributes": $hash22(["menu", "submenus", "menuitem"], { "menu": menu, "submenus": submenus, "menuitem": menuitem }) })).$convert();
                  }, $$26.$$s = self5, $$26.$$arity = 0, $$26));
                }
                ;
                if ($truthy2($truthy2($a2 = text["$include?"]('"')) ? text["$include?"]("&gt;") : $a2)) {
                  text = $send2(text, "gsub", [$$2($nesting4, "InlineMenuRx")], ($$28 = function() {
                    var self6 = $$28.$$s || this, $c, $d, $e, $$29, menu = nil2, submenus = nil2, menuitem = nil2;
                    if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                      return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                    }
                    ;
                    $d = $send2((($e = $gvars["~"]) === nil2 ? nil2 : $e["$[]"](1)).$split("&gt;"), "map", [], ($$29 = function(it) {
                      var self7 = $$29.$$s || this;
                      if (it == null) {
                        it = nil2;
                      }
                      ;
                      return it.$strip();
                    }, $$29.$$s = self6, $$29.$$arity = 1, $$29)), $c = Opal2.to_ary($d), menu = $c[0] == null ? nil2 : $c[0], submenus = $slice2.call($c, 1), $d;
                    menuitem = submenus.$pop();
                    return $$2($nesting4, "Inline").$new(self6, "menu", nil2, $hash22(["attributes"], { "attributes": $hash22(["menu", "submenus", "menuitem"], { "menu": menu, "submenus": submenus, "menuitem": menuitem }) })).$convert();
                  }, $$28.$$s = self5, $$28.$$arity = 0, $$28));
                }
                ;
              }
              ;
              if ($truthy2($truthy2($a2 = found_macroish) ? $truthy2($b2 = text["$include?"]("image:")) ? $b2 : text["$include?"]("icon:") : $a2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineImageMacroRx")], ($$30 = function() {
                  var self6 = $$30.$$s || this, $c, type = nil2, posattrs = nil2, target = nil2, attrs = nil2, $writer = nil2;
                  if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                    return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                  } else if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]("icon:"))) {
                    $c = ["icon", ["size"]], type = $c[0], posattrs = $c[1], $c;
                  } else {
                    $c = ["image", ["alt", "width", "height"]], type = $c[0], posattrs = $c[1], $c;
                  }
                  ;
                  target = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1);
                  attrs = self6.$parse_attributes(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2), posattrs, $hash22(["unescape_input"], { "unescape_input": true }));
                  if (type["$=="]("icon")) {
                  } else {
                    doc.$register("images", target);
                    $writer = ["imagesdir", doc_attrs["$[]"]("imagesdir")];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                  }
                  ;
                  $truthy2($c = attrs["$[]"]("alt")) ? $c : ($writer = ["alt", ($writer = ["default-alt", $$2($nesting4, "Helpers").$basename(target, true).$tr("_-", " ")], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  return $$2($nesting4, "Inline").$new(self6, "image", nil2, $hash22(["type", "target", "attributes"], { "type": type, "target": target, "attributes": attrs })).$convert();
                }, $$30.$$s = self5, $$30.$$arity = 0, $$30));
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = text["$include?"]("((")) ? text["$include?"]("))") : $b2) ? $a2 : $truthy2($b2 = found_macroish_short) ? text["$include?"]("dexterm") : $b2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineIndextermMacroRx")], ($$31 = function() {
                  var self6 = $$31.$$s || this, $c, $$32, $d, $$33, $case = nil2, attrlist = nil2, primary = nil2, attrs = nil2, $writer = nil2, see_also = nil2, term = nil2, encl_text = nil2, visible = nil2, before = nil2, after = nil2, _ = nil2, see = nil2, subbed_term = nil2, terms = nil2;
                  return function() {
                    $case = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1);
                    if ("indexterm"["$==="]($case)) {
                      if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                        return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                      }
                      ;
                      if ($truthy2((attrlist = self6.$normalize_text(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2), true, true))["$include?"]("="))) {
                        if ($truthy2(primary = (attrs = $$2($nesting4, "AttributeList").$new(attrlist, self6).$parse())["$[]"](1))) {
                          $writer = ["terms", [primary]];
                          $send2(attrs, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                          ;
                          if ($truthy2(see_also = attrs["$[]"]("see-also"))) {
                            $writer = ["see-also", function() {
                              if ($truthy2(see_also["$include?"](","))) {
                                return $send2(see_also.$split(","), "map", [], ($$32 = function(it) {
                                  var self7 = $$32.$$s || this;
                                  if (it == null) {
                                    it = nil2;
                                  }
                                  ;
                                  return it.$lstrip();
                                }, $$32.$$s = self6, $$32.$$arity = 1, $$32));
                              } else {
                                return [see_also];
                              }
                              ;
                              return nil2;
                            }()];
                            $send2(attrs, "[]=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                          }
                          ;
                        } else {
                          attrs = $hash22(["terms"], { "terms": attrlist });
                        }
                      } else {
                        attrs = $hash22(["terms"], { "terms": self6.$split_simple_csv(attrlist) });
                      }
                      ;
                      return $$2($nesting4, "Inline").$new(self6, "indexterm", nil2, $hash22(["attributes"], { "attributes": attrs })).$convert();
                    } else if ("indexterm2"["$==="]($case)) {
                      if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                        return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                      }
                      ;
                      if ($truthy2((term = self6.$normalize_text(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2), true, true))["$include?"]("="))) {
                        term = $truthy2($c = $truthy2($d = (attrs = $$2($nesting4, "AttributeList").$new(term, self6).$parse())["$[]"](1)) ? $d : attrs = nil2) ? $c : term;
                        if ($truthy2($truthy2($c = attrs) ? see_also = attrs["$[]"]("see-also") : $c)) {
                          $writer = ["see-also", function() {
                            if ($truthy2(see_also["$include?"](","))) {
                              return $send2(see_also.$split(","), "map", [], ($$33 = function(it) {
                                var self7 = $$33.$$s || this;
                                if (it == null) {
                                  it = nil2;
                                }
                                ;
                                return it.$lstrip();
                              }, $$33.$$s = self6, $$33.$$arity = 1, $$33));
                            } else {
                              return [see_also];
                            }
                            ;
                            return nil2;
                          }()];
                          $send2(attrs, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                        ;
                      }
                      ;
                      return $$2($nesting4, "Inline").$new(self6, "indexterm", term, $hash22(["attributes", "type"], { "attributes": attrs, "type": "visible" })).$convert();
                    } else {
                      encl_text = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3);
                      if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                        if ($truthy2($truthy2($c = encl_text["$start_with?"]("(")) ? encl_text["$end_with?"](")") : $c)) {
                          encl_text = encl_text.$slice(1, $rb_minus(encl_text.$length(), 2));
                          $c = [true, "(", ")"], visible = $c[0], before = $c[1], after = $c[2], $c;
                        } else {
                          return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                        }
                      } else {
                        visible = true;
                        if ($truthy2(encl_text["$start_with?"]("("))) {
                          if ($truthy2(encl_text["$end_with?"](")"))) {
                            $c = [encl_text.$slice(1, $rb_minus(encl_text.$length(), 2)), false], encl_text = $c[0], visible = $c[1], $c;
                          } else {
                            $c = [encl_text.$slice(1, encl_text.$length()), "(", ""], encl_text = $c[0], before = $c[1], after = $c[2], $c;
                          }
                        } else if ($truthy2(encl_text["$end_with?"](")"))) {
                          $c = [encl_text.$chop(), "", ")"], encl_text = $c[0], before = $c[1], after = $c[2], $c;
                        }
                        ;
                      }
                      ;
                      if ($truthy2(visible)) {
                        if ($truthy2((term = self6.$normalize_text(encl_text, true))["$include?"](";&"))) {
                          if ($truthy2(term["$include?"](" &gt;&gt; "))) {
                            $d = term.$partition(" &gt;&gt; "), $c = Opal2.to_ary($d), term = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], see = $c[2] == null ? nil2 : $c[2], $d;
                            attrs = $hash22(["see"], { "see": see });
                          } else if ($truthy2(term["$include?"](" &amp;&gt; "))) {
                            $d = term.$split(" &amp;&gt; "), $c = Opal2.to_ary($d), term = $c[0] == null ? nil2 : $c[0], see_also = $slice2.call($c, 1), $d;
                            attrs = $hash22(["see-also"], { "see-also": see_also });
                          }
                        }
                        ;
                        subbed_term = $$2($nesting4, "Inline").$new(self6, "indexterm", term, $hash22(["attributes", "type"], { "attributes": attrs, "type": "visible" })).$convert();
                      } else {
                        attrs = $hash22([], {});
                        if ($truthy2((terms = self6.$normalize_text(encl_text, true))["$include?"](";&"))) {
                          if ($truthy2(terms["$include?"](" &gt;&gt; "))) {
                            $d = terms.$partition(" &gt;&gt; "), $c = Opal2.to_ary($d), terms = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], see = $c[2] == null ? nil2 : $c[2], $d;
                            $writer = ["see", see];
                            $send2(attrs, "[]=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                          } else if ($truthy2(terms["$include?"](" &amp;&gt; "))) {
                            $d = terms.$split(" &amp;&gt; "), $c = Opal2.to_ary($d), terms = $c[0] == null ? nil2 : $c[0], see_also = $slice2.call($c, 1), $d;
                            $writer = ["see-also", see_also];
                            $send2(attrs, "[]=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                          }
                        }
                        ;
                        $writer = ["terms", self6.$split_simple_csv(terms)];
                        $send2(attrs, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        subbed_term = $$2($nesting4, "Inline").$new(self6, "indexterm", nil2, $hash22(["attributes"], { "attributes": attrs })).$convert();
                      }
                      ;
                      if ($truthy2(before)) {
                        return "" + before + subbed_term + after;
                      } else {
                        return subbed_term;
                      }
                      ;
                    }
                  }();
                }, $$31.$$s = self5, $$31.$$arity = 0, $$31));
              }
              ;
              if ($truthy2($truthy2($a2 = found_colon) ? text["$include?"]("://") : $a2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineLinkRx")], ($$34 = function() {
                  var self6 = $$34.$$s || this, $c, $d, target = nil2, prefix = nil2, suffix = nil2, link_text = nil2, $case = nil2, attrs = nil2, link_opts = nil2, new_link_text = nil2, $writer = nil2, bare = nil2;
                  if ($truthy2((target = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2))["$start_with?"]($$2($nesting4, "RS")))) {
                    return "" + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1)) + target.$slice(1, target.$length()) + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](4));
                  }
                  ;
                  $c = [($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](1), ""], prefix = $c[0], suffix = $c[1], $c;
                  if ($truthy2(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](4))) {
                    if (prefix["$=="]("link:")) {
                      prefix = "";
                    }
                    ;
                    if ($truthy2((link_text = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](4))["$empty?"]())) {
                      link_text = nil2;
                    }
                    ;
                  } else {
                    $case = prefix;
                    if ("link:"["$==="]($case) || '"'["$==="]($case) || "'"["$==="]($case)) {
                      return ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0);
                    }
                    ;
                    $case = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3);
                    if (")"["$==="]($case) || "?"["$==="]($case) || "!"["$==="]($case)) {
                      target = target.$chop();
                      if ($truthy2(($c = (suffix = ($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](3))["$=="](")")) ? target["$end_with?"](".", "?", "!") : (suffix = ($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](3))["$=="](")"))) {
                        suffix = $rb_plus(target["$[]"](-1), suffix);
                        target = target.$chop();
                      }
                      ;
                      if ($truthy2(target["$end_with?"]("://"))) {
                        return ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0);
                      }
                      ;
                    } else if (";"["$==="]($case)) {
                      if ($truthy2($truthy2($c = prefix["$start_with?"]("&lt;")) ? target["$end_with?"]("&gt;") : $c)) {
                        prefix = prefix.$slice(4, prefix.$length());
                        target = target.$slice(0, $rb_minus(target.$length(), 4));
                      } else if ($truthy2((target = target.$chop())["$end_with?"](")"))) {
                        target = target.$chop();
                        suffix = ");";
                      } else {
                        suffix = ";";
                      }
                      ;
                      if ($truthy2(target["$end_with?"]("://"))) {
                        return ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0);
                      }
                      ;
                    } else if (":"["$==="]($case)) {
                      if ($truthy2((target = target.$chop())["$end_with?"](")"))) {
                        target = target.$chop();
                        suffix = "):";
                      } else {
                        suffix = ":";
                      }
                      ;
                      if ($truthy2(target["$end_with?"]("://"))) {
                        return ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0);
                      }
                      ;
                    }
                    ;
                  }
                  ;
                  $c = [nil2, $hash22(["type"], { "type": "link" })], attrs = $c[0], link_opts = $c[1], $c;
                  if ($truthy2(link_text)) {
                    if ($truthy2(link_text["$include?"]($$2($nesting4, "R_SB")))) {
                      new_link_text = link_text = link_text.$gsub($$2($nesting4, "ESC_R_SB"), $$2($nesting4, "R_SB"));
                    }
                    ;
                    if ($truthy2($truthy2($c = doc.$compat_mode()["$!"]()) ? link_text["$include?"]("=") : $c)) {
                      $d = self6.$extract_attributes_from_text(link_text, ""), $c = Opal2.to_ary($d), link_text = $c[0] == null ? nil2 : $c[0], attrs = $c[1] == null ? nil2 : $c[1], $d;
                      new_link_text = link_text;
                      $writer = ["id", attrs["$[]"]("id")];
                      $send2(link_opts, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                    }
                    ;
                    if ($truthy2(link_text["$end_with?"]("^"))) {
                      new_link_text = link_text = link_text.$chop();
                      if ($truthy2(attrs)) {
                        $truthy2($c = attrs["$[]"]("window")) ? $c : ($writer = ["window", "_blank"], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                      } else {
                        attrs = $hash22(["window"], { "window": "_blank" });
                      }
                      ;
                    }
                    ;
                    if ($truthy2($truthy2($c = new_link_text) ? new_link_text["$empty?"]() : $c)) {
                      link_text = function() {
                        if ($truthy2(doc_attrs["$key?"]("hide-uri-scheme"))) {
                          return target.$sub($$2($nesting4, "UriSniffRx"), "");
                        } else {
                          return target;
                        }
                        ;
                        return nil2;
                      }();
                      bare = true;
                    }
                    ;
                  } else {
                    link_text = function() {
                      if ($truthy2(doc_attrs["$key?"]("hide-uri-scheme"))) {
                        return target.$sub($$2($nesting4, "UriSniffRx"), "");
                      } else {
                        return target;
                      }
                      ;
                      return nil2;
                    }();
                    bare = true;
                  }
                  ;
                  if ($truthy2(bare)) {
                    if ($truthy2(attrs)) {
                      $writer = ["role", function() {
                        if ($truthy2(attrs["$key?"]("role"))) {
                          return "bare " + attrs["$[]"]("role");
                        } else {
                          return "bare";
                        }
                        ;
                        return nil2;
                      }()];
                      $send2(attrs, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    } else {
                      attrs = $hash22(["role"], { "role": "bare" });
                    }
                  }
                  ;
                  doc.$register("links", ($writer = ["target", target], $send2(link_opts, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                  if ($truthy2(attrs)) {
                    $writer = ["attributes", attrs];
                    $send2(link_opts, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  return "" + prefix + $$2($nesting4, "Inline").$new(self6, "anchor", link_text, link_opts).$convert() + suffix;
                }, $$34.$$s = self5, $$34.$$arity = 0, $$34));
              }
              ;
              if ($truthy2($truthy2($a2 = found_macroish) ? $truthy2($b2 = text["$include?"]("link:")) ? $b2 : text["$include?"]("ilto:") : $a2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineLinkMacroRx")], ($$35 = function() {
                  var self6 = $$35.$$s || this, $c, $d, mailto = nil2, target = nil2, mailto_text = nil2, attrs = nil2, link_opts = nil2, link_text = nil2, $writer = nil2;
                  if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                    return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                  } else if ($truthy2(mailto = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))) {
                    target = $rb_plus("mailto:", mailto_text = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2));
                  } else {
                    target = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2);
                  }
                  ;
                  $c = [nil2, $hash22(["type"], { "type": "link" })], attrs = $c[0], link_opts = $c[1], $c;
                  if ($truthy2((link_text = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3))["$empty?"]())) {
                  } else {
                    if ($truthy2(link_text["$include?"]($$2($nesting4, "R_SB")))) {
                      link_text = link_text.$gsub($$2($nesting4, "ESC_R_SB"), $$2($nesting4, "R_SB"));
                    }
                    ;
                    if ($truthy2(mailto)) {
                      if ($truthy2($truthy2($c = doc.$compat_mode()["$!"]()) ? link_text["$include?"](",") : $c)) {
                        $d = self6.$extract_attributes_from_text(link_text, ""), $c = Opal2.to_ary($d), link_text = $c[0] == null ? nil2 : $c[0], attrs = $c[1] == null ? nil2 : $c[1], $d;
                        $writer = ["id", attrs["$[]"]("id")];
                        $send2(link_opts, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        if ($truthy2(attrs["$key?"](2))) {
                          if ($truthy2(attrs["$key?"](3))) {
                            target = "" + target + "?subject=" + $$2($nesting4, "Helpers").$encode_uri_component(attrs["$[]"](2)) + "&amp;body=" + $$2($nesting4, "Helpers").$encode_uri_component(attrs["$[]"](3));
                          } else {
                            target = "" + target + "?subject=" + $$2($nesting4, "Helpers").$encode_uri_component(attrs["$[]"](2));
                          }
                        }
                        ;
                      }
                    } else if ($truthy2($truthy2($c = doc.$compat_mode()["$!"]()) ? link_text["$include?"]("=") : $c)) {
                      $d = self6.$extract_attributes_from_text(link_text, ""), $c = Opal2.to_ary($d), link_text = $c[0] == null ? nil2 : $c[0], attrs = $c[1] == null ? nil2 : $c[1], $d;
                      $writer = ["id", attrs["$[]"]("id")];
                      $send2(link_opts, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                    }
                    ;
                    if ($truthy2(link_text["$end_with?"]("^"))) {
                      link_text = link_text.$chop();
                      if ($truthy2(attrs)) {
                        $truthy2($c = attrs["$[]"]("window")) ? $c : ($writer = ["window", "_blank"], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                      } else {
                        attrs = $hash22(["window"], { "window": "_blank" });
                      }
                      ;
                    }
                    ;
                  }
                  ;
                  if ($truthy2(link_text["$empty?"]())) {
                    if ($truthy2(mailto)) {
                      link_text = mailto_text;
                    } else {
                      if ($truthy2(doc_attrs["$key?"]("hide-uri-scheme"))) {
                        if ($truthy2((link_text = target.$sub($$2($nesting4, "UriSniffRx"), ""))["$empty?"]())) {
                          link_text = target;
                        }
                      } else {
                        link_text = target;
                      }
                      ;
                      if ($truthy2(attrs)) {
                        $writer = ["role", function() {
                          if ($truthy2(attrs["$key?"]("role"))) {
                            return "bare " + attrs["$[]"]("role");
                          } else {
                            return "bare";
                          }
                          ;
                          return nil2;
                        }()];
                        $send2(attrs, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      } else {
                        attrs = $hash22(["role"], { "role": "bare" });
                      }
                      ;
                    }
                  }
                  ;
                  doc.$register("links", ($writer = ["target", target], $send2(link_opts, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                  if ($truthy2(attrs)) {
                    $writer = ["attributes", attrs];
                    $send2(link_opts, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  return $$2($nesting4, "Inline").$new(self6, "anchor", link_text, link_opts).$convert();
                }, $$35.$$s = self5, $$35.$$arity = 0, $$35));
              }
              ;
              if ($truthy2(text["$include?"]("@"))) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineEmailRx")], ($$36 = function() {
                  var self6 = $$36.$$s || this, $c, target = nil2, address = nil2;
                  if ($truthy2(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))) {
                    return function() {
                      if ((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))["$=="]($$2($nesting4, "RS"))) {
                        return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                      } else {
                        return ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0);
                      }
                      ;
                      return nil2;
                    }();
                  }
                  ;
                  target = $rb_plus("mailto:", address = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0));
                  doc.$register("links", target);
                  return $$2($nesting4, "Inline").$new(self6, "anchor", address, $hash22(["type", "target"], { "type": "link", "target": target })).$convert();
                }, $$36.$$s = self5, $$36.$$arity = 0, $$36));
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = found_square_bracket) ? self5.context["$=="]("list_item") : $b2) ? self5.parent.$style()["$=="]("bibliography") : $a2)) {
                text = $send2(text, "sub", [$$2($nesting4, "InlineBiblioAnchorRx")], ($$37 = function() {
                  var self6 = $$37.$$s || this, $c;
                  return $$2($nesting4, "Inline").$new(self6, "anchor", ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2), $hash22(["type", "id"], { "type": "bibref", "id": ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1) })).$convert();
                }, $$37.$$s = self5, $$37.$$arity = 0, $$37));
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = found_square_bracket) ? text["$include?"]("[[") : $b2) ? $a2 : $truthy2($b2 = found_macroish) ? text["$include?"]("or:") : $b2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineAnchorRx")], ($$38 = function() {
                  var self6 = $$38.$$s || this, $c, $d, id = nil2, reftext = nil2;
                  if ($truthy2(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))) {
                    return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                  }
                  ;
                  if ($truthy2(id = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2))) {
                    reftext = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3);
                  } else {
                    id = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](4);
                    if ($truthy2($truthy2($c = reftext = ($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](5)) ? reftext["$include?"]($$2($nesting4, "R_SB")) : $c)) {
                      reftext = reftext.$gsub($$2($nesting4, "ESC_R_SB"), $$2($nesting4, "R_SB"));
                    }
                    ;
                  }
                  ;
                  return $$2($nesting4, "Inline").$new(self6, "anchor", reftext, $hash22(["type", "id"], { "type": "ref", "id": id })).$convert();
                }, $$38.$$s = self5, $$38.$$arity = 0, $$38));
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = text["$include?"]("&")) ? text["$include?"](";&l") : $b2) ? $a2 : $truthy2($b2 = found_macroish) ? text["$include?"]("xref:") : $b2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineXrefMacroRx")], ($$39 = function() {
                  var self6 = $$39.$$s || this, $c, $d, attrs = nil2, refid = nil2, _ = nil2, link_text = nil2, macro = nil2, fragment = nil2, hash_idx = nil2, fragment_len = nil2, path = nil2, src2src = nil2, target = nil2, $writer = nil2;
                  if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                    return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                  }
                  ;
                  attrs = $hash22([], {});
                  if ($truthy2(refid = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))) {
                    if ($truthy2(refid["$include?"](","))) {
                      $d = refid.$partition(","), $c = Opal2.to_ary($d), refid = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], link_text = $c[2] == null ? nil2 : $c[2], $d;
                      if ($truthy2((link_text = link_text.$lstrip())["$empty?"]())) {
                        link_text = nil2;
                      }
                      ;
                    }
                  } else {
                    macro = true;
                    refid = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2);
                    if ($truthy2(link_text = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3))) {
                      if ($truthy2(link_text["$include?"]($$2($nesting4, "R_SB")))) {
                        link_text = link_text.$gsub($$2($nesting4, "ESC_R_SB"), $$2($nesting4, "R_SB"));
                      }
                      ;
                      if ($truthy2($truthy2($c = doc.$compat_mode()["$!"]()) ? link_text["$include?"]("=") : $c)) {
                        $d = self6.$extract_attributes_from_text(link_text), $c = Opal2.to_ary($d), link_text = $c[0] == null ? nil2 : $c[0], attrs = $c[1] == null ? nil2 : $c[1], $d;
                      }
                      ;
                    }
                    ;
                  }
                  ;
                  if ($truthy2(doc.$compat_mode())) {
                    fragment = refid;
                  } else if ($truthy2(hash_idx = refid.$index("#"))) {
                    if ($truthy2($rb_gt2(hash_idx, 0))) {
                      if ($truthy2($rb_gt2(fragment_len = $rb_minus($rb_minus(refid.$length(), 1), hash_idx), 0))) {
                        $c = [refid.$slice(0, hash_idx), refid.$slice($rb_plus(hash_idx, 1), fragment_len)], path = $c[0], fragment = $c[1], $c;
                      } else {
                        path = refid.$chop();
                      }
                      ;
                      if ($truthy2(macro)) {
                        if ($truthy2(path["$end_with?"](".adoc"))) {
                          src2src = path = path.$slice(0, $rb_minus(path.$length(), 5));
                        } else if ($truthy2($$2($nesting4, "Helpers")["$extname?"](path)["$!"]())) {
                          src2src = path;
                        }
                      } else if ($truthy2($send2(path, "end_with?", Opal2.to_a($$2($nesting4, "ASCIIDOC_EXTENSIONS").$keys())))) {
                        src2src = path = path.$slice(0, path.$rindex("."));
                      } else {
                        src2src = path;
                      }
                      ;
                    } else {
                      $c = [refid, refid.$slice(1, refid.$length())], target = $c[0], fragment = $c[1], $c;
                    }
                  } else if ($truthy2(macro)) {
                    if ($truthy2(refid["$end_with?"](".adoc"))) {
                      src2src = path = refid.$slice(0, $rb_minus(refid.$length(), 5));
                    } else if ($truthy2($$2($nesting4, "Helpers")["$extname?"](refid))) {
                      path = refid;
                    } else {
                      fragment = refid;
                    }
                  } else {
                    fragment = refid;
                  }
                  ;
                  if ($truthy2(target)) {
                    refid = fragment;
                    if ($truthy2($truthy2($c = self6.$logger()["$info?"]()) ? doc.$catalog()["$[]"]("refs")["$[]"](refid)["$!"]() : $c)) {
                      self6.$logger().$info("possible invalid reference: " + refid);
                    }
                    ;
                  } else if ($truthy2(path)) {
                    if ($truthy2($truthy2($c = src2src) ? $truthy2($d = doc.$attributes()["$[]"]("docname")["$=="](path)) ? $d : doc.$catalog()["$[]"]("includes")["$[]"](path) : $c)) {
                      if ($truthy2(fragment)) {
                        $c = [fragment, nil2, "#" + fragment], refid = $c[0], path = $c[1], target = $c[2], $c;
                        if ($truthy2($truthy2($c = self6.$logger()["$info?"]()) ? doc.$catalog()["$[]"]("refs")["$[]"](refid)["$!"]() : $c)) {
                          self6.$logger().$info("possible invalid reference: " + refid);
                        }
                        ;
                      } else {
                        $c = [nil2, nil2, "#"], refid = $c[0], path = $c[1], target = $c[2], $c;
                      }
                    } else {
                      $c = [path, "" + ($truthy2($d = doc.$attributes()["$[]"]("relfileprefix")) ? $d : "") + path + function() {
                        if ($truthy2(src2src)) {
                          return doc.$attributes().$fetch("relfilesuffix", doc.$outfilesuffix());
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }()], refid = $c[0], path = $c[1], $c;
                      if ($truthy2(fragment)) {
                        $c = ["" + refid + "#" + fragment, "" + path + "#" + fragment], refid = $c[0], target = $c[1], $c;
                      } else {
                        target = path;
                      }
                      ;
                    }
                  } else if ($truthy2($truthy2($c = doc.$compat_mode()) ? $c : $$2($nesting4, "Compliance").$natural_xrefs()["$!"]())) {
                    $c = [fragment, "#" + fragment], refid = $c[0], target = $c[1], $c;
                    if ($truthy2($truthy2($c = self6.$logger()["$info?"]()) ? doc.$catalog()["$[]"]("refs")["$[]"](refid)["$!"]() : $c)) {
                      self6.$logger().$info("possible invalid reference: " + refid);
                    }
                    ;
                  } else if ($truthy2(doc.$catalog()["$[]"]("refs")["$[]"](fragment))) {
                    $c = [fragment, "#" + fragment], refid = $c[0], target = $c[1], $c;
                  } else if ($truthy2($truthy2($c = $truthy2($d = fragment["$include?"](" ")) ? $d : fragment.$downcase()["$!="](fragment)) ? refid = doc.$resolve_id(fragment) : $c)) {
                    $c = [refid, "#" + refid], fragment = $c[0], target = $c[1], $c;
                  } else {
                    $c = [fragment, "#" + fragment], refid = $c[0], target = $c[1], $c;
                    if ($truthy2(self6.$logger()["$info?"]())) {
                      self6.$logger().$info("possible invalid reference: " + refid);
                    }
                    ;
                  }
                  ;
                  $writer = ["path", path];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["fragment", fragment];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["refid", refid];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  return $$2($nesting4, "Inline").$new(self6, "anchor", link_text, $hash22(["type", "target", "attributes"], { "type": "xref", "target": target, "attributes": attrs })).$convert();
                }, $$39.$$s = self5, $$39.$$arity = 0, $$39));
              }
              ;
              if ($truthy2($truthy2($a2 = found_macroish) ? text["$include?"]("tnote") : $a2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineFootnoteMacroRx")], ($$40 = function() {
                  var self6 = $$40.$$s || this, $c, $d, $e, $$41, id = nil2, content = nil2, footnote = nil2, index = nil2, type = nil2, target = nil2;
                  if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                    return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                  }
                  ;
                  if ($truthy2(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))) {
                    if ($truthy2(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3))) {
                      $d = (($e = $gvars["~"]) === nil2 ? nil2 : $e["$[]"](3)).$split(",", 2), $c = Opal2.to_ary($d), id = $c[0] == null ? nil2 : $c[0], content = $c[1] == null ? nil2 : $c[1], $d;
                      if ($truthy2(doc.$compat_mode())) {
                      } else {
                        self6.$logger().$warn("found deprecated footnoteref macro: " + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)) + "; use footnote macro with target instead");
                      }
                      ;
                    } else {
                      return ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0);
                    }
                  } else {
                    id = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2);
                    content = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3);
                  }
                  ;
                  if ($truthy2(id)) {
                    if ($truthy2(footnote = $send2(doc.$footnotes(), "find", [], ($$41 = function(candidate) {
                      var self7 = $$41.$$s || this;
                      if (candidate == null) {
                        candidate = nil2;
                      }
                      ;
                      return candidate.$id()["$=="](id);
                    }, $$41.$$s = self6, $$41.$$arity = 1, $$41)))) {
                      $c = [footnote.$index(), footnote.$text()], index = $c[0], content = $c[1], $c;
                      $c = ["xref", id, nil2], type = $c[0], target = $c[1], id = $c[2], $c;
                    } else if ($truthy2(content)) {
                      content = self6.$restore_passthroughs(self6.$normalize_text(content, true, true));
                      index = doc.$counter("footnote-number");
                      doc.$register("footnotes", $$$2($$2($nesting4, "Document"), "Footnote").$new(index, id, content));
                      $c = ["ref", nil2], type = $c[0], target = $c[1], $c;
                    } else {
                      self6.$logger().$warn("invalid footnote reference: " + id);
                      $c = ["xref", id, id, nil2], type = $c[0], target = $c[1], content = $c[2], id = $c[3], $c;
                    }
                  } else if ($truthy2(content)) {
                    content = self6.$restore_passthroughs(self6.$normalize_text(content, true, true));
                    index = doc.$counter("footnote-number");
                    doc.$register("footnotes", $$$2($$2($nesting4, "Document"), "Footnote").$new(index, id, content));
                    type = target = nil2;
                  } else {
                    return ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0);
                  }
                  ;
                  return $$2($nesting4, "Inline").$new(self6, "footnote", content, $hash22(["attributes", "id", "target", "type"], { "attributes": $hash22(["index"], { "index": index }), "id": id, "target": target, "type": type })).$convert();
                }, $$40.$$s = self5, $$40.$$arity = 0, $$40));
              }
              ;
              return text;
            }, $Substitutors_sub_macros$19.$$arity = 1);
            Opal2.def(self4, "$sub_post_replacements", $Substitutors_sub_post_replacements$42 = function $$sub_post_replacements(text) {
              var $a2, $$43, $$44, self5 = this, lines = nil2, last = nil2;
              if (self5.attributes == null)
                self5.attributes = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if ($truthy2($truthy2($a2 = self5.attributes["$[]"]("hardbreaks-option")) ? $a2 : self5.document.$attributes()["$[]"]("hardbreaks-option"))) {
                lines = text.$split($$2($nesting4, "LF"), -1);
                if ($truthy2($rb_lt2(lines.$size(), 2))) {
                  return text;
                }
                ;
                last = lines.$pop();
                return $send2(lines, "map", [], ($$43 = function(line) {
                  var self6 = $$43.$$s || this;
                  if (line == null) {
                    line = nil2;
                  }
                  ;
                  return $$2($nesting4, "Inline").$new(self6, "break", function() {
                    if ($truthy2(line["$end_with?"]($$2($nesting4, "HARD_LINE_BREAK")))) {
                      return line.$slice(0, $rb_minus(line.$length(), 2));
                    } else {
                      return line;
                    }
                    ;
                    return nil2;
                  }(), $hash22(["type"], { "type": "line" })).$convert();
                }, $$43.$$s = self5, $$43.$$arity = 1, $$43))["$<<"](last).$join($$2($nesting4, "LF"));
              } else if ($truthy2($truthy2($a2 = text["$include?"]($$2($nesting4, "PLUS"))) ? text["$include?"]($$2($nesting4, "HARD_LINE_BREAK")) : $a2)) {
                return $send2(text, "gsub", [$$2($nesting4, "HardLineBreakRx")], ($$44 = function() {
                  var self6 = $$44.$$s || this, $b2;
                  return $$2($nesting4, "Inline").$new(self6, "break", ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1), $hash22(["type"], { "type": "line" })).$convert();
                }, $$44.$$s = self5, $$44.$$arity = 0, $$44));
              } else {
                return text;
              }
            }, $Substitutors_sub_post_replacements$42.$$arity = 1);
            Opal2.def(self4, "$sub_source", $Substitutors_sub_source$45 = function $$sub_source(source, process_callouts) {
              var self5 = this;
              if ($truthy2(process_callouts)) {
                return self5.$sub_callouts(self5.$sub_specialchars(source));
              } else {
                return self5.$sub_specialchars(source);
              }
            }, $Substitutors_sub_source$45.$$arity = 2);
            Opal2.def(self4, "$sub_callouts", $Substitutors_sub_callouts$46 = function $$sub_callouts(text) {
              var $$472, self5 = this, callout_rx = nil2, autonum = nil2;
              callout_rx = function() {
                if ($truthy2(self5["$attr?"]("line-comment"))) {
                  return $$2($nesting4, "CalloutSourceRxMap")["$[]"](self5.$attr("line-comment"));
                } else {
                  return $$2($nesting4, "CalloutSourceRx");
                }
                ;
                return nil2;
              }();
              autonum = 0;
              return $send2(text, "gsub", [callout_rx], ($$472 = function() {
                var self6 = $$472.$$s || this, $a2, $b2;
                if (self6.document == null)
                  self6.document = nil2;
                if ($truthy2(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2))) {
                  return (($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](0)).$sub($$2($nesting4, "RS"), "");
                } else {
                  return $$2($nesting4, "Inline").$new(self6, "callout", function() {
                    if ((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](4))["$=="](".")) {
                      return (autonum = $rb_plus(autonum, 1)).$to_s();
                    } else {
                      return ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](4);
                    }
                    ;
                    return nil2;
                  }(), $hash22(["id", "attributes"], { "id": self6.document.$callouts().$read_next_id(), "attributes": $hash22(["guard"], { "guard": $truthy2($a2 = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1)) ? $a2 : function() {
                    if ((($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](3))["$=="]("--")) {
                      return ["<!--", "-->"];
                    } else {
                      return nil2;
                    }
                    ;
                    return nil2;
                  }() }) })).$convert();
                }
              }, $$472.$$s = self5, $$472.$$arity = 0, $$472));
            }, $Substitutors_sub_callouts$46.$$arity = 1);
            Opal2.def(self4, "$highlight_source", $Substitutors_highlight_source$48 = function $$highlight_source(source, process_callouts) {
              var $a2, $b2, $c, self5 = this, syntax_hl = nil2, callout_marks = nil2, doc_attrs = nil2, syntax_hl_name = nil2, linenums_mode = nil2, start_line_number = nil2, highlight_lines = nil2, highlighted = nil2, source_offset = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if (self5.passthroughs == null)
                self5.passthroughs = nil2;
              if ($truthy2($truthy2($a2 = syntax_hl = self5.document.$syntax_highlighter()) ? syntax_hl["$highlight?"]() : $a2)) {
              } else {
                return self5.$sub_source(source, process_callouts);
              }
              ;
              if ($truthy2(process_callouts)) {
                $b2 = self5.$extract_callouts(source), $a2 = Opal2.to_ary($b2), source = $a2[0] == null ? nil2 : $a2[0], callout_marks = $a2[1] == null ? nil2 : $a2[1], $b2;
              }
              ;
              doc_attrs = self5.document.$attributes();
              syntax_hl_name = syntax_hl.$name();
              if ($truthy2($truthy2($a2 = linenums_mode = function() {
                if ($truthy2(self5["$attr?"]("linenums"))) {
                  return ($truthy2($b2 = doc_attrs["$[]"]("" + syntax_hl_name + "-linenums-mode")) ? $b2 : "table").$to_sym();
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }()) ? $rb_lt2(start_line_number = self5.$attr("start", 1).$to_i(), 1) : $a2)) {
                start_line_number = 1;
              }
              ;
              if ($truthy2(self5["$attr?"]("highlight"))) {
                highlight_lines = self5.$resolve_lines_to_highlight(source, self5.$attr("highlight"), start_line_number);
              }
              ;
              $b2 = syntax_hl.$highlight(self5, source, self5.$attr("language"), $hash22(["callouts", "css_mode", "highlight_lines", "number_lines", "start_line_number", "style"], { "callouts": callout_marks, "css_mode": ($truthy2($c = doc_attrs["$[]"]("" + syntax_hl_name + "-css")) ? $c : "class").$to_sym(), "highlight_lines": highlight_lines, "number_lines": linenums_mode, "start_line_number": start_line_number, "style": doc_attrs["$[]"]("" + syntax_hl_name + "-style") })), $a2 = Opal2.to_ary($b2), highlighted = $a2[0] == null ? nil2 : $a2[0], source_offset = $a2[1] == null ? nil2 : $a2[1], $b2;
              if ($truthy2(self5.passthroughs["$empty?"]())) {
              } else {
                highlighted = highlighted.$gsub($$2($nesting4, "HighlightedPassSlotRx"), "" + $$2($nesting4, "PASS_START") + "\\1" + $$2($nesting4, "PASS_END"));
              }
              ;
              if ($truthy2(callout_marks["$nil_or_empty?"]())) {
                return highlighted;
              } else {
                return self5.$restore_callouts(highlighted, callout_marks, source_offset);
              }
              ;
            }, $Substitutors_highlight_source$48.$$arity = 2);
            Opal2.def(self4, "$resolve_lines_to_highlight", $Substitutors_resolve_lines_to_highlight$49 = function $$resolve_lines_to_highlight(source, spec, start) {
              var $$50, $$51, self5 = this, lines = nil2, shift = nil2;
              if (start == null) {
                start = nil2;
              }
              ;
              lines = [];
              if ($truthy2(spec["$include?"](" "))) {
                spec = spec.$delete(" ");
              }
              ;
              $send2(function() {
                if ($truthy2(spec["$include?"](","))) {
                  return spec.$split(",");
                } else {
                  return spec.$split(";");
                }
                ;
                return nil2;
              }(), "map", [], ($$50 = function(entry) {
                var self6 = $$50.$$s || this, $a2, $b2, negate = nil2, delim = nil2, from = nil2, _ = nil2, to = nil2, line = nil2;
                if (entry == null) {
                  entry = nil2;
                }
                ;
                if ($truthy2(entry["$start_with?"]("!"))) {
                  entry = entry.$slice(1, entry.$length());
                  negate = true;
                }
                ;
                if ($truthy2(delim = function() {
                  if ($truthy2(entry["$include?"](".."))) {
                    return "..";
                  } else {
                    if ($truthy2(entry["$include?"]("-"))) {
                      return "-";
                    } else {
                      return nil2;
                    }
                    ;
                  }
                  ;
                  return nil2;
                }())) {
                  $b2 = entry.$partition(delim), $a2 = Opal2.to_ary($b2), from = $a2[0] == null ? nil2 : $a2[0], _ = $a2[1] == null ? nil2 : $a2[1], to = $a2[2] == null ? nil2 : $a2[2], $b2;
                  if ($truthy2($truthy2($a2 = to["$empty?"]()) ? $a2 : $rb_lt2(to = to.$to_i(), 0))) {
                    to = $rb_plus(source.$count($$2($nesting4, "LF")), 1);
                  }
                  ;
                  if ($truthy2(negate)) {
                    return lines = $rb_minus(lines, Opal2.Range.$new(from.$to_i(), to, false).$to_a());
                  } else {
                    return lines = lines["$|"](Opal2.Range.$new(from.$to_i(), to, false).$to_a());
                  }
                  ;
                } else if ($truthy2(negate)) {
                  return lines.$delete(entry.$to_i());
                } else if ($truthy2(lines["$include?"](line = entry.$to_i())["$!"]())) {
                  return lines["$<<"](line);
                } else {
                  return nil2;
                }
                ;
              }, $$50.$$s = self5, $$50.$$arity = 1, $$50));
              if ((shift = function() {
                if ($truthy2(start)) {
                  return $rb_minus(start, 1);
                } else {
                  return 0;
                }
                ;
                return nil2;
              }())["$=="](0)) {
              } else {
                lines = $send2(lines, "map", [], ($$51 = function(it) {
                  var self6 = $$51.$$s || this;
                  if (it == null) {
                    it = nil2;
                  }
                  ;
                  return $rb_minus(it, shift);
                }, $$51.$$s = self5, $$51.$$arity = 1, $$51));
              }
              ;
              return lines.$sort();
            }, $Substitutors_resolve_lines_to_highlight$49.$$arity = -3);
            Opal2.def(self4, "$extract_passthroughs", $Substitutors_extract_passthroughs$52 = function $$extract_passthroughs(text) {
              var $a2, $b2, $$53, $$54, $$55, self5 = this, compat_mode = nil2, passthrus = nil2, pass_inline_char1 = nil2, pass_inline_char2 = nil2, pass_inline_rx = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if (self5.passthroughs == null)
                self5.passthroughs = nil2;
              compat_mode = self5.document.$compat_mode();
              passthrus = self5.passthroughs;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = text["$include?"]("++")) ? $b2 : text["$include?"]("$$")) ? $a2 : text["$include?"]("ss:"))) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlinePassMacroRx")], ($$53 = function() {
                  var self6 = $$53.$$s || this, $c, boundary = nil2, attrlist = nil2, escape_count = nil2, preceding = nil2, old_behavior = nil2, attributes = nil2, subs = nil2, $writer = nil2, passthru_key = nil2;
                  if ($truthy2(boundary = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](4))) {
                    if ($truthy2($truthy2($c = compat_mode) ? boundary["$=="]("++") : $c)) {
                      return "" + function() {
                        if ($truthy2(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2))) {
                          return "" + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1)) + "[" + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2)) + "]" + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3));
                        } else {
                          return "" + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1)) + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3));
                        }
                        ;
                        return nil2;
                      }() + "++" + self6.$extract_passthroughs(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](5)) + "++";
                    }
                    ;
                    if ($truthy2(attrlist = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2))) {
                      if ($truthy2($rb_gt2(escape_count = (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3)).$length(), 0))) {
                        return "" + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1)) + "[" + attrlist + "]" + $rb_times($$2($nesting4, "RS"), $rb_minus(escape_count, 1)) + boundary + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](5)) + boundary;
                      } else if ((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1))["$=="]($$2($nesting4, "RS"))) {
                        preceding = "[" + attrlist + "]";
                      } else {
                        if ($truthy2(($c = boundary["$=="]("++")) ? attrlist["$end_with?"]("x-") : boundary["$=="]("++"))) {
                          old_behavior = true;
                          attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2));
                        }
                        ;
                        attributes = self6.$parse_quoted_text_attributes(attrlist);
                      }
                    } else if ($truthy2($rb_gt2(escape_count = (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3)).$length(), 0))) {
                      return "" + $rb_times($$2($nesting4, "RS"), $rb_minus(escape_count, 1)) + boundary + (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](5)) + boundary;
                    }
                    ;
                    subs = function() {
                      if (boundary["$=="]("+++")) {
                        return [];
                      } else {
                        return $$2($nesting4, "BASIC_SUBS");
                      }
                      ;
                      return nil2;
                    }();
                    if ($truthy2(attributes)) {
                      if ($truthy2(old_behavior)) {
                        $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs", "type", "attributes"], { "text": ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](5), "subs": $$2($nesting4, "NORMAL_SUBS"), "type": "monospaced", "attributes": attributes })];
                        $send2(passthrus, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      } else {
                        $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs", "type", "attributes"], { "text": ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](5), "subs": subs, "type": "unquoted", "attributes": attributes })];
                        $send2(passthrus, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                    } else {
                      $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs"], { "text": ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](5), "subs": subs })];
                      $send2(passthrus, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                  } else {
                    if ((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](6))["$=="]($$2($nesting4, "RS"))) {
                      return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                    }
                    ;
                    if ($truthy2(subs = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](7))) {
                      $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs"], { "text": self6.$normalize_text(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](8), nil2, true), "subs": self6.$resolve_pass_subs(subs) })];
                      $send2(passthrus, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    } else {
                      $writer = [passthru_key = passthrus.$size(), $hash22(["text"], { "text": self6.$normalize_text(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](8), nil2, true) })];
                      $send2(passthrus, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                  }
                  ;
                  return "" + ($truthy2($c = preceding) ? $c : "") + $$2($nesting4, "PASS_START") + passthru_key + $$2($nesting4, "PASS_END");
                }, $$53.$$s = self5, $$53.$$arity = 0, $$53));
              }
              ;
              $b2 = $$2($nesting4, "InlinePassRx")["$[]"](compat_mode), $a2 = Opal2.to_ary($b2), pass_inline_char1 = $a2[0] == null ? nil2 : $a2[0], pass_inline_char2 = $a2[1] == null ? nil2 : $a2[1], pass_inline_rx = $a2[2] == null ? nil2 : $a2[2], $b2;
              if ($truthy2($truthy2($a2 = text["$include?"](pass_inline_char1)) ? $a2 : $truthy2($b2 = pass_inline_char2) ? text["$include?"](pass_inline_char2) : $b2)) {
                text = $send2(text, "gsub", [pass_inline_rx], ($$54 = function() {
                  var self6 = $$54.$$s || this, $c, preceding = nil2, attrlist = nil2, quoted_text = nil2, escape_mark = nil2, format_mark = nil2, content = nil2, old_behavior = nil2, attributes = nil2, $writer = nil2, passthru_key = nil2, subs = nil2;
                  preceding = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1);
                  attrlist = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2);
                  if ($truthy2((quoted_text = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3))["$start_with?"]($$2($nesting4, "RS")))) {
                    escape_mark = $$2($nesting4, "RS");
                  }
                  ;
                  format_mark = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](4);
                  content = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](5);
                  if ($truthy2(compat_mode)) {
                    old_behavior = true;
                  } else if ($truthy2(old_behavior = $truthy2($c = attrlist) ? attrlist["$end_with?"]("x-") : $c)) {
                    attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2));
                  }
                  ;
                  if ($truthy2(attrlist)) {
                    if ($truthy2(($c = format_mark["$=="]("`")) ? old_behavior["$!"]() : format_mark["$=="]("`"))) {
                      return self6.$extract_inner_passthrough(content, "" + preceding + "[" + attrlist + "]" + escape_mark);
                    } else if ($truthy2(escape_mark)) {
                      return "" + preceding + "[" + attrlist + "]" + quoted_text.$slice(1, quoted_text.$length());
                    } else if (preceding["$=="]($$2($nesting4, "RS"))) {
                      preceding = "[" + attrlist + "]";
                    } else {
                      attributes = self6.$parse_quoted_text_attributes(attrlist);
                    }
                  } else if ($truthy2(($c = format_mark["$=="]("`")) ? old_behavior["$!"]() : format_mark["$=="]("`"))) {
                    return self6.$extract_inner_passthrough(content, "" + preceding + escape_mark);
                  } else if ($truthy2(escape_mark)) {
                    return "" + preceding + quoted_text.$slice(1, quoted_text.$length());
                  }
                  ;
                  if ($truthy2(compat_mode)) {
                    $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs", "attributes", "type"], { "text": content, "subs": $$2($nesting4, "BASIC_SUBS"), "attributes": attributes, "type": "monospaced" })];
                    $send2(passthrus, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else if ($truthy2(attributes)) {
                    if ($truthy2(old_behavior)) {
                      subs = function() {
                        if (format_mark["$=="]("`")) {
                          return $$2($nesting4, "BASIC_SUBS");
                        } else {
                          return $$2($nesting4, "NORMAL_SUBS");
                        }
                        ;
                        return nil2;
                      }();
                      $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs", "attributes", "type"], { "text": content, "subs": subs, "attributes": attributes, "type": "monospaced" })];
                      $send2(passthrus, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                    } else {
                      $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs", "attributes", "type"], { "text": content, "subs": $$2($nesting4, "BASIC_SUBS"), "attributes": attributes, "type": "unquoted" })];
                      $send2(passthrus, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                  } else {
                    $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs"], { "text": content, "subs": $$2($nesting4, "BASIC_SUBS") })];
                    $send2(passthrus, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  return "" + preceding + $$2($nesting4, "PASS_START") + passthru_key + $$2($nesting4, "PASS_END");
                }, $$54.$$s = self5, $$54.$$arity = 0, $$54));
              }
              ;
              if ($truthy2($truthy2($a2 = text["$include?"](":")) ? $truthy2($b2 = text["$include?"]("stem:")) ? $b2 : text["$include?"]("math:") : $a2)) {
                text = $send2(text, "gsub", [$$2($nesting4, "InlineStemMacroRx")], ($$55 = function() {
                  var self6 = $$55.$$s || this, $c, $d, type = nil2, subs = nil2, content = nil2, $writer = nil2, passthru_key = nil2;
                  if (self6.document == null)
                    self6.document = nil2;
                  if ($truthy2((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0))["$start_with?"]($$2($nesting4, "RS")))) {
                    return (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$slice(1, (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$length());
                  }
                  ;
                  if ((type = (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1)).$to_sym())["$=="]("stem")) {
                    type = $$2($nesting4, "STEM_TYPE_ALIASES")["$[]"](self6.document.$attributes()["$[]"]("stem")).$to_sym();
                  }
                  ;
                  subs = ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2);
                  content = self6.$normalize_text(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3), nil2, true);
                  if ($truthy2($truthy2($c = ($d = type["$=="]("latexmath")) ? content["$start_with?"]("$") : type["$=="]("latexmath")) ? content["$end_with?"]("$") : $c)) {
                    content = content.$slice(1, $rb_minus(content.$length(), 2));
                  }
                  ;
                  subs = function() {
                    if ($truthy2(subs)) {
                      return self6.$resolve_pass_subs(subs);
                    } else {
                      if ($truthy2(self6.document["$basebackend?"]("html"))) {
                        return $$2($nesting4, "BASIC_SUBS");
                      } else {
                        return nil2;
                      }
                      ;
                    }
                    ;
                    return nil2;
                  }();
                  $writer = [passthru_key = passthrus.$size(), $hash22(["text", "subs", "type"], { "text": content, "subs": subs, "type": type })];
                  $send2(passthrus, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  return "" + $$2($nesting4, "PASS_START") + passthru_key + $$2($nesting4, "PASS_END");
                }, $$55.$$s = self5, $$55.$$arity = 0, $$55));
              }
              ;
              return text;
            }, $Substitutors_extract_passthroughs$52.$$arity = 1);
            Opal2.def(self4, "$restore_passthroughs", $Substitutors_restore_passthroughs$56 = function $$restore_passthroughs(text) {
              var $$57, self5 = this, passthrus = nil2;
              if (self5.passthroughs == null)
                self5.passthroughs = nil2;
              passthrus = self5.passthroughs;
              return $send2(text, "gsub", [$$2($nesting4, "PassSlotRx")], ($$57 = function() {
                var self6 = $$57.$$s || this, $a2, pass = nil2, subbed_text = nil2, type = nil2, attributes = nil2, id = nil2;
                if ($truthy2(pass = passthrus["$[]"]((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1)).$to_i()))) {
                  subbed_text = self6.$apply_subs(pass["$[]"]("text"), pass["$[]"]("subs"));
                  if ($truthy2(type = pass["$[]"]("type"))) {
                    if ($truthy2(attributes = pass["$[]"]("attributes"))) {
                      id = attributes["$[]"]("id");
                    }
                    ;
                    subbed_text = $$2($nesting4, "Inline").$new(self6, "quoted", subbed_text, $hash22(["type", "id", "attributes"], { "type": type, "id": id, "attributes": attributes })).$convert();
                  }
                  ;
                  if ($truthy2(subbed_text["$include?"]($$2($nesting4, "PASS_START")))) {
                    return self6.$restore_passthroughs(subbed_text);
                  } else {
                    return subbed_text;
                  }
                  ;
                } else {
                  self6.$logger().$error("unresolved passthrough detected: " + text);
                  return "??pass??";
                }
              }, $$57.$$s = self5, $$57.$$arity = 0, $$57));
            }, $Substitutors_restore_passthroughs$56.$$arity = 1);
            Opal2.def(self4, "$resolve_subs", $Substitutors_resolve_subs$58 = function $$resolve_subs(subs, type, defaults, subject) {
              var $$59, self5 = this, candidates = nil2, modifiers_present = nil2, resolved = nil2, invalid = nil2;
              if (type == null) {
                type = "block";
              }
              ;
              if (defaults == null) {
                defaults = nil2;
              }
              ;
              if (subject == null) {
                subject = nil2;
              }
              ;
              if ($truthy2(subs["$nil_or_empty?"]())) {
                return nil2;
              }
              ;
              candidates = nil2;
              if ($truthy2(subs["$include?"](" "))) {
                subs = subs.$delete(" ");
              }
              ;
              modifiers_present = $$2($nesting4, "SubModifierSniffRx")["$match?"](subs);
              $send2(subs.$split(","), "each", [], ($$59 = function(key) {
                var self6 = $$59.$$s || this, $a2, $b2, modifier_operation = nil2, first = nil2, resolved_keys = nil2, resolved_key = nil2, candidate = nil2, $case = nil2;
                if (key == null) {
                  key = nil2;
                }
                ;
                modifier_operation = nil2;
                if ($truthy2(modifiers_present)) {
                  if ((first = key.$chr())["$=="]("+")) {
                    modifier_operation = "append";
                    key = key.$slice(1, key.$length());
                  } else if (first["$=="]("-")) {
                    modifier_operation = "remove";
                    key = key.$slice(1, key.$length());
                  } else if ($truthy2(key["$end_with?"]("+"))) {
                    modifier_operation = "prepend";
                    key = key.$chop();
                  }
                }
                ;
                key = key.$to_sym();
                if ($truthy2(($a2 = type["$=="]("inline")) ? $truthy2($b2 = key["$=="]("verbatim")) ? $b2 : key["$=="]("v") : type["$=="]("inline"))) {
                  resolved_keys = $$2($nesting4, "BASIC_SUBS");
                } else if ($truthy2($$2($nesting4, "SUB_GROUPS")["$key?"](key))) {
                  resolved_keys = $$2($nesting4, "SUB_GROUPS")["$[]"](key);
                } else if ($truthy2($truthy2($a2 = ($b2 = type["$=="]("inline")) ? key.$length()["$=="](1) : type["$=="]("inline")) ? $$2($nesting4, "SUB_HINTS")["$key?"](key) : $a2)) {
                  resolved_key = $$2($nesting4, "SUB_HINTS")["$[]"](key);
                  if ($truthy2(candidate = $$2($nesting4, "SUB_GROUPS")["$[]"](resolved_key))) {
                    resolved_keys = candidate;
                  } else {
                    resolved_keys = [resolved_key];
                  }
                  ;
                } else {
                  resolved_keys = [key];
                }
                ;
                if ($truthy2(modifier_operation)) {
                  candidates = $truthy2($a2 = candidates) ? $a2 : function() {
                    if ($truthy2(defaults)) {
                      return defaults.$drop(0);
                    } else {
                      return [];
                    }
                    ;
                    return nil2;
                  }();
                  return function() {
                    $case = modifier_operation;
                    if ("append"["$==="]($case)) {
                      return candidates = $rb_plus(candidates, resolved_keys);
                    } else if ("prepend"["$==="]($case)) {
                      return candidates = $rb_plus(resolved_keys, candidates);
                    } else if ("remove"["$==="]($case)) {
                      return candidates = $rb_minus(candidates, resolved_keys);
                    } else {
                      return nil2;
                    }
                  }();
                } else {
                  candidates = $truthy2($a2 = candidates) ? $a2 : [];
                  return candidates = $rb_plus(candidates, resolved_keys);
                }
                ;
              }, $$59.$$s = self5, $$59.$$arity = 1, $$59));
              if ($truthy2(candidates)) {
              } else {
                return nil2;
              }
              ;
              resolved = candidates["$&"]($$2($nesting4, "SUB_OPTIONS")["$[]"](type));
              if ($truthy2($rb_minus(candidates, resolved)["$empty?"]())) {
              } else {
                invalid = $rb_minus(candidates, resolved);
                self5.$logger().$warn("invalid substitution type" + function() {
                  if ($truthy2($rb_gt2(invalid.$size(), 1))) {
                    return "s";
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + function() {
                  if ($truthy2(subject)) {
                    return " for ";
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + subject + ": " + invalid.$join(", "));
              }
              ;
              return resolved;
            }, $Substitutors_resolve_subs$58.$$arity = -2);
            Opal2.def(self4, "$resolve_block_subs", $Substitutors_resolve_block_subs$60 = function $$resolve_block_subs(subs, defaults, subject) {
              var self5 = this;
              return self5.$resolve_subs(subs, "block", defaults, subject);
            }, $Substitutors_resolve_block_subs$60.$$arity = 3);
            Opal2.def(self4, "$resolve_pass_subs", $Substitutors_resolve_pass_subs$61 = function $$resolve_pass_subs(subs) {
              var self5 = this;
              return self5.$resolve_subs(subs, "inline", nil2, "passthrough macro");
            }, $Substitutors_resolve_pass_subs$61.$$arity = 1);
            Opal2.def(self4, "$expand_subs", $Substitutors_expand_subs$62 = function $$expand_subs(subs, subject) {
              var $a2, $$63, self5 = this, $case = nil2, expanded_subs = nil2;
              if (subject == null) {
                subject = nil2;
              }
              ;
              return function() {
                $case = subs;
                if ($$$2("::", "Symbol")["$==="]($case)) {
                  if (subs["$=="]("none")) {
                    return nil2;
                  } else {
                    return $truthy2($a2 = $$2($nesting4, "SUB_GROUPS")["$[]"](subs)) ? $a2 : [subs];
                  }
                } else if ($$$2("::", "Array")["$==="]($case)) {
                  expanded_subs = [];
                  $send2(subs, "each", [], ($$63 = function(key) {
                    var self6 = $$63.$$s || this, sub_group = nil2;
                    if (key == null) {
                      key = nil2;
                    }
                    ;
                    if (key["$=="]("none")) {
                      return nil2;
                    } else if ($truthy2(sub_group = $$2($nesting4, "SUB_GROUPS")["$[]"](key))) {
                      return expanded_subs = $rb_plus(expanded_subs, sub_group);
                    } else {
                      return expanded_subs["$<<"](key);
                    }
                    ;
                  }, $$63.$$s = self5, $$63.$$arity = 1, $$63));
                  if ($truthy2(expanded_subs["$empty?"]())) {
                    return nil2;
                  } else {
                    return expanded_subs;
                  }
                  ;
                } else {
                  return self5.$resolve_subs(subs, "inline", nil2, subject);
                }
              }();
            }, $Substitutors_expand_subs$62.$$arity = -2);
            Opal2.def(self4, "$commit_subs", $Substitutors_commit_subs$64 = function $$commit_subs() {
              var $a2, $b2, $c, $d, self5 = this, default_subs = nil2, $case = nil2, custom_subs = nil2, syntax_hl = nil2, idx = nil2, $writer = nil2;
              if (self5.default_subs == null)
                self5.default_subs = nil2;
              if (self5.content_model == null)
                self5.content_model = nil2;
              if (self5.context == null)
                self5.context = nil2;
              if (self5.subs == null)
                self5.subs = nil2;
              if (self5.attributes == null)
                self5.attributes = nil2;
              if (self5.style == null)
                self5.style = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if ($truthy2(default_subs = self5.default_subs)) {
              } else {
                $case = self5.content_model;
                if ("simple"["$==="]($case)) {
                  default_subs = $$2($nesting4, "NORMAL_SUBS");
                } else if ("verbatim"["$==="]($case)) {
                  default_subs = function() {
                    if (self5.context["$=="]("verse")) {
                      return $$2($nesting4, "NORMAL_SUBS");
                    } else {
                      return $$2($nesting4, "VERBATIM_SUBS");
                    }
                    ;
                    return nil2;
                  }();
                } else if ("raw"["$==="]($case)) {
                  default_subs = function() {
                    if (self5.context["$=="]("stem")) {
                      return $$2($nesting4, "BASIC_SUBS");
                    } else {
                      return $$2($nesting4, "NO_SUBS");
                    }
                    ;
                    return nil2;
                  }();
                } else {
                  return self5.subs;
                }
              }
              ;
              if ($truthy2(custom_subs = self5.attributes["$[]"]("subs"))) {
                self5.subs = $truthy2($a2 = self5.$resolve_block_subs(custom_subs, default_subs, self5.context)) ? $a2 : [];
              } else {
                self5.subs = default_subs.$drop(0);
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = $truthy2($c = ($d = self5.context["$=="]("listing")) ? self5.style["$=="]("source") : self5.context["$=="]("listing")) ? syntax_hl = self5.document.$syntax_highlighter() : $c) ? syntax_hl["$highlight?"]() : $b2) ? idx = self5.subs.$index("specialcharacters") : $a2)) {
                $writer = [idx, "highlight"];
                $send2(self5.subs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              return nil2;
            }, $Substitutors_commit_subs$64.$$arity = 0);
            Opal2.def(self4, "$parse_attributes", $Substitutors_parse_attributes$65 = function $$parse_attributes(attrlist, posattrs, opts) {
              var $a2, self5 = this, block2 = nil2, into = nil2;
              if (self5.document == null)
                self5.document = nil2;
              if (posattrs == null) {
                posattrs = [];
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2(function() {
                if ($truthy2(attrlist)) {
                  return attrlist["$empty?"]();
                } else {
                  return true;
                }
                ;
                return nil2;
              }())) {
                return $hash22([], {});
              }
              ;
              if ($truthy2(opts["$[]"]("unescape_input"))) {
                attrlist = self5.$normalize_text(attrlist, true, true);
              }
              ;
              if ($truthy2($truthy2($a2 = opts["$[]"]("sub_input")) ? attrlist["$include?"]($$2($nesting4, "ATTR_REF_HEAD")) : $a2)) {
                attrlist = self5.document.$sub_attributes(attrlist);
              }
              ;
              if ($truthy2(opts["$[]"]("sub_result"))) {
                block2 = self5;
              }
              ;
              if ($truthy2(into = opts["$[]"]("into"))) {
                return $$2($nesting4, "AttributeList").$new(attrlist, block2).$parse_into(into, posattrs);
              } else {
                return $$2($nesting4, "AttributeList").$new(attrlist, block2).$parse(posattrs);
              }
              ;
            }, $Substitutors_parse_attributes$65.$$arity = -2);
            self4.$private();
            Opal2.def(self4, "$extract_attributes_from_text", $Substitutors_extract_attributes_from_text$66 = function $$extract_attributes_from_text(text, default_text) {
              var self5 = this, attrlist = nil2, resolved_text = nil2, attrs = nil2;
              if (default_text == null) {
                default_text = nil2;
              }
              ;
              attrlist = function() {
                if ($truthy2(text["$include?"]($$2($nesting4, "LF")))) {
                  return text.$tr($$2($nesting4, "LF"), " ");
                } else {
                  return text;
                }
                ;
                return nil2;
              }();
              if ($truthy2(resolved_text = (attrs = $$2($nesting4, "AttributeList").$new(attrlist, self5).$parse())["$[]"](1))) {
                if (resolved_text["$=="](attrlist)) {
                  return [text, attrs.$clear()];
                } else {
                  return [resolved_text, attrs];
                }
              } else {
                return [default_text, attrs];
              }
              ;
            }, $Substitutors_extract_attributes_from_text$66.$$arity = -2);
            Opal2.def(self4, "$extract_callouts", $Substitutors_extract_callouts$67 = function $$extract_callouts(source) {
              var $$68, self5 = this, callout_marks = nil2, autonum = nil2, lineno = nil2, last_lineno = nil2, callout_rx = nil2;
              callout_marks = $hash22([], {});
              autonum = lineno = 0;
              last_lineno = nil2;
              callout_rx = function() {
                if ($truthy2(self5["$attr?"]("line-comment"))) {
                  return $$2($nesting4, "CalloutExtractRxMap")["$[]"](self5.$attr("line-comment"));
                } else {
                  return $$2($nesting4, "CalloutExtractRx");
                }
                ;
                return nil2;
              }();
              source = $send2(source.$split($$2($nesting4, "LF"), -1), "map", [], ($$68 = function(line) {
                var self6 = $$68.$$s || this, $$69;
                if (line == null) {
                  line = nil2;
                }
                ;
                lineno = $rb_plus(lineno, 1);
                return $send2(line, "gsub", [callout_rx], ($$69 = function() {
                  var self7 = $$69.$$s || this, $a2, $b2, $writer = nil2;
                  if ($truthy2(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2))) {
                    return (($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](0)).$sub($$2($nesting4, "RS"), "");
                  } else {
                    ($truthy2($a2 = callout_marks["$[]"](lineno)) ? $a2 : ($writer = [lineno, []], $send2(callout_marks, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))["$<<"]([$truthy2($a2 = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1)) ? $a2 : function() {
                      if ((($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](3))["$=="]("--")) {
                        return ["<!--", "-->"];
                      } else {
                        return nil2;
                      }
                      ;
                      return nil2;
                    }(), function() {
                      if ((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](4))["$=="](".")) {
                        return (autonum = $rb_plus(autonum, 1)).$to_s();
                      } else {
                        return ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](4);
                      }
                      ;
                      return nil2;
                    }()]);
                    last_lineno = lineno;
                    return "";
                  }
                }, $$69.$$s = self6, $$69.$$arity = 0, $$69));
              }, $$68.$$s = self5, $$68.$$arity = 1, $$68)).$join($$2($nesting4, "LF"));
              if ($truthy2(last_lineno)) {
                if (last_lineno["$=="](lineno)) {
                  source = "" + source + $$2($nesting4, "LF");
                }
              } else {
                callout_marks = nil2;
              }
              ;
              return [source, callout_marks];
            }, $Substitutors_extract_callouts$67.$$arity = 1);
            Opal2.def(self4, "$restore_callouts", $Substitutors_restore_callouts$70 = function $$restore_callouts(source, callout_marks, source_offset) {
              var $$71, self5 = this, preamble = nil2, lineno = nil2;
              if (source_offset == null) {
                source_offset = nil2;
              }
              ;
              if ($truthy2(source_offset)) {
                preamble = source.$slice(0, source_offset);
                source = source.$slice(source_offset, source.$length());
              } else {
                preamble = "";
              }
              ;
              lineno = 0;
              return $rb_plus(preamble, $send2(source.$split($$2($nesting4, "LF"), -1), "map", [], ($$71 = function(line) {
                var self6 = $$71.$$s || this, $a2, $b2, $$72, conums = nil2, guard = nil2, numeral = nil2;
                if (self6.document == null)
                  self6.document = nil2;
                if (line == null) {
                  line = nil2;
                }
                ;
                if ($truthy2(conums = callout_marks.$delete(lineno = $rb_plus(lineno, 1)))) {
                  if (conums.$size()["$=="](1)) {
                    $b2 = conums["$[]"](0), $a2 = Opal2.to_ary($b2), guard = $a2[0] == null ? nil2 : $a2[0], numeral = $a2[1] == null ? nil2 : $a2[1], $b2;
                    return "" + line + $$2($nesting4, "Inline").$new(self6, "callout", numeral, $hash22(["id", "attributes"], { "id": self6.document.$callouts().$read_next_id(), "attributes": $hash22(["guard"], { "guard": guard }) })).$convert();
                  } else {
                    return "" + line + $send2(conums, "map", [], ($$72 = function(guard_it, numeral_it) {
                      var self7 = $$72.$$s || this;
                      if (self7.document == null)
                        self7.document = nil2;
                      if (guard_it == null) {
                        guard_it = nil2;
                      }
                      ;
                      if (numeral_it == null) {
                        numeral_it = nil2;
                      }
                      ;
                      return $$2($nesting4, "Inline").$new(self7, "callout", numeral_it, $hash22(["id", "attributes"], { "id": self7.document.$callouts().$read_next_id(), "attributes": $hash22(["guard"], { "guard": guard_it }) })).$convert();
                    }, $$72.$$s = self6, $$72.$$arity = 2, $$72)).$join(" ");
                  }
                } else {
                  return line;
                }
                ;
              }, $$71.$$s = self5, $$71.$$arity = 1, $$71)).$join($$2($nesting4, "LF")));
            }, $Substitutors_restore_callouts$70.$$arity = -3);
            Opal2.def(self4, "$extract_inner_passthrough", $Substitutors_extract_inner_passthrough$73 = function $$extract_inner_passthrough(text, pre) {
              var $a2, $b2, self5 = this, $writer = nil2, passthru_key = nil2;
              if (self5.passthroughs == null)
                self5.passthroughs = nil2;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = text["$end_with?"]("+")) ? text["$start_with?"]("+", "\\+") : $b2) ? $$2($nesting4, "SinglePlusInlinePassRx")["$=~"](text) : $a2)) {
                if ($truthy2(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1))) {
                  return "" + pre + "`+" + (($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2)) + "+`";
                } else {
                  $writer = [passthru_key = self5.passthroughs.$size(), $hash22(["text", "subs"], { "text": ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), "subs": $$2($nesting4, "BASIC_SUBS") })];
                  $send2(self5.passthroughs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  return "" + pre + "`" + $$2($nesting4, "PASS_START") + passthru_key + $$2($nesting4, "PASS_END") + "`";
                }
              } else {
                return "" + pre + "`" + text + "`";
              }
            }, $Substitutors_extract_inner_passthrough$73.$$arity = 2);
            Opal2.def(self4, "$convert_quoted_text", $Substitutors_convert_quoted_text$74 = function $$convert_quoted_text(match, type, scope) {
              var $a2, self5 = this, attrs = nil2, unescaped_attrs = nil2, attrlist = nil2, id = nil2, attributes = nil2;
              if ($truthy2(match["$[]"](0)["$start_with?"]($$2($nesting4, "RS")))) {
                if ($truthy2(($a2 = scope["$=="]("constrained")) ? attrs = match["$[]"](2) : scope["$=="]("constrained"))) {
                  unescaped_attrs = "[" + attrs + "]";
                } else {
                  return match["$[]"](0).$slice(1, match["$[]"](0).$length());
                }
              }
              ;
              if (scope["$=="]("constrained")) {
                if ($truthy2(unescaped_attrs)) {
                  return "" + unescaped_attrs + $$2($nesting4, "Inline").$new(self5, "quoted", match["$[]"](3), $hash22(["type"], { "type": type })).$convert();
                } else {
                  if ($truthy2(attrlist = match["$[]"](2))) {
                    id = (attributes = self5.$parse_quoted_text_attributes(attrlist))["$[]"]("id");
                    if (type["$=="]("mark")) {
                      type = "unquoted";
                    }
                    ;
                  }
                  ;
                  return "" + match["$[]"](1) + $$2($nesting4, "Inline").$new(self5, "quoted", match["$[]"](3), $hash22(["type", "id", "attributes"], { "type": type, "id": id, "attributes": attributes })).$convert();
                }
              } else {
                if ($truthy2(attrlist = match["$[]"](1))) {
                  id = (attributes = self5.$parse_quoted_text_attributes(attrlist))["$[]"]("id");
                  if (type["$=="]("mark")) {
                    type = "unquoted";
                  }
                  ;
                }
                ;
                return $$2($nesting4, "Inline").$new(self5, "quoted", match["$[]"](2), $hash22(["type", "id", "attributes"], { "type": type, "id": id, "attributes": attributes })).$convert();
              }
              ;
            }, $Substitutors_convert_quoted_text$74.$$arity = 3);
            Opal2.def(self4, "$do_replacement", $Substitutors_do_replacement$75 = function $$do_replacement(m, replacement, restore) {
              var self5 = this, captured = nil2, $case = nil2;
              if ($truthy2((captured = m["$[]"](0))["$include?"]($$2($nesting4, "RS")))) {
                return captured.$sub($$2($nesting4, "RS"), "");
              } else {
                return function() {
                  $case = restore;
                  if ("none"["$==="]($case)) {
                    return replacement;
                  } else if ("bounding"["$==="]($case)) {
                    return $rb_plus($rb_plus(m["$[]"](1), replacement), m["$[]"](2));
                  } else {
                    return $rb_plus(m["$[]"](1), replacement);
                  }
                }();
              }
            }, $Substitutors_do_replacement$75.$$arity = 3);
            if ($$2($nesting4, "RUBY_ENGINE")["$=="]("opal")) {
            } else {
              nil2;
            }
            ;
            Opal2.def(self4, "$parse_quoted_text_attributes", $Substitutors_parse_quoted_text_attributes$76 = function $$parse_quoted_text_attributes(str) {
              var $a2, $b2, self5 = this, before = nil2, _ = nil2, after = nil2, attrs = nil2, $writer = nil2, id = nil2, roles = nil2;
              if ($truthy2(str["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                str = self5.$sub_attributes(str);
              }
              ;
              if ($truthy2(str["$include?"](","))) {
                str = str.$slice(0, str.$index(","));
              }
              ;
              if ($truthy2((str = str.$strip())["$empty?"]())) {
                return $hash22([], {});
              } else if ($truthy2($truthy2($a2 = str["$start_with?"](".", "#")) ? $$2($nesting4, "Compliance").$shorthand_property_syntax() : $a2)) {
                $b2 = str.$partition("#"), $a2 = Opal2.to_ary($b2), before = $a2[0] == null ? nil2 : $a2[0], _ = $a2[1] == null ? nil2 : $a2[1], after = $a2[2] == null ? nil2 : $a2[2], $b2;
                attrs = $hash22([], {});
                if ($truthy2(after["$empty?"]())) {
                  if ($truthy2($rb_gt2(before.$length(), 1))) {
                    $writer = ["role", before.$tr(".", " ").$lstrip()];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else {
                  $b2 = after.$partition("."), $a2 = Opal2.to_ary($b2), id = $a2[0] == null ? nil2 : $a2[0], _ = $a2[1] == null ? nil2 : $a2[1], roles = $a2[2] == null ? nil2 : $a2[2], $b2;
                  if ($truthy2(id["$empty?"]())) {
                  } else {
                    $writer = ["id", id];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(roles["$empty?"]())) {
                    if ($truthy2($rb_gt2(before.$length(), 1))) {
                      $writer = ["role", before.$tr(".", " ").$lstrip()];
                      $send2(attrs, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                  } else if ($truthy2($rb_gt2(before.$length(), 1))) {
                    $writer = ["role", $rb_plus($rb_plus(before, "."), roles).$tr(".", " ").$lstrip()];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    $writer = ["role", roles.$tr(".", " ")];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }
                ;
                return attrs;
              } else {
                return $hash22(["role"], { "role": str });
              }
              ;
            }, $Substitutors_parse_quoted_text_attributes$76.$$arity = 1);
            Opal2.def(self4, "$normalize_text", $Substitutors_normalize_text$77 = function $$normalize_text(text, normalize_whitespace, unescape_closing_square_brackets) {
              var $a2, self5 = this;
              if (normalize_whitespace == null) {
                normalize_whitespace = nil2;
              }
              ;
              if (unescape_closing_square_brackets == null) {
                unescape_closing_square_brackets = nil2;
              }
              ;
              if ($truthy2(text["$empty?"]())) {
              } else {
                if ($truthy2(normalize_whitespace)) {
                  text = text.$strip().$tr($$2($nesting4, "LF"), " ");
                }
                ;
                if ($truthy2($truthy2($a2 = unescape_closing_square_brackets) ? text["$include?"]($$2($nesting4, "R_SB")) : $a2)) {
                  text = text.$gsub($$2($nesting4, "ESC_R_SB"), $$2($nesting4, "R_SB"));
                }
                ;
              }
              ;
              return text;
            }, $Substitutors_normalize_text$77.$$arity = -2);
            Opal2.def(self4, "$split_simple_csv", $Substitutors_split_simple_csv$78 = function $$split_simple_csv(str) {
              var $$79, $$80, self5 = this, values = nil2, accum = nil2, quote_open = nil2;
              if ($truthy2(str["$empty?"]())) {
                return [];
              } else if ($truthy2(str["$include?"]('"'))) {
                values = [];
                accum = "";
                quote_open = nil2;
                $send2(str, "each_char", [], ($$79 = function(c) {
                  var self6 = $$79.$$s || this, $case = nil2;
                  if (c == null) {
                    c = nil2;
                  }
                  ;
                  return function() {
                    $case = c;
                    if (","["$==="]($case)) {
                      if ($truthy2(quote_open)) {
                        return accum = $rb_plus(accum, c);
                      } else {
                        values["$<<"](accum.$strip());
                        return accum = "";
                      }
                    } else if ('"'["$==="]($case)) {
                      return quote_open = quote_open["$!"]();
                    } else {
                      return accum = $rb_plus(accum, c);
                    }
                  }();
                }, $$79.$$s = self5, $$79.$$arity = 1, $$79));
                return values["$<<"](accum.$strip());
              } else {
                return $send2(str.$split(","), "map", [], ($$80 = function(it) {
                  var self6 = $$80.$$s || this;
                  if (it == null) {
                    it = nil2;
                  }
                  ;
                  return it.$strip();
                }, $$80.$$s = self5, $$80.$$arity = 1, $$80));
              }
            }, $Substitutors_split_simple_csv$78.$$arity = 1);
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/version"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module;
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          Opal2.const_set($nesting3[0], "VERSION", "2.0.17");
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/abstract_node"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
        Opal2.add_stubs(["$include", "$attr_reader", "$attr_accessor", "$==", "$document", "$to_s", "$[]", "$merge", "$raise", "$converter", "$attributes", "$key?", "$[]=", "$-", "$delete", "$tap", "$new", "$each_key", "$end_with?", "$<<", "$slice", "$length", "$update", "$split", "$include?", "$===", "$join", "$empty?", "$apply_reftext_subs", "$attr?", "$attr", "$extname?", "$image_uri", "$<", "$safe", "$uriish?", "$encode_spaces_in_uri", "$normalize_web_path", "$generate_data_uri_from_uri", "$generate_data_uri", "$extname", "$normalize_system_path", "$readable?", "$strict_encode64", "$binread", "$warn", "$logger", "$require_library", "$!", "$open_uri", "$content_type", "$read", "$base_dir", "$root?", "$path_resolver", "$system_path", "$web_path", "$!=", "$prepare_source_string", "$fetch", "$read_asset"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "AbstractNode");
            var $nesting4 = [self4].concat($parent_nesting3), $AbstractNode_initialize$1, $AbstractNode_block$ques$2, $AbstractNode_inline$ques$3, $AbstractNode_converter$4, $AbstractNode_parent$eq$5, $AbstractNode_attr$6, $AbstractNode_attr$ques$7, $AbstractNode_set_attr$8, $AbstractNode_remove_attr$9, $AbstractNode_option$ques$10, $AbstractNode_set_option$11, $AbstractNode_enabled_options$12, $AbstractNode_update_attributes$15, $AbstractNode_role$16, $AbstractNode_roles$17, $AbstractNode_role$ques$18, $AbstractNode_has_role$ques$19, $AbstractNode_role$eq$20, $AbstractNode_add_role$21, $AbstractNode_remove_role$22, $AbstractNode_reftext$23, $AbstractNode_reftext$ques$24, $AbstractNode_icon_uri$25, $AbstractNode_image_uri$26, $AbstractNode_media_uri$27, $AbstractNode_generate_data_uri$28, $AbstractNode_generate_data_uri_from_uri$29, $AbstractNode_normalize_asset_path$31, $AbstractNode_normalize_system_path$32, $AbstractNode_normalize_web_path$33, $AbstractNode_read_asset$34, $AbstractNode_read_contents$35, $AbstractNode_is_uri$ques$38;
            self4.$$prototype.document = self4.$$prototype.attributes = self4.$$prototype.parent = nil2;
            self4.$include($$2($nesting4, "Logging"));
            self4.$include($$2($nesting4, "Substitutors"));
            self4.$attr_reader("attributes");
            self4.$attr_reader("context");
            self4.$attr_reader("document");
            self4.$attr_accessor("id");
            self4.$attr_reader("node_name");
            self4.$attr_reader("parent");
            Opal2.def(self4, "$initialize", $AbstractNode_initialize$1 = function $$initialize(parent, context, opts) {
              var self5 = this, attrs = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if (context["$=="]("document")) {
                self5.document = self5;
              } else if ($truthy2(parent)) {
                self5.document = (self5.parent = parent).$document();
              }
              ;
              self5.node_name = (self5.context = context).$to_s();
              self5.attributes = function() {
                if ($truthy2(attrs = opts["$[]"]("attributes"))) {
                  return attrs.$merge();
                } else {
                  return $hash22([], {});
                }
                ;
                return nil2;
              }();
              return self5.passthroughs = [];
            }, $AbstractNode_initialize$1.$$arity = -3);
            Opal2.def(self4, "$block?", $AbstractNode_block$ques$2 = function() {
              var self5 = this;
              return self5.$raise($$$2("::", "NotImplementedError"));
            }, $AbstractNode_block$ques$2.$$arity = 0);
            Opal2.def(self4, "$inline?", $AbstractNode_inline$ques$3 = function() {
              var self5 = this;
              return self5.$raise($$$2("::", "NotImplementedError"));
            }, $AbstractNode_inline$ques$3.$$arity = 0);
            Opal2.def(self4, "$converter", $AbstractNode_converter$4 = function $$converter() {
              var self5 = this;
              return self5.document.$converter();
            }, $AbstractNode_converter$4.$$arity = 0);
            Opal2.def(self4, "$parent=", $AbstractNode_parent$eq$5 = function(parent) {
              var $a2, self5 = this;
              return $a2 = [parent, parent.$document()], self5.parent = $a2[0], self5.document = $a2[1], $a2;
            }, $AbstractNode_parent$eq$5.$$arity = 1);
            Opal2.def(self4, "$attr", $AbstractNode_attr$6 = function $$attr(name, default_value, fallback_name) {
              var $a2, $b2, $c, $d, self5 = this;
              if (default_value == null) {
                default_value = nil2;
              }
              ;
              if (fallback_name == null) {
                fallback_name = nil2;
              }
              ;
              return $truthy2($a2 = self5.attributes["$[]"](name.$to_s())) ? $a2 : $truthy2($b2 = $truthy2($c = $truthy2($d = fallback_name) ? self5.parent : $d) ? self5.document.$attributes()["$[]"](function() {
                if (fallback_name["$=="](true)) {
                  return name;
                } else {
                  return fallback_name;
                }
                ;
                return nil2;
              }().$to_s()) : $c) ? $b2 : default_value;
            }, $AbstractNode_attr$6.$$arity = -2);
            Opal2.def(self4, "$attr?", $AbstractNode_attr$ques$7 = function(name, expected_value, fallback_name) {
              var $a2, $b2, self5 = this;
              if (expected_value == null) {
                expected_value = nil2;
              }
              ;
              if (fallback_name == null) {
                fallback_name = nil2;
              }
              ;
              if ($truthy2(expected_value)) {
                return expected_value["$=="]($truthy2($a2 = self5.attributes["$[]"](name.$to_s())) ? $a2 : function() {
                  if ($truthy2($truthy2($b2 = fallback_name) ? self5.parent : $b2)) {
                    return self5.document.$attributes()["$[]"](function() {
                      if (fallback_name["$=="](true)) {
                        return name;
                      } else {
                        return fallback_name;
                      }
                      ;
                      return nil2;
                    }().$to_s());
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }());
              } else {
                return $truthy2($a2 = self5.attributes["$key?"](name.$to_s())) ? $a2 : function() {
                  if ($truthy2($truthy2($b2 = fallback_name) ? self5.parent : $b2)) {
                    return self5.document.$attributes()["$key?"](function() {
                      if (fallback_name["$=="](true)) {
                        return name;
                      } else {
                        return fallback_name;
                      }
                      ;
                      return nil2;
                    }().$to_s());
                  } else {
                    return false;
                  }
                  ;
                  return nil2;
                }();
              }
              ;
            }, $AbstractNode_attr$ques$7.$$arity = -2);
            Opal2.def(self4, "$set_attr", $AbstractNode_set_attr$8 = function $$set_attr(name, value, overwrite) {
              var $a2, self5 = this, $writer = nil2;
              if (value == null) {
                value = "";
              }
              ;
              if (overwrite == null) {
                overwrite = true;
              }
              ;
              if ($truthy2(($a2 = overwrite["$=="](false)) ? self5.attributes["$key?"](name) : overwrite["$=="](false))) {
                return false;
              } else {
                $writer = [name, value];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                return true;
              }
              ;
            }, $AbstractNode_set_attr$8.$$arity = -2);
            Opal2.def(self4, "$remove_attr", $AbstractNode_remove_attr$9 = function $$remove_attr(name) {
              var self5 = this;
              return self5.attributes.$delete(name);
            }, $AbstractNode_remove_attr$9.$$arity = 1);
            Opal2.def(self4, "$option?", $AbstractNode_option$ques$10 = function(name) {
              var self5 = this;
              if ($truthy2(self5.attributes["$[]"]("" + name + "-option"))) {
                return true;
              } else {
                return false;
              }
            }, $AbstractNode_option$ques$10.$$arity = 1);
            Opal2.def(self4, "$set_option", $AbstractNode_set_option$11 = function $$set_option(name) {
              var self5 = this, $writer = nil2;
              $writer = ["" + name + "-option", ""];
              $send2(self5.attributes, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return nil2;
            }, $AbstractNode_set_option$11.$$arity = 1);
            Opal2.def(self4, "$enabled_options", $AbstractNode_enabled_options$12 = function $$enabled_options() {
              var $$13, self5 = this;
              return $send2($$$2("::", "Set").$new(), "tap", [], ($$13 = function(accum) {
                var self6 = $$13.$$s || this, $$14;
                if (self6.attributes == null)
                  self6.attributes = nil2;
                if (accum == null) {
                  accum = nil2;
                }
                ;
                return $send2(self6.attributes, "each_key", [], ($$14 = function(k) {
                  var self7 = $$14.$$s || this;
                  if (k == null) {
                    k = nil2;
                  }
                  ;
                  if ($truthy2(k.$to_s()["$end_with?"]("-option"))) {
                    return accum["$<<"](k.$slice(0, $rb_minus(k.$length(), 7)));
                  } else {
                    return nil2;
                  }
                  ;
                }, $$14.$$s = self6, $$14.$$arity = 1, $$14));
              }, $$13.$$s = self5, $$13.$$arity = 1, $$13));
            }, $AbstractNode_enabled_options$12.$$arity = 0);
            Opal2.def(self4, "$update_attributes", $AbstractNode_update_attributes$15 = function $$update_attributes(new_attributes) {
              var self5 = this;
              return self5.attributes.$update(new_attributes);
            }, $AbstractNode_update_attributes$15.$$arity = 1);
            Opal2.def(self4, "$role", $AbstractNode_role$16 = function $$role() {
              var self5 = this;
              return self5.attributes["$[]"]("role");
            }, $AbstractNode_role$16.$$arity = 0);
            Opal2.def(self4, "$roles", $AbstractNode_roles$17 = function $$roles() {
              var self5 = this, val = nil2;
              if ($truthy2(val = self5.attributes["$[]"]("role"))) {
                return val.$split();
              } else {
                return [];
              }
            }, $AbstractNode_roles$17.$$arity = 0);
            Opal2.def(self4, "$role?", $AbstractNode_role$ques$18 = function(expected_value) {
              var self5 = this;
              if (expected_value == null) {
                expected_value = nil2;
              }
              ;
              if ($truthy2(expected_value)) {
                return expected_value["$=="](self5.attributes["$[]"]("role"));
              } else {
                return self5.attributes["$key?"]("role");
              }
              ;
            }, $AbstractNode_role$ques$18.$$arity = -1);
            Opal2.def(self4, "$has_role?", $AbstractNode_has_role$ques$19 = function(name) {
              var self5 = this, val = nil2;
              if ($truthy2(val = self5.attributes["$[]"]("role"))) {
                return (" " + val + " ")["$include?"](" " + name + " ");
              } else {
                return false;
              }
            }, $AbstractNode_has_role$ques$19.$$arity = 1);
            Opal2.def(self4, "$role=", $AbstractNode_role$eq$20 = function(names) {
              var self5 = this, $writer = nil2;
              $writer = ["role", function() {
                if ($truthy2($$$2("::", "Array")["$==="](names))) {
                  return names.$join(" ");
                } else {
                  return names;
                }
                ;
                return nil2;
              }()];
              $send2(self5.attributes, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $AbstractNode_role$eq$20.$$arity = 1);
            Opal2.def(self4, "$add_role", $AbstractNode_add_role$21 = function $$add_role(name) {
              var self5 = this, val = nil2, $writer = nil2;
              if ($truthy2(val = self5.attributes["$[]"]("role"))) {
                if ($truthy2((" " + val + " ")["$include?"](" " + name + " "))) {
                  return false;
                } else {
                  $writer = ["role", "" + val + " " + name];
                  $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  return true;
                }
              } else {
                $writer = ["role", name];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                return true;
              }
            }, $AbstractNode_add_role$21.$$arity = 1);
            Opal2.def(self4, "$remove_role", $AbstractNode_remove_role$22 = function $$remove_role(name) {
              var $a2, self5 = this, val = nil2, $writer = nil2;
              if ($truthy2($truthy2($a2 = val = self5.attributes["$[]"]("role")) ? (val = val.$split()).$delete(name) : $a2)) {
                if ($truthy2(val["$empty?"]())) {
                  self5.attributes.$delete("role");
                } else {
                  $writer = ["role", val.$join(" ")];
                  $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                return true;
              } else {
                return false;
              }
            }, $AbstractNode_remove_role$22.$$arity = 1);
            Opal2.def(self4, "$reftext", $AbstractNode_reftext$23 = function $$reftext() {
              var self5 = this, val = nil2;
              if ($truthy2(val = self5.attributes["$[]"]("reftext"))) {
                return self5.$apply_reftext_subs(val);
              } else {
                return nil2;
              }
            }, $AbstractNode_reftext$23.$$arity = 0);
            Opal2.def(self4, "$reftext?", $AbstractNode_reftext$ques$24 = function() {
              var self5 = this;
              return self5.attributes["$key?"]("reftext");
            }, $AbstractNode_reftext$ques$24.$$arity = 0);
            Opal2.def(self4, "$icon_uri", $AbstractNode_icon_uri$25 = function $$icon_uri(name) {
              var self5 = this, icon = nil2;
              if ($truthy2(self5["$attr?"]("icon"))) {
                icon = self5.$attr("icon");
                if ($truthy2($$2($nesting4, "Helpers")["$extname?"](icon))) {
                } else {
                  icon = "" + icon + "." + self5.document.$attr("icontype", "png");
                }
                ;
              } else {
                icon = "" + name + "." + self5.document.$attr("icontype", "png");
              }
              ;
              return self5.$image_uri(icon, "iconsdir");
            }, $AbstractNode_icon_uri$25.$$arity = 1);
            Opal2.def(self4, "$image_uri", $AbstractNode_image_uri$26 = function $$image_uri(target_image, asset_dir_key) {
              var $a2, $b2, $c, $d, self5 = this, doc = nil2, images_base = nil2;
              if (asset_dir_key == null) {
                asset_dir_key = "imagesdir";
              }
              ;
              if ($truthy2($truthy2($a2 = $rb_lt2((doc = self5.document).$safe(), $$$2($$2($nesting4, "SafeMode"), "SECURE"))) ? doc["$attr?"]("data-uri") : $a2)) {
                if ($truthy2($truthy2($a2 = $truthy2($b2 = $$2($nesting4, "Helpers")["$uriish?"](target_image)) ? target_image = $$2($nesting4, "Helpers").$encode_spaces_in_uri(target_image) : $b2) ? $a2 : $truthy2($b2 = $truthy2($c = $truthy2($d = asset_dir_key) ? images_base = doc.$attr(asset_dir_key) : $d) ? $$2($nesting4, "Helpers")["$uriish?"](images_base) : $c) ? target_image = self5.$normalize_web_path(target_image, images_base, false) : $b2)) {
                  if ($truthy2(doc["$attr?"]("allow-uri-read"))) {
                    return self5.$generate_data_uri_from_uri(target_image, doc["$attr?"]("cache-uri"));
                  } else {
                    return target_image;
                  }
                } else {
                  return self5.$generate_data_uri(target_image, asset_dir_key);
                }
              } else {
                return self5.$normalize_web_path(target_image, function() {
                  if ($truthy2(asset_dir_key)) {
                    return doc.$attr(asset_dir_key);
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }());
              }
              ;
            }, $AbstractNode_image_uri$26.$$arity = -2);
            Opal2.def(self4, "$media_uri", $AbstractNode_media_uri$27 = function $$media_uri(target, asset_dir_key) {
              var self5 = this;
              if (asset_dir_key == null) {
                asset_dir_key = "imagesdir";
              }
              ;
              return self5.$normalize_web_path(target, function() {
                if ($truthy2(asset_dir_key)) {
                  return self5.document.$attr(asset_dir_key);
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }());
            }, $AbstractNode_media_uri$27.$$arity = -2);
            Opal2.def(self4, "$generate_data_uri", $AbstractNode_generate_data_uri$28 = function $$generate_data_uri(target_image, asset_dir_key) {
              var self5 = this, ext = nil2, mimetype = nil2, image_path = nil2;
              if (asset_dir_key == null) {
                asset_dir_key = nil2;
              }
              ;
              if ($truthy2(ext = $$2($nesting4, "Helpers").$extname(target_image, nil2))) {
                mimetype = function() {
                  if (ext["$=="](".svg")) {
                    return "image/svg+xml";
                  } else {
                    return "image/" + ext.$slice(1, ext.$length());
                  }
                  ;
                  return nil2;
                }();
              } else {
                mimetype = "application/octet-stream";
              }
              ;
              if ($truthy2(asset_dir_key)) {
                image_path = self5.$normalize_system_path(target_image, self5.document.$attr(asset_dir_key), nil2, $hash22(["target_name"], { "target_name": "image" }));
              } else {
                image_path = self5.$normalize_system_path(target_image);
              }
              ;
              if ($truthy2($$$2("::", "File")["$readable?"](image_path))) {
                return "data:" + mimetype + ";base64," + $$$2("::", "Base64").$strict_encode64($$$2("::", "File").$binread(image_path));
              } else {
                self5.$logger().$warn("image to embed not found or not readable: " + image_path);
                return "data:" + mimetype + ";base64,";
              }
              ;
            }, $AbstractNode_generate_data_uri$28.$$arity = -2);
            Opal2.def(self4, "$generate_data_uri_from_uri", $AbstractNode_generate_data_uri_from_uri$29 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {
              var $a2, $b2, $$30, self5 = this, mimetype = nil2, bindata = nil2;
              if (cache_uri == null) {
                cache_uri = false;
              }
              ;
              if ($truthy2(cache_uri)) {
                $$2($nesting4, "Helpers").$require_library("open-uri/cached", "open-uri-cached");
              } else if ($truthy2($$2($nesting4, "RUBY_ENGINE_OPAL")["$!"]())) {
                $$$2("::", "OpenURI");
              }
              ;
              try {
                $b2 = $send2($$$2("::", "OpenURI"), "open_uri", [image_uri, $$2($nesting4, "URI_READ_MODE")], ($$30 = function(f) {
                  var self6 = $$30.$$s || this;
                  if (f == null) {
                    f = nil2;
                  }
                  ;
                  return [f.$content_type(), f.$read()];
                }, $$30.$$s = self5, $$30.$$arity = 1, $$30)), $a2 = Opal2.to_ary($b2), mimetype = $a2[0] == null ? nil2 : $a2[0], bindata = $a2[1] == null ? nil2 : $a2[1], $b2;
                return "data:" + mimetype + ";base64," + $$$2("::", "Base64").$strict_encode64(bindata);
              } catch ($err) {
                if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                  try {
                    self5.$logger().$warn("could not retrieve image data from URI: " + image_uri);
                    return image_uri;
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
              ;
              ;
            }, $AbstractNode_generate_data_uri_from_uri$29.$$arity = -2);
            Opal2.def(self4, "$normalize_asset_path", $AbstractNode_normalize_asset_path$31 = function $$normalize_asset_path(asset_ref, asset_name, autocorrect) {
              var self5 = this;
              if (asset_name == null) {
                asset_name = "path";
              }
              ;
              if (autocorrect == null) {
                autocorrect = true;
              }
              ;
              return self5.$normalize_system_path(asset_ref, self5.document.$base_dir(), nil2, $hash22(["target_name", "recover"], { "target_name": asset_name, "recover": autocorrect }));
            }, $AbstractNode_normalize_asset_path$31.$$arity = -2);
            Opal2.def(self4, "$normalize_system_path", $AbstractNode_normalize_system_path$32 = function $$normalize_system_path(target, start, jail, opts) {
              var $a2, self5 = this, doc = nil2;
              if (start == null) {
                start = nil2;
              }
              ;
              if (jail == null) {
                jail = nil2;
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2($rb_lt2((doc = self5.document).$safe(), $$$2($$2($nesting4, "SafeMode"), "SAFE")))) {
                if ($truthy2(start)) {
                  if ($truthy2(doc.$path_resolver()["$root?"](start))) {
                  } else {
                    start = $$$2("::", "File").$join(doc.$base_dir(), start);
                  }
                } else {
                  start = doc.$base_dir();
                }
              } else {
                start = $truthy2($a2 = start) ? $a2 : doc.$base_dir();
                jail = $truthy2($a2 = jail) ? $a2 : doc.$base_dir();
              }
              ;
              return doc.$path_resolver().$system_path(target, start, jail, opts);
            }, $AbstractNode_normalize_system_path$32.$$arity = -2);
            Opal2.def(self4, "$normalize_web_path", $AbstractNode_normalize_web_path$33 = function $$normalize_web_path(target, start, preserve_uri_target) {
              var $a2, self5 = this;
              if (start == null) {
                start = nil2;
              }
              ;
              if (preserve_uri_target == null) {
                preserve_uri_target = true;
              }
              ;
              if ($truthy2($truthy2($a2 = preserve_uri_target) ? $$2($nesting4, "Helpers")["$uriish?"](target) : $a2)) {
                return $$2($nesting4, "Helpers").$encode_spaces_in_uri(target);
              } else {
                return self5.document.$path_resolver().$web_path(target, start);
              }
              ;
            }, $AbstractNode_normalize_web_path$33.$$arity = -2);
            Opal2.def(self4, "$read_asset", $AbstractNode_read_asset$34 = function $$read_asset(path, opts) {
              var $a2, self5 = this;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2($$$2("::", "Hash")["$==="](opts))) {
              } else {
                opts = $hash22(["warn_on_failure"], { "warn_on_failure": opts["$!="](false) });
              }
              ;
              if ($truthy2($$$2("::", "File")["$readable?"](path))) {
                if ($truthy2(opts["$[]"]("normalize"))) {
                  return $$2($nesting4, "Helpers").$prepare_source_string($$$2("::", "File").$read(path, $hash22(["mode"], { "mode": $$2($nesting4, "FILE_READ_MODE") }))).$join($$2($nesting4, "LF"));
                } else {
                  return $$$2("::", "File").$read(path, $hash22(["mode"], { "mode": $$2($nesting4, "FILE_READ_MODE") }));
                }
              } else if ($truthy2(opts["$[]"]("warn_on_failure"))) {
                self5.$logger().$warn("" + ($truthy2($a2 = self5.$attr("docfile")) ? $a2 : "<stdin>") + ": " + ($truthy2($a2 = opts["$[]"]("label")) ? $a2 : "file") + " does not exist or cannot be read: " + path);
                return nil2;
              } else {
                return nil2;
              }
              ;
            }, $AbstractNode_read_asset$34.$$arity = -2);
            Opal2.def(self4, "$read_contents", $AbstractNode_read_contents$35 = function $$read_contents(target, opts) {
              var $a2, $b2, $c, $$36, $$37, self5 = this, doc = nil2, start = nil2, contents = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              doc = self5.document;
              if ($truthy2($truthy2($a2 = $$2($nesting4, "Helpers")["$uriish?"](target)) ? $a2 : $truthy2($b2 = $truthy2($c = start = opts["$[]"]("start")) ? $$2($nesting4, "Helpers")["$uriish?"](start) : $c) ? target = doc.$path_resolver().$web_path(target, start) : $b2)) {
                if ($truthy2(doc["$attr?"]("allow-uri-read"))) {
                  if ($truthy2(doc["$attr?"]("cache-uri"))) {
                    $$2($nesting4, "Helpers").$require_library("open-uri/cached", "open-uri-cached");
                  }
                  ;
                  try {
                    if ($truthy2(opts["$[]"]("normalize"))) {
                      contents = $$2($nesting4, "Helpers").$prepare_source_string($send2($$$2("::", "OpenURI"), "open_uri", [target, $$2($nesting4, "URI_READ_MODE")], ($$36 = function(f) {
                        var self6 = $$36.$$s || this;
                        if (f == null) {
                          f = nil2;
                        }
                        ;
                        return f.$read();
                      }, $$36.$$s = self5, $$36.$$arity = 1, $$36))).$join($$2($nesting4, "LF"));
                    } else {
                      contents = $send2($$$2("::", "OpenURI"), "open_uri", [target, $$2($nesting4, "URI_READ_MODE")], ($$37 = function(f) {
                        var self6 = $$37.$$s || this;
                        if (f == null) {
                          f = nil2;
                        }
                        ;
                        return f.$read();
                      }, $$37.$$s = self5, $$37.$$arity = 1, $$37));
                    }
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        if ($truthy2(opts.$fetch("warn_on_failure", true))) {
                          self5.$logger().$warn("could not retrieve contents of " + ($truthy2($a2 = opts["$[]"]("label")) ? $a2 : "asset") + " at URI: " + target);
                        }
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                  ;
                  ;
                } else if ($truthy2(opts.$fetch("warn_on_failure", true))) {
                  self5.$logger().$warn("cannot retrieve contents of " + ($truthy2($a2 = opts["$[]"]("label")) ? $a2 : "asset") + " at URI: " + target + " (allow-uri-read attribute not enabled)");
                }
              } else {
                target = self5.$normalize_system_path(target, opts["$[]"]("start"), nil2, $hash22(["target_name"], { "target_name": $truthy2($a2 = opts["$[]"]("label")) ? $a2 : "asset" }));
                contents = self5.$read_asset(target, $hash22(["normalize", "warn_on_failure", "label"], { "normalize": opts["$[]"]("normalize"), "warn_on_failure": opts.$fetch("warn_on_failure", true), "label": opts["$[]"]("label") }));
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = contents) ? opts["$[]"]("warn_if_empty") : $b2) ? contents["$empty?"]() : $a2)) {
                self5.$logger().$warn("contents of " + ($truthy2($a2 = opts["$[]"]("label")) ? $a2 : "asset") + " is empty: " + target);
              }
              ;
              return contents;
            }, $AbstractNode_read_contents$35.$$arity = -2);
            return (Opal2.def(self4, "$is_uri?", $AbstractNode_is_uri$ques$38 = function(str) {
              var self5 = this;
              return $$2($nesting4, "Helpers")["$uriish?"](str);
            }, $AbstractNode_is_uri$ques$38.$$arity = 1), nil2) && "is_uri?";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/abstract_block"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$attr_reader", "$attr_writer", "$attr_accessor", "$==", "$===", "$level", "$file", "$lineno", "$playback_attributes", "$convert", "$converter", "$join", "$map", "$to_s", "$parent", "$parent=", "$-", "$<<", "$empty?", "$Integer", "$find_by_internal", "$to_proc", "$context", "$[]", "$items", "$+", "$find_index", "$include?", "$next_adjacent_block", "$blocks", "$select", "$sub_specialchars", "$match?", "$sub_replacements", "$title", "$apply_title_subs", "$delete", "$reftext", "$!", "$nil_or_empty?", "$sub_placeholder", "$sub_quotes", "$compat_mode", "$attributes", "$chomp", "$increment_and_store_counter", "$index=", "$numbered", "$sectname", "$counter", "$numeral=", "$numeral", "$caption=", "$int_to_roman", "$each", "$assign_numeral", "$reindex_sections", "$protected", "$has_role?", "$raise", "$header?", "$!=", "$flatten", "$head", "$rows", "$merge", "$body", "$foot", "$style", "$inner_document"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "AbstractBlock");
            var $nesting4 = [self4].concat($parent_nesting3), $AbstractBlock_initialize$1, $AbstractBlock_block$ques$2, $AbstractBlock_inline$ques$3, $AbstractBlock_file$4, $AbstractBlock_lineno$5, $AbstractBlock_convert$6, $AbstractBlock_content$7, $AbstractBlock_context$eq$9, $AbstractBlock_$lt$lt$10, $AbstractBlock_blocks$ques$11, $AbstractBlock_sections$ques$12, $AbstractBlock_number$13, $AbstractBlock_number$eq$14, $AbstractBlock_find_by$15, $AbstractBlock_next_adjacent_block$16, $AbstractBlock_sections$18, $AbstractBlock_alt$20, $AbstractBlock_caption$21, $AbstractBlock_captioned_title$22, $AbstractBlock_list_marker_keyword$23, $AbstractBlock_title$24, $AbstractBlock_title$ques$25, $AbstractBlock_title$eq$26, $AbstractBlock_sub$ques$27, $AbstractBlock_remove_sub$28, $AbstractBlock_xreftext$29, $AbstractBlock_assign_caption$30, $AbstractBlock_assign_numeral$31, $AbstractBlock_reindex_sections$32, $AbstractBlock_find_by_internal$34;
            self4.$$prototype.source_location = self4.$$prototype.document = self4.$$prototype.attributes = self4.$$prototype.blocks = self4.$$prototype.numeral = self4.$$prototype.context = self4.$$prototype.parent = self4.$$prototype.caption = self4.$$prototype.style = self4.$$prototype.converted_title = self4.$$prototype.title = self4.$$prototype.subs = self4.$$prototype.next_section_index = self4.$$prototype.next_section_ordinal = self4.$$prototype.id = self4.$$prototype.header = nil2;
            self4.$attr_reader("blocks");
            self4.$attr_writer("caption");
            self4.$attr_accessor("content_model");
            self4.$attr_accessor("level");
            self4.$attr_accessor("numeral");
            self4.$attr_accessor("source_location");
            self4.$attr_accessor("style");
            self4.$attr_reader("subs");
            Opal2.def(self4, "$initialize", $AbstractBlock_initialize$1 = function $$initialize(parent, context, opts) {
              var $a2, $iter2 = $AbstractBlock_initialize$1.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $AbstractBlock_initialize$1.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $AbstractBlock_initialize$1, false), $zuper, $iter2);
              self5.content_model = "compound";
              self5.blocks = [];
              self5.subs = [];
              self5.id = self5.title = self5.caption = self5.numeral = self5.style = self5.default_subs = self5.source_location = nil2;
              if ($truthy2($truthy2($a2 = context["$=="]("document")) ? $a2 : context["$=="]("section"))) {
                self5.level = self5.next_section_index = 0;
                return self5.next_section_ordinal = 1;
              } else if ($truthy2($$2($nesting4, "AbstractBlock")["$==="](parent))) {
                return self5.level = parent.$level();
              } else {
                return self5.level = nil2;
              }
              ;
            }, $AbstractBlock_initialize$1.$$arity = -3);
            Opal2.def(self4, "$block?", $AbstractBlock_block$ques$2 = function() {
              var self5 = this;
              return true;
            }, $AbstractBlock_block$ques$2.$$arity = 0);
            Opal2.def(self4, "$inline?", $AbstractBlock_inline$ques$3 = function() {
              var self5 = this;
              return false;
            }, $AbstractBlock_inline$ques$3.$$arity = 0);
            Opal2.def(self4, "$file", $AbstractBlock_file$4 = function $$file() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.source_location) ? self5.source_location.$file() : $a2;
            }, $AbstractBlock_file$4.$$arity = 0);
            Opal2.def(self4, "$lineno", $AbstractBlock_lineno$5 = function $$lineno() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.source_location) ? self5.source_location.$lineno() : $a2;
            }, $AbstractBlock_lineno$5.$$arity = 0);
            Opal2.def(self4, "$convert", $AbstractBlock_convert$6 = function $$convert() {
              var self5 = this;
              self5.document.$playback_attributes(self5.attributes);
              return self5.$converter().$convert(self5);
            }, $AbstractBlock_convert$6.$$arity = 0);
            Opal2.alias(self4, "render", "convert");
            Opal2.def(self4, "$content", $AbstractBlock_content$7 = function $$content() {
              var $$8, self5 = this;
              return $send2(self5.blocks, "map", [], ($$8 = function(b) {
                var self6 = $$8.$$s || this;
                if (b == null) {
                  b = nil2;
                }
                ;
                return b.$convert();
              }, $$8.$$s = self5, $$8.$$arity = 1, $$8)).$join($$2($nesting4, "LF"));
            }, $AbstractBlock_content$7.$$arity = 0);
            Opal2.def(self4, "$context=", $AbstractBlock_context$eq$9 = function(context) {
              var self5 = this;
              return self5.node_name = (self5.context = context).$to_s();
            }, $AbstractBlock_context$eq$9.$$arity = 1);
            Opal2.def(self4, "$<<", $AbstractBlock_$lt$lt$10 = function(block2) {
              var self5 = this, $writer = nil2;
              if (block2.$parent()["$=="](self5)) {
              } else {
                $writer = [self5];
                $send2(block2, "parent=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              self5.blocks["$<<"](block2);
              return self5;
            }, $AbstractBlock_$lt$lt$10.$$arity = 1);
            Opal2.alias(self4, "append", "<<");
            Opal2.def(self4, "$blocks?", $AbstractBlock_blocks$ques$11 = function() {
              var self5 = this;
              if ($truthy2(self5.blocks["$empty?"]())) {
                return false;
              } else {
                return true;
              }
            }, $AbstractBlock_blocks$ques$11.$$arity = 0);
            Opal2.def(self4, "$sections?", $AbstractBlock_sections$ques$12 = function() {
              var self5 = this;
              return false;
            }, $AbstractBlock_sections$ques$12.$$arity = 0);
            Opal2.def(self4, "$number", $AbstractBlock_number$13 = function $$number() {
              var self5 = this;
              try {
                return self5.$Integer(self5.numeral);
              } catch ($err) {
                if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                  try {
                    return self5.numeral;
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
            }, $AbstractBlock_number$13.$$arity = 0);
            Opal2.def(self4, "$number=", $AbstractBlock_number$eq$14 = function(val) {
              var self5 = this;
              return self5.numeral = val.$to_s();
            }, $AbstractBlock_number$eq$14.$$arity = 1);
            Opal2.def(self4, "$find_by", $AbstractBlock_find_by$15 = function $$find_by(selector) {
              var $iter2 = $AbstractBlock_find_by$15.$$p, block2 = $iter2 || nil2, self5 = this, result2 = nil2;
              if ($iter2)
                $AbstractBlock_find_by$15.$$p = null;
              if ($iter2)
                $AbstractBlock_find_by$15.$$p = null;
              ;
              if (selector == null) {
                selector = $hash22([], {});
              }
              ;
              try {
                return $send2(self5, "find_by_internal", [selector, result2 = []], block2.$to_proc());
              } catch ($err) {
                if (Opal2.rescue($err, [$$$2("::", "StopIteration")])) {
                  try {
                    return result2;
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
              ;
            }, $AbstractBlock_find_by$15.$$arity = -1);
            Opal2.alias(self4, "query", "find_by");
            Opal2.def(self4, "$next_adjacent_block", $AbstractBlock_next_adjacent_block$16 = function $$next_adjacent_block() {
              var $a2, $$17, self5 = this, p = nil2, sib = nil2;
              if (self5.context["$=="]("document")) {
                return nil2;
              } else if ($truthy2(($a2 = (p = self5.parent).$context()["$=="]("dlist")) ? self5.context["$=="]("list_item") : (p = self5.parent).$context()["$=="]("dlist"))) {
                if ($truthy2(sib = p.$items()["$[]"]($rb_plus($send2(p.$items(), "find_index", [], ($$17 = function(terms, desc) {
                  var self6 = $$17.$$s || this, $b2;
                  if (terms == null) {
                    terms = nil2;
                  }
                  ;
                  if (desc == null) {
                    desc = nil2;
                  }
                  ;
                  return $truthy2($b2 = terms["$include?"](self6)) ? $b2 : desc["$=="](self6);
                }, $$17.$$s = self5, $$17.$$arity = 2, $$17)), 1)))) {
                  return sib;
                } else {
                  return p.$next_adjacent_block();
                }
              } else if ($truthy2(sib = p.$blocks()["$[]"]($rb_plus(p.$blocks().$find_index(self5), 1)))) {
                return sib;
              } else {
                return p.$next_adjacent_block();
              }
            }, $AbstractBlock_next_adjacent_block$16.$$arity = 0);
            Opal2.def(self4, "$sections", $AbstractBlock_sections$18 = function $$sections() {
              var $$19, self5 = this;
              return $send2(self5.blocks, "select", [], ($$19 = function(block2) {
                var self6 = $$19.$$s || this;
                if (block2 == null) {
                  block2 = nil2;
                }
                ;
                return block2.$context()["$=="]("section");
              }, $$19.$$s = self5, $$19.$$arity = 1, $$19));
            }, $AbstractBlock_sections$18.$$arity = 0);
            Opal2.def(self4, "$alt", $AbstractBlock_alt$20 = function $$alt() {
              var self5 = this, text = nil2;
              if ($truthy2(text = self5.attributes["$[]"]("alt"))) {
                if (text["$=="](self5.attributes["$[]"]("default-alt"))) {
                  return self5.$sub_specialchars(text);
                } else {
                  text = self5.$sub_specialchars(text);
                  if ($truthy2($$2($nesting4, "ReplaceableTextRx")["$match?"](text))) {
                    return self5.$sub_replacements(text);
                  } else {
                    return text;
                  }
                  ;
                }
              } else {
                return "";
              }
            }, $AbstractBlock_alt$20.$$arity = 0);
            Opal2.def(self4, "$caption", $AbstractBlock_caption$21 = function $$caption() {
              var self5 = this;
              if (self5.context["$=="]("admonition")) {
                return self5.attributes["$[]"]("textlabel");
              } else {
                return self5.caption;
              }
            }, $AbstractBlock_caption$21.$$arity = 0);
            Opal2.def(self4, "$captioned_title", $AbstractBlock_captioned_title$22 = function $$captioned_title() {
              var self5 = this;
              return "" + self5.caption + self5.$title();
            }, $AbstractBlock_captioned_title$22.$$arity = 0);
            Opal2.def(self4, "$list_marker_keyword", $AbstractBlock_list_marker_keyword$23 = function $$list_marker_keyword(list_type) {
              var $a2, self5 = this;
              if (list_type == null) {
                list_type = nil2;
              }
              ;
              return $$2($nesting4, "ORDERED_LIST_KEYWORDS")["$[]"]($truthy2($a2 = list_type) ? $a2 : self5.style);
            }, $AbstractBlock_list_marker_keyword$23.$$arity = -1);
            Opal2.def(self4, "$title", $AbstractBlock_title$24 = function $$title() {
              var $a2, $b2, self5 = this;
              return self5.converted_title = $truthy2($a2 = self5.converted_title) ? $a2 : $truthy2($b2 = self5.title) ? self5.$apply_title_subs(self5.title) : $b2;
            }, $AbstractBlock_title$24.$$arity = 0);
            Opal2.def(self4, "$title?", $AbstractBlock_title$ques$25 = function() {
              var self5 = this;
              if ($truthy2(self5.title)) {
                return true;
              } else {
                return false;
              }
            }, $AbstractBlock_title$ques$25.$$arity = 0);
            Opal2.def(self4, "$title=", $AbstractBlock_title$eq$26 = function(val) {
              var self5 = this;
              self5.converted_title = nil2;
              return self5.title = val;
            }, $AbstractBlock_title$eq$26.$$arity = 1);
            Opal2.def(self4, "$sub?", $AbstractBlock_sub$ques$27 = function(name) {
              var self5 = this;
              return self5.subs["$include?"](name);
            }, $AbstractBlock_sub$ques$27.$$arity = 1);
            Opal2.def(self4, "$remove_sub", $AbstractBlock_remove_sub$28 = function $$remove_sub(sub) {
              var self5 = this;
              self5.subs.$delete(sub);
              return nil2;
            }, $AbstractBlock_remove_sub$28.$$arity = 1);
            Opal2.def(self4, "$xreftext", $AbstractBlock_xreftext$29 = function $$xreftext(xrefstyle) {
              var $a2, $b2, self5 = this, val = nil2, $case = nil2, quoted_title = nil2, caption_attr_name = nil2, prefix = nil2;
              if (xrefstyle == null) {
                xrefstyle = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = val = self5.$reftext()) ? val["$empty?"]()["$!"]() : $a2)) {
                return val;
              } else if ($truthy2($truthy2($a2 = $truthy2($b2 = xrefstyle) ? self5.title : $b2) ? self5.caption["$nil_or_empty?"]()["$!"]() : $a2)) {
                return function() {
                  $case = xrefstyle;
                  if ("full"["$==="]($case)) {
                    quoted_title = self5.$sub_placeholder(self5.$sub_quotes(function() {
                      if ($truthy2(self5.document.$compat_mode())) {
                        return "``%s''";
                      } else {
                        return '"`%s`"';
                      }
                      ;
                      return nil2;
                    }()), self5.$title());
                    if ($truthy2($truthy2($a2 = $truthy2($b2 = self5.numeral) ? caption_attr_name = $$2($nesting4, "CAPTION_ATTRIBUTE_NAMES")["$[]"](self5.context) : $b2) ? prefix = self5.document.$attributes()["$[]"](caption_attr_name) : $a2)) {
                      return "" + prefix + " " + self5.numeral + ", " + quoted_title;
                    } else {
                      return "" + self5.caption.$chomp(". ") + ", " + quoted_title;
                    }
                    ;
                  } else if ("short"["$==="]($case)) {
                    if ($truthy2($truthy2($a2 = $truthy2($b2 = self5.numeral) ? caption_attr_name = $$2($nesting4, "CAPTION_ATTRIBUTE_NAMES")["$[]"](self5.context) : $b2) ? prefix = self5.document.$attributes()["$[]"](caption_attr_name) : $a2)) {
                      return "" + prefix + " " + self5.numeral;
                    } else {
                      return self5.caption.$chomp(". ");
                    }
                  } else {
                    return self5.$title();
                  }
                }();
              } else {
                return self5.$title();
              }
              ;
            }, $AbstractBlock_xreftext$29.$$arity = -1);
            Opal2.def(self4, "$assign_caption", $AbstractBlock_assign_caption$30 = function $$assign_caption(value, caption_context) {
              var $a2, $b2, self5 = this, attr_name = nil2, prefix = nil2;
              if (caption_context == null) {
                caption_context = self5.context;
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = self5.caption) ? $b2 : self5.title["$!"]()) ? $a2 : self5.caption = $truthy2($b2 = value) ? $b2 : self5.document.$attributes()["$[]"]("caption"))) {
                return nil2;
              } else if ($truthy2($truthy2($a2 = attr_name = $$2($nesting4, "CAPTION_ATTRIBUTE_NAMES")["$[]"](caption_context)) ? prefix = self5.document.$attributes()["$[]"](attr_name) : $a2)) {
                self5.caption = "" + prefix + " " + (self5.numeral = self5.document.$increment_and_store_counter("" + caption_context + "-number", self5)) + ". ";
                return nil2;
              } else {
                return nil2;
              }
              ;
            }, $AbstractBlock_assign_caption$30.$$arity = -2);
            Opal2.def(self4, "$assign_numeral", $AbstractBlock_assign_numeral$31 = function $$assign_numeral(section) {
              var $a2, self5 = this, $writer = nil2, like = nil2, sectname = nil2, caption = nil2;
              self5.next_section_index = $rb_plus(($writer = [self5.next_section_index], $send2(section, "index=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), 1);
              if ($truthy2(like = section.$numbered())) {
                if ((sectname = section.$sectname())["$=="]("appendix")) {
                  $writer = [self5.document.$counter("appendix-number", "A")];
                  $send2(section, "numeral=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = [function() {
                    if ($truthy2(caption = self5.document.$attributes()["$[]"]("appendix-caption"))) {
                      return "" + caption + " " + section.$numeral() + ": ";
                    } else {
                      return "" + section.$numeral() + ". ";
                    }
                    ;
                    return nil2;
                  }()];
                  $send2(section, "caption=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else if ($truthy2($truthy2($a2 = sectname["$=="]("chapter")) ? $a2 : like["$=="]("chapter"))) {
                  $writer = [self5.document.$counter("chapter-number", 1).$to_s()];
                  $send2(section, "numeral=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  $writer = [function() {
                    if (sectname["$=="]("part")) {
                      return $$2($nesting4, "Helpers").$int_to_roman(self5.next_section_ordinal);
                    } else {
                      return self5.next_section_ordinal.$to_s();
                    }
                    ;
                    return nil2;
                  }()];
                  $send2(section, "numeral=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  self5.next_section_ordinal = $rb_plus(self5.next_section_ordinal, 1);
                }
              }
              ;
              return nil2;
            }, $AbstractBlock_assign_numeral$31.$$arity = 1);
            Opal2.def(self4, "$reindex_sections", $AbstractBlock_reindex_sections$32 = function $$reindex_sections() {
              var $$33, self5 = this;
              self5.next_section_index = 0;
              self5.next_section_ordinal = 1;
              return $send2(self5.blocks, "each", [], ($$33 = function(block2) {
                var self6 = $$33.$$s || this;
                if (block2 == null) {
                  block2 = nil2;
                }
                ;
                if (block2.$context()["$=="]("section")) {
                  self6.$assign_numeral(block2);
                  return block2.$reindex_sections();
                } else {
                  return nil2;
                }
                ;
              }, $$33.$$s = self5, $$33.$$arity = 1, $$33));
            }, $AbstractBlock_reindex_sections$32.$$arity = 0);
            self4.$protected();
            return (Opal2.def(self4, "$find_by_internal", $AbstractBlock_find_by_internal$34 = function $$find_by_internal(selector, result2) {
              var $iter2 = $AbstractBlock_find_by_internal$34.$$p, block2 = $iter2 || nil2, $a2, $b2, $c, $d, $$35, $$36, $$37, $$39, $$41, $$43, self5 = this, any_context = nil2, context_selector = nil2, style_selector = nil2, role_selector = nil2, id_selector = nil2, verdict = nil2, $case = nil2;
              if ($iter2)
                $AbstractBlock_find_by_internal$34.$$p = null;
              if ($iter2)
                $AbstractBlock_find_by_internal$34.$$p = null;
              ;
              if (selector == null) {
                selector = $hash22([], {});
              }
              ;
              if (result2 == null) {
                result2 = [];
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = $truthy2($c = $truthy2($d = any_context = function() {
                if ($truthy2(context_selector = selector["$[]"]("context"))) {
                  return nil2;
                } else {
                  return true;
                }
                ;
                return nil2;
              }()) ? $d : context_selector["$=="](self5.context)) ? $truthy2($d = (style_selector = selector["$[]"]("style"))["$!"]()) ? $d : style_selector["$=="](self5.style) : $c) ? $truthy2($c = (role_selector = selector["$[]"]("role"))["$!"]()) ? $c : self5["$has_role?"](role_selector) : $b2) ? $truthy2($b2 = (id_selector = selector["$[]"]("id"))["$!"]()) ? $b2 : id_selector["$=="](self5.id) : $a2)) {
                if (block2 !== nil2) {
                  if ($truthy2(verdict = Opal2.yield1(block2, self5))) {
                    $case = verdict;
                    if ("prune"["$==="]($case)) {
                      result2["$<<"](self5);
                      if ($truthy2(id_selector)) {
                        self5.$raise($$$2("::", "StopIteration"));
                      }
                      ;
                      return result2;
                    } else if ("reject"["$==="]($case)) {
                      if ($truthy2(id_selector)) {
                        self5.$raise($$$2("::", "StopIteration"));
                      }
                      ;
                      return result2;
                    } else if ("stop"["$==="]($case)) {
                      self5.$raise($$$2("::", "StopIteration"));
                    } else {
                      result2["$<<"](self5);
                      if ($truthy2(id_selector)) {
                        self5.$raise($$$2("::", "StopIteration"));
                      }
                      ;
                    }
                  } else if ($truthy2(id_selector)) {
                    self5.$raise($$$2("::", "StopIteration"));
                  }
                } else {
                  result2["$<<"](self5);
                  if ($truthy2(id_selector)) {
                    self5.$raise($$$2("::", "StopIteration"));
                  }
                  ;
                }
              }
              ;
              $case = self5.context;
              if ("document"["$==="]($case)) {
                if (context_selector["$=="]("document")) {
                } else {
                  if ($truthy2($truthy2($a2 = self5["$header?"]()) ? $truthy2($b2 = any_context) ? $b2 : context_selector["$=="]("section") : $a2)) {
                    $send2(self5.header, "find_by_internal", [selector, result2], block2.$to_proc());
                  }
                  ;
                  $send2(self5.blocks, "each", [], ($$35 = function(b) {
                    var self6 = $$35.$$s || this, $e;
                    if (b == null) {
                      b = nil2;
                    }
                    ;
                    if ($truthy2(($e = context_selector["$=="]("section")) ? b.$context()["$!="]("section") : context_selector["$=="]("section"))) {
                      return nil2;
                    }
                    ;
                    return $send2(b, "find_by_internal", [selector, result2], block2.$to_proc());
                  }, $$35.$$s = self5, $$35.$$arity = 1, $$35));
                }
              } else if ("dlist"["$==="]($case)) {
                if ($truthy2($truthy2($a2 = any_context) ? $a2 : context_selector["$!="]("section"))) {
                  $send2(self5.blocks.$flatten(), "each", [], ($$36 = function(b) {
                    var self6 = $$36.$$s || this;
                    if (b == null) {
                      b = nil2;
                    }
                    ;
                    if ($truthy2(b)) {
                      return $send2(b, "find_by_internal", [selector, result2], block2.$to_proc());
                    } else {
                      return nil2;
                    }
                    ;
                  }, $$36.$$s = self5, $$36.$$arity = 1, $$36));
                }
              } else if ("table"["$==="]($case)) {
                if ($truthy2(selector["$[]"]("traverse_documents"))) {
                  $send2(self5.$rows().$head(), "each", [], ($$37 = function(r) {
                    var self6 = $$37.$$s || this, $$38;
                    if (r == null) {
                      r = nil2;
                    }
                    ;
                    return $send2(r, "each", [], ($$38 = function(c) {
                      var self7 = $$38.$$s || this;
                      if (c == null) {
                        c = nil2;
                      }
                      ;
                      return $send2(c, "find_by_internal", [selector, result2], block2.$to_proc());
                    }, $$38.$$s = self6, $$38.$$arity = 1, $$38));
                  }, $$37.$$s = self5, $$37.$$arity = 1, $$37));
                  if (context_selector["$=="]("inner_document")) {
                    selector = selector.$merge($hash22(["context"], { "context": "document" }));
                  }
                  ;
                  $send2($rb_plus(self5.$rows().$body(), self5.$rows().$foot()), "each", [], ($$39 = function(r) {
                    var self6 = $$39.$$s || this, $$40;
                    if (r == null) {
                      r = nil2;
                    }
                    ;
                    return $send2(r, "each", [], ($$40 = function(c) {
                      var self7 = $$40.$$s || this;
                      if (c == null) {
                        c = nil2;
                      }
                      ;
                      $send2(c, "find_by_internal", [selector, result2], block2.$to_proc());
                      if (c.$style()["$=="]("asciidoc")) {
                        return $send2(c.$inner_document(), "find_by_internal", [selector, result2], block2.$to_proc());
                      } else {
                        return nil2;
                      }
                      ;
                    }, $$40.$$s = self6, $$40.$$arity = 1, $$40));
                  }, $$39.$$s = self5, $$39.$$arity = 1, $$39));
                } else {
                  $send2($rb_plus($rb_plus(self5.$rows().$head(), self5.$rows().$body()), self5.$rows().$foot()), "each", [], ($$41 = function(r) {
                    var self6 = $$41.$$s || this, $$42;
                    if (r == null) {
                      r = nil2;
                    }
                    ;
                    return $send2(r, "each", [], ($$42 = function(c) {
                      var self7 = $$42.$$s || this;
                      if (c == null) {
                        c = nil2;
                      }
                      ;
                      return $send2(c, "find_by_internal", [selector, result2], block2.$to_proc());
                    }, $$42.$$s = self6, $$42.$$arity = 1, $$42));
                  }, $$41.$$s = self5, $$41.$$arity = 1, $$41));
                }
              } else {
                $send2(self5.blocks, "each", [], ($$43 = function(b) {
                  var self6 = $$43.$$s || this, $e;
                  if (b == null) {
                    b = nil2;
                  }
                  ;
                  if ($truthy2(($e = context_selector["$=="]("section")) ? b.$context()["$!="]("section") : context_selector["$=="]("section"))) {
                    return nil2;
                  }
                  ;
                  return $send2(b, "find_by_internal", [selector, result2], block2.$to_proc());
                }, $$43.$$s = self5, $$43.$$arity = 1, $$43));
              }
              ;
              return result2;
            }, $AbstractBlock_find_by_internal$34.$$arity = -1), nil2) && "find_by_internal";
          })($nesting3[0], $$2($nesting3, "AbstractNode"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/attribute_list"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_times(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash = Opal2.hash, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
        Opal2.add_stubs(["$new", "$[]", "$update", "$parse", "$parse_attribute", "$eos?", "$skip_delimiter", "$+", "$rekey", "$each_with_index", "$[]=", "$-", "$private", "$skip_blank", "$peek", "$===", "$parse_attribute_value", "$get_byte", "$start_with?", "$scan_name", "$end_with?", "$rstrip", "$string", "$==", "$unscan", "$scan_to_delimiter", "$*", "$include?", "$delete", "$each", "$split", "$empty?", "$apply_subs", "$scan_to_quote", "$gsub", "$skip", "$scan"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "AttributeList");
            var $nesting4 = [self4].concat($parent_nesting3), $AttributeList_initialize$1, $AttributeList_parse_into$2, $AttributeList_parse$3, $AttributeList_rekey$4, $AttributeList_rekey$5, $AttributeList_parse_attribute$7, $AttributeList_parse_attribute_value$9, $AttributeList_skip_blank$10, $AttributeList_skip_delimiter$11, $AttributeList_scan_name$12, $AttributeList_scan_to_delimiter$13, $AttributeList_scan_to_quote$14;
            self4.$$prototype.attributes = self4.$$prototype.scanner = self4.$$prototype.delimiter = self4.$$prototype.block = self4.$$prototype.delimiter_skip_pattern = self4.$$prototype.delimiter_boundary_pattern = nil2;
            Opal2.const_set($nesting4[0], "APOS", "'");
            Opal2.const_set($nesting4[0], "BACKSLASH", "\\");
            Opal2.const_set($nesting4[0], "QUOT", '"');
            Opal2.const_set($nesting4[0], "BoundaryRx", $hash($$2($nesting4, "QUOT"), /.*?[^\\](?=")/, $$2($nesting4, "APOS"), /.*?[^\\](?=')/, ",", /.*?(?=[ \t]*(,|$))/));
            Opal2.const_set($nesting4[0], "EscapedQuotes", $hash($$2($nesting4, "QUOT"), '\\"', $$2($nesting4, "APOS"), "\\'"));
            Opal2.const_set($nesting4[0], "NameRx", new RegExp("" + $$2($nesting4, "CG_WORD") + "[" + $$2($nesting4, "CC_WORD") + "\\-.]*"));
            Opal2.const_set($nesting4[0], "BlankRx", /[ \t]+/);
            Opal2.const_set($nesting4[0], "SkipRx", $hash22([","], { ",": /[ \t]*(,|$)/ }));
            Opal2.def(self4, "$initialize", $AttributeList_initialize$1 = function $$initialize(source, block2, delimiter) {
              var self5 = this;
              if (block2 == null) {
                block2 = nil2;
              }
              ;
              if (delimiter == null) {
                delimiter = ",";
              }
              ;
              self5.scanner = $$$2("::", "StringScanner").$new(source);
              self5.block = block2;
              self5.delimiter = delimiter;
              self5.delimiter_skip_pattern = $$2($nesting4, "SkipRx")["$[]"](delimiter);
              self5.delimiter_boundary_pattern = $$2($nesting4, "BoundaryRx")["$[]"](delimiter);
              return self5.attributes = nil2;
            }, $AttributeList_initialize$1.$$arity = -2);
            Opal2.def(self4, "$parse_into", $AttributeList_parse_into$2 = function $$parse_into(attributes, positional_attrs) {
              var self5 = this;
              if (positional_attrs == null) {
                positional_attrs = [];
              }
              ;
              return attributes.$update(self5.$parse(positional_attrs));
            }, $AttributeList_parse_into$2.$$arity = -2);
            Opal2.def(self4, "$parse", $AttributeList_parse$3 = function $$parse(positional_attrs) {
              var $a2, self5 = this, index = nil2;
              if (positional_attrs == null) {
                positional_attrs = [];
              }
              ;
              if ($truthy2(self5.attributes)) {
                return self5.attributes;
              }
              ;
              self5.attributes = $hash22([], {});
              index = 0;
              while ($truthy2(self5.$parse_attribute(index, positional_attrs))) {
                if ($truthy2(self5.scanner["$eos?"]())) {
                  break;
                }
                ;
                self5.$skip_delimiter();
                index = $rb_plus(index, 1);
              }
              ;
              return self5.attributes;
            }, $AttributeList_parse$3.$$arity = -1);
            Opal2.def(self4, "$rekey", $AttributeList_rekey$4 = function $$rekey(positional_attrs) {
              var self5 = this;
              return $$2($nesting4, "AttributeList").$rekey(self5.attributes, positional_attrs);
            }, $AttributeList_rekey$4.$$arity = 1);
            Opal2.defs(self4, "$rekey", $AttributeList_rekey$5 = function $$rekey(attributes, positional_attrs) {
              var $$6, self5 = this;
              $send2(positional_attrs, "each_with_index", [], ($$6 = function(key, index) {
                var self6 = $$6.$$s || this, $a2, val = nil2, $writer = nil2;
                if (key == null) {
                  key = nil2;
                }
                ;
                if (index == null) {
                  index = nil2;
                }
                ;
                if ($truthy2($truthy2($a2 = key) ? val = attributes["$[]"]($rb_plus(index, 1)) : $a2)) {
                  $writer = [key, val];
                  $send2(attributes, "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                } else {
                  return nil2;
                }
                ;
              }, $$6.$$s = self5, $$6.$$arity = 2, $$6));
              return attributes;
            }, $AttributeList_rekey$5.$$arity = 2);
            self4.$private();
            Opal2.def(self4, "$parse_attribute", $AttributeList_parse_attribute$7 = function $$parse_attribute(index, positional_attrs) {
              var $a2, $b2, $$8, self5 = this, continue$ = nil2, $case = nil2, name = nil2, single_quoted = nil2, skipped = nil2, c = nil2, value = nil2, $writer = nil2, positional_attr_name = nil2;
              continue$ = true;
              self5.$skip_blank();
              $case = self5.scanner.$peek(1);
              if ($$2($nesting4, "QUOT")["$==="]($case)) {
                name = self5.$parse_attribute_value(self5.scanner.$get_byte());
              } else if ($$2($nesting4, "APOS")["$==="]($case)) {
                name = self5.$parse_attribute_value(self5.scanner.$get_byte());
                if ($truthy2(name["$start_with?"]($$2($nesting4, "APOS")))) {
                } else {
                  single_quoted = true;
                }
                ;
              } else {
                skipped = $truthy2($a2 = $truthy2($b2 = name = self5.$scan_name()) ? self5.$skip_blank() : $b2) ? $a2 : 0;
                if ($truthy2(self5.scanner["$eos?"]())) {
                  if ($truthy2($truthy2($a2 = name) ? $a2 : self5.scanner.$string().$rstrip()["$end_with?"](self5.delimiter))) {
                  } else {
                    return nil2;
                  }
                  ;
                  continue$ = nil2;
                } else if ((c = self5.scanner.$get_byte())["$=="](self5.delimiter)) {
                  self5.scanner.$unscan();
                } else if ($truthy2(name)) {
                  if (c["$=="]("=")) {
                    self5.$skip_blank();
                    $case = c = self5.scanner.$get_byte();
                    if ($$2($nesting4, "QUOT")["$==="]($case)) {
                      value = self5.$parse_attribute_value(c);
                    } else if ($$2($nesting4, "APOS")["$==="]($case)) {
                      value = self5.$parse_attribute_value(c);
                      if ($truthy2(value["$start_with?"]($$2($nesting4, "APOS")))) {
                      } else {
                        single_quoted = true;
                      }
                      ;
                    } else if (self5.delimiter["$==="]($case)) {
                      value = "";
                      self5.scanner.$unscan();
                    } else if (nil2["$==="]($case)) {
                      value = "";
                    } else {
                      value = "" + c + self5.$scan_to_delimiter();
                      if (value["$=="]("None")) {
                        return true;
                      }
                      ;
                    }
                    ;
                  } else {
                    name = "" + name + $rb_times(" ", skipped) + c + self5.$scan_to_delimiter();
                  }
                } else {
                  name = "" + c + self5.$scan_to_delimiter();
                }
                ;
              }
              ;
              if ($truthy2(value)) {
                $case = name;
                if ("options"["$==="]($case) || "opts"["$==="]($case)) {
                  if ($truthy2(value["$include?"](","))) {
                    if ($truthy2(value["$include?"](" "))) {
                      value = value.$delete(" ");
                    }
                    ;
                    $send2(value.$split(","), "each", [], ($$8 = function(opt) {
                      var self6 = $$8.$$s || this, $writer2 = nil2;
                      if (self6.attributes == null)
                        self6.attributes = nil2;
                      if (opt == null) {
                        opt = nil2;
                      }
                      ;
                      if ($truthy2(opt["$empty?"]())) {
                        return nil2;
                      } else {
                        $writer2 = ["" + opt + "-option", ""];
                        $send2(self6.attributes, "[]=", Opal2.to_a($writer2));
                        return $writer2[$rb_minus($writer2["length"], 1)];
                      }
                      ;
                    }, $$8.$$s = self5, $$8.$$arity = 1, $$8));
                  } else if ($truthy2(value["$empty?"]())) {
                  } else {
                    $writer = ["" + value + "-option", ""];
                    $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else {
                  if ($truthy2($truthy2($a2 = single_quoted) ? self5.block : $a2)) {
                    $case = name;
                    if ("title"["$==="]($case) || "reftext"["$==="]($case)) {
                      $writer = [name, value];
                      $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    } else {
                      $writer = [name, self5.block.$apply_subs(value)];
                      $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                  } else {
                    $writer = [name, value];
                    $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                }
              } else {
                if ($truthy2($truthy2($a2 = single_quoted) ? self5.block : $a2)) {
                  name = self5.block.$apply_subs(name);
                }
                ;
                if ($truthy2($truthy2($a2 = positional_attr_name = positional_attrs["$[]"](index)) ? name : $a2)) {
                  $writer = [positional_attr_name, name];
                  $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                $writer = [$rb_plus(index, 1), name];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
              }
              ;
              return continue$;
            }, $AttributeList_parse_attribute$7.$$arity = 2);
            Opal2.def(self4, "$parse_attribute_value", $AttributeList_parse_attribute_value$9 = function $$parse_attribute_value(quote) {
              var self5 = this, value = nil2;
              if (self5.scanner.$peek(1)["$=="](quote)) {
                self5.scanner.$get_byte();
                return "";
              } else if ($truthy2(value = self5.$scan_to_quote(quote))) {
                self5.scanner.$get_byte();
                if ($truthy2(value["$include?"]($$2($nesting4, "BACKSLASH")))) {
                  return value.$gsub($$2($nesting4, "EscapedQuotes")["$[]"](quote), quote);
                } else {
                  return value;
                }
                ;
              } else {
                return "" + quote + self5.$scan_to_delimiter();
              }
            }, $AttributeList_parse_attribute_value$9.$$arity = 1);
            Opal2.def(self4, "$skip_blank", $AttributeList_skip_blank$10 = function $$skip_blank() {
              var self5 = this;
              return self5.scanner.$skip($$2($nesting4, "BlankRx"));
            }, $AttributeList_skip_blank$10.$$arity = 0);
            Opal2.def(self4, "$skip_delimiter", $AttributeList_skip_delimiter$11 = function $$skip_delimiter() {
              var self5 = this;
              return self5.scanner.$skip(self5.delimiter_skip_pattern);
            }, $AttributeList_skip_delimiter$11.$$arity = 0);
            Opal2.def(self4, "$scan_name", $AttributeList_scan_name$12 = function $$scan_name() {
              var self5 = this;
              return self5.scanner.$scan($$2($nesting4, "NameRx"));
            }, $AttributeList_scan_name$12.$$arity = 0);
            Opal2.def(self4, "$scan_to_delimiter", $AttributeList_scan_to_delimiter$13 = function $$scan_to_delimiter() {
              var self5 = this;
              return self5.scanner.$scan(self5.delimiter_boundary_pattern);
            }, $AttributeList_scan_to_delimiter$13.$$arity = 0);
            return (Opal2.def(self4, "$scan_to_quote", $AttributeList_scan_to_quote$14 = function $$scan_to_quote(quote) {
              var self5 = this;
              return self5.scanner.$scan($$2($nesting4, "BoundaryRx")["$[]"](quote));
            }, $AttributeList_scan_to_quote$14.$$arity = 1), nil2) && "scan_to_quote";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/block"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $send2 = Opal2.send, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$default=", "$-", "$attr_accessor", "$[]", "$key?", "$===", "$drop", "$delete", "$to_s", "$[]=", "$commit_subs", "$nil_or_empty?", "$prepare_source_string", "$apply_subs", "$join", "$<", "$size", "$empty?", "$rstrip", "$shift", "$pop", "$==", "$warn", "$logger", "$class", "$object_id", "$inspect"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Block");
            var $nesting4 = [self4].concat($parent_nesting3), $Block_initialize$1, $Block_content$2, $Block_source$3, $Block_to_s$4, $writer = nil2;
            self4.$$prototype.attributes = self4.$$prototype.content_model = self4.$$prototype.lines = self4.$$prototype.subs = self4.$$prototype.blocks = self4.$$prototype.context = self4.$$prototype.style = nil2;
            $writer = ["simple"];
            $send2(Opal2.const_set($nesting4[0], "DEFAULT_CONTENT_MODEL", $hash22(["audio", "image", "listing", "literal", "stem", "open", "page_break", "pass", "thematic_break", "video"], { "audio": "empty", "image": "empty", "listing": "verbatim", "literal": "verbatim", "stem": "raw", "open": "compound", "page_break": "empty", "pass": "raw", "thematic_break": "empty", "video": "empty" })), "default=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            Opal2.alias(self4, "blockname", "context");
            self4.$attr_accessor("lines");
            Opal2.def(self4, "$initialize", $Block_initialize$1 = function $$initialize(parent, context, opts) {
              var $a2, $iter2 = $Block_initialize$1.$$p, $yield = $iter2 || nil2, self5 = this, subs = nil2, $case = nil2, $writer2 = nil2, raw_source = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Block_initialize$1.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Block_initialize$1, false), $zuper, $iter2);
              self5.content_model = $truthy2($a2 = opts["$[]"]("content_model")) ? $a2 : $$2($nesting4, "DEFAULT_CONTENT_MODEL")["$[]"](context);
              if ($truthy2(opts["$key?"]("subs"))) {
                if ($truthy2(subs = opts["$[]"]("subs"))) {
                  $case = subs;
                  if ("default"["$==="]($case)) {
                    self5.default_subs = opts["$[]"]("default_subs");
                  } else if ($$$2("::", "Array")["$==="]($case)) {
                    self5.default_subs = subs.$drop(0);
                    self5.attributes.$delete("subs");
                  } else {
                    self5.default_subs = nil2;
                    $writer2 = ["subs", subs.$to_s()];
                    $send2(self5.attributes, "[]=", Opal2.to_a($writer2));
                    $writer2[$rb_minus($writer2["length"], 1)];
                    ;
                  }
                  ;
                  self5.$commit_subs();
                } else {
                  self5.default_subs = [];
                  self5.attributes.$delete("subs");
                }
              } else {
                self5.default_subs = nil2;
              }
              ;
              if ($truthy2((raw_source = opts["$[]"]("source"))["$nil_or_empty?"]())) {
                return self5.lines = [];
              } else if ($truthy2($$$2("::", "String")["$==="](raw_source))) {
                return self5.lines = $$2($nesting4, "Helpers").$prepare_source_string(raw_source);
              } else {
                return self5.lines = raw_source.$drop(0);
              }
              ;
            }, $Block_initialize$1.$$arity = -3);
            Opal2.def(self4, "$content", $Block_content$2 = function $$content() {
              var $a2, $b2, $iter2 = $Block_content$2.$$p, $yield = $iter2 || nil2, self5 = this, $case = nil2, result2 = nil2, first = nil2, last = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Block_content$2.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              return function() {
                $case = self5.content_model;
                if ("compound"["$==="]($case)) {
                  return $send2(self5, Opal2.find_super_dispatcher(self5, "content", $Block_content$2, false), $zuper, $iter2);
                } else if ("simple"["$==="]($case)) {
                  return self5.$apply_subs(self5.lines.$join($$2($nesting4, "LF")), self5.subs);
                } else if ("verbatim"["$==="]($case) || "raw"["$==="]($case)) {
                  result2 = self5.$apply_subs(self5.lines, self5.subs);
                  if ($truthy2($rb_lt2(result2.$size(), 2))) {
                    return result2["$[]"](0);
                  } else {
                    while ($truthy2($truthy2($b2 = first = result2["$[]"](0)) ? first.$rstrip()["$empty?"]() : $b2)) {
                      result2.$shift();
                    }
                    ;
                    while ($truthy2($truthy2($b2 = last = result2["$[]"](-1)) ? last.$rstrip()["$empty?"]() : $b2)) {
                      result2.$pop();
                    }
                    ;
                    return result2.$join($$2($nesting4, "LF"));
                  }
                  ;
                } else {
                  if (self5.content_model["$=="]("empty")) {
                  } else {
                    self5.$logger().$warn("Unknown content model '" + self5.content_model + "' for block: " + self5);
                  }
                  ;
                  return nil2;
                }
              }();
            }, $Block_content$2.$$arity = 0);
            Opal2.def(self4, "$source", $Block_source$3 = function $$source() {
              var self5 = this;
              return self5.lines.$join($$2($nesting4, "LF"));
            }, $Block_source$3.$$arity = 0);
            return (Opal2.def(self4, "$to_s", $Block_to_s$4 = function $$to_s() {
              var self5 = this, content_summary = nil2;
              content_summary = function() {
                if (self5.content_model["$=="]("compound")) {
                  return "blocks: " + self5.blocks.$size();
                } else {
                  return "lines: " + self5.lines.$size();
                }
                ;
                return nil2;
              }();
              return "#<" + self5.$class() + "@" + self5.$object_id() + " {context: " + self5.context.$inspect() + ", content_model: " + self5.content_model.$inspect() + ", style: " + self5.style.$inspect() + ", " + content_summary + "}>";
            }, $Block_to_s$4.$$arity = 0), nil2) && "to_s";
          })($nesting3[0], $$2($nesting3, "AbstractBlock"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/callouts"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_le(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
        Opal2.add_stubs(["$next_list", "$<<", "$current_list", "$to_i", "$generate_next_callout_id", "$+", "$<=", "$size", "$[]", "$-", "$chop", "$join", "$map", "$==", "$<", "$private", "$generate_callout_id"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Callouts");
            var $nesting4 = [self4].concat($parent_nesting3), $Callouts_initialize$1, $Callouts_register$2, $Callouts_read_next_id$3, $Callouts_callout_ids$4, $Callouts_current_list$6, $Callouts_next_list$7, $Callouts_rewind$8, $Callouts_generate_next_callout_id$9, $Callouts_generate_callout_id$10;
            self4.$$prototype.co_index = self4.$$prototype.lists = self4.$$prototype.list_index = nil2;
            Opal2.def(self4, "$initialize", $Callouts_initialize$1 = function $$initialize() {
              var self5 = this;
              self5.lists = [];
              self5.list_index = 0;
              return self5.$next_list();
            }, $Callouts_initialize$1.$$arity = 0);
            Opal2.def(self4, "$register", $Callouts_register$2 = function $$register(li_ordinal) {
              var self5 = this, id = nil2;
              self5.$current_list()["$<<"]($hash22(["ordinal", "id"], { "ordinal": li_ordinal.$to_i(), "id": id = self5.$generate_next_callout_id() }));
              self5.co_index = $rb_plus(self5.co_index, 1);
              return id;
            }, $Callouts_register$2.$$arity = 1);
            Opal2.def(self4, "$read_next_id", $Callouts_read_next_id$3 = function $$read_next_id() {
              var self5 = this, id = nil2, list = nil2;
              id = nil2;
              list = self5.$current_list();
              if ($truthy2($rb_le(self5.co_index, list.$size()))) {
                id = list["$[]"]($rb_minus(self5.co_index, 1))["$[]"]("id");
              }
              ;
              self5.co_index = $rb_plus(self5.co_index, 1);
              return id;
            }, $Callouts_read_next_id$3.$$arity = 0);
            Opal2.def(self4, "$callout_ids", $Callouts_callout_ids$4 = function $$callout_ids(li_ordinal) {
              var $$5, self5 = this;
              return $send2(self5.$current_list(), "map", [], ($$5 = function(it) {
                var self6 = $$5.$$s || this;
                if (it == null) {
                  it = nil2;
                }
                ;
                if (it["$[]"]("ordinal")["$=="](li_ordinal)) {
                  return "" + it["$[]"]("id") + " ";
                } else {
                  return "";
                }
                ;
              }, $$5.$$s = self5, $$5.$$arity = 1, $$5)).$join().$chop();
            }, $Callouts_callout_ids$4.$$arity = 1);
            Opal2.def(self4, "$current_list", $Callouts_current_list$6 = function $$current_list() {
              var self5 = this;
              return self5.lists["$[]"]($rb_minus(self5.list_index, 1));
            }, $Callouts_current_list$6.$$arity = 0);
            Opal2.def(self4, "$next_list", $Callouts_next_list$7 = function $$next_list() {
              var self5 = this;
              self5.list_index = $rb_plus(self5.list_index, 1);
              if ($truthy2($rb_lt2(self5.lists.$size(), self5.list_index))) {
                self5.lists["$<<"]([]);
              }
              ;
              self5.co_index = 1;
              return nil2;
            }, $Callouts_next_list$7.$$arity = 0);
            Opal2.def(self4, "$rewind", $Callouts_rewind$8 = function $$rewind() {
              var self5 = this;
              self5.list_index = 1;
              self5.co_index = 1;
              return nil2;
            }, $Callouts_rewind$8.$$arity = 0);
            self4.$private();
            Opal2.def(self4, "$generate_next_callout_id", $Callouts_generate_next_callout_id$9 = function $$generate_next_callout_id() {
              var self5 = this;
              return self5.$generate_callout_id(self5.list_index, self5.co_index);
            }, $Callouts_generate_next_callout_id$9.$$arity = 0);
            return (Opal2.def(self4, "$generate_callout_id", $Callouts_generate_callout_id$10 = function $$generate_callout_id(list_index, co_index) {
              var self5 = this;
              return "CO" + list_index + "-" + co_index;
            }, $Callouts_generate_callout_id$10.$$arity = 2), nil2) && "generate_callout_id";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/converter"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $klass2 = Opal2.klass, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$autoload", "$__dir__", "$==", "$attr_reader", "$raise", "$class", "$[]", "$sub", "$slice", "$length", "$[]=", "$backend_traits", "$-", "$derive_backend_traits", "$register", "$map", "$to_s", "$new", "$create", "$default", "$each", "$default=", "$registry", "$for", "$===", "$supports_templates?", "$merge", "$private", "$include", "$delete", "$clear", "$send", "$extend", "$private_class_method", "$node_name", "$+", "$receiver", "$name", "$warn", "$logger", "$respond_to?", "$content"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Converter");
            var $nesting4 = [self4].concat($parent_nesting3), $Converter_initialize$1, $Converter_convert$2, $Converter_handles$ques$3, $Converter_derive_backend_traits$4, $Converter_included$28;
            self4.$autoload("CompositeConverter", "" + self4.$__dir__() + "/converter/composite");
            if ($$2($nesting4, "RUBY_ENGINE")["$=="]("opal")) {
            } else {
              nil2;
            }
            ;
            self4.$attr_reader("backend");
            Opal2.def(self4, "$initialize", $Converter_initialize$1 = function $$initialize(backend, opts) {
              var self5 = this;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              return self5.backend = backend;
            }, $Converter_initialize$1.$$arity = -2);
            Opal2.def(self4, "$convert", $Converter_convert$2 = function $$convert(node, transform, opts) {
              var self5 = this;
              if (self5.backend == null)
                self5.backend = nil2;
              if (transform == null) {
                transform = nil2;
              }
              ;
              if (opts == null) {
                opts = nil2;
              }
              ;
              return self5.$raise($$$2("::", "NotImplementedError"), "" + self5.$class() + " (backend: " + self5.backend + ") must implement the #convert method");
            }, $Converter_convert$2.$$arity = -2);
            Opal2.def(self4, "$handles?", $Converter_handles$ques$3 = function(transform) {
              var self5 = this;
              return true;
            }, $Converter_handles$ques$3.$$arity = 1);
            Opal2.defs(self4, "$derive_backend_traits", $Converter_derive_backend_traits$4 = function $$derive_backend_traits(backend, basebackend) {
              var $a2, self5 = this, outfilesuffix = nil2, filetype = nil2;
              if (basebackend == null) {
                basebackend = nil2;
              }
              ;
              if ($truthy2(backend)) {
              } else {
                return $hash22([], {});
              }
              ;
              if ($truthy2(outfilesuffix = $$2($nesting4, "DEFAULT_EXTENSIONS")["$[]"](basebackend = $truthy2($a2 = basebackend) ? $a2 : backend.$sub($$2($nesting4, "TrailingDigitsRx"), "")))) {
                filetype = outfilesuffix.$slice(1, outfilesuffix.$length());
              } else {
                outfilesuffix = "." + (filetype = basebackend);
              }
              ;
              if (filetype["$=="]("html")) {
                return $hash22(["basebackend", "filetype", "htmlsyntax", "outfilesuffix"], { "basebackend": basebackend, "filetype": filetype, "htmlsyntax": "html", "outfilesuffix": outfilesuffix });
              } else {
                return $hash22(["basebackend", "filetype", "outfilesuffix"], { "basebackend": basebackend, "filetype": filetype, "outfilesuffix": outfilesuffix });
              }
              ;
            }, $Converter_derive_backend_traits$4.$$arity = -2);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "BackendTraits");
              var $nesting5 = [self5].concat($parent_nesting4), $BackendTraits_basebackend$5, $BackendTraits_filetype$6, $BackendTraits_htmlsyntax$7, $BackendTraits_outfilesuffix$8, $BackendTraits_supports_templates$9, $BackendTraits_supports_templates$ques$10, $BackendTraits_init_backend_traits$11, $BackendTraits_backend_traits$12, $BackendTraits_derive_backend_traits$13;
              Opal2.def(self5, "$basebackend", $BackendTraits_basebackend$5 = function $$basebackend(value) {
                var self6 = this, $writer = nil2;
                if (value == null) {
                  value = nil2;
                }
                ;
                if ($truthy2(value)) {
                  $writer = ["basebackend", value];
                  $send2(self6.$backend_traits(value), "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else {
                  return self6.$backend_traits()["$[]"]("basebackend");
                }
                ;
              }, $BackendTraits_basebackend$5.$$arity = -1);
              Opal2.def(self5, "$filetype", $BackendTraits_filetype$6 = function $$filetype(value) {
                var self6 = this, $writer = nil2;
                if (value == null) {
                  value = nil2;
                }
                ;
                if ($truthy2(value)) {
                  $writer = ["filetype", value];
                  $send2(self6.$backend_traits(), "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else {
                  return self6.$backend_traits()["$[]"]("filetype");
                }
                ;
              }, $BackendTraits_filetype$6.$$arity = -1);
              Opal2.def(self5, "$htmlsyntax", $BackendTraits_htmlsyntax$7 = function $$htmlsyntax(value) {
                var self6 = this, $writer = nil2;
                if (value == null) {
                  value = nil2;
                }
                ;
                if ($truthy2(value)) {
                  $writer = ["htmlsyntax", value];
                  $send2(self6.$backend_traits(), "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else {
                  return self6.$backend_traits()["$[]"]("htmlsyntax");
                }
                ;
              }, $BackendTraits_htmlsyntax$7.$$arity = -1);
              Opal2.def(self5, "$outfilesuffix", $BackendTraits_outfilesuffix$8 = function $$outfilesuffix(value) {
                var self6 = this, $writer = nil2;
                if (value == null) {
                  value = nil2;
                }
                ;
                if ($truthy2(value)) {
                  $writer = ["outfilesuffix", value];
                  $send2(self6.$backend_traits(), "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else {
                  return self6.$backend_traits()["$[]"]("outfilesuffix");
                }
                ;
              }, $BackendTraits_outfilesuffix$8.$$arity = -1);
              Opal2.def(self5, "$supports_templates", $BackendTraits_supports_templates$9 = function $$supports_templates(value) {
                var self6 = this, $writer = nil2;
                if (value == null) {
                  value = true;
                }
                ;
                $writer = ["supports_templates", value];
                $send2(self6.$backend_traits(), "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }, $BackendTraits_supports_templates$9.$$arity = -1);
              Opal2.def(self5, "$supports_templates?", $BackendTraits_supports_templates$ques$10 = function() {
                var self6 = this;
                return self6.$backend_traits()["$[]"]("supports_templates");
              }, $BackendTraits_supports_templates$ques$10.$$arity = 0);
              Opal2.def(self5, "$init_backend_traits", $BackendTraits_init_backend_traits$11 = function $$init_backend_traits(value) {
                var $a2, self6 = this;
                if (value == null) {
                  value = nil2;
                }
                ;
                return self6.backend_traits = $truthy2($a2 = value) ? $a2 : $hash22([], {});
              }, $BackendTraits_init_backend_traits$11.$$arity = -1);
              Opal2.def(self5, "$backend_traits", $BackendTraits_backend_traits$12 = function $$backend_traits(basebackend) {
                var $a2, self6 = this;
                if (self6.backend_traits == null)
                  self6.backend_traits = nil2;
                if (self6.backend == null)
                  self6.backend = nil2;
                if (basebackend == null) {
                  basebackend = nil2;
                }
                ;
                return self6.backend_traits = $truthy2($a2 = self6.backend_traits) ? $a2 : $$2($nesting5, "Converter").$derive_backend_traits(self6.backend, basebackend);
              }, $BackendTraits_backend_traits$12.$$arity = -1);
              Opal2.alias(self5, "backend_info", "backend_traits");
              Opal2.defs(self5, "$derive_backend_traits", $BackendTraits_derive_backend_traits$13 = function $$derive_backend_traits(backend, basebackend) {
                var self6 = this;
                if (basebackend == null) {
                  basebackend = nil2;
                }
                ;
                return $$2($nesting5, "Converter").$derive_backend_traits(backend, basebackend);
              }, $BackendTraits_derive_backend_traits$13.$$arity = -2);
            })($nesting4[0], $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "Config");
              var $nesting5 = [self5].concat($parent_nesting4), $Config_register_for$14;
              Opal2.def(self5, "$register_for", $Config_register_for$14 = function $$register_for($a2) {
                var $post_args2, backends, $$15, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                backends = $post_args2;
                ;
                return $send2($$2($nesting5, "Converter"), "register", [self6].concat(Opal2.to_a($send2(backends, "map", [], ($$15 = function(backend) {
                  var self7 = $$15.$$s || this;
                  if (backend == null) {
                    backend = nil2;
                  }
                  ;
                  return backend.$to_s();
                }, $$15.$$s = self6, $$15.$$arity = 1, $$15)))));
              }, $Config_register_for$14.$$arity = -1);
            })($nesting4[0], $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "Factory");
              var $nesting5 = [self5].concat($parent_nesting4), $Factory_new$16, $Factory_default$17, $Factory_create$18, $Factory_register$19, $Factory_for$21, $Factory_create$22, $Factory_converters$23, $Factory_registry$24;
              Opal2.defs(self5, "$new", $Factory_new$16 = function($a2, $b2) {
                var $post_args2, $kwargs, converters, proxy_default, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                $kwargs = Opal2.extract_kwargs($post_args2);
                if ($kwargs == null) {
                  $kwargs = $hash22([], {});
                } else if (!$kwargs.$$is_hash) {
                  throw Opal2.ArgumentError.$new("expected kwargs");
                }
                ;
                if ($post_args2.length > 0) {
                  converters = $post_args2[0];
                  $post_args2.splice(0, 1);
                }
                if (converters == null) {
                  converters = nil2;
                }
                ;
                proxy_default = $kwargs.$$smap["proxy_default"];
                if (proxy_default == null) {
                  proxy_default = true;
                }
                ;
                if ($truthy2(proxy_default)) {
                  return $$2($nesting5, "DefaultFactoryProxy").$new(converters);
                } else {
                  return $$2($nesting5, "CustomFactory").$new(converters);
                }
                ;
              }, $Factory_new$16.$$arity = -1);
              Opal2.defs(self5, "$default", $Factory_default$17 = function($a2) {
                var $post_args2, args2, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $$2($nesting5, "Converter");
              }, $Factory_default$17.$$arity = -1);
              Opal2.defs(self5, "$create", $Factory_create$18 = function $$create(backend, opts) {
                var self6 = this;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                return self6.$default().$create(backend, opts);
              }, $Factory_create$18.$$arity = -2);
              Opal2.def(self5, "$register", $Factory_register$19 = function $$register(converter, $a2) {
                var $post_args2, backends, $$20, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
                backends = $post_args2;
                ;
                return $send2(backends, "each", [], ($$20 = function(backend) {
                  var self7 = $$20.$$s || this, $writer = nil2;
                  if (backend == null) {
                    backend = nil2;
                  }
                  ;
                  if (backend["$=="]("*")) {
                    $writer = [converter];
                    $send2(self7.$registry(), "default=", Opal2.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                    ;
                  } else {
                    $writer = [backend, converter];
                    $send2(self7.$registry(), "[]=", Opal2.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                    ;
                  }
                  ;
                }, $$20.$$s = self6, $$20.$$arity = 1, $$20));
              }, $Factory_register$19.$$arity = -2);
              Opal2.def(self5, "$for", $Factory_for$21 = function(backend) {
                var self6 = this;
                return self6.$registry()["$[]"](backend);
              }, $Factory_for$21.$$arity = 1);
              Opal2.def(self5, "$create", $Factory_create$22 = function $$create(backend, opts) {
                var $a2, $b2, self6 = this, converter = nil2, template_dirs = nil2, delegate_backend = nil2;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                if ($truthy2(converter = self6.$for(backend))) {
                  if ($truthy2($$$2("::", "Class")["$==="](converter))) {
                    converter = converter.$new(backend, opts);
                  }
                  ;
                  if ($truthy2($truthy2($a2 = $truthy2($b2 = template_dirs = opts["$[]"]("template_dirs")) ? $$2($nesting5, "BackendTraits")["$==="](converter) : $b2) ? converter["$supports_templates?"]() : $a2)) {
                    return $$2($nesting5, "CompositeConverter").$new(backend, $$2($nesting5, "TemplateConverter").$new(backend, template_dirs, opts), converter, $hash22(["backend_traits_source"], { "backend_traits_source": converter }));
                  } else {
                    return converter;
                  }
                  ;
                } else if ($truthy2(template_dirs = opts["$[]"]("template_dirs"))) {
                  if ($truthy2($truthy2($a2 = delegate_backend = opts["$[]"]("delegate_backend")) ? converter = self6.$for(delegate_backend) : $a2)) {
                    if ($truthy2($$$2("::", "Class")["$==="](converter))) {
                      converter = converter.$new(delegate_backend, opts);
                    }
                    ;
                    return $$2($nesting5, "CompositeConverter").$new(backend, $$2($nesting5, "TemplateConverter").$new(backend, template_dirs, opts), converter, $hash22(["backend_traits_source"], { "backend_traits_source": converter }));
                  } else {
                    return $$2($nesting5, "TemplateConverter").$new(backend, template_dirs, opts);
                  }
                } else {
                  return nil2;
                }
                ;
              }, $Factory_create$22.$$arity = -2);
              Opal2.def(self5, "$converters", $Factory_converters$23 = function $$converters() {
                var self6 = this;
                return self6.$registry().$merge();
              }, $Factory_converters$23.$$arity = 0);
              self5.$private();
              Opal2.def(self5, "$registry", $Factory_registry$24 = function $$registry() {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "Factory") + " subclass " + self6.$class() + " must implement the #registry method");
              }, $Factory_registry$24.$$arity = 0);
            })($nesting4[0], $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "CustomFactory");
              var $nesting5 = [self5].concat($parent_nesting4), $CustomFactory_initialize$25, $CustomFactory_unregister_all$26;
              self5.$include($$2($nesting5, "Factory"));
              Opal2.def(self5, "$initialize", $CustomFactory_initialize$25 = function $$initialize(seed_registry) {
                var self6 = this, $writer = nil2;
                if (seed_registry == null) {
                  seed_registry = nil2;
                }
                ;
                if ($truthy2(seed_registry)) {
                  $writer = [seed_registry.$delete("*")];
                  $send2(seed_registry, "default=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  return self6.registry = seed_registry;
                } else {
                  return self6.registry = $hash22([], {});
                }
                ;
              }, $CustomFactory_initialize$25.$$arity = -1);
              Opal2.def(self5, "$unregister_all", $CustomFactory_unregister_all$26 = function $$unregister_all() {
                var self6 = this, $writer = nil2;
                $writer = [nil2];
                $send2(self6.$registry().$clear(), "default=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }, $CustomFactory_unregister_all$26.$$arity = 0);
              self5.$private();
              return self5.$attr_reader("registry");
            })($nesting4[0], null, $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "DefaultFactory");
              var $nesting5 = [self5].concat($parent_nesting4), $DefaultFactory_registry$27;
              self5.$include($$2($nesting5, "Factory"));
              self5.$private();
              Opal2.class_variable_set($nesting5[0], "@@registry", $hash22([], {}));
              Opal2.def(self5, "$registry", $DefaultFactory_registry$27 = function $$registry() {
                var $a2, self6 = this;
                return ($a2 = $nesting5[0].$$cvars["@@registry"]) == null ? nil2 : $a2;
              }, $DefaultFactory_registry$27.$$arity = 0);
              if ($$2($nesting5, "RUBY_ENGINE")["$=="]("opal")) {
              } else {
                nil2;
              }
              ;
            })($nesting4[0], $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "DefaultFactoryProxy");
              var $nesting5 = [self5].concat($parent_nesting4);
              self5.$include($$2($nesting5, "DefaultFactory"));
              if ($$2($nesting5, "RUBY_ENGINE")["$=="]("opal")) {
                return nil2;
              } else {
                return nil2;
              }
              ;
            })($nesting4[0], $$2($nesting4, "CustomFactory"), $nesting4);
            Opal2.defs(self4, "$included", $Converter_included$28 = function $$included(into) {
              var self5 = this;
              into.$send("include", $$2($nesting4, "BackendTraits"));
              return into.$extend($$2($nesting4, "Config"));
            }, $Converter_included$28.$$arity = 1);
            self4.$private_class_method("included");
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Base");
              var $nesting5 = [self5].concat($parent_nesting4), $Base_convert$29, $Base_handles$ques$30, $Base_content_only$31, $Base_skip$32;
              self5.$$prototype.backend = nil2;
              self5.$include($$2($nesting5, "Logging"));
              self5.$include($$2($nesting5, "Converter"));
              Opal2.def(self5, "$convert", $Base_convert$29 = function $$convert(node, transform, opts) {
                var $a2, $b2, self6 = this, ex = nil2;
                if ($gvars["!"] == null)
                  $gvars["!"] = nil2;
                if (transform == null) {
                  transform = node.$node_name();
                }
                ;
                if (opts == null) {
                  opts = nil2;
                }
                ;
                try {
                  if ($truthy2(opts)) {
                    return self6.$send($rb_plus("convert_", transform), node, opts);
                  } else {
                    return self6.$send($rb_plus("convert_", transform), node);
                  }
                } catch ($err) {
                  if (Opal2.rescue($err, [$$2($nesting5, "StandardError")])) {
                    try {
                      if ($truthy2($truthy2($a2 = $truthy2($b2 = $$$2("::", "NoMethodError")["$==="](ex = $gvars["!"])) ? ex.$receiver()["$=="](self6) : $b2) ? ex.$name().$to_s()["$=="](transform) : $a2)) {
                      } else {
                        self6.$raise();
                      }
                      ;
                      self6.$logger().$warn("missing convert handler for " + ex.$name() + " node in " + self6.backend + " backend (" + self6.$class() + ")");
                      return nil2;
                    } finally {
                      Opal2.pop_exception();
                    }
                  } else {
                    throw $err;
                  }
                }
                ;
              }, $Base_convert$29.$$arity = -2);
              Opal2.def(self5, "$handles?", $Base_handles$ques$30 = function(transform) {
                var self6 = this;
                return self6["$respond_to?"]("convert_" + transform);
              }, $Base_handles$ques$30.$$arity = 1);
              Opal2.def(self5, "$content_only", $Base_content_only$31 = function $$content_only(node) {
                var self6 = this;
                return node.$content();
              }, $Base_content_only$31.$$arity = 1);
              return (Opal2.def(self5, "$skip", $Base_skip$32 = function $$skip(node) {
                var self6 = this;
                return nil2;
              }, $Base_skip$32.$$arity = 1), nil2) && "skip";
            })($nesting4[0], null, $nesting4);
            self4.$extend($$2($nesting4, "DefaultFactory"));
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/document"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_ge(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2, $hash = Opal2.hash, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$new", "$attr_reader", "$nil?", "$<<", "$[]", "$[]=", "$-", "$include?", "$strip", "$squeeze", "$gsub", "$empty?", "$!", "$rpartition", "$attr_accessor", "$delete", "$base_dir", "$options", "$merge", "$catalog", "$instance_variable_get", "$attributes", "$safe", "$compat_mode", "$outfilesuffix", "$sourcemap", "$path_resolver", "$converter", "$extensions", "$syntax_highlighter", "$each", "$end_with?", "$start_with?", "$slice", "$length", "$chop", "$==", "$downcase", "$===", "$extname", "$value_for_name", "$key?", "$freeze", "$attribute_undefined", "$attribute_missing", "$update", "$&", "$keys", "$name_for_value", "$expand_path", "$pwd", "$to_s", "$>=", "$+", "$abs", "$to_i", "$delete_if", "$update_doctype_attributes", "$cursor", "$parse", "$restore_attributes", "$update_backend_attributes", "$fetch", "$fill_datetime_attributes", "$activate", "$groups", "$create", "$to_proc", "$preprocessors?", "$preprocessors", "$process_method", "$tree_processors?", "$tree_processors", "$!=", "$counter", "$attribute_locked?", "$nil_or_empty?", "$nextval", "$value", "$save_to", "$register", "$tap", "$xreftext", "$>", "$source", "$source_lines", "$doctitle", "$sectname=", "$title=", "$first_section", "$title", "$reftext", "$<", "$find", "$context", "$assign_numeral", "$clear_playback_attributes", "$save_attributes", "$name", "$negate", "$rewind", "$replace", "$apply_attribute_value_subs", "$delete?", "$start", "$doctype", "$content_model", "$warn", "$logger", "$content", "$convert", "$postprocessors?", "$postprocessors", "$record", "$write", "$respond_to?", "$chomp", "$class", "$write_alternate_pages", "$map", "$split", "$resolve_docinfo_subs", "$normalize_system_path", "$read_asset", "$apply_subs", "$docinfo_processors?", "$join", "$concat", "$compact", "$docinfo_processors", "$object_id", "$inspect", "$size", "$private", "$=~", "$resolve_pass_subs", "$apply_header_subs", "$limit_bytesize", "$bytesize", "$valid_encoding?", "$byteslice", "$resolve_subs", "$utc", "$at", "$Integer", "$now", "$index", "$strftime", "$year", "$utc_offset", "$partition", "$create_converter", "$basebackend", "$filetype", "$htmlsyntax", "$derive_backend_traits", "$raise"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Document");
            var $nesting4 = [self4].concat($parent_nesting3), $Document$1, $Document_initialize$8, $Document_parse$11, $Document_parsed$ques$14, $Document_counter$15, $Document_increment_and_store_counter$16, $Document_register$17, $Document_resolve_id$18, $Document_sections$ques$22, $Document_footnotes$ques$23, $Document_footnotes$24, $Document_callouts$25, $Document_nested$ques$26, $Document_embedded$ques$27, $Document_extensions$ques$28, $Document_source$29, $Document_source_lines$30, $Document_basebackend$ques$31, $Document_title$32, $Document_title$eq$33, $Document_doctitle$34, $Document_xreftext$35, $Document_author$36, $Document_authors$37, $Document_revdate$38, $Document_notitle$39, $Document_noheader$40, $Document_nofooter$41, $Document_first_section$42, $Document_header$ques$44, $Document_$lt$lt$45, $Document_finalize_header$46, $Document_playback_attributes$47, $Document_restore_attributes$49, $Document_set_attribute$50, $Document_delete_attribute$51, $Document_attribute_locked$ques$52, $Document_set_header_attribute$53, $Document_convert$54, $Document_write$56, $Document_content$57, $Document_docinfo$58, $Document_docinfo_processors$ques$61, $Document_to_s$62, $Document_apply_attribute_value_subs$63, $Document_limit_bytesize$64, $Document_resolve_docinfo_subs$65, $Document_create_converter$66, $Document_clear_playback_attributes$67, $Document_save_attributes$68, $Document_fill_datetime_attributes$70, $Document_update_backend_attributes$71, $Document_update_doctype_attributes$72;
            self4.$$prototype.attributes = self4.$$prototype.safe = self4.$$prototype.sourcemap = self4.$$prototype.reader = self4.$$prototype.base_dir = self4.$$prototype.parsed = self4.$$prototype.parent_document = self4.$$prototype.extensions = self4.$$prototype.options = self4.$$prototype.counters = self4.$$prototype.catalog = self4.$$prototype.reftexts = self4.$$prototype.next_section_index = self4.$$prototype.header = self4.$$prototype.blocks = self4.$$prototype.header_attributes = self4.$$prototype.attributes_modified = self4.$$prototype.backend = self4.$$prototype.attribute_overrides = self4.$$prototype.timings = self4.$$prototype.converter = self4.$$prototype.outfilesuffix = self4.$$prototype.docinfo_processor_extensions = self4.$$prototype.document = self4.$$prototype.max_attribute_value_size = self4.$$prototype.id = self4.$$prototype.doctype = nil2;
            Opal2.const_set($nesting4[0], "ImageReference", $send2($$$2("::", "Struct"), "new", ["target", "imagesdir"], ($Document$1 = function() {
              var self5 = $Document$1.$$s || this;
              return Opal2.alias(self5, "to_s", "target");
            }, $Document$1.$$s = self4, $Document$1.$$arity = 0, $Document$1)));
            Opal2.const_set($nesting4[0], "Footnote", $$$2("::", "Struct").$new("index", "id", "text"));
            (function($base4, $super3, $parent_nesting4) {
              var self5 = $klass2($base4, $super3, "AttributeEntry");
              var $nesting5 = [self5].concat($parent_nesting4), $AttributeEntry_initialize$2, $AttributeEntry_save_to$3;
              self5.$attr_reader("name", "value", "negate");
              Opal2.def(self5, "$initialize", $AttributeEntry_initialize$2 = function $$initialize(name, value, negate) {
                var self6 = this;
                if (negate == null) {
                  negate = nil2;
                }
                ;
                self6.name = name;
                self6.value = value;
                return self6.negate = function() {
                  if ($truthy2(negate["$nil?"]())) {
                    return value["$nil?"]();
                  } else {
                    return negate;
                  }
                  ;
                  return nil2;
                }();
              }, $AttributeEntry_initialize$2.$$arity = -3);
              return (Opal2.def(self5, "$save_to", $AttributeEntry_save_to$3 = function $$save_to(block_attributes) {
                var $a2, self6 = this, $writer = nil2;
                ($truthy2($a2 = block_attributes["$[]"]("attribute_entries")) ? $a2 : ($writer = ["attribute_entries", []], $send2(block_attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))["$<<"](self6);
                return self6;
              }, $AttributeEntry_save_to$3.$$arity = 1), nil2) && "save_to";
            })($nesting4[0], null, $nesting4);
            (function($base4, $super3, $parent_nesting4) {
              var self5 = $klass2($base4, $super3, "Title");
              var $nesting5 = [self5].concat($parent_nesting4), $Title_initialize$4, $Title_sanitized$ques$5, $Title_subtitle$ques$6, $Title_to_s$7;
              self5.$$prototype.sanitized = self5.$$prototype.subtitle = self5.$$prototype.combined = nil2;
              self5.$attr_reader("main");
              Opal2.alias(self5, "title", "main");
              self5.$attr_reader("subtitle");
              self5.$attr_reader("combined");
              Opal2.def(self5, "$initialize", $Title_initialize$4 = function $$initialize(val, opts) {
                var $a2, $b2, self6 = this, sep = nil2, _ = nil2;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                if ($truthy2($truthy2($a2 = self6.sanitized = opts["$[]"]("sanitize")) ? val["$include?"]("<") : $a2)) {
                  val = val.$gsub($$2($nesting5, "XmlSanitizeRx"), "").$squeeze(" ").$strip();
                }
                ;
                if ($truthy2($truthy2($a2 = (sep = $truthy2($b2 = opts["$[]"]("separator")) ? $b2 : ":")["$empty?"]()) ? $a2 : val["$include?"](sep = "" + sep + " ")["$!"]())) {
                  self6.main = val;
                  self6.subtitle = nil2;
                } else {
                  $b2 = val.$rpartition(sep), $a2 = Opal2.to_ary($b2), self6.main = $a2[0] == null ? nil2 : $a2[0], _ = $a2[1] == null ? nil2 : $a2[1], self6.subtitle = $a2[2] == null ? nil2 : $a2[2], $b2;
                }
                ;
                return self6.combined = val;
              }, $Title_initialize$4.$$arity = -2);
              Opal2.def(self5, "$sanitized?", $Title_sanitized$ques$5 = function() {
                var self6 = this;
                return self6.sanitized;
              }, $Title_sanitized$ques$5.$$arity = 0);
              Opal2.def(self5, "$subtitle?", $Title_subtitle$ques$6 = function() {
                var self6 = this;
                if ($truthy2(self6.subtitle)) {
                  return true;
                } else {
                  return false;
                }
              }, $Title_subtitle$ques$6.$$arity = 0);
              return (Opal2.def(self5, "$to_s", $Title_to_s$7 = function $$to_s() {
                var self6 = this;
                return self6.combined;
              }, $Title_to_s$7.$$arity = 0), nil2) && "to_s";
            })($nesting4[0], null, $nesting4);
            Opal2.const_set($nesting4[0], "Author", $$$2("::", "Struct").$new("name", "firstname", "middlename", "lastname", "initials", "email"));
            self4.$attr_reader("safe");
            self4.$attr_reader("compat_mode");
            self4.$attr_reader("backend");
            self4.$attr_reader("doctype");
            self4.$attr_accessor("sourcemap");
            self4.$attr_reader("catalog");
            Opal2.alias(self4, "references", "catalog");
            self4.$attr_reader("counters");
            self4.$attr_reader("header");
            self4.$attr_reader("base_dir");
            self4.$attr_reader("options");
            self4.$attr_reader("outfilesuffix");
            self4.$attr_reader("parent_document");
            self4.$attr_reader("reader");
            self4.$attr_reader("path_resolver");
            self4.$attr_reader("converter");
            self4.$attr_reader("syntax_highlighter");
            self4.$attr_reader("extensions");
            Opal2.def(self4, "$initialize", $Document_initialize$8 = function $$initialize(data, options) {
              var $a2, $$92, $b2, $c, $$10, $d, $e, $f, $g, $iter2 = $Document_initialize$8.$$p, $yield = $iter2 || nil2, self5 = this, parent_doc = nil2, $writer = nil2, attr_overrides = nil2, parent_doctype = nil2, initialize_extensions = nil2, to_file = nil2, safe_mode = nil2, input_mtime = nil2, standalone = nil2, attrs = nil2, safe_mode_name = nil2, base_dir_val = nil2, backend_val = nil2, doctype_val = nil2, size = nil2, initial_backend = nil2, ext_registry = nil2, ext_block = nil2;
              if ($iter2)
                $Document_initialize$8.$$p = null;
              if (data == null) {
                data = nil2;
              }
              ;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Document_initialize$8, false), [self5, "document"], null);
              if ($truthy2(parent_doc = options.$delete("parent"))) {
                self5.parent_document = parent_doc;
                $truthy2($a2 = options["$[]"]("base_dir")) ? $a2 : ($writer = ["base_dir", parent_doc.$base_dir()], $send2(options, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                if ($truthy2(parent_doc.$options()["$[]"]("catalog_assets"))) {
                  $writer = ["catalog_assets", true];
                  $send2(options, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                self5.catalog = parent_doc.$catalog().$merge($hash22(["footnotes"], { "footnotes": [] }));
                self5.attribute_overrides = attr_overrides = parent_doc.$instance_variable_get("@attribute_overrides").$merge(parent_doc.$attributes());
                attr_overrides.$delete("compat-mode");
                parent_doctype = attr_overrides.$delete("doctype");
                attr_overrides.$delete("notitle");
                attr_overrides.$delete("showtitle");
                attr_overrides.$delete("toc");
                $writer = ["toc-placement", $truthy2($a2 = attr_overrides.$delete("toc-placement")) ? $a2 : "auto"];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                attr_overrides.$delete("toc-position");
                self5.safe = parent_doc.$safe();
                if ($truthy2(self5.compat_mode = parent_doc.$compat_mode())) {
                  $writer = ["compat-mode", ""];
                  $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                self5.outfilesuffix = parent_doc.$outfilesuffix();
                self5.sourcemap = parent_doc.$sourcemap();
                self5.timings = nil2;
                self5.path_resolver = parent_doc.$path_resolver();
                self5.converter = parent_doc.$converter();
                initialize_extensions = nil2;
                self5.extensions = parent_doc.$extensions();
                self5.syntax_highlighter = parent_doc.$syntax_highlighter();
              } else {
                self5.parent_document = nil2;
                self5.catalog = $hash22(["ids", "refs", "footnotes", "links", "images", "callouts", "includes"], { "ids": $hash22([], {}), "refs": $hash22([], {}), "footnotes": [], "links": [], "images": [], "callouts": $$2($nesting4, "Callouts").$new(), "includes": $hash22([], {}) });
                self5.attribute_overrides = attr_overrides = $hash22([], {});
                $send2($truthy2($a2 = options["$[]"]("attributes")) ? $a2 : $hash22([], {}), "each", [], ($$92 = function(key, val) {
                  var self6 = $$92.$$s || this, $b3;
                  if (key == null) {
                    key = nil2;
                  }
                  ;
                  if (val == null) {
                    val = nil2;
                  }
                  ;
                  if ($truthy2(key["$end_with?"]("@"))) {
                    if ($truthy2(key["$start_with?"]("!"))) {
                      $b3 = [key.$slice(1, $rb_minus(key.$length(), 2)), false], key = $b3[0], val = $b3[1], $b3;
                    } else if ($truthy2(key["$end_with?"]("!@"))) {
                      $b3 = [key.$slice(0, $rb_minus(key.$length(), 2)), false], key = $b3[0], val = $b3[1], $b3;
                    } else {
                      $b3 = [key.$chop(), "" + val + "@"], key = $b3[0], val = $b3[1], $b3;
                    }
                  } else if ($truthy2(key["$start_with?"]("!"))) {
                    $b3 = [key.$slice(1, key.$length()), function() {
                      if (val["$=="]("@")) {
                        return false;
                      } else {
                        return nil2;
                      }
                      ;
                      return nil2;
                    }()], key = $b3[0], val = $b3[1], $b3;
                  } else if ($truthy2(key["$end_with?"]("!"))) {
                    $b3 = [key.$chop(), function() {
                      if (val["$=="]("@")) {
                        return false;
                      } else {
                        return nil2;
                      }
                      ;
                      return nil2;
                    }()], key = $b3[0], val = $b3[1], $b3;
                  }
                  ;
                  $writer = [key.$downcase(), val];
                  $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                  ;
                }, $$92.$$s = self5, $$92.$$arity = 2, $$92));
                if ($truthy2($$$2("::", "String")["$==="](to_file = options["$[]"]("to_file")))) {
                  $writer = ["outfilesuffix", $$2($nesting4, "Helpers").$extname(to_file)];
                  $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ($truthy2((safe_mode = options["$[]"]("safe"))["$!"]())) {
                  self5.safe = $$$2($$2($nesting4, "SafeMode"), "SECURE");
                } else if ($truthy2($$$2("::", "Integer")["$==="](safe_mode))) {
                  self5.safe = safe_mode;
                } else {
                  self5.safe = function() {
                    try {
                      return $$2($nesting4, "SafeMode").$value_for_name(safe_mode);
                    } catch ($err) {
                      if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                        try {
                          return $$$2($$2($nesting4, "SafeMode"), "SECURE");
                        } finally {
                          Opal2.pop_exception();
                        }
                      } else {
                        throw $err;
                      }
                    }
                  }();
                }
                ;
                input_mtime = options.$delete("input_mtime");
                self5.compat_mode = attr_overrides["$key?"]("compat-mode");
                self5.sourcemap = options["$[]"]("sourcemap");
                self5.timings = options.$delete("timings");
                self5.path_resolver = $$2($nesting4, "PathResolver").$new();
                initialize_extensions = function() {
                  if ($truthy2($truthy2($a2 = ($c = $$$2("::", "Asciidoctor", "skip_raise")) && ($b2 = $$$2($c, "Extensions", "skip_raise")) ? "constant" : nil2) ? $a2 : options["$key?"]("extensions"))) {
                    return $$$2($$$2("::", "Asciidoctor"), "Extensions");
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }();
                self5.extensions = nil2;
                if ($truthy2($truthy2($a2 = options["$key?"]("header_footer")) ? options["$key?"]("standalone")["$!"]() : $a2)) {
                  $writer = ["standalone", options["$[]"]("header_footer")];
                  $send2(options, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
              }
              ;
              self5.parsed = self5.reftexts = self5.header = self5.header_attributes = nil2;
              self5.counters = $hash22([], {});
              self5.attributes_modified = $$$2("::", "Set").$new();
              self5.docinfo_processor_extensions = $hash22([], {});
              standalone = options["$[]"]("standalone");
              (self5.options = options).$freeze();
              attrs = self5.attributes;
              if ($truthy2(parent_doc)) {
              } else {
                $writer = ["attribute-undefined", $$2($nesting4, "Compliance").$attribute_undefined()];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["attribute-missing", $$2($nesting4, "Compliance").$attribute_missing()];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                attrs.$update($$2($nesting4, "DEFAULT_ATTRIBUTES"));
              }
              ;
              if ($truthy2(standalone)) {
                $writer = ["embedded", nil2];
                $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["copycss", ""];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["iconfont-remote", ""];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["stylesheet", ""];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["webfonts", ""];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
              } else {
                $writer = ["embedded", ""];
                $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                if ($truthy2($truthy2($a2 = attr_overrides["$key?"]("showtitle")) ? attr_overrides.$keys()["$&"](["notitle", "showtitle"])["$[]"](-1)["$=="]("showtitle") : $a2)) {
                  $writer = ["notitle", $hash(nil2, "", false, "@", "@", false)["$[]"](attr_overrides["$[]"]("showtitle"))];
                  $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else if ($truthy2(attr_overrides["$key?"]("notitle"))) {
                  $writer = ["showtitle", $hash(nil2, "", false, "@", "@", false)["$[]"](attr_overrides["$[]"]("notitle"))];
                  $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  $writer = ["notitle", ""];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
              }
              ;
              $writer = ["asciidoctor", ""];
              $send2(attr_overrides, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = ["asciidoctor-version", $$$2($$$2("::", "Asciidoctor"), "VERSION")];
              $send2(attr_overrides, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = ["safe-mode-name", safe_mode_name = $$2($nesting4, "SafeMode").$name_for_value(self5.safe)];
              $send2(attr_overrides, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = ["safe-mode-" + safe_mode_name, ""];
              $send2(attr_overrides, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = ["safe-mode-level", self5.safe];
              $send2(attr_overrides, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $truthy2($a2 = attr_overrides["$[]"]("max-include-depth")) ? $a2 : ($writer = ["max-include-depth", 64], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              $truthy2($a2 = attr_overrides["$[]"]("allow-uri-read")) ? $a2 : ($writer = ["allow-uri-read", nil2], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              if ($truthy2(attr_overrides["$key?"]("numbered"))) {
                $writer = ["sectnums", attr_overrides.$delete("numbered")];
                $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(attr_overrides["$key?"]("hardbreaks"))) {
                $writer = ["hardbreaks-option", attr_overrides.$delete("hardbreaks")];
                $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(base_dir_val = options["$[]"]("base_dir"))) {
                self5.base_dir = ($writer = ["docdir", $$$2("::", "File").$expand_path(base_dir_val)], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              } else if ($truthy2(attr_overrides["$[]"]("docdir"))) {
                self5.base_dir = attr_overrides["$[]"]("docdir");
              } else {
                self5.base_dir = ($writer = ["docdir", $$$2("::", "Dir").$pwd()], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
              ;
              if ($truthy2(backend_val = options["$[]"]("backend"))) {
                $writer = ["backend", backend_val.$to_s()];
                $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(doctype_val = options["$[]"]("doctype"))) {
                $writer = ["doctype", doctype_val.$to_s()];
                $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2($rb_ge(self5.safe, $$$2($$2($nesting4, "SafeMode"), "SERVER")))) {
                $truthy2($a2 = attr_overrides["$[]"]("copycss")) ? $a2 : ($writer = ["copycss", nil2], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                $truthy2($a2 = attr_overrides["$[]"]("source-highlighter")) ? $a2 : ($writer = ["source-highlighter", nil2], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                $truthy2($a2 = attr_overrides["$[]"]("backend")) ? $a2 : ($writer = ["backend", $$2($nesting4, "DEFAULT_BACKEND")], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                if ($truthy2($truthy2($a2 = parent_doc["$!"]()) ? attr_overrides["$key?"]("docfile") : $a2)) {
                  $writer = ["docfile", attr_overrides["$[]"]("docfile")["$[]"](Opal2.Range.$new($rb_plus(attr_overrides["$[]"]("docdir").$length(), 1), -1, false))];
                  $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                $writer = ["docdir", ""];
                $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $truthy2($a2 = attr_overrides["$[]"]("user-home")) ? $a2 : ($writer = ["user-home", "."], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                if ($truthy2($rb_ge(self5.safe, $$$2($$2($nesting4, "SafeMode"), "SECURE")))) {
                  if ($truthy2(attr_overrides["$key?"]("max-attribute-value-size"))) {
                  } else {
                    $writer = ["max-attribute-value-size", 4096];
                    $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(attr_overrides["$key?"]("linkcss"))) {
                  } else {
                    $writer = ["linkcss", ""];
                    $send2(attr_overrides, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  $truthy2($a2 = attr_overrides["$[]"]("icons")) ? $a2 : ($writer = ["icons", nil2], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                }
                ;
              } else {
                $truthy2($a2 = attr_overrides["$[]"]("user-home")) ? $a2 : ($writer = ["user-home", $$2($nesting4, "USER_HOME")], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
              ;
              self5.max_attribute_value_size = function() {
                if ($truthy2(size = $truthy2($a2 = attr_overrides["$[]"]("max-attribute-value-size")) ? $a2 : ($writer = ["max-attribute-value-size", nil2], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
                  return size.$to_i().$abs();
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }();
              $send2(attr_overrides, "delete_if", [], ($$10 = function(key, val) {
                var self6 = $$10.$$s || this, $d2, verdict = nil2;
                if (key == null) {
                  key = nil2;
                }
                ;
                if (val == null) {
                  val = nil2;
                }
                ;
                if ($truthy2(val)) {
                  if ($truthy2($truthy2($d2 = $$$2("::", "String")["$==="](val)) ? val["$end_with?"]("@") : $d2)) {
                    $d2 = [val.$chop(), true], val = $d2[0], verdict = $d2[1], $d2;
                  }
                  ;
                  $writer = [key, val];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else {
                  attrs.$delete(key);
                  verdict = val["$=="](false);
                }
                ;
                return verdict;
              }, $$10.$$s = self5, $$10.$$arity = 2, $$10));
              if ($truthy2(parent_doc)) {
                self5.backend = attrs["$[]"]("backend");
                if ((self5.doctype = ($writer = ["doctype", parent_doctype], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))["$=="]($$2($nesting4, "DEFAULT_DOCTYPE"))) {
                } else {
                  self5.$update_doctype_attributes($$2($nesting4, "DEFAULT_DOCTYPE"));
                }
                ;
                self5.reader = $$2($nesting4, "Reader").$new(data, options["$[]"]("cursor"));
                if ($truthy2(self5.sourcemap)) {
                  self5.source_location = self5.reader.$cursor();
                }
                ;
                $$2($nesting4, "Parser").$parse(self5.reader, self5);
                self5.$restore_attributes();
                return self5.parsed = true;
              } else {
                self5.backend = nil2;
                if ((initial_backend = $truthy2($a2 = attrs["$[]"]("backend")) ? $a2 : $$2($nesting4, "DEFAULT_BACKEND"))["$=="]("manpage")) {
                  self5.doctype = ($writer = ["doctype", ($writer = ["doctype", "manpage"], $send2(attr_overrides, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                } else {
                  self5.doctype = $truthy2($a2 = attrs["$[]"]("doctype")) ? $a2 : ($writer = ["doctype", $$2($nesting4, "DEFAULT_DOCTYPE")], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                }
                ;
                self5.$update_backend_attributes(initial_backend, true);
                $truthy2($a2 = attrs["$[]"]("stylesdir")) ? $a2 : ($writer = ["stylesdir", "."], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                $truthy2($a2 = attrs["$[]"]("iconsdir")) ? $a2 : ($writer = ["iconsdir", "" + attrs.$fetch("imagesdir", "./images") + "/icons"], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                self5.$fill_datetime_attributes(attrs, input_mtime);
                if ($truthy2(initialize_extensions)) {
                  if ($truthy2(ext_registry = options["$[]"]("extension_registry"))) {
                    if ($truthy2($truthy2($a2 = $$$2($$2($nesting4, "Extensions"), "Registry")["$==="](ext_registry)) ? $a2 : $truthy2($d = ($g = $$$2("::", "AsciidoctorJ", "skip_raise")) && ($f = $$$2($g, "Extensions", "skip_raise")) && ($e = $$$2($f, "ExtensionRegistry", "skip_raise")) ? "constant" : nil2) ? $$$2($$$2($$$2("::", "AsciidoctorJ"), "Extensions"), "ExtensionRegistry")["$==="](ext_registry) : $d)) {
                      self5.extensions = ext_registry.$activate(self5);
                    }
                  } else if ($truthy2((ext_block = options["$[]"]("extensions"))["$nil?"]())) {
                    if ($truthy2($$2($nesting4, "Extensions").$groups()["$empty?"]())) {
                    } else {
                      self5.extensions = $$$2($$2($nesting4, "Extensions"), "Registry").$new().$activate(self5);
                    }
                  } else if ($truthy2($$$2("::", "Proc")["$==="](ext_block))) {
                    self5.extensions = $send2($$2($nesting4, "Extensions"), "create", [], ext_block.$to_proc()).$activate(self5);
                  }
                }
                ;
                self5.reader = $$2($nesting4, "PreprocessorReader").$new(self5, data, $$$2($$2($nesting4, "Reader"), "Cursor").$new(attrs["$[]"]("docfile"), self5.base_dir), $hash22(["normalize"], { "normalize": true }));
                if ($truthy2(self5.sourcemap)) {
                  return self5.source_location = self5.reader.$cursor();
                } else {
                  return nil2;
                }
                ;
              }
              ;
            }, $Document_initialize$8.$$arity = -1);
            Opal2.def(self4, "$parse", $Document_parse$11 = function $$parse(data) {
              var $a2, $$12, $$13, self5 = this, doc = nil2, exts = nil2;
              if (data == null) {
                data = nil2;
              }
              ;
              if ($truthy2(self5.parsed)) {
                return self5;
              } else {
                doc = self5;
                if ($truthy2(data)) {
                  self5.reader = $$2($nesting4, "PreprocessorReader").$new(doc, data, $$$2($$2($nesting4, "Reader"), "Cursor").$new(self5.attributes["$[]"]("docfile"), self5.base_dir), $hash22(["normalize"], { "normalize": true }));
                  if ($truthy2(self5.sourcemap)) {
                    self5.source_location = self5.reader.$cursor();
                  }
                  ;
                }
                ;
                if ($truthy2($truthy2($a2 = exts = function() {
                  if ($truthy2(self5.parent_document)) {
                    return nil2;
                  } else {
                    return self5.extensions;
                  }
                  ;
                  return nil2;
                }()) ? exts["$preprocessors?"]() : $a2)) {
                  $send2(exts.$preprocessors(), "each", [], ($$12 = function(ext) {
                    var self6 = $$12.$$s || this, $b2;
                    if (self6.reader == null)
                      self6.reader = nil2;
                    if (ext == null) {
                      ext = nil2;
                    }
                    ;
                    return self6.reader = $truthy2($b2 = ext.$process_method()["$[]"](doc, self6.reader)) ? $b2 : self6.reader;
                  }, $$12.$$s = self5, $$12.$$arity = 1, $$12));
                }
                ;
                $$2($nesting4, "Parser").$parse(self5.reader, doc, $hash22(["header_only"], { "header_only": self5.options["$[]"]("parse_header_only") }));
                self5.$restore_attributes();
                if ($truthy2($truthy2($a2 = exts) ? exts["$tree_processors?"]() : $a2)) {
                  $send2(exts.$tree_processors(), "each", [], ($$13 = function(ext) {
                    var self6 = $$13.$$s || this, $b2, $c, result2 = nil2;
                    if (ext == null) {
                      ext = nil2;
                    }
                    ;
                    if ($truthy2($truthy2($b2 = $truthy2($c = result2 = ext.$process_method()["$[]"](doc)) ? $$2($nesting4, "Document")["$==="](result2) : $c) ? result2["$!="](doc) : $b2)) {
                      return doc = result2;
                    } else {
                      return nil2;
                    }
                    ;
                  }, $$13.$$s = self5, $$13.$$arity = 1, $$13));
                }
                ;
                self5.parsed = true;
                return doc;
              }
              ;
            }, $Document_parse$11.$$arity = -1);
            Opal2.def(self4, "$parsed?", $Document_parsed$ques$14 = function() {
              var self5 = this;
              return self5.parsed;
            }, $Document_parsed$ques$14.$$arity = 0);
            Opal2.def(self4, "$counter", $Document_counter$15 = function $$counter(name, seed) {
              var $a2, $b2, self5 = this, locked = nil2, curr_val = nil2, next_val = nil2, $writer = nil2;
              if (seed == null) {
                seed = nil2;
              }
              ;
              if ($truthy2(self5.parent_document)) {
                return self5.parent_document.$counter(name, seed);
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = locked = self5["$attribute_locked?"](name)) ? curr_val = self5.counters["$[]"](name) : $b2) ? $a2 : (curr_val = self5.attributes["$[]"](name))["$nil_or_empty?"]()["$!"]())) {
                next_val = ($writer = [name, $$2($nesting4, "Helpers").$nextval(curr_val)], $send2(self5.counters, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              } else if ($truthy2(seed)) {
                next_val = ($writer = [name, function() {
                  if (seed["$=="](seed.$to_i().$to_s())) {
                    return seed.$to_i();
                  } else {
                    return seed;
                  }
                  ;
                  return nil2;
                }()], $send2(self5.counters, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              } else {
                next_val = ($writer = [name, 1], $send2(self5.counters, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
              ;
              if ($truthy2(locked)) {
              } else {
                $writer = [name, next_val];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              return next_val;
            }, $Document_counter$15.$$arity = -2);
            Opal2.def(self4, "$increment_and_store_counter", $Document_increment_and_store_counter$16 = function $$increment_and_store_counter(counter_name, block2) {
              var self5 = this;
              return $$2($nesting4, "AttributeEntry").$new(counter_name, self5.$counter(counter_name)).$save_to(block2.$attributes()).$value();
            }, $Document_increment_and_store_counter$16.$$arity = 2);
            Opal2.alias(self4, "counter_increment", "increment_and_store_counter");
            Opal2.def(self4, "$register", $Document_register$17 = function $$register(type, value) {
              var $a2, self5 = this, $case = nil2, id = nil2, $logical_op_recvr_tmp_1 = nil2, $writer = nil2, ref = nil2;
              return function() {
                $case = type;
                if ("ids"["$==="]($case)) {
                  return self5.$register("refs", [id = value["$[]"](0), $$2($nesting4, "Inline").$new(self5, "anchor", value["$[]"](1), $hash22(["type", "id"], { "type": "ref", "id": id }))]);
                } else if ("refs"["$==="]($case)) {
                  $logical_op_recvr_tmp_1 = self5.catalog["$[]"]("refs");
                  $truthy2($a2 = $logical_op_recvr_tmp_1["$[]"](value["$[]"](0))) ? $a2 : ($writer = [value["$[]"](0), ref = value["$[]"](1)], $send2($logical_op_recvr_tmp_1, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  ;
                  return ref;
                } else if ("footnotes"["$==="]($case)) {
                  return self5.catalog["$[]"](type)["$<<"](value);
                } else {
                  if ($truthy2(self5.options["$[]"]("catalog_assets"))) {
                    return self5.catalog["$[]"](type)["$<<"](function() {
                      if (type["$=="]("images")) {
                        return $$2($nesting4, "ImageReference").$new(value, self5.attributes["$[]"]("imagesdir"));
                      } else {
                        return value;
                      }
                      ;
                      return nil2;
                    }());
                  } else {
                    return nil2;
                  }
                }
              }();
            }, $Document_register$17.$$arity = 2);
            Opal2.def(self4, "$resolve_id", $Document_resolve_id$18 = function $$resolve_id(text) {
              var $$19, $$21, self5 = this, resolved_id = nil2, accum = nil2;
              if ($truthy2(self5.reftexts)) {
                return self5.reftexts["$[]"](text);
              } else if ($truthy2(self5.parsed)) {
                return $send2(self5.reftexts = $hash22([], {}), "tap", [], ($$19 = function(accum2) {
                  var self6 = $$19.$$s || this, $$20;
                  if (self6.catalog == null)
                    self6.catalog = nil2;
                  if (accum2 == null) {
                    accum2 = nil2;
                  }
                  ;
                  return $send2(self6.catalog["$[]"]("refs"), "each", [], ($$20 = function(id, ref) {
                    var self7 = $$20.$$s || this, $a2, $writer = nil2;
                    if (id == null) {
                      id = nil2;
                    }
                    ;
                    if (ref == null) {
                      ref = nil2;
                    }
                    ;
                    return $truthy2($a2 = accum2["$[]"](ref.$xreftext())) ? $a2 : ($writer = [ref.$xreftext(), id], $send2(accum2, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  }, $$20.$$s = self6, $$20.$$arity = 2, $$20));
                }, $$19.$$s = self5, $$19.$$arity = 1, $$19))["$[]"](text);
              } else {
                resolved_id = nil2;
                self5.reftexts = accum = $hash22([], {});
                (function() {
                  var $brk = Opal2.new_brk();
                  try {
                    return $send2(self5.catalog["$[]"]("refs"), "each", [], ($$21 = function(id, ref) {
                      var self6 = $$21.$$s || this, $a2, xreftext = nil2, $writer = nil2;
                      if (id == null) {
                        id = nil2;
                      }
                      ;
                      if (ref == null) {
                        ref = nil2;
                      }
                      ;
                      if ((xreftext = ref.$xreftext())["$=="](text)) {
                        resolved_id = id;
                        Opal2.brk(nil2, $brk);
                      }
                      ;
                      return $truthy2($a2 = accum["$[]"](xreftext)) ? $a2 : ($writer = [xreftext, id], $send2(accum, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                    }, $$21.$$s = self5, $$21.$$brk = $brk, $$21.$$arity = 2, $$21));
                  } catch (err) {
                    if (err === $brk) {
                      return err.$v;
                    } else {
                      throw err;
                    }
                  }
                })();
                self5.reftexts = nil2;
                return resolved_id;
              }
            }, $Document_resolve_id$18.$$arity = 1);
            Opal2.def(self4, "$sections?", $Document_sections$ques$22 = function() {
              var self5 = this;
              return $rb_gt2(self5.next_section_index, 0);
            }, $Document_sections$ques$22.$$arity = 0);
            Opal2.def(self4, "$footnotes?", $Document_footnotes$ques$23 = function() {
              var self5 = this;
              if ($truthy2(self5.catalog["$[]"]("footnotes")["$empty?"]())) {
                return false;
              } else {
                return true;
              }
            }, $Document_footnotes$ques$23.$$arity = 0);
            Opal2.def(self4, "$footnotes", $Document_footnotes$24 = function $$footnotes() {
              var self5 = this;
              return self5.catalog["$[]"]("footnotes");
            }, $Document_footnotes$24.$$arity = 0);
            Opal2.def(self4, "$callouts", $Document_callouts$25 = function $$callouts() {
              var self5 = this;
              return self5.catalog["$[]"]("callouts");
            }, $Document_callouts$25.$$arity = 0);
            Opal2.def(self4, "$nested?", $Document_nested$ques$26 = function() {
              var self5 = this;
              if ($truthy2(self5.parent_document)) {
                return true;
              } else {
                return false;
              }
            }, $Document_nested$ques$26.$$arity = 0);
            Opal2.def(self4, "$embedded?", $Document_embedded$ques$27 = function() {
              var self5 = this;
              return self5.attributes["$key?"]("embedded");
            }, $Document_embedded$ques$27.$$arity = 0);
            Opal2.def(self4, "$extensions?", $Document_extensions$ques$28 = function() {
              var self5 = this;
              if ($truthy2(self5.extensions)) {
                return true;
              } else {
                return false;
              }
            }, $Document_extensions$ques$28.$$arity = 0);
            Opal2.def(self4, "$source", $Document_source$29 = function $$source() {
              var self5 = this;
              if ($truthy2(self5.reader)) {
                return self5.reader.$source();
              } else {
                return nil2;
              }
            }, $Document_source$29.$$arity = 0);
            Opal2.def(self4, "$source_lines", $Document_source_lines$30 = function $$source_lines() {
              var self5 = this;
              if ($truthy2(self5.reader)) {
                return self5.reader.$source_lines();
              } else {
                return nil2;
              }
            }, $Document_source_lines$30.$$arity = 0);
            Opal2.def(self4, "$basebackend?", $Document_basebackend$ques$31 = function(base) {
              var self5 = this;
              return self5.attributes["$[]"]("basebackend")["$=="](base);
            }, $Document_basebackend$ques$31.$$arity = 1);
            Opal2.def(self4, "$title", $Document_title$32 = function $$title() {
              var self5 = this;
              return self5.$doctitle();
            }, $Document_title$32.$$arity = 0);
            Opal2.def(self4, "$title=", $Document_title$eq$33 = function(title) {
              var self5 = this, sect = nil2, $writer = nil2;
              if ($truthy2(sect = self5.header)) {
              } else {
                $writer = ["header"];
                $send2(sect = self5.header = $$2($nesting4, "Section").$new(self5, 0), "sectname=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              $writer = [title];
              $send2(sect, "title=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              ;
            }, $Document_title$eq$33.$$arity = 1);
            Opal2.def(self4, "$doctitle", $Document_doctitle$34 = function $$doctitle(opts) {
              var $a2, self5 = this, val = nil2, sect = nil2, separator = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2(val = self5.attributes["$[]"]("title"))) {
              } else if ($truthy2(sect = self5.$first_section())) {
                val = sect.$title();
              } else if ($truthy2(($truthy2($a2 = opts["$[]"]("use_fallback")) ? val = self5.attributes["$[]"]("untitled-label") : $a2)["$!"]())) {
                return nil2;
              }
              ;
              if ($truthy2(separator = opts["$[]"]("partition"))) {
                return $$2($nesting4, "Title").$new(val, opts.$merge($hash22(["separator"], { "separator": function() {
                  if (separator["$=="](true)) {
                    return self5.attributes["$[]"]("title-separator");
                  } else {
                    return separator;
                  }
                  ;
                  return nil2;
                }() })));
              } else if ($truthy2($truthy2($a2 = opts["$[]"]("sanitize")) ? val["$include?"]("<") : $a2)) {
                return val.$gsub($$2($nesting4, "XmlSanitizeRx"), "").$squeeze(" ").$strip();
              } else {
                return val;
              }
              ;
            }, $Document_doctitle$34.$$arity = -1);
            Opal2.alias(self4, "name", "doctitle");
            Opal2.def(self4, "$xreftext", $Document_xreftext$35 = function $$xreftext(xrefstyle) {
              var $a2, self5 = this, val = nil2;
              if (xrefstyle == null) {
                xrefstyle = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = val = self5.$reftext()) ? val["$empty?"]()["$!"]() : $a2)) {
                return val;
              } else {
                return self5.$title();
              }
              ;
            }, $Document_xreftext$35.$$arity = -1);
            Opal2.def(self4, "$author", $Document_author$36 = function $$author() {
              var self5 = this;
              return self5.attributes["$[]"]("author");
            }, $Document_author$36.$$arity = 0);
            Opal2.def(self4, "$authors", $Document_authors$37 = function $$authors() {
              var $a2, self5 = this, attrs = nil2, authors = nil2, num_authors = nil2, idx = nil2;
              if ($truthy2((attrs = self5.attributes)["$key?"]("author"))) {
                authors = [$$2($nesting4, "Author").$new(attrs["$[]"]("author"), attrs["$[]"]("firstname"), attrs["$[]"]("middlename"), attrs["$[]"]("lastname"), attrs["$[]"]("authorinitials"), attrs["$[]"]("email"))];
                if ($truthy2($rb_gt2(num_authors = $truthy2($a2 = attrs["$[]"]("authorcount")) ? $a2 : 0, 1))) {
                  idx = 1;
                  while ($truthy2($rb_lt2(idx, num_authors))) {
                    idx = $rb_plus(idx, 1);
                    authors["$<<"]($$2($nesting4, "Author").$new(attrs["$[]"]("author_" + idx), attrs["$[]"]("firstname_" + idx), attrs["$[]"]("middlename_" + idx), attrs["$[]"]("lastname_" + idx), attrs["$[]"]("authorinitials_" + idx), attrs["$[]"]("email_" + idx)));
                  }
                  ;
                }
                ;
                return authors;
              } else {
                return [];
              }
            }, $Document_authors$37.$$arity = 0);
            Opal2.def(self4, "$revdate", $Document_revdate$38 = function $$revdate() {
              var self5 = this;
              return self5.attributes["$[]"]("revdate");
            }, $Document_revdate$38.$$arity = 0);
            Opal2.def(self4, "$notitle", $Document_notitle$39 = function $$notitle() {
              var self5 = this;
              return self5.attributes["$key?"]("notitle");
            }, $Document_notitle$39.$$arity = 0);
            Opal2.def(self4, "$noheader", $Document_noheader$40 = function $$noheader() {
              var self5 = this;
              return self5.attributes["$key?"]("noheader");
            }, $Document_noheader$40.$$arity = 0);
            Opal2.def(self4, "$nofooter", $Document_nofooter$41 = function $$nofooter() {
              var self5 = this;
              return self5.attributes["$key?"]("nofooter");
            }, $Document_nofooter$41.$$arity = 0);
            Opal2.def(self4, "$first_section", $Document_first_section$42 = function $$first_section() {
              var $a2, $$43, self5 = this;
              return $truthy2($a2 = self5.header) ? $a2 : $send2(self5.blocks, "find", [], ($$43 = function(e) {
                var self6 = $$43.$$s || this;
                if (e == null) {
                  e = nil2;
                }
                ;
                return e.$context()["$=="]("section");
              }, $$43.$$s = self5, $$43.$$arity = 1, $$43));
            }, $Document_first_section$42.$$arity = 0);
            Opal2.def(self4, "$header?", $Document_header$ques$44 = function() {
              var self5 = this;
              if ($truthy2(self5.header)) {
                return true;
              } else {
                return false;
              }
            }, $Document_header$ques$44.$$arity = 0);
            Opal2.alias(self4, "has_header?", "header?");
            Opal2.def(self4, "$<<", $Document_$lt$lt$45 = function(block2) {
              var $iter2 = $Document_$lt$lt$45.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Document_$lt$lt$45.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (block2.$context()["$=="]("section")) {
                self5.$assign_numeral(block2);
              }
              ;
              return $send2(self5, Opal2.find_super_dispatcher(self5, "<<", $Document_$lt$lt$45, false), $zuper, $iter2);
            }, $Document_$lt$lt$45.$$arity = 1);
            Opal2.def(self4, "$finalize_header", $Document_finalize_header$46 = function $$finalize_header(unrooted_attributes, header_valid) {
              var self5 = this, $writer = nil2;
              if (header_valid == null) {
                header_valid = true;
              }
              ;
              self5.$clear_playback_attributes(unrooted_attributes);
              self5.$save_attributes();
              if ($truthy2(header_valid)) {
              } else {
                $writer = ["invalid-header", true];
                $send2(unrooted_attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              return unrooted_attributes;
            }, $Document_finalize_header$46.$$arity = -2);
            Opal2.def(self4, "$playback_attributes", $Document_playback_attributes$47 = function $$playback_attributes(block_attributes) {
              var $$48, self5 = this;
              if ($truthy2(block_attributes["$key?"]("attribute_entries"))) {
                return $send2(block_attributes["$[]"]("attribute_entries"), "each", [], ($$48 = function(entry) {
                  var self6 = $$48.$$s || this, name = nil2, $writer = nil2;
                  if (self6.attributes == null)
                    self6.attributes = nil2;
                  if (entry == null) {
                    entry = nil2;
                  }
                  ;
                  name = entry.$name();
                  if ($truthy2(entry.$negate())) {
                    self6.attributes.$delete(name);
                    if (name["$=="]("compat-mode")) {
                      return self6.compat_mode = false;
                    } else {
                      return nil2;
                    }
                    ;
                  } else {
                    $writer = [name, entry.$value()];
                    $send2(self6.attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    if (name["$=="]("compat-mode")) {
                      return self6.compat_mode = true;
                    } else {
                      return nil2;
                    }
                    ;
                  }
                  ;
                }, $$48.$$s = self5, $$48.$$arity = 1, $$48));
              } else {
                return nil2;
              }
            }, $Document_playback_attributes$47.$$arity = 1);
            Opal2.def(self4, "$restore_attributes", $Document_restore_attributes$49 = function $$restore_attributes() {
              var self5 = this;
              if ($truthy2(self5.parent_document)) {
              } else {
                self5.catalog["$[]"]("callouts").$rewind();
              }
              ;
              return self5.attributes.$replace(self5.header_attributes);
            }, $Document_restore_attributes$49.$$arity = 0);
            Opal2.def(self4, "$set_attribute", $Document_set_attribute$50 = function $$set_attribute(name, value) {
              var $a2, self5 = this, $writer = nil2, $case = nil2;
              if (value == null) {
                value = "";
              }
              ;
              if ($truthy2(self5["$attribute_locked?"](name))) {
                return nil2;
              } else {
                if ($truthy2(value["$empty?"]())) {
                } else {
                  value = self5.$apply_attribute_value_subs(value);
                }
                ;
                if ($truthy2(self5.header_attributes)) {
                  $writer = [name, value];
                  $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  $case = name;
                  if ("backend"["$==="]($case)) {
                    self5.$update_backend_attributes(value, $truthy2($a2 = self5.attributes_modified["$delete?"]("htmlsyntax")) ? value["$=="](self5.backend) : $a2);
                  } else if ("doctype"["$==="]($case)) {
                    self5.$update_doctype_attributes(value);
                  } else {
                    $writer = [name, value];
                    $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  self5.attributes_modified["$<<"](name);
                }
                ;
                return value;
              }
              ;
            }, $Document_set_attribute$50.$$arity = -2);
            Opal2.def(self4, "$delete_attribute", $Document_delete_attribute$51 = function $$delete_attribute(name) {
              var self5 = this;
              if ($truthy2(self5["$attribute_locked?"](name))) {
                return false;
              } else {
                self5.attributes.$delete(name);
                self5.attributes_modified["$<<"](name);
                return true;
              }
            }, $Document_delete_attribute$51.$$arity = 1);
            Opal2.def(self4, "$attribute_locked?", $Document_attribute_locked$ques$52 = function(name) {
              var self5 = this;
              return self5.attribute_overrides["$key?"](name);
            }, $Document_attribute_locked$ques$52.$$arity = 1);
            Opal2.def(self4, "$set_header_attribute", $Document_set_header_attribute$53 = function $$set_header_attribute(name, value, overwrite) {
              var $a2, self5 = this, attrs = nil2, $writer = nil2;
              if (value == null) {
                value = "";
              }
              ;
              if (overwrite == null) {
                overwrite = true;
              }
              ;
              attrs = $truthy2($a2 = self5.header_attributes) ? $a2 : self5.attributes;
              if ($truthy2(($a2 = overwrite["$=="](false)) ? attrs["$key?"](name) : overwrite["$=="](false))) {
                return false;
              } else {
                $writer = [name, value];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                return true;
              }
              ;
            }, $Document_set_header_attribute$53.$$arity = -2);
            Opal2.def(self4, "$convert", $Document_convert$54 = function $$convert(opts) {
              var $a2, $$55, self5 = this, $writer = nil2, block2 = nil2, output = nil2, transform = nil2, exts = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2(self5.timings)) {
                self5.timings.$start("convert");
              }
              ;
              if ($truthy2(self5.parsed)) {
              } else {
                self5.$parse();
              }
              ;
              if ($truthy2($truthy2($a2 = $rb_ge(self5.safe, $$$2($$2($nesting4, "SafeMode"), "SERVER"))) ? $a2 : opts["$empty?"]())) {
              } else {
                if ($truthy2(($writer = ["outfile", opts["$[]"]("outfile")], $send2(self5.attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
                } else {
                  self5.attributes.$delete("outfile");
                }
                ;
                if ($truthy2(($writer = ["outdir", opts["$[]"]("outdir")], $send2(self5.attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
                } else {
                  self5.attributes.$delete("outdir");
                }
                ;
              }
              ;
              if (self5.$doctype()["$=="]("inline")) {
                if ($truthy2(block2 = $truthy2($a2 = self5.blocks["$[]"](0)) ? $a2 : self5.header)) {
                  if ($truthy2($truthy2($a2 = block2.$content_model()["$=="]("compound")) ? $a2 : block2.$content_model()["$=="]("empty"))) {
                    self5.$logger().$warn("no inline candidate; use the inline doctype to convert a single paragragh, verbatim, or raw block");
                  } else {
                    output = block2.$content();
                  }
                }
              } else {
                if ($truthy2(opts["$key?"]("standalone"))) {
                  transform = function() {
                    if ($truthy2(opts["$[]"]("standalone"))) {
                      return "document";
                    } else {
                      return "embedded";
                    }
                    ;
                    return nil2;
                  }();
                } else if ($truthy2(opts["$key?"]("header_footer"))) {
                  transform = function() {
                    if ($truthy2(opts["$[]"]("header_footer"))) {
                      return "document";
                    } else {
                      return "embedded";
                    }
                    ;
                    return nil2;
                  }();
                } else {
                  transform = function() {
                    if ($truthy2(self5.options["$[]"]("standalone"))) {
                      return "document";
                    } else {
                      return "embedded";
                    }
                    ;
                    return nil2;
                  }();
                }
                ;
                output = self5.converter.$convert(self5, transform);
              }
              ;
              if ($truthy2(self5.parent_document)) {
              } else if ($truthy2($truthy2($a2 = exts = self5.extensions) ? exts["$postprocessors?"]() : $a2)) {
                $send2(exts.$postprocessors(), "each", [], ($$55 = function(ext) {
                  var self6 = $$55.$$s || this;
                  if (ext == null) {
                    ext = nil2;
                  }
                  ;
                  return output = ext.$process_method()["$[]"](self6, output);
                }, $$55.$$s = self5, $$55.$$arity = 1, $$55));
              }
              ;
              if ($truthy2(self5.timings)) {
                self5.timings.$record("convert");
              }
              ;
              return output;
            }, $Document_convert$54.$$arity = -1);
            Opal2.alias(self4, "render", "convert");
            Opal2.def(self4, "$write", $Document_write$56 = function $$write(output, target) {
              var $a2, $b2, self5 = this;
              if ($truthy2(self5.timings)) {
                self5.timings.$start("write");
              }
              ;
              if ($truthy2($$2($nesting4, "Writer")["$==="](self5.converter))) {
                self5.converter.$write(output, target);
              } else {
                if ($truthy2(target["$respond_to?"]("write"))) {
                  if ($truthy2(output["$nil_or_empty?"]())) {
                  } else {
                    target.$write(output.$chomp());
                    target.$write($$2($nesting4, "LF"));
                  }
                } else {
                  $$$2("::", "File").$write(target, output, $hash22(["mode"], { "mode": $$2($nesting4, "FILE_WRITE_MODE") }));
                }
                ;
                if ($truthy2($truthy2($a2 = ($b2 = self5.backend["$=="]("manpage")) ? $$$2("::", "String")["$==="](target) : self5.backend["$=="]("manpage")) ? self5.converter.$class()["$respond_to?"]("write_alternate_pages") : $a2)) {
                  self5.converter.$class().$write_alternate_pages(self5.attributes["$[]"]("mannames"), self5.attributes["$[]"]("manvolnum"), target);
                }
                ;
              }
              ;
              if ($truthy2(self5.timings)) {
                self5.timings.$record("write");
              }
              ;
              return nil2;
            }, $Document_write$56.$$arity = 2);
            Opal2.def(self4, "$content", $Document_content$57 = function $$content() {
              var $iter2 = $Document_content$57.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Document_content$57.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              self5.attributes.$delete("title");
              return $send2(self5, Opal2.find_super_dispatcher(self5, "content", $Document_content$57, false), $zuper, $iter2);
            }, $Document_content$57.$$arity = 0);
            Opal2.def(self4, "$docinfo", $Document_docinfo$58 = function $$docinfo(location, suffix) {
              var $a2, $$59, $$60, self5 = this, qualifier = nil2, docinfo = nil2, content = nil2, docinfo_file = nil2, docinfo_dir = nil2, docinfo_subs = nil2, docinfo_path = nil2, shared_docinfo = nil2, private_docinfo = nil2;
              if (location == null) {
                location = "head";
              }
              ;
              if (suffix == null) {
                suffix = nil2;
              }
              ;
              if ($truthy2($rb_lt2(self5.$safe(), $$$2($$2($nesting4, "SafeMode"), "SECURE")))) {
                if (location["$=="]("head")) {
                } else {
                  qualifier = "-" + location;
                }
                ;
                suffix = $truthy2($a2 = suffix) ? $a2 : self5.outfilesuffix;
                if ($truthy2((docinfo = self5.attributes["$[]"]("docinfo"))["$nil_or_empty?"]())) {
                  if ($truthy2(self5.attributes["$key?"]("docinfo2"))) {
                    docinfo = ["private", "shared"];
                  } else if ($truthy2(self5.attributes["$key?"]("docinfo1"))) {
                    docinfo = ["shared"];
                  } else {
                    docinfo = function() {
                      if ($truthy2(docinfo)) {
                        return ["private"];
                      } else {
                        return nil2;
                      }
                      ;
                      return nil2;
                    }();
                  }
                } else {
                  docinfo = $send2(docinfo.$split(","), "map", [], ($$59 = function(it) {
                    var self6 = $$59.$$s || this;
                    if (it == null) {
                      it = nil2;
                    }
                    ;
                    return it.$strip();
                  }, $$59.$$s = self5, $$59.$$arity = 1, $$59));
                }
                ;
                if ($truthy2(docinfo)) {
                  content = [];
                  $a2 = ["docinfo" + qualifier + suffix, self5.attributes["$[]"]("docinfodir"), self5.$resolve_docinfo_subs()], docinfo_file = $a2[0], docinfo_dir = $a2[1], docinfo_subs = $a2[2], $a2;
                  if ($truthy2(docinfo["$&"](["shared", "shared-" + location])["$empty?"]())) {
                  } else {
                    docinfo_path = self5.$normalize_system_path(docinfo_file, docinfo_dir);
                    if ($truthy2(shared_docinfo = self5.$read_asset(docinfo_path, $hash22(["normalize"], { "normalize": true })))) {
                      content["$<<"](self5.$apply_subs(shared_docinfo, docinfo_subs));
                    }
                    ;
                  }
                  ;
                  if ($truthy2($truthy2($a2 = self5.attributes["$[]"]("docname")["$nil_or_empty?"]()) ? $a2 : docinfo["$&"](["private", "private-" + location])["$empty?"]())) {
                  } else {
                    docinfo_path = self5.$normalize_system_path("" + self5.attributes["$[]"]("docname") + "-" + docinfo_file, docinfo_dir);
                    if ($truthy2(private_docinfo = self5.$read_asset(docinfo_path, $hash22(["normalize"], { "normalize": true })))) {
                      content["$<<"](self5.$apply_subs(private_docinfo, docinfo_subs));
                    }
                    ;
                  }
                  ;
                }
                ;
              }
              ;
              if ($truthy2($truthy2($a2 = self5.extensions) ? self5["$docinfo_processors?"](location) : $a2)) {
                return ($truthy2($a2 = content) ? $a2 : []).$concat($send2(self5.docinfo_processor_extensions["$[]"](location), "map", [], ($$60 = function(ext) {
                  var self6 = $$60.$$s || this;
                  if (ext == null) {
                    ext = nil2;
                  }
                  ;
                  return ext.$process_method()["$[]"](self6);
                }, $$60.$$s = self5, $$60.$$arity = 1, $$60)).$compact()).$join($$2($nesting4, "LF"));
              } else if ($truthy2(content)) {
                return content.$join($$2($nesting4, "LF"));
              } else {
                return "";
              }
              ;
            }, $Document_docinfo$58.$$arity = -1);
            Opal2.def(self4, "$docinfo_processors?", $Document_docinfo_processors$ques$61 = function(location) {
              var $a2, self5 = this, $writer = nil2;
              if (location == null) {
                location = "head";
              }
              ;
              if ($truthy2(self5.docinfo_processor_extensions["$key?"](location))) {
                return self5.docinfo_processor_extensions["$[]"](location)["$!="](false);
              } else if ($truthy2($truthy2($a2 = self5.extensions) ? self5.document.$extensions()["$docinfo_processors?"](location) : $a2)) {
                return ($writer = [location, self5.document.$extensions().$docinfo_processors(location)], $send2(self5.docinfo_processor_extensions, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])["$!"]()["$!"]();
              } else {
                $writer = [location, false];
                $send2(self5.docinfo_processor_extensions, "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }
              ;
            }, $Document_docinfo_processors$ques$61.$$arity = -1);
            Opal2.def(self4, "$to_s", $Document_to_s$62 = function $$to_s() {
              var $a2, self5 = this;
              return "#<" + self5.$class() + "@" + self5.$object_id() + " {doctype: " + self5.$doctype().$inspect() + ", doctitle: " + ($truthy2($a2 = self5.header) ? self5.header.$title() : $a2).$inspect() + ", blocks: " + self5.blocks.$size() + "}>";
            }, $Document_to_s$62.$$arity = 0);
            self4.$private();
            Opal2.def(self4, "$apply_attribute_value_subs", $Document_apply_attribute_value_subs$63 = function $$apply_attribute_value_subs(value) {
              var $a2, self5 = this;
              if ($truthy2($$2($nesting4, "AttributeEntryPassMacroRx")["$=~"](value))) {
                value = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2);
                if ($truthy2(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1))) {
                  value = self5.$apply_subs(value, self5.$resolve_pass_subs(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1)));
                }
                ;
              } else {
                value = self5.$apply_header_subs(value);
              }
              ;
              if ($truthy2(self5.max_attribute_value_size)) {
                return self5.$limit_bytesize(value, self5.max_attribute_value_size);
              } else {
                return value;
              }
              ;
            }, $Document_apply_attribute_value_subs$63.$$arity = 1);
            Opal2.def(self4, "$limit_bytesize", $Document_limit_bytesize$64 = function $$limit_bytesize(str, max) {
              var $a2, self5 = this;
              if ($truthy2($rb_gt2(str.$bytesize(), max))) {
                while (!$truthy2((str = str.$byteslice(0, max))["$valid_encoding?"]())) {
                  max = $rb_minus(max, 1);
                }
              }
              ;
              return str;
            }, $Document_limit_bytesize$64.$$arity = 2);
            Opal2.def(self4, "$resolve_docinfo_subs", $Document_resolve_docinfo_subs$65 = function $$resolve_docinfo_subs() {
              var self5 = this;
              if ($truthy2(self5.attributes["$key?"]("docinfosubs"))) {
                return self5.$resolve_subs(self5.attributes["$[]"]("docinfosubs"), "block", nil2, "docinfo");
              } else {
                return ["attributes"];
              }
            }, $Document_resolve_docinfo_subs$65.$$arity = 0);
            Opal2.def(self4, "$create_converter", $Document_create_converter$66 = function $$create_converter(backend, delegate_backend) {
              var $a2, self5 = this, converter_opts = nil2, template_dirs = nil2, opts = nil2, $writer = nil2, converter = nil2;
              converter_opts = $hash22(["document", "htmlsyntax"], { "document": self5, "htmlsyntax": self5.attributes["$[]"]("htmlsyntax") });
              if ($truthy2(template_dirs = $truthy2($a2 = (opts = self5.options)["$[]"]("template_dirs")) ? $a2 : opts["$[]"]("template_dir"))) {
                $writer = ["template_dirs", [].concat(Opal2.to_a(template_dirs))];
                $send2(converter_opts, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["template_cache", opts.$fetch("template_cache", true)];
                $send2(converter_opts, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["template_engine", opts["$[]"]("template_engine")];
                $send2(converter_opts, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["template_engine_options", opts["$[]"]("template_engine_options")];
                $send2(converter_opts, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["eruby", opts["$[]"]("eruby")];
                $send2(converter_opts, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["safe", self5.safe];
                $send2(converter_opts, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                if ($truthy2(delegate_backend)) {
                  $writer = ["delegate_backend", delegate_backend];
                  $send2(converter_opts, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
              }
              ;
              if ($truthy2(converter = opts["$[]"]("converter"))) {
                return $$$2($$2($nesting4, "Converter"), "CustomFactory").$new($hash(backend, converter)).$create(backend, converter_opts);
              } else {
                return opts.$fetch("converter_factory", $$2($nesting4, "Converter")).$create(backend, converter_opts);
              }
              ;
            }, $Document_create_converter$66.$$arity = 2);
            Opal2.def(self4, "$clear_playback_attributes", $Document_clear_playback_attributes$67 = function $$clear_playback_attributes(attributes) {
              var self5 = this;
              return attributes.$delete("attribute_entries");
            }, $Document_clear_playback_attributes$67.$$arity = 1);
            Opal2.def(self4, "$save_attributes", $Document_save_attributes$68 = function $$save_attributes() {
              var $a2, $$69, self5 = this, attrs = nil2, doctitle_val = nil2, $writer = nil2, toc_val = nil2, toc_position_val = nil2, toc_placement_val = nil2, default_toc_position = nil2, default_toc_class = nil2, position = nil2, $case = nil2, icons_val = nil2, basebackend = nil2, syntax_hl_name = nil2, syntax_hl_factory = nil2, syntax_hls = nil2;
              if ($truthy2($truthy2($a2 = (attrs = self5.attributes)["$key?"]("doctitle")) ? $a2 : (doctitle_val = self5.$doctitle())["$!"]())) {
              } else {
                $writer = ["doctitle", doctitle_val];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              self5.id = $truthy2($a2 = self5.id) ? $a2 : attrs["$[]"]("css-signature");
              if ($truthy2(toc_val = function() {
                if ($truthy2(attrs.$delete("toc2"))) {
                  return "left";
                } else {
                  return attrs["$[]"]("toc");
                }
                ;
                return nil2;
              }())) {
                toc_position_val = function() {
                  if ($truthy2($truthy2($a2 = toc_placement_val = attrs.$fetch("toc-placement", "macro")) ? toc_placement_val["$!="]("auto") : $a2)) {
                    return toc_placement_val;
                  } else {
                    return attrs["$[]"]("toc-position");
                  }
                  ;
                  return nil2;
                }();
                if ($truthy2($truthy2($a2 = toc_val["$empty?"]()) ? toc_position_val["$nil_or_empty?"]() : $a2)) {
                } else {
                  default_toc_position = "left";
                  default_toc_class = "toc2";
                  position = function() {
                    if ($truthy2(toc_position_val["$nil_or_empty?"]())) {
                      if ($truthy2(toc_val["$empty?"]())) {
                        return default_toc_position;
                      } else {
                        return toc_val;
                      }
                      ;
                    } else {
                      return toc_position_val;
                    }
                    ;
                    return nil2;
                  }();
                  $writer = ["toc", ""];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["toc-placement", "auto"];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $case = position;
                  if ("left"["$==="]($case) || "<"["$==="]($case) || "&lt;"["$==="]($case)) {
                    $writer = ["toc-position", "left"];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else if ("right"["$==="]($case) || ">"["$==="]($case) || "&gt;"["$==="]($case)) {
                    $writer = ["toc-position", "right"];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else if ("top"["$==="]($case) || "^"["$==="]($case)) {
                    $writer = ["toc-position", "top"];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else if ("bottom"["$==="]($case) || "v"["$==="]($case)) {
                    $writer = ["toc-position", "bottom"];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else if ("preamble"["$==="]($case) || "macro"["$==="]($case)) {
                    $writer = ["toc-position", "content"];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    $writer = ["toc-placement", position];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    default_toc_class = nil2;
                  } else {
                    attrs.$delete("toc-position");
                    default_toc_class = nil2;
                  }
                  ;
                  if ($truthy2(default_toc_class)) {
                    $truthy2($a2 = attrs["$[]"]("toc-class")) ? $a2 : ($writer = ["toc-class", default_toc_class], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  }
                  ;
                }
                ;
              }
              ;
              if ($truthy2($truthy2($a2 = icons_val = attrs["$[]"]("icons")) ? attrs["$key?"]("icontype")["$!"]() : $a2)) {
                $case = icons_val;
                if (""["$==="]($case) || "font"["$==="]($case)) {
                  nil2;
                } else {
                  $writer = ["icons", ""];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if (icons_val["$=="]("image")) {
                  } else {
                    $writer = ["icontype", icons_val];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }
              }
              ;
              if ($truthy2($truthy2($a2 = self5.compat_mode = attrs["$key?"]("compat-mode")) ? attrs["$key?"]("language") : $a2)) {
                $writer = ["source-language", attrs["$[]"]("language")];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(self5.parent_document)) {
              } else {
                if ((basebackend = attrs["$[]"]("basebackend"))["$=="]("html")) {
                  if ($truthy2($truthy2($a2 = syntax_hl_name = attrs["$[]"]("source-highlighter")) ? attrs["$[]"]("" + syntax_hl_name + "-unavailable")["$!"]() : $a2)) {
                    if ($truthy2(syntax_hl_factory = self5.options["$[]"]("syntax_highlighter_factory"))) {
                      self5.syntax_highlighter = syntax_hl_factory.$create(syntax_hl_name, self5.backend, $hash22(["document"], { "document": self5 }));
                    } else if ($truthy2(syntax_hls = self5.options["$[]"]("syntax_highlighters"))) {
                      self5.syntax_highlighter = $$$2($$2($nesting4, "SyntaxHighlighter"), "DefaultFactoryProxy").$new(syntax_hls).$create(syntax_hl_name, self5.backend, $hash22(["document"], { "document": self5 }));
                    } else {
                      self5.syntax_highlighter = $$2($nesting4, "SyntaxHighlighter").$create(syntax_hl_name, self5.backend, $hash22(["document"], { "document": self5 }));
                    }
                  }
                } else if (basebackend["$=="]("docbook")) {
                  if ($truthy2($truthy2($a2 = self5["$attribute_locked?"]("toc")) ? $a2 : self5.attributes_modified["$include?"]("toc"))) {
                  } else {
                    $writer = ["toc", ""];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2($truthy2($a2 = self5["$attribute_locked?"]("sectnums")) ? $a2 : self5.attributes_modified["$include?"]("sectnums"))) {
                  } else {
                    $writer = ["sectnums", ""];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }
                ;
                self5.outfilesuffix = attrs["$[]"]("outfilesuffix");
                $send2($$2($nesting4, "FLEXIBLE_ATTRIBUTES"), "each", [], ($$69 = function(name) {
                  var self6 = $$69.$$s || this, $b2;
                  if (self6.attribute_overrides == null)
                    self6.attribute_overrides = nil2;
                  if (name == null) {
                    name = nil2;
                  }
                  ;
                  if ($truthy2($truthy2($b2 = self6.attribute_overrides["$key?"](name)) ? self6.attribute_overrides["$[]"](name) : $b2)) {
                    return self6.attribute_overrides.$delete(name);
                  } else {
                    return nil2;
                  }
                  ;
                }, $$69.$$s = self5, $$69.$$arity = 1, $$69));
              }
              ;
              return self5.header_attributes = attrs.$merge();
            }, $Document_save_attributes$68.$$arity = 0);
            Opal2.def(self4, "$fill_datetime_attributes", $Document_fill_datetime_attributes$70 = function $$fill_datetime_attributes(attrs, input_mtime) {
              var $a2, $b2, self5 = this, now = nil2, source_date_epoch = nil2, localdate = nil2, $writer = nil2, localtime = nil2, docdate = nil2, doctime = nil2;
              now = function() {
                if ($truthy2($$$2("::", "ENV")["$key?"]("SOURCE_DATE_EPOCH"))) {
                  return source_date_epoch = $$$2("::", "Time").$at(self5.$Integer($$$2("::", "ENV")["$[]"]("SOURCE_DATE_EPOCH"))).$utc();
                } else {
                  return $$$2("::", "Time").$now();
                }
                ;
                return nil2;
              }();
              if ($truthy2(localdate = attrs["$[]"]("localdate"))) {
                $truthy2($a2 = attrs["$[]"]("localyear")) ? $a2 : ($writer = ["localyear", function() {
                  if (localdate.$index("-")["$=="](4)) {
                    return localdate.$slice(0, 4);
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }()], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              } else {
                localdate = ($writer = ["localdate", now.$strftime("%F")], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                $truthy2($a2 = attrs["$[]"]("localyear")) ? $a2 : ($writer = ["localyear", now.$year().$to_s()], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
              ;
              localtime = $truthy2($a2 = attrs["$[]"]("localtime")) ? $a2 : ($writer = ["localtime", now.$strftime("%T " + function() {
                if (now.$utc_offset()["$=="](0)) {
                  return "UTC";
                } else {
                  return "%z";
                }
                ;
                return nil2;
              }())], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              $truthy2($a2 = attrs["$[]"]("localdatetime")) ? $a2 : ($writer = ["localdatetime", "" + localdate + " " + localtime], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              input_mtime = $truthy2($a2 = $truthy2($b2 = source_date_epoch) ? $b2 : input_mtime) ? $a2 : now;
              if ($truthy2(docdate = attrs["$[]"]("docdate"))) {
                $truthy2($a2 = attrs["$[]"]("docyear")) ? $a2 : ($writer = ["docyear", function() {
                  if (docdate.$index("-")["$=="](4)) {
                    return docdate.$slice(0, 4);
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }()], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              } else {
                docdate = ($writer = ["docdate", input_mtime.$strftime("%F")], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                $truthy2($a2 = attrs["$[]"]("docyear")) ? $a2 : ($writer = ["docyear", input_mtime.$year().$to_s()], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
              ;
              doctime = $truthy2($a2 = attrs["$[]"]("doctime")) ? $a2 : ($writer = ["doctime", input_mtime.$strftime("%T " + function() {
                if (input_mtime.$utc_offset()["$=="](0)) {
                  return "UTC";
                } else {
                  return "%z";
                }
                ;
                return nil2;
              }())], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              $truthy2($a2 = attrs["$[]"]("docdatetime")) ? $a2 : ($writer = ["docdatetime", "" + docdate + " " + doctime], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              return nil2;
            }, $Document_fill_datetime_attributes$70.$$arity = 2);
            Opal2.def(self4, "$update_backend_attributes", $Document_update_backend_attributes$71 = function $$update_backend_attributes(new_backend, init) {
              var $a2, $b2, self5 = this, current_backend = nil2, current_basebackend = nil2, attrs = nil2, current_doctype = nil2, actual_backend = nil2, _ = nil2, $writer = nil2, delegate_backend = nil2, converter = nil2, new_basebackend = nil2, new_filetype = nil2, htmlsyntax = nil2, backend_traits = nil2, current_filetype = nil2, page_width = nil2;
              if (init == null) {
                init = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = init) ? $a2 : new_backend["$!="](self5.backend))) {
                current_backend = self5.backend;
                current_basebackend = (attrs = self5.attributes)["$[]"]("basebackend");
                current_doctype = self5.doctype;
                if ($truthy2(new_backend["$include?"](":"))) {
                  $b2 = new_backend.$partition(":"), $a2 = Opal2.to_ary($b2), actual_backend = $a2[0] == null ? nil2 : $a2[0], _ = $a2[1] == null ? nil2 : $a2[1], new_backend = $a2[2] == null ? nil2 : $a2[2], $b2;
                }
                ;
                if ($truthy2(new_backend["$start_with?"]("xhtml"))) {
                  $writer = ["htmlsyntax", "xml"];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  new_backend = new_backend.$slice(1, new_backend.$length());
                } else if ($truthy2(new_backend["$start_with?"]("html"))) {
                  $truthy2($a2 = attrs["$[]"]("htmlsyntax")) ? $a2 : ($writer = ["htmlsyntax", "html"], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                }
                ;
                new_backend = $truthy2($a2 = $$2($nesting4, "BACKEND_ALIASES")["$[]"](new_backend)) ? $a2 : new_backend;
                if ($truthy2(actual_backend)) {
                  $a2 = [actual_backend, new_backend], new_backend = $a2[0], delegate_backend = $a2[1], $a2;
                }
                ;
                if ($truthy2(current_doctype)) {
                  if ($truthy2(current_backend)) {
                    attrs.$delete("backend-" + current_backend);
                    attrs.$delete("backend-" + current_backend + "-doctype-" + current_doctype);
                  }
                  ;
                  $writer = ["backend-" + new_backend + "-doctype-" + current_doctype, ""];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["doctype-" + current_doctype, ""];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else if ($truthy2(current_backend)) {
                  attrs.$delete("backend-" + current_backend);
                }
                ;
                $writer = ["backend-" + new_backend, ""];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                self5.backend = ($writer = ["backend", new_backend], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                if ($truthy2($$$2($$2($nesting4, "Converter"), "BackendTraits")["$==="](converter = self5.$create_converter(new_backend, delegate_backend)))) {
                  new_basebackend = converter.$basebackend();
                  new_filetype = converter.$filetype();
                  if ($truthy2(htmlsyntax = converter.$htmlsyntax())) {
                    $writer = ["htmlsyntax", htmlsyntax];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(init)) {
                    $truthy2($a2 = attrs["$[]"]("outfilesuffix")) ? $a2 : ($writer = ["outfilesuffix", converter.$outfilesuffix()], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  } else if ($truthy2(self5["$attribute_locked?"]("outfilesuffix"))) {
                  } else {
                    $writer = ["outfilesuffix", converter.$outfilesuffix()];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                } else if ($truthy2(converter)) {
                  backend_traits = $$2($nesting4, "Converter").$derive_backend_traits(new_backend);
                  new_basebackend = backend_traits["$[]"]("basebackend");
                  new_filetype = backend_traits["$[]"]("filetype");
                  if ($truthy2(init)) {
                    $truthy2($a2 = attrs["$[]"]("outfilesuffix")) ? $a2 : ($writer = ["outfilesuffix", backend_traits["$[]"]("outfilesuffix")], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  } else if ($truthy2(self5["$attribute_locked?"]("outfilesuffix"))) {
                  } else {
                    $writer = ["outfilesuffix", backend_traits["$[]"]("outfilesuffix")];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                } else {
                  self5.$raise($$$2("::", "NotImplementedError"), "asciidoctor: FAILED: missing converter for backend '" + new_backend + "'. Processing aborted.");
                }
                ;
                self5.converter = converter;
                if ($truthy2(current_filetype = attrs["$[]"]("filetype"))) {
                  attrs.$delete("filetype-" + current_filetype);
                }
                ;
                $writer = ["filetype", new_filetype];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["filetype-" + new_filetype, ""];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                if ($truthy2(page_width = $$2($nesting4, "DEFAULT_PAGE_WIDTHS")["$[]"](new_basebackend))) {
                  $writer = ["pagewidth", page_width];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  attrs.$delete("pagewidth");
                }
                ;
                if ($truthy2(new_basebackend["$!="](current_basebackend))) {
                  if ($truthy2(current_doctype)) {
                    if ($truthy2(current_basebackend)) {
                      attrs.$delete("basebackend-" + current_basebackend);
                      attrs.$delete("basebackend-" + current_basebackend + "-doctype-" + current_doctype);
                    }
                    ;
                    $writer = ["basebackend-" + new_basebackend + "-doctype-" + current_doctype, ""];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                  } else if ($truthy2(current_basebackend)) {
                    attrs.$delete("basebackend-" + current_basebackend);
                  }
                  ;
                  $writer = ["basebackend-" + new_basebackend, ""];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["basebackend", new_basebackend];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                }
                ;
                return new_backend;
              } else {
                return nil2;
              }
              ;
            }, $Document_update_backend_attributes$71.$$arity = -2);
            return (Opal2.def(self4, "$update_doctype_attributes", $Document_update_doctype_attributes$72 = function $$update_doctype_attributes(new_doctype) {
              var $a2, self5 = this, attrs = nil2, current_backend = nil2, current_basebackend = nil2, current_doctype = nil2, $writer = nil2;
              if ($truthy2($truthy2($a2 = new_doctype) ? new_doctype["$!="](self5.doctype) : $a2)) {
                $a2 = [self5.backend, (attrs = self5.attributes)["$[]"]("basebackend"), self5.doctype], current_backend = $a2[0], current_basebackend = $a2[1], current_doctype = $a2[2], $a2;
                if ($truthy2(current_doctype)) {
                  attrs.$delete("doctype-" + current_doctype);
                  if ($truthy2(current_backend)) {
                    attrs.$delete("backend-" + current_backend + "-doctype-" + current_doctype);
                    $writer = ["backend-" + current_backend + "-doctype-" + new_doctype, ""];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                  }
                  ;
                  if ($truthy2(current_basebackend)) {
                    attrs.$delete("basebackend-" + current_basebackend + "-doctype-" + current_doctype);
                    $writer = ["basebackend-" + current_basebackend + "-doctype-" + new_doctype, ""];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                  }
                  ;
                } else {
                  if ($truthy2(current_backend)) {
                    $writer = ["backend-" + current_backend + "-doctype-" + new_doctype, ""];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(current_basebackend)) {
                    $writer = ["basebackend-" + current_basebackend + "-doctype-" + new_doctype, ""];
                    $send2(attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }
                ;
                $writer = ["doctype-" + new_doctype, ""];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                return self5.doctype = ($writer = ["doctype", new_doctype], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              } else {
                return nil2;
              }
            }, $Document_update_doctype_attributes$72.$$arity = 1), nil2) && "update_doctype_attributes";
          })($nesting3[0], $$2($nesting3, "AbstractBlock"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/inline"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$attr_accessor", "$attr_reader", "$[]", "$convert", "$converter", "$attr", "$==", "$apply_reftext_subs", "$reftext"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Inline");
            var $nesting4 = [self4].concat($parent_nesting3), $Inline_initialize$1, $Inline_block$ques$2, $Inline_inline$ques$3, $Inline_convert$4, $Inline_alt$5, $Inline_reftext$ques$6, $Inline_reftext$7, $Inline_xreftext$8;
            self4.$$prototype.text = self4.$$prototype.type = nil2;
            self4.$attr_accessor("text");
            self4.$attr_reader("type");
            self4.$attr_accessor("target");
            Opal2.def(self4, "$initialize", $Inline_initialize$1 = function $$initialize(parent, context, text, opts) {
              var $iter2 = $Inline_initialize$1.$$p, $yield = $iter2 || nil2, self5 = this;
              if ($iter2)
                $Inline_initialize$1.$$p = null;
              if (text == null) {
                text = nil2;
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Inline_initialize$1, false), [parent, context, opts], null);
              self5.node_name = "inline_" + context;
              self5.text = text;
              self5.id = opts["$[]"]("id");
              self5.type = opts["$[]"]("type");
              return self5.target = opts["$[]"]("target");
            }, $Inline_initialize$1.$$arity = -3);
            Opal2.def(self4, "$block?", $Inline_block$ques$2 = function() {
              var self5 = this;
              return false;
            }, $Inline_block$ques$2.$$arity = 0);
            Opal2.def(self4, "$inline?", $Inline_inline$ques$3 = function() {
              var self5 = this;
              return true;
            }, $Inline_inline$ques$3.$$arity = 0);
            Opal2.def(self4, "$convert", $Inline_convert$4 = function $$convert() {
              var self5 = this;
              return self5.$converter().$convert(self5);
            }, $Inline_convert$4.$$arity = 0);
            Opal2.alias(self4, "render", "convert");
            Opal2.def(self4, "$alt", $Inline_alt$5 = function $$alt() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.$attr("alt")) ? $a2 : "";
            }, $Inline_alt$5.$$arity = 0);
            Opal2.def(self4, "$reftext?", $Inline_reftext$ques$6 = function() {
              var $a2, $b2, self5 = this;
              return $truthy2($a2 = self5.text) ? $truthy2($b2 = self5.type["$=="]("ref")) ? $b2 : self5.type["$=="]("bibref") : $a2;
            }, $Inline_reftext$ques$6.$$arity = 0);
            Opal2.def(self4, "$reftext", $Inline_reftext$7 = function $$reftext() {
              var self5 = this, val = nil2;
              if ($truthy2(val = self5.text)) {
                return self5.$apply_reftext_subs(val);
              } else {
                return nil2;
              }
            }, $Inline_reftext$7.$$arity = 0);
            return (Opal2.def(self4, "$xreftext", $Inline_xreftext$8 = function $$xreftext(xrefstyle) {
              var self5 = this;
              if (xrefstyle == null) {
                xrefstyle = nil2;
              }
              ;
              return self5.$reftext();
            }, $Inline_xreftext$8.$$arity = -1), nil2) && "xreftext";
          })($nesting3[0], $$2($nesting3, "AbstractNode"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/list"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$==", "$next_list", "$callouts", "$class", "$object_id", "$inspect", "$size", "$items", "$attr_accessor", "$level", "$drop", "$nil_or_empty?", "$apply_subs", "$attr_writer", "$empty?", "$===", "$[]", "$outline?", "$!", "$simple?", "$source", "$shift", "$context", "$parent"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "List");
            var $nesting4 = [self4].concat($parent_nesting3), $List_initialize$1, $List_outline$ques$2, $List_convert$3, $List_to_s$4;
            self4.$$prototype.context = self4.$$prototype.document = self4.$$prototype.style = nil2;
            Opal2.alias(self4, "items", "blocks");
            Opal2.alias(self4, "content", "blocks");
            Opal2.alias(self4, "items?", "blocks?");
            Opal2.def(self4, "$initialize", $List_initialize$1 = function $$initialize(parent, context, opts) {
              var $iter2 = $List_initialize$1.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $List_initialize$1.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              return $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $List_initialize$1, false), $zuper, $iter2);
            }, $List_initialize$1.$$arity = -3);
            Opal2.def(self4, "$outline?", $List_outline$ques$2 = function() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.context["$=="]("ulist")) ? $a2 : self5.context["$=="]("olist");
            }, $List_outline$ques$2.$$arity = 0);
            Opal2.def(self4, "$convert", $List_convert$3 = function $$convert() {
              var $iter2 = $List_convert$3.$$p, $yield = $iter2 || nil2, self5 = this, result2 = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $List_convert$3.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (self5.context["$=="]("colist")) {
                result2 = $send2(self5, Opal2.find_super_dispatcher(self5, "convert", $List_convert$3, false), $zuper, $iter2);
                self5.document.$callouts().$next_list();
                return result2;
              } else {
                return $send2(self5, Opal2.find_super_dispatcher(self5, "convert", $List_convert$3, false), $zuper, $iter2);
              }
            }, $List_convert$3.$$arity = 0);
            Opal2.alias(self4, "render", "convert");
            return (Opal2.def(self4, "$to_s", $List_to_s$4 = function $$to_s() {
              var self5 = this;
              return "#<" + self5.$class() + "@" + self5.$object_id() + " {context: " + self5.context.$inspect() + ", style: " + self5.style.$inspect() + ", items: " + self5.$items().$size() + "}>";
            }, $List_to_s$4.$$arity = 0), nil2) && "to_s";
          })($nesting3[0], $$2($nesting3, "AbstractBlock"), $nesting3);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "ListItem");
            var $nesting4 = [self4].concat($parent_nesting3), $ListItem_initialize$5, $ListItem_text$ques$6, $ListItem_text$7, $ListItem_simple$ques$8, $ListItem_compound$ques$9, $ListItem_fold_first$10, $ListItem_to_s$11;
            self4.$$prototype.text = self4.$$prototype.subs = self4.$$prototype.blocks = nil2;
            Opal2.alias(self4, "list", "parent");
            self4.$attr_accessor("marker");
            Opal2.def(self4, "$initialize", $ListItem_initialize$5 = function $$initialize(parent, text) {
              var $iter2 = $ListItem_initialize$5.$$p, $yield = $iter2 || nil2, self5 = this;
              if ($iter2)
                $ListItem_initialize$5.$$p = null;
              if (text == null) {
                text = nil2;
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $ListItem_initialize$5, false), [parent, "list_item"], null);
              self5.text = text;
              self5.level = parent.$level();
              return self5.subs = $$2($nesting4, "NORMAL_SUBS").$drop(0);
            }, $ListItem_initialize$5.$$arity = -2);
            Opal2.def(self4, "$text?", $ListItem_text$ques$6 = function() {
              var self5 = this;
              if ($truthy2(self5.text["$nil_or_empty?"]())) {
                return false;
              } else {
                return true;
              }
            }, $ListItem_text$ques$6.$$arity = 0);
            Opal2.def(self4, "$text", $ListItem_text$7 = function $$text() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.text) ? self5.$apply_subs(self5.text, self5.subs) : $a2;
            }, $ListItem_text$7.$$arity = 0);
            self4.$attr_writer("text");
            Opal2.def(self4, "$simple?", $ListItem_simple$ques$8 = function() {
              var $a2, $b2, $c, self5 = this, blk = nil2;
              return $truthy2($a2 = self5.blocks["$empty?"]()) ? $a2 : $truthy2($b2 = ($c = self5.blocks.$size()["$=="](1)) ? $$2($nesting4, "List")["$==="](blk = self5.blocks["$[]"](0)) : self5.blocks.$size()["$=="](1)) ? blk["$outline?"]() : $b2;
            }, $ListItem_simple$ques$8.$$arity = 0);
            Opal2.def(self4, "$compound?", $ListItem_compound$ques$9 = function() {
              var self5 = this;
              return self5["$simple?"]()["$!"]();
            }, $ListItem_compound$ques$9.$$arity = 0);
            Opal2.def(self4, "$fold_first", $ListItem_fold_first$10 = function $$fold_first() {
              var self5 = this;
              self5.text = function() {
                if ($truthy2(self5.text["$nil_or_empty?"]())) {
                  return self5.blocks.$shift().$source();
                } else {
                  return "" + self5.text + $$2($nesting4, "LF") + self5.blocks.$shift().$source();
                }
                ;
                return nil2;
              }();
              return nil2;
            }, $ListItem_fold_first$10.$$arity = 0);
            return (Opal2.def(self4, "$to_s", $ListItem_to_s$11 = function $$to_s() {
              var $a2, self5 = this;
              return "#<" + self5.$class() + "@" + self5.$object_id() + " {list_context: " + self5.$parent().$context().$inspect() + ", text: " + self5.text.$inspect() + ", blocks: " + ($truthy2($a2 = self5.blocks) ? $a2 : []).$size() + "}>";
            }, $ListItem_to_s$11.$$arity = 0), nil2) && "to_s";
          })($nesting3[0], $$2($nesting3, "AbstractBlock"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/parser"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_times(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$include", "$new", "$proc", "$start_with?", "$match?", "$is_delimited_block?", "$private_class_method", "$parse_document_header", "$[]", "$has_more_lines?", "$next_section", "$assign_numeral", "$<<", "$blocks", "$skip_blank_lines", "$parse_block_metadata_lines", "$attributes", "$is_next_line_doctitle?", "$[]=", "$-", "$finalize_header", "$nil_or_empty?", "$title=", "$sourcemap", "$cursor", "$parse_section_title", "$id=", "$include?", "$sub_specialchars", "$sub_attributes", "$source_location=", "$header", "$attribute_locked?", "$id", "$clear", "$delete", "$instance_variable_get", "$parse_header_metadata", "$==", "$!", "$register", "$process_authors", "$update", "$doctype", "$parse_manpage_header", "$=~", "$downcase", "$error", "$logger", "$message_with_context", "$cursor_at_line", "$backend", "$save", "$is_next_line_section?", "$initialize_section", "$join", "$map", "$read_lines_until", "$lstrip", "$split", "$title", "$restore_save", "$discard_save", "$context", "$empty?", "$header?", "$!=", "$attr?", "$attr", "$key?", "$document", "$+", "$level", "$special", "$sectname", "$to_i", "$<", "$>", "$warn", "$next_block", "$blocks?", "$style", "$context=", "$style=", "$parent=", "$size", "$content_model", "$shift", "$unwrap_standalone_preamble", "$source_location", "$merge", "$fetch", "$parse_block_metadata_line", "$extensions", "$block_macros?", "$mark", "$read_line", "$terminator", "$to_s", "$masq", "$to_sym", "$registered_for_block?", "$debug?", "$debug", "$cursor_at_mark", "$strict_verbatim_paragraphs", "$unshift_line", "$markdown_syntax", "$keys", "$chr", "$uniform?", "$length", "$end_with?", "$===", "$parse_attributes", "$attribute_missing", "$tr", "$basename", "$assign_caption", "$registered_for_block_macro?", "$config", "$process_method", "$replace", "$parse_callout_list", "$callouts", "$parse_list", "$parse_description_list", "$underline_style_section_titles", "$is_section_title?", "$peek_line", "$atx_section_title?", "$generate_id", "$level=", "$read_paragraph_lines", "$adjust_indentation!", "$map!", "$slice", "$pop", "$build_block", "$apply_subs", "$chop", "$catalog_inline_anchors", "$rekey", "$index", "$strip", "$parse_table", "$each", "$raise", "$title?", "$update_attributes", "$commit_subs", "$sub?", "$catalog_callouts", "$source", "$remove_sub", "$block_terminates_paragraph", "$to_proc", "$nil?", "$lines", "$parse_blocks", "$parse_list_item", "$items", "$scan", "$gsub", "$count", "$advance", "$dup", "$match", "$callout_ids", "$next_list", "$catalog_inline_anchor", "$marker=", "$catalog_inline_biblio_anchor", "$set_option", "$text=", "$resolve_ordered_list_marker", "$read_lines_for_list_item", "$skip_line_comments", "$unshift_lines", "$fold_first", "$text?", "$is_sibling_list_item?", "$concat", "$find", "$casecmp", "$sectname=", "$special=", "$numbered=", "$numbered", "$lineno", "$peek_lines", "$setext_section_title?", "$abs", "$cursor_at_prev_line", "$process_attribute_entries", "$next_line_empty?", "$apply_header_subs", "$rstrip", "$each_with_index", "$compact", "$to_h", "$squeeze", "$to_a", "$parse_style_attribute", "$process_attribute_entry", "$skip_comment_lines", "$store_attribute", "$sanitize_attribute_name", "$set_attribute", "$save_to", "$delete_attribute", "$ord", "$int_to_roman", "$resolve_list_marker", "$parse_colspecs", "$create_columns", "$has_header_option=", "$format", "$starts_with_delimiter?", "$close_open_cell", "$parse_cellspec", "$delimiter", "$match_delimiter", "$pre_match", "$post_match", "$buffer_has_unclosed_quotes?", "$skip_past_delimiter", "$buffer", "$buffer=", "$skip_past_escaped_delimiter", "$keep_cell_open", "$push_cellspec", "$close_cell", "$cell_open?", "$columns", "$assign_column_widths", "$partition_header_footer", "$upto", "$partition", "$shorthand_property_syntax", "$each_char", "$yield_buffered_attribute", "$any?", "$*", "$each_byte", "$%"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Parser");
            var $nesting4 = [self4].concat($parent_nesting3), $Parser$1, $Parser$2, $Parser$3, $Parser_parse$4, $Parser_parse_document_header$5, $Parser_parse_manpage_header$6, $Parser_next_section$9, $Parser_next_block$10, $Parser_read_paragraph_lines$14, $Parser_is_delimited_block$ques$15, $Parser_build_block$16, $Parser_parse_blocks$17, $Parser_parse_list$18, $Parser_catalog_callouts$19, $Parser_catalog_inline_anchor$21, $Parser_catalog_inline_anchors$22, $Parser_catalog_inline_biblio_anchor$24, $Parser_parse_description_list$25, $Parser_parse_callout_list$26, $Parser_parse_list_item$27, $Parser_read_lines_for_list_item$28, $Parser_initialize_section$34, $Parser_is_next_line_section$ques$35, $Parser_is_next_line_doctitle$ques$36, $Parser_is_section_title$ques$37, $Parser_atx_section_title$ques$38, $Parser_setext_section_title$ques$39, $Parser_parse_section_title$40, $Parser_parse_header_metadata$41, $Parser_process_authors$46, $Parser_parse_block_metadata_lines$51, $Parser_parse_block_metadata_line$52, $Parser_process_attribute_entries$53, $Parser_process_attribute_entry$54, $Parser_store_attribute$55, $Parser_resolve_list_marker$56, $Parser_resolve_ordered_list_marker$57, $Parser_is_sibling_list_item$ques$59, $Parser_parse_table$60, $Parser_parse_colspecs$61, $Parser_parse_cellspec$65, $Parser_parse_style_attribute$66, $Parser_yield_buffered_attribute$69, $Parser_adjust_indentation$excl$70, $Parser_uniform$ques$79, $Parser_sanitize_attribute_name$80;
            self4.$include($$2($nesting4, "Logging"));
            Opal2.const_set($nesting4[0], "BlockMatchData", $$2($nesting4, "Struct").$new("context", "masq", "tip", "terminator"));
            Opal2.const_set($nesting4[0], "TAB", "	");
            Opal2.const_set($nesting4[0], "TabIndentRx", /^\t+/);
            Opal2.const_set($nesting4[0], "StartOfBlockProc", $send2(self4, "proc", [], ($Parser$1 = function(l) {
              var self5 = $Parser$1.$$s || this, $a2, $b2;
              if (l == null) {
                l = nil2;
              }
              ;
              return $truthy2($a2 = $truthy2($b2 = l["$start_with?"]("[")) ? $$2($nesting4, "BlockAttributeLineRx")["$match?"](l) : $b2) ? $a2 : self5["$is_delimited_block?"](l);
            }, $Parser$1.$$s = self4, $Parser$1.$$arity = 1, $Parser$1)));
            Opal2.const_set($nesting4[0], "StartOfListProc", $send2(self4, "proc", [], ($Parser$2 = function(l) {
              var self5 = $Parser$2.$$s || this;
              if (l == null) {
                l = nil2;
              }
              ;
              return $$2($nesting4, "AnyListRx")["$match?"](l);
            }, $Parser$2.$$s = self4, $Parser$2.$$arity = 1, $Parser$2)));
            Opal2.const_set($nesting4[0], "StartOfBlockOrListProc", $send2(self4, "proc", [], ($Parser$3 = function(l) {
              var self5 = $Parser$3.$$s || this, $a2, $b2, $c;
              if (l == null) {
                l = nil2;
              }
              ;
              return $truthy2($a2 = $truthy2($b2 = self5["$is_delimited_block?"](l)) ? $b2 : $truthy2($c = l["$start_with?"]("[")) ? $$2($nesting4, "BlockAttributeLineRx")["$match?"](l) : $c) ? $a2 : $$2($nesting4, "AnyListRx")["$match?"](l);
            }, $Parser$3.$$s = self4, $Parser$3.$$arity = 1, $Parser$3)));
            Opal2.const_set($nesting4[0], "NoOp", nil2);
            Opal2.const_set($nesting4[0], "AuthorKeys", ["author", "authorinitials", "firstname", "middlename", "lastname", "email"]);
            Opal2.const_set($nesting4[0], "TableCellHorzAlignments", $hash22(["<", ">", "^"], { "<": "left", ">": "right", "^": "center" }));
            Opal2.const_set($nesting4[0], "TableCellVertAlignments", $hash22(["<", ">", "^"], { "<": "top", ">": "bottom", "^": "middle" }));
            Opal2.const_set($nesting4[0], "TableCellStyles", $hash22(["d", "s", "e", "m", "h", "l", "a"], { "d": "none", "s": "strong", "e": "emphasis", "m": "monospaced", "h": "header", "l": "literal", "a": "asciidoc" }));
            self4.$private_class_method("new");
            Opal2.defs(self4, "$parse", $Parser_parse$4 = function $$parse(reader, document, options) {
              var $a2, $b2, $c, self5 = this, block_attributes = nil2, header_only = nil2, new_section = nil2;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              block_attributes = self5.$parse_document_header(reader, document, header_only = options["$[]"]("header_only"));
              if ($truthy2(header_only)) {
              } else {
                while ($truthy2(reader["$has_more_lines?"]())) {
                  $c = self5.$next_section(reader, document, block_attributes), $b2 = Opal2.to_ary($c), new_section = $b2[0] == null ? nil2 : $b2[0], block_attributes = $b2[1] == null ? nil2 : $b2[1], $c;
                  if ($truthy2(new_section)) {
                    document.$assign_numeral(new_section);
                    document.$blocks()["$<<"](new_section);
                  }
                  ;
                }
              }
              ;
              return document;
            }, $Parser_parse$4.$$arity = -3);
            Opal2.defs(self4, "$parse_document_header", $Parser_parse_document_header$5 = function $$parse_document_header(reader, document, header_only) {
              var $a2, $b2, self5 = this, block_attrs = nil2, doc_attrs = nil2, implicit_doctitle = nil2, $writer = nil2, val = nil2, doctitle_attr_val = nil2, source_location = nil2, _ = nil2, l0_section_title = nil2, atx = nil2, separator = nil2, doc_id = nil2, role = nil2, reftext = nil2, modified_attrs = nil2, author = nil2, author_metadata = nil2;
              if (header_only == null) {
                header_only = false;
              }
              ;
              block_attrs = function() {
                if ($truthy2(reader.$skip_blank_lines())) {
                  return self5.$parse_block_metadata_lines(reader, document);
                } else {
                  return $hash22([], {});
                }
                ;
                return nil2;
              }();
              doc_attrs = document.$attributes();
              if ($truthy2($truthy2($a2 = implicit_doctitle = self5["$is_next_line_doctitle?"](reader, block_attrs, doc_attrs["$[]"]("leveloffset"))) ? block_attrs["$[]"]("title") : $a2)) {
                $writer = ["authorcount", 0];
                $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                return document.$finalize_header(block_attrs, false);
              }
              ;
              if ($truthy2((val = doc_attrs["$[]"]("doctitle"))["$nil_or_empty?"]())) {
              } else {
                $writer = [doctitle_attr_val = val];
                $send2(document, "title=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(implicit_doctitle)) {
                if ($truthy2(document.$sourcemap())) {
                  source_location = reader.$cursor();
                }
                ;
                $b2 = self5.$parse_section_title(reader, document), $a2 = Opal2.to_ary($b2), document["$id="]($a2[0] == null ? nil2 : $a2[0]), _ = $a2[1] == null ? nil2 : $a2[1], l0_section_title = $a2[2] == null ? nil2 : $a2[2], _ = $a2[3] == null ? nil2 : $a2[3], atx = $a2[4] == null ? nil2 : $a2[4], $b2;
                if ($truthy2(doctitle_attr_val)) {
                  l0_section_title = nil2;
                } else {
                  $writer = [l0_section_title];
                  $send2(document, "title=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if ($truthy2(($writer = ["doctitle", doctitle_attr_val = document.$sub_specialchars(l0_section_title)], $send2(doc_attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                    $writer = ["doctitle", doctitle_attr_val = document.$sub_attributes(doctitle_attr_val, $hash22(["attribute_missing"], { "attribute_missing": "skip" }))];
                    $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }
                ;
                if ($truthy2(source_location)) {
                  $writer = [source_location];
                  $send2(document.$header(), "source_location=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ($truthy2($truthy2($a2 = atx) ? $a2 : document["$attribute_locked?"]("compat-mode"))) {
                } else {
                  $writer = ["compat-mode", ""];
                  $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ($truthy2(separator = block_attrs["$[]"]("separator"))) {
                  if ($truthy2(document["$attribute_locked?"]("title-separator"))) {
                  } else {
                    $writer = ["title-separator", separator];
                    $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                }
                ;
                if ($truthy2(doc_id = block_attrs["$[]"]("id"))) {
                  $writer = [doc_id];
                  $send2(document, "id=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  doc_id = document.$id();
                }
                ;
                if ($truthy2(role = block_attrs["$[]"]("role"))) {
                  $writer = ["role", role];
                  $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ($truthy2(reftext = block_attrs["$[]"]("reftext"))) {
                  $writer = ["reftext", reftext];
                  $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                block_attrs.$clear();
                (modified_attrs = document.$instance_variable_get("@attributes_modified")).$delete("doctitle");
                self5.$parse_header_metadata(reader, document, nil2);
                if ($truthy2(modified_attrs["$include?"]("doctitle"))) {
                  if ($truthy2($truthy2($a2 = (val = doc_attrs["$[]"]("doctitle"))["$nil_or_empty?"]()) ? $a2 : val["$=="](doctitle_attr_val))) {
                    $writer = ["doctitle", doctitle_attr_val];
                    $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    $writer = [val];
                    $send2(document, "title=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else if ($truthy2(l0_section_title["$!"]())) {
                  modified_attrs["$<<"]("doctitle");
                }
                ;
                if ($truthy2(doc_id)) {
                  document.$register("refs", [doc_id, document]);
                }
                ;
              } else if ($truthy2(author = doc_attrs["$[]"]("author"))) {
                author_metadata = self5.$process_authors(author, true, false);
                if ($truthy2(doc_attrs["$[]"]("authorinitials"))) {
                  author_metadata.$delete("authorinitials");
                }
                ;
                doc_attrs.$update(author_metadata);
              } else if ($truthy2(author = doc_attrs["$[]"]("authors"))) {
                author_metadata = self5.$process_authors(author, true);
                doc_attrs.$update(author_metadata);
              } else {
                $writer = ["authorcount", 0];
                $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if (document.$doctype()["$=="]("manpage")) {
                self5.$parse_manpage_header(reader, document, block_attrs, header_only);
              }
              ;
              return document.$finalize_header(block_attrs);
            }, $Parser_parse_document_header$5.$$arity = -3);
            Opal2.defs(self4, "$parse_manpage_header", $Parser_parse_manpage_header$6 = function $$parse_manpage_header(reader, document, block_attributes, header_only) {
              var $a2, $b2, $$7, $$8, self5 = this, doc_attrs = nil2, $writer = nil2, manvolnum = nil2, mantitle = nil2, manname = nil2, name_section_level = nil2, name_section = nil2, name_section_buffer = nil2, mannames = nil2, manpurpose = nil2, error_msg = nil2;
              if (header_only == null) {
                header_only = false;
              }
              ;
              if ($truthy2($$2($nesting4, "ManpageTitleVolnumRx")["$=~"]((doc_attrs = document.$attributes())["$[]"]("doctitle")))) {
                $writer = ["manvolnum", manvolnum = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2)];
                $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["mantitle", function() {
                  if ($truthy2((mantitle = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1))["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                    return document.$sub_attributes(mantitle);
                  } else {
                    return mantitle;
                  }
                  ;
                  return nil2;
                }().$downcase()];
                $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
              } else {
                self5.$logger().$error(self5.$message_with_context("non-conforming manpage title", $hash22(["source_location"], { "source_location": reader.$cursor_at_line(1) })));
                $writer = ["mantitle", $truthy2($a2 = $truthy2($b2 = doc_attrs["$[]"]("doctitle")) ? $b2 : doc_attrs["$[]"]("docname")) ? $a2 : "command"];
                $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = ["manvolnum", manvolnum = "1"];
                $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
              }
              ;
              if ($truthy2($truthy2($a2 = manname = doc_attrs["$[]"]("manname")) ? doc_attrs["$[]"]("manpurpose") : $a2)) {
                $truthy2($a2 = doc_attrs["$[]"]("manname-title")) ? $a2 : ($writer = ["manname-title", "Name"], $send2(doc_attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                $writer = ["mannames", [manname]];
                $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                if (document.$backend()["$=="]("manpage")) {
                  $writer = ["docname", manname];
                  $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["outfilesuffix", "." + manvolnum];
                  $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                }
                ;
              } else if ($truthy2(header_only)) {
              } else {
                reader.$skip_blank_lines();
                reader.$save();
                block_attributes.$update(self5.$parse_block_metadata_lines(reader, document));
                if ($truthy2(name_section_level = self5["$is_next_line_section?"](reader, $hash22([], {})))) {
                  if (name_section_level["$=="](1)) {
                    name_section = self5.$initialize_section(reader, document, $hash22([], {}));
                    name_section_buffer = $send2(reader.$read_lines_until($hash22(["break_on_blank_lines", "skip_line_comments"], { "break_on_blank_lines": true, "skip_line_comments": true })), "map", [], ($$7 = function(l) {
                      var self6 = $$7.$$s || this;
                      if (l == null) {
                        l = nil2;
                      }
                      ;
                      return l.$lstrip();
                    }, $$7.$$s = self5, $$7.$$arity = 1, $$7)).$join(" ");
                    if ($truthy2($$2($nesting4, "ManpageNamePurposeRx")["$=~"](name_section_buffer))) {
                      if ($truthy2((manname = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1))["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                        manname = document.$sub_attributes(manname);
                      }
                      ;
                      if ($truthy2(manname["$include?"](","))) {
                        manname = (mannames = $send2(manname.$split(","), "map", [], ($$8 = function(n) {
                          var self6 = $$8.$$s || this;
                          if (n == null) {
                            n = nil2;
                          }
                          ;
                          return n.$lstrip();
                        }, $$8.$$s = self5, $$8.$$arity = 1, $$8)))["$[]"](0);
                      } else {
                        mannames = [manname];
                      }
                      ;
                      if ($truthy2((manpurpose = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2))["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                        manpurpose = document.$sub_attributes(manpurpose);
                      }
                      ;
                      $truthy2($a2 = doc_attrs["$[]"]("manname-title")) ? $a2 : ($writer = ["manname-title", name_section.$title()], $send2(doc_attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                      if ($truthy2(name_section.$id())) {
                        $writer = ["manname-id", name_section.$id()];
                        $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      $writer = ["manname", manname];
                      $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      $writer = ["mannames", mannames];
                      $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      $writer = ["manpurpose", manpurpose];
                      $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      if (document.$backend()["$=="]("manpage")) {
                        $writer = ["docname", manname];
                        $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        $writer = ["outfilesuffix", "." + manvolnum];
                        $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                      }
                      ;
                    } else {
                      error_msg = "non-conforming name section body";
                    }
                    ;
                  } else {
                    error_msg = "name section must be at level 1";
                  }
                } else {
                  error_msg = "name section expected";
                }
                ;
                if ($truthy2(error_msg)) {
                  reader.$restore_save();
                  self5.$logger().$error(self5.$message_with_context(error_msg, $hash22(["source_location"], { "source_location": reader.$cursor() })));
                  $writer = ["manname", manname = $truthy2($a2 = doc_attrs["$[]"]("docname")) ? $a2 : "command"];
                  $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["mannames", [manname]];
                  $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if (document.$backend()["$=="]("manpage")) {
                    $writer = ["docname", manname];
                    $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    $writer = ["outfilesuffix", "." + manvolnum];
                    $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                  }
                  ;
                } else {
                  reader.$discard_save();
                }
                ;
              }
              ;
              return nil2;
            }, $Parser_parse_manpage_header$6.$$arity = -4);
            Opal2.defs(self4, "$next_section", $Parser_next_section$9 = function $$next_section(reader, parent, attributes) {
              var $a2, $b2, $c, $d, self5 = this, preamble = nil2, intro = nil2, part = nil2, has_header = nil2, book = nil2, document = nil2, $writer = nil2, section = nil2, current_level = nil2, expected_next_level = nil2, expected_next_level_alt = nil2, title = nil2, sectname = nil2, next_level = nil2, expected_condition = nil2, new_section = nil2, block_cursor = nil2, new_block = nil2, first_block = nil2, child_block = nil2;
              if (attributes == null) {
                attributes = $hash22([], {});
              }
              ;
              preamble = intro = part = false;
              if ($truthy2($truthy2($a2 = ($b2 = parent.$context()["$=="]("document")) ? parent.$blocks()["$empty?"]() : parent.$context()["$=="]("document")) ? $truthy2($b2 = $truthy2($c = has_header = parent["$header?"]()) ? $c : attributes.$delete("invalid-header")) ? $b2 : self5["$is_next_line_section?"](reader, attributes)["$!"]() : $a2)) {
                book = (document = parent).$doctype()["$=="]("book");
                if ($truthy2($truthy2($a2 = has_header) ? $a2 : $truthy2($b2 = book) ? attributes["$[]"](1)["$!="]("abstract") : $b2)) {
                  preamble = intro = $$2($nesting4, "Block").$new(parent, "preamble", $hash22(["content_model"], { "content_model": "compound" }));
                  if ($truthy2($truthy2($a2 = book) ? parent["$attr?"]("preface-title") : $a2)) {
                    $writer = [parent.$attr("preface-title")];
                    $send2(preamble, "title=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  parent.$blocks()["$<<"](preamble);
                }
                ;
                section = parent;
                current_level = 0;
                if ($truthy2(parent.$attributes()["$key?"]("fragment"))) {
                  expected_next_level = -1;
                } else if ($truthy2(book)) {
                  $a2 = [1, 0], expected_next_level = $a2[0], expected_next_level_alt = $a2[1], $a2;
                } else {
                  expected_next_level = 1;
                }
                ;
              } else {
                book = (document = parent.$document()).$doctype()["$=="]("book");
                section = self5.$initialize_section(reader, parent, attributes);
                attributes = function() {
                  if ($truthy2(title = attributes["$[]"]("title"))) {
                    return $hash22(["title"], { "title": title });
                  } else {
                    return $hash22([], {});
                  }
                  ;
                  return nil2;
                }();
                expected_next_level = $rb_plus(current_level = section.$level(), 1);
                if (current_level["$=="](0)) {
                  part = book;
                } else if ($truthy2(($a2 = current_level["$=="](1)) ? section.$special() : current_level["$=="](1))) {
                  if ($truthy2($truthy2($a2 = $truthy2($b2 = (sectname = section.$sectname())["$=="]("appendix")) ? $b2 : sectname["$=="]("preface")) ? $a2 : sectname["$=="]("abstract"))) {
                  } else {
                    expected_next_level = nil2;
                  }
                }
                ;
              }
              ;
              reader.$skip_blank_lines();
              while ($truthy2(reader["$has_more_lines?"]())) {
                self5.$parse_block_metadata_lines(reader, document, attributes);
                if ($truthy2(next_level = self5["$is_next_line_section?"](reader, attributes))) {
                  if ($truthy2(document["$attr?"]("leveloffset"))) {
                    next_level = $rb_plus(next_level, document.$attr("leveloffset").$to_i());
                    if ($truthy2($rb_lt2(next_level, 0))) {
                      next_level = 0;
                    }
                    ;
                  }
                  ;
                  if ($truthy2($rb_gt2(next_level, current_level))) {
                    if ($truthy2(expected_next_level)) {
                      if ($truthy2($truthy2($b2 = $truthy2($c = next_level["$=="](expected_next_level)) ? $c : $truthy2($d = expected_next_level_alt) ? next_level["$=="](expected_next_level_alt) : $d) ? $b2 : $rb_lt2(expected_next_level, 0))) {
                      } else {
                        expected_condition = function() {
                          if ($truthy2(expected_next_level_alt)) {
                            return "expected levels " + expected_next_level_alt + " or " + expected_next_level;
                          } else {
                            return "expected level " + expected_next_level;
                          }
                          ;
                          return nil2;
                        }();
                        self5.$logger().$warn(self5.$message_with_context("section title out of sequence: " + expected_condition + ", got level " + next_level, $hash22(["source_location"], { "source_location": reader.$cursor() })));
                      }
                    } else {
                      self5.$logger().$error(self5.$message_with_context("" + sectname + " sections do not support nested sections", $hash22(["source_location"], { "source_location": reader.$cursor() })));
                    }
                    ;
                    $c = self5.$next_section(reader, section, attributes), $b2 = Opal2.to_ary($c), new_section = $b2[0] == null ? nil2 : $b2[0], attributes = $b2[1] == null ? nil2 : $b2[1], $c;
                    section.$assign_numeral(new_section);
                    section.$blocks()["$<<"](new_section);
                  } else if ($truthy2(($b2 = next_level["$=="](0)) ? section["$=="](document) : next_level["$=="](0))) {
                    if ($truthy2(book)) {
                    } else {
                      self5.$logger().$error(self5.$message_with_context("level 0 sections can only be used when doctype is book", $hash22(["source_location"], { "source_location": reader.$cursor() })));
                    }
                    ;
                    $c = self5.$next_section(reader, section, attributes), $b2 = Opal2.to_ary($c), new_section = $b2[0] == null ? nil2 : $b2[0], attributes = $b2[1] == null ? nil2 : $b2[1], $c;
                    section.$assign_numeral(new_section);
                    section.$blocks()["$<<"](new_section);
                  } else {
                    break;
                  }
                  ;
                } else {
                  block_cursor = reader.$cursor();
                  if ($truthy2(new_block = self5.$next_block(reader, $truthy2($b2 = intro) ? $b2 : section, attributes, $hash22(["parse_metadata"], { "parse_metadata": false })))) {
                    if ($truthy2(part)) {
                      if ($truthy2(section["$blocks?"]()["$!"]())) {
                        if ($truthy2(new_block.$style()["$!="]("partintro"))) {
                          if (new_block.$context()["$=="]("paragraph")) {
                            $writer = ["open"];
                            $send2(new_block, "context=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                            $writer = ["partintro"];
                            $send2(new_block, "style=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                          } else {
                            $writer = [intro = $$2($nesting4, "Block").$new(section, "open", $hash22(["content_model"], { "content_model": "compound" }))];
                            $send2(new_block, "parent=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                            $writer = ["partintro"];
                            $send2(intro, "style=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                            section.$blocks()["$<<"](intro);
                          }
                        }
                      } else if (section.$blocks().$size()["$=="](1)) {
                        first_block = section.$blocks()["$[]"](0);
                        if ($truthy2($truthy2($b2 = intro["$!"]()) ? first_block.$content_model()["$=="]("compound") : $b2)) {
                          self5.$logger().$error(self5.$message_with_context("illegal block content outside of partintro block", $hash22(["source_location"], { "source_location": block_cursor })));
                        } else if ($truthy2(first_block.$content_model()["$!="]("compound"))) {
                          $writer = [intro = $$2($nesting4, "Block").$new(section, "open", $hash22(["content_model"], { "content_model": "compound" }))];
                          $send2(new_block, "parent=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                          ;
                          $writer = ["partintro"];
                          $send2(intro, "style=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                          ;
                          section.$blocks().$shift();
                          if (first_block.$style()["$=="]("partintro")) {
                            $writer = ["paragraph"];
                            $send2(first_block, "context=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                            $writer = [nil2];
                            $send2(first_block, "style=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                          }
                          ;
                          intro["$<<"](first_block);
                          section.$blocks()["$<<"](intro);
                        }
                        ;
                      }
                    }
                    ;
                    ($truthy2($b2 = intro) ? $b2 : section).$blocks()["$<<"](new_block);
                    attributes.$clear();
                  }
                  ;
                }
                ;
                if ($truthy2($b2 = reader.$skip_blank_lines())) {
                  $b2;
                } else {
                  break;
                }
                ;
              }
              ;
              if ($truthy2(part)) {
                if ($truthy2($truthy2($a2 = section["$blocks?"]()) ? section.$blocks()["$[]"](-1).$context()["$=="]("section") : $a2)) {
                } else {
                  self5.$logger().$error(self5.$message_with_context("invalid part, must have at least one section (e.g., chapter, appendix, etc.)", $hash22(["source_location"], { "source_location": reader.$cursor() })));
                }
              } else if ($truthy2(preamble)) {
                if ($truthy2(preamble["$blocks?"]())) {
                  if ($truthy2($truthy2($a2 = $truthy2($b2 = book) ? $b2 : document.$blocks()["$[]"](1)) ? $a2 : $$2($nesting4, "Compliance").$unwrap_standalone_preamble()["$!"]())) {
                    if ($truthy2(document.$sourcemap())) {
                      $writer = [preamble.$blocks()["$[]"](0).$source_location()];
                      $send2(preamble, "source_location=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                  } else {
                    document.$blocks().$shift();
                    while ($truthy2(child_block = preamble.$blocks().$shift())) {
                      document["$<<"](child_block);
                    }
                    ;
                  }
                } else {
                  document.$blocks().$shift();
                }
              }
              ;
              return [function() {
                if (section["$=="](parent)) {
                  return nil2;
                } else {
                  return section;
                }
                ;
                return nil2;
              }(), attributes.$merge()];
            }, $Parser_next_section$9.$$arity = -3);
            Opal2.defs(self4, "$next_block", $Parser_next_block$10 = function $$next_block(reader, parent, attributes, options) {
              try {
                var $a2, $b2, $c, $d, $$11, $$12, $$13, self5 = this, skipped = nil2, text_only = nil2, document = nil2, extensions = nil2, block_extensions = nil2, block_macro_extensions = nil2, this_line = nil2, doc_attrs = nil2, style = nil2, block2 = nil2, block_context = nil2, cloaked_context = nil2, terminator = nil2, delimited_block = nil2, $writer = nil2, indented = nil2, md_syntax = nil2, ch0 = nil2, layout_break_chars = nil2, ll = nil2, blk_ctx = nil2, target = nil2, blk_attrs = nil2, $case = nil2, posattrs = nil2, expanded_target = nil2, scaledwidth = nil2, block_title = nil2, extension = nil2, report_unknown_block_macro = nil2, content = nil2, ext_config = nil2, default_attrs = nil2, float_id = nil2, float_reftext = nil2, float_level = nil2, lines = nil2, content_adjacent = nil2, admonition_name = nil2, credit_line = nil2, attribution = nil2, citetitle = nil2, language = nil2, comma_idx = nil2, block_cursor = nil2, block_reader = nil2, content_model = nil2, positional_attrs = nil2, block_id = nil2;
                if ($gvars["~"] == null)
                  $gvars["~"] = nil2;
                if (attributes == null) {
                  attributes = $hash22([], {});
                }
                ;
                if (options == null) {
                  options = $hash22([], {});
                }
                ;
                if ($truthy2(skipped = reader.$skip_blank_lines())) {
                } else {
                  return nil2;
                }
                ;
                if ($truthy2($truthy2($a2 = text_only = options["$[]"]("text_only")) ? $rb_gt2(skipped, 0) : $a2)) {
                  options.$delete("text_only");
                  text_only = nil2;
                }
                ;
                document = parent.$document();
                if ($truthy2(options.$fetch("parse_metadata", true))) {
                  while ($truthy2(self5.$parse_block_metadata_line(reader, document, attributes, options))) {
                    reader.$shift();
                    $truthy2($b2 = reader.$skip_blank_lines()) ? $b2 : Opal2.ret(nil2);
                  }
                }
                ;
                if ($truthy2(extensions = document.$extensions())) {
                  $a2 = [extensions["$blocks?"](), extensions["$block_macros?"]()], block_extensions = $a2[0], block_macro_extensions = $a2[1], $a2;
                }
                ;
                reader.$mark();
                $a2 = [reader.$read_line(), document.$attributes(), attributes["$[]"](1)], this_line = $a2[0], doc_attrs = $a2[1], style = $a2[2], $a2;
                block2 = block_context = cloaked_context = terminator = nil2;
                if ($truthy2(delimited_block = self5["$is_delimited_block?"](this_line, true))) {
                  block_context = cloaked_context = delimited_block.$context();
                  terminator = delimited_block.$terminator();
                  if ($truthy2(style)) {
                    if (style["$=="](block_context.$to_s())) {
                    } else if ($truthy2(delimited_block.$masq()["$include?"](style))) {
                      block_context = style.$to_sym();
                    } else if ($truthy2($truthy2($a2 = delimited_block.$masq()["$include?"]("admonition")) ? $$2($nesting4, "ADMONITION_STYLES")["$include?"](style) : $a2)) {
                      block_context = "admonition";
                    } else if ($truthy2($truthy2($a2 = block_extensions) ? extensions["$registered_for_block?"](style, block_context) : $a2)) {
                      block_context = style.$to_sym();
                    } else {
                      if ($truthy2(self5.$logger()["$debug?"]())) {
                        self5.$logger().$debug(self5.$message_with_context("unknown style for " + block_context + " block: " + style, $hash22(["source_location"], { "source_location": reader.$cursor_at_mark() })));
                      }
                      ;
                      style = block_context.$to_s();
                    }
                  } else {
                    style = ($writer = ["style", block_context.$to_s()], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  }
                  ;
                }
                ;
                if ($truthy2(delimited_block)) {
                } else {
                  while ($truthy2(true)) {
                    if ($truthy2($truthy2($b2 = $truthy2($c = style) ? $$2($nesting4, "Compliance").$strict_verbatim_paragraphs() : $c) ? $$2($nesting4, "VERBATIM_STYLES")["$include?"](style) : $b2)) {
                      block_context = style.$to_sym();
                      reader.$unshift_line(this_line);
                      break;
                      ;
                    }
                    ;
                    if ($truthy2(text_only)) {
                      indented = this_line["$start_with?"](" ", $$2($nesting4, "TAB"));
                    } else {
                      md_syntax = $$2($nesting4, "Compliance").$markdown_syntax();
                      if ($truthy2(this_line["$start_with?"](" "))) {
                        $b2 = [true, " "], indented = $b2[0], ch0 = $b2[1], $b2;
                        if ($truthy2($truthy2($b2 = $truthy2($c = md_syntax) ? $send2(this_line.$lstrip(), "start_with?", Opal2.to_a($$2($nesting4, "MARKDOWN_THEMATIC_BREAK_CHARS").$keys())) : $c) ? $$2($nesting4, "MarkdownThematicBreakRx")["$match?"](this_line) : $b2)) {
                          block2 = $$2($nesting4, "Block").$new(parent, "thematic_break", $hash22(["content_model"], { "content_model": "empty" }));
                          break;
                          ;
                        }
                        ;
                      } else if ($truthy2(this_line["$start_with?"]($$2($nesting4, "TAB")))) {
                        $b2 = [true, $$2($nesting4, "TAB")], indented = $b2[0], ch0 = $b2[1], $b2;
                      } else {
                        $b2 = [false, this_line.$chr()], indented = $b2[0], ch0 = $b2[1], $b2;
                        layout_break_chars = function() {
                          if ($truthy2(md_syntax)) {
                            return $$2($nesting4, "HYBRID_LAYOUT_BREAK_CHARS");
                          } else {
                            return $$2($nesting4, "LAYOUT_BREAK_CHARS");
                          }
                          ;
                          return nil2;
                        }();
                        if ($truthy2($truthy2($b2 = layout_break_chars["$key?"](ch0)) ? function() {
                          if ($truthy2(md_syntax)) {
                            return $$2($nesting4, "ExtLayoutBreakRx")["$match?"](this_line);
                          } else {
                            return $truthy2($c = self5["$uniform?"](this_line, ch0, ll = this_line.$length())) ? $rb_gt2(ll, 2) : $c;
                          }
                          ;
                          return nil2;
                        }() : $b2)) {
                          block2 = $$2($nesting4, "Block").$new(parent, layout_break_chars["$[]"](ch0), $hash22(["content_model"], { "content_model": "empty" }));
                          break;
                          ;
                        } else if ($truthy2($truthy2($b2 = this_line["$end_with?"]("]")) ? this_line["$include?"]("::") : $b2)) {
                          if ($truthy2($truthy2($b2 = $truthy2($c = ch0["$=="]("i")) ? $c : this_line["$start_with?"]("video:", "audio:")) ? $$2($nesting4, "BlockMediaMacroRx")["$=~"](this_line) : $b2)) {
                            $b2 = [(($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](1)).$to_sym(), ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](2), ($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3)], blk_ctx = $b2[0], target = $b2[1], blk_attrs = $b2[2], $b2;
                            block2 = $$2($nesting4, "Block").$new(parent, blk_ctx, $hash22(["content_model"], { "content_model": "empty" }));
                            if ($truthy2(blk_attrs)) {
                              $case = blk_ctx;
                              if ("video"["$==="]($case)) {
                                posattrs = ["poster", "width", "height"];
                              } else if ("audio"["$==="]($case)) {
                                posattrs = [];
                              } else {
                                posattrs = ["alt", "width", "height"];
                              }
                              ;
                              block2.$parse_attributes(blk_attrs, posattrs, $hash22(["sub_input", "into"], { "sub_input": true, "into": attributes }));
                            }
                            ;
                            if ($truthy2(attributes["$key?"]("style"))) {
                              attributes.$delete("style");
                            }
                            ;
                            if ($truthy2(target["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                              if ($truthy2($truthy2($b2 = $truthy2($c = (expanded_target = block2.$sub_attributes(target))["$empty?"]()) ? ($truthy2($d = doc_attrs["$[]"]("attribute-missing")) ? $d : $$2($nesting4, "Compliance").$attribute_missing())["$=="]("drop-line") : $c) ? block2.$sub_attributes($rb_plus(target, " "), $hash22(["attribute_missing", "drop_line_severity"], { "attribute_missing": "drop-line", "drop_line_severity": "ignore" }))["$empty?"]() : $b2)) {
                                attributes.$clear();
                                return nil2;
                              } else {
                                target = expanded_target;
                              }
                            }
                            ;
                            if (blk_ctx["$=="]("image")) {
                              document.$register("images", target);
                              $writer = ["imagesdir", doc_attrs["$[]"]("imagesdir")];
                              $send2(attributes, "[]=", Opal2.to_a($writer));
                              $writer[$rb_minus($writer["length"], 1)];
                              ;
                              $truthy2($b2 = attributes["$[]"]("alt")) ? $b2 : ($writer = ["alt", $truthy2($c = style) ? $c : ($writer = ["default-alt", $$2($nesting4, "Helpers").$basename(target, true).$tr("_-", " ")], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                              if ($truthy2((scaledwidth = attributes.$delete("scaledwidth"))["$nil_or_empty?"]())) {
                              } else {
                                $writer = ["scaledwidth", function() {
                                  if ($truthy2($$2($nesting4, "TrailingDigitsRx")["$match?"](scaledwidth))) {
                                    return "" + scaledwidth + "%";
                                  } else {
                                    return scaledwidth;
                                  }
                                  ;
                                  return nil2;
                                }()];
                                $send2(attributes, "[]=", Opal2.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                              }
                              ;
                              if ($truthy2(attributes["$[]"]("title"))) {
                                $writer = [block_title = attributes.$delete("title")];
                                $send2(block2, "title=", Opal2.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                                ;
                                block2.$assign_caption(attributes.$delete("caption"), "figure");
                              }
                              ;
                            }
                            ;
                            $writer = ["target", target];
                            $send2(attributes, "[]=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                            ;
                            break;
                            ;
                          } else if ($truthy2($truthy2($b2 = ($c = ch0["$=="]("t")) ? this_line["$start_with?"]("toc:") : ch0["$=="]("t")) ? $$2($nesting4, "BlockTocMacroRx")["$=~"](this_line) : $b2)) {
                            block2 = $$2($nesting4, "Block").$new(parent, "toc", $hash22(["content_model"], { "content_model": "empty" }));
                            if ($truthy2(($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1))) {
                              block2.$parse_attributes(($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1), [], $hash22(["into"], { "into": attributes }));
                            }
                            ;
                            break;
                            ;
                          } else if ($truthy2(function() {
                            if ($truthy2(block_macro_extensions)) {
                              return $truthy2($b2 = $truthy2($c = $$2($nesting4, "CustomBlockMacroRx")["$=~"](this_line)) ? extension = extensions["$registered_for_block_macro?"](($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](1)) : $c) ? $b2 : report_unknown_block_macro = self5.$logger()["$debug?"]();
                            } else {
                              return $truthy2($b2 = self5.$logger()["$debug?"]()) ? report_unknown_block_macro = $$2($nesting4, "CustomBlockMacroRx")["$=~"](this_line) : $b2;
                            }
                            ;
                            return nil2;
                          }())) {
                            if ($truthy2(report_unknown_block_macro)) {
                              self5.$logger().$debug(self5.$message_with_context("unknown name for block macro: " + (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1)), $hash22(["source_location"], { "source_location": reader.$cursor_at_mark() })));
                            } else {
                              content = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](3);
                              if ($truthy2((target = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](2))["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                                if ($truthy2($truthy2($b2 = $truthy2($c = (expanded_target = parent.$sub_attributes(target))["$empty?"]()) ? ($truthy2($d = doc_attrs["$[]"]("attribute-missing")) ? $d : $$2($nesting4, "Compliance").$attribute_missing())["$=="]("drop-line") : $c) ? parent.$sub_attributes($rb_plus(target, " "), $hash22(["attribute_missing", "drop_line_severity"], { "attribute_missing": "drop-line", "drop_line_severity": "ignore" }))["$empty?"]() : $b2)) {
                                  attributes.$clear();
                                  return nil2;
                                } else {
                                  target = expanded_target;
                                }
                              }
                              ;
                              if ((ext_config = extension.$config())["$[]"]("content_model")["$=="]("attributes")) {
                                if ($truthy2(content)) {
                                  document.$parse_attributes(content, $truthy2($b2 = $truthy2($c = ext_config["$[]"]("positional_attrs")) ? $c : ext_config["$[]"]("pos_attrs")) ? $b2 : [], $hash22(["sub_input", "into"], { "sub_input": true, "into": attributes }));
                                }
                              } else {
                                $writer = ["text", $truthy2($b2 = content) ? $b2 : ""];
                                $send2(attributes, "[]=", Opal2.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                              }
                              ;
                              if ($truthy2(default_attrs = ext_config["$[]"]("default_attrs"))) {
                                $send2(attributes, "update", [default_attrs], ($$11 = function(_, old_v) {
                                  var self6 = $$11.$$s || this;
                                  if (_ == null) {
                                    _ = nil2;
                                  }
                                  ;
                                  if (old_v == null) {
                                    old_v = nil2;
                                  }
                                  ;
                                  return old_v;
                                }, $$11.$$s = self5, $$11.$$arity = 2, $$11));
                              }
                              ;
                              if ($truthy2($truthy2($b2 = block2 = extension.$process_method()["$[]"](parent, target, attributes)) ? block2["$!="](parent) : $b2)) {
                                attributes.$replace(block2.$attributes());
                                break;
                                ;
                              } else {
                                attributes.$clear();
                                return nil2;
                              }
                              ;
                            }
                          }
                        }
                        ;
                      }
                      ;
                    }
                    ;
                    if ($truthy2($truthy2($b2 = $truthy2($c = indented["$!"]()) ? (ch0 = $truthy2($d = ch0) ? $d : this_line.$chr())["$=="]("<") : $c) ? $$2($nesting4, "CalloutListRx")["$=~"](this_line) : $b2)) {
                      reader.$unshift_line(this_line);
                      block2 = self5.$parse_callout_list(reader, $gvars["~"], parent, document.$callouts());
                      $writer = ["style", "arabic"];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      break;
                      ;
                    } else if ($truthy2($$2($nesting4, "UnorderedListRx")["$match?"](this_line))) {
                      reader.$unshift_line(this_line);
                      if ($truthy2($truthy2($b2 = $truthy2($c = style["$!"]()) ? $$2($nesting4, "Section")["$==="](parent) : $c) ? parent.$sectname()["$=="]("bibliography") : $b2)) {
                        $writer = ["style", style = "bibliography"];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      block2 = self5.$parse_list(reader, "ulist", parent, style);
                      break;
                      ;
                    } else if ($truthy2($$2($nesting4, "OrderedListRx")["$match?"](this_line))) {
                      reader.$unshift_line(this_line);
                      block2 = self5.$parse_list(reader, "olist", parent, style);
                      if ($truthy2(block2.$style())) {
                        $writer = ["style", block2.$style()];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      break;
                      ;
                    } else if ($truthy2($truthy2($b2 = $truthy2($c = this_line["$include?"]("::")) ? $c : this_line["$include?"](";;")) ? $$2($nesting4, "DescriptionListRx")["$=~"](this_line) : $b2)) {
                      reader.$unshift_line(this_line);
                      block2 = self5.$parse_description_list(reader, $gvars["~"], parent);
                      break;
                      ;
                    } else if ($truthy2($truthy2($b2 = $truthy2($c = style["$=="]("float")) ? $c : style["$=="]("discrete")) ? function() {
                      if ($truthy2($$2($nesting4, "Compliance").$underline_style_section_titles())) {
                        return self5["$is_section_title?"](this_line, reader.$peek_line());
                      } else {
                        return $truthy2($c = indented["$!"]()) ? self5["$atx_section_title?"](this_line) : $c;
                      }
                      ;
                      return nil2;
                    }() : $b2)) {
                      reader.$unshift_line(this_line);
                      $c = self5.$parse_section_title(reader, document, attributes["$[]"]("id")), $b2 = Opal2.to_ary($c), float_id = $b2[0] == null ? nil2 : $b2[0], float_reftext = $b2[1] == null ? nil2 : $b2[1], block_title = $b2[2] == null ? nil2 : $b2[2], float_level = $b2[3] == null ? nil2 : $b2[3], $c;
                      if ($truthy2(float_reftext)) {
                        $writer = ["reftext", float_reftext];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      block2 = $$2($nesting4, "Block").$new(parent, "floating_title", $hash22(["content_model"], { "content_model": "empty" }));
                      $writer = [block_title];
                      $send2(block2, "title=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      attributes.$delete("title");
                      $writer = [$truthy2($b2 = float_id) ? $b2 : function() {
                        if ($truthy2(doc_attrs["$key?"]("sectids"))) {
                          return $$2($nesting4, "Section").$generate_id(block2.$title(), document);
                        } else {
                          return nil2;
                        }
                        ;
                        return nil2;
                      }()];
                      $send2(block2, "id=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      $writer = [float_level];
                      $send2(block2, "level=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      break;
                      ;
                    } else if ($truthy2($truthy2($b2 = style) ? style["$!="]("normal") : $b2)) {
                      if ($truthy2($$2($nesting4, "PARAGRAPH_STYLES")["$include?"](style))) {
                        block_context = style.$to_sym();
                        cloaked_context = "paragraph";
                        reader.$unshift_line(this_line);
                        break;
                        ;
                      } else if ($truthy2($$2($nesting4, "ADMONITION_STYLES")["$include?"](style))) {
                        block_context = "admonition";
                        cloaked_context = "paragraph";
                        reader.$unshift_line(this_line);
                        break;
                        ;
                      } else if ($truthy2($truthy2($b2 = block_extensions) ? extensions["$registered_for_block?"](style, "paragraph") : $b2)) {
                        block_context = style.$to_sym();
                        cloaked_context = "paragraph";
                        reader.$unshift_line(this_line);
                        break;
                        ;
                      } else {
                        if ($truthy2(self5.$logger()["$debug?"]())) {
                          self5.$logger().$debug(self5.$message_with_context("unknown style for paragraph: " + style, $hash22(["source_location"], { "source_location": reader.$cursor_at_mark() })));
                        }
                        ;
                        style = nil2;
                      }
                    }
                    ;
                    reader.$unshift_line(this_line);
                    if ($truthy2($truthy2($b2 = indented) ? style["$!"]() : $b2)) {
                      lines = self5.$read_paragraph_lines(reader, content_adjacent = function() {
                        if (skipped["$=="](0)) {
                          return options["$[]"]("list_type");
                        } else {
                          return nil2;
                        }
                        ;
                        return nil2;
                      }(), $hash22(["skip_line_comments"], { "skip_line_comments": text_only }));
                      self5["$adjust_indentation!"](lines);
                      if ($truthy2($truthy2($b2 = text_only) ? $b2 : content_adjacent["$=="]("dlist"))) {
                        block2 = $$2($nesting4, "Block").$new(parent, "paragraph", $hash22(["content_model", "source", "attributes"], { "content_model": "simple", "source": lines, "attributes": attributes }));
                      } else {
                        block2 = $$2($nesting4, "Block").$new(parent, "literal", $hash22(["content_model", "source", "attributes"], { "content_model": "verbatim", "source": lines, "attributes": attributes }));
                      }
                      ;
                    } else {
                      lines = self5.$read_paragraph_lines(reader, ($b2 = skipped["$=="](0)) ? options["$[]"]("list_type") : skipped["$=="](0), $hash22(["skip_line_comments"], { "skip_line_comments": true }));
                      if ($truthy2(text_only)) {
                        if ($truthy2($truthy2($b2 = indented) ? style["$=="]("normal") : $b2)) {
                          self5["$adjust_indentation!"](lines);
                        }
                        ;
                        block2 = $$2($nesting4, "Block").$new(parent, "paragraph", $hash22(["content_model", "source", "attributes"], { "content_model": "simple", "source": lines, "attributes": attributes }));
                      } else if ($truthy2($truthy2($b2 = $truthy2($c = $$2($nesting4, "ADMONITION_STYLE_HEADS")["$include?"](ch0)) ? this_line["$include?"](":") : $c) ? $$2($nesting4, "AdmonitionParagraphRx")["$=~"](this_line) : $b2)) {
                        $writer = [0, ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2.$post_match()];
                        $send2(lines, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        $writer = ["name", admonition_name = ($writer = ["style", ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1)], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]).$downcase()];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        $writer = ["textlabel", $truthy2($b2 = attributes.$delete("caption")) ? $b2 : doc_attrs["$[]"]("" + admonition_name + "-caption")];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        block2 = $$2($nesting4, "Block").$new(parent, "admonition", $hash22(["content_model", "source", "attributes"], { "content_model": "simple", "source": lines, "attributes": attributes }));
                      } else if ($truthy2($truthy2($b2 = $truthy2($c = md_syntax) ? ch0["$=="](">") : $c) ? this_line["$start_with?"]("> ") : $b2)) {
                        $send2(lines, "map!", [], ($$12 = function(line) {
                          var self6 = $$12.$$s || this;
                          if (line == null) {
                            line = nil2;
                          }
                          ;
                          if (line["$=="](">")) {
                            return line.$slice(1, line.$length());
                          } else {
                            if ($truthy2(line["$start_with?"]("> "))) {
                              return line.$slice(2, line.$length());
                            } else {
                              return line;
                            }
                            ;
                          }
                          ;
                        }, $$12.$$s = self5, $$12.$$arity = 1, $$12));
                        if ($truthy2(lines["$[]"](-1)["$start_with?"]("-- "))) {
                          credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());
                          if ($truthy2(lines["$empty?"]())) {
                          } else {
                            while ($truthy2(lines["$[]"](-1)["$empty?"]())) {
                              lines.$pop();
                            }
                          }
                          ;
                        }
                        ;
                        $writer = ["style", "quote"];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        block2 = self5.$build_block("quote", "compound", false, parent, $$2($nesting4, "Reader").$new(lines), attributes);
                        if ($truthy2(credit_line)) {
                          $c = block2.$apply_subs(credit_line).$split(", ", 2), $b2 = Opal2.to_ary($c), attribution = $b2[0] == null ? nil2 : $b2[0], citetitle = $b2[1] == null ? nil2 : $b2[1], $c;
                          if ($truthy2(attribution)) {
                            $writer = ["attribution", attribution];
                            $send2(attributes, "[]=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                          }
                          ;
                          if ($truthy2(citetitle)) {
                            $writer = ["citetitle", citetitle];
                            $send2(attributes, "[]=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                          }
                          ;
                        }
                        ;
                      } else if ($truthy2($truthy2($b2 = $truthy2($c = ($d = ch0["$=="]('"')) ? $rb_gt2(lines.$size(), 1) : ch0["$=="]('"')) ? lines["$[]"](-1)["$start_with?"]("-- ") : $c) ? lines["$[]"](-2)["$end_with?"]('"') : $b2)) {
                        $writer = [0, this_line.$slice(1, this_line.$length())];
                        $send2(lines, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());
                        while ($truthy2(lines["$[]"](-1)["$empty?"]())) {
                          lines.$pop();
                        }
                        ;
                        lines["$<<"](lines.$pop().$chop());
                        $writer = ["style", "quote"];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        block2 = $$2($nesting4, "Block").$new(parent, "quote", $hash22(["content_model", "source", "attributes"], { "content_model": "simple", "source": lines, "attributes": attributes }));
                        $c = block2.$apply_subs(credit_line).$split(", ", 2), $b2 = Opal2.to_ary($c), attribution = $b2[0] == null ? nil2 : $b2[0], citetitle = $b2[1] == null ? nil2 : $b2[1], $c;
                        if ($truthy2(attribution)) {
                          $writer = ["attribution", attribution];
                          $send2(attributes, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                        ;
                        if ($truthy2(citetitle)) {
                          $writer = ["citetitle", citetitle];
                          $send2(attributes, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                        ;
                      } else {
                        if ($truthy2($truthy2($b2 = indented) ? style["$=="]("normal") : $b2)) {
                          self5["$adjust_indentation!"](lines);
                        }
                        ;
                        block2 = $$2($nesting4, "Block").$new(parent, "paragraph", $hash22(["content_model", "source", "attributes"], { "content_model": "simple", "source": lines, "attributes": attributes }));
                      }
                      ;
                      self5.$catalog_inline_anchors(lines.$join($$2($nesting4, "LF")), block2, document, reader);
                    }
                    ;
                    break;
                    ;
                  }
                }
                ;
                if ($truthy2(block2)) {
                } else {
                  $case = block_context;
                  if ("listing"["$==="]($case) || "source"["$==="]($case)) {
                    if ($truthy2($truthy2($a2 = block_context["$=="]("source")) ? $a2 : $truthy2($b2 = attributes["$[]"](1)["$!"]()) ? language = $truthy2($c = attributes["$[]"](2)) ? $c : doc_attrs["$[]"]("source-language") : $b2)) {
                      if ($truthy2(language)) {
                        $writer = ["style", "source"];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        $writer = ["language", language];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                        $$2($nesting4, "AttributeList").$rekey(attributes, [nil2, nil2, "linenums"]);
                      } else {
                        $$2($nesting4, "AttributeList").$rekey(attributes, [nil2, "language", "linenums"]);
                        if ($truthy2(attributes["$key?"]("language"))) {
                        } else if ($truthy2(doc_attrs["$key?"]("source-language"))) {
                          $writer = ["language", doc_attrs["$[]"]("source-language")];
                          $send2(attributes, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                        ;
                      }
                      ;
                      if ($truthy2(attributes["$key?"]("linenums"))) {
                      } else if ($truthy2($truthy2($a2 = attributes["$[]"]("linenums-option")) ? $a2 : doc_attrs["$[]"]("source-linenums-option"))) {
                        $writer = ["linenums", ""];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      if ($truthy2(attributes["$key?"]("indent"))) {
                      } else if ($truthy2(doc_attrs["$key?"]("source-indent"))) {
                        $writer = ["indent", doc_attrs["$[]"]("source-indent")];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                    }
                    ;
                    block2 = self5.$build_block("listing", "verbatim", terminator, parent, reader, attributes);
                  } else if ("fenced_code"["$==="]($case)) {
                    $writer = ["style", "source"];
                    $send2(attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    if ($truthy2($rb_gt2(ll = this_line.$length(), 3))) {
                      if ($truthy2(comma_idx = (language = this_line.$slice(3, ll)).$index(","))) {
                        if ($truthy2($rb_gt2(comma_idx, 0))) {
                          language = language.$slice(0, comma_idx).$strip();
                          if ($truthy2($rb_lt2(comma_idx, $rb_minus(ll, 4)))) {
                            $writer = ["linenums", ""];
                            $send2(attributes, "[]=", Opal2.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                          }
                          ;
                        } else if ($truthy2($rb_gt2(ll, 4))) {
                          $writer = ["linenums", ""];
                          $send2(attributes, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                      } else {
                        language = language.$lstrip();
                      }
                    }
                    ;
                    if ($truthy2(language["$nil_or_empty?"]())) {
                      if ($truthy2(doc_attrs["$key?"]("source-language"))) {
                        $writer = ["language", doc_attrs["$[]"]("source-language")];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                    } else {
                      $writer = ["language", language];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    if ($truthy2(attributes["$key?"]("linenums"))) {
                    } else if ($truthy2($truthy2($a2 = attributes["$[]"]("linenums-option")) ? $a2 : doc_attrs["$[]"]("source-linenums-option"))) {
                      $writer = ["linenums", ""];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    if ($truthy2(attributes["$key?"]("indent"))) {
                    } else if ($truthy2(doc_attrs["$key?"]("source-indent"))) {
                      $writer = ["indent", doc_attrs["$[]"]("source-indent")];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    terminator = terminator.$slice(0, 3);
                    block2 = self5.$build_block("listing", "verbatim", terminator, parent, reader, attributes);
                  } else if ("table"["$==="]($case)) {
                    block_cursor = reader.$cursor();
                    block_reader = $$2($nesting4, "Reader").$new(reader.$read_lines_until($hash22(["terminator", "skip_line_comments", "context", "cursor"], { "terminator": terminator, "skip_line_comments": true, "context": "table", "cursor": "at_mark" })), block_cursor);
                    if ($truthy2(terminator["$start_with?"]("|", "!"))) {
                    } else {
                      $truthy2($a2 = attributes["$[]"]("format")) ? $a2 : ($writer = ["format", function() {
                        if ($truthy2(terminator["$start_with?"](","))) {
                          return "csv";
                        } else {
                          return "dsv";
                        }
                        ;
                        return nil2;
                      }()], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                    }
                    ;
                    block2 = self5.$parse_table(block_reader, parent, attributes);
                  } else if ("sidebar"["$==="]($case)) {
                    block2 = self5.$build_block(block_context, "compound", terminator, parent, reader, attributes);
                  } else if ("admonition"["$==="]($case)) {
                    $writer = ["name", admonition_name = style.$downcase()];
                    $send2(attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    $writer = ["textlabel", $truthy2($a2 = attributes.$delete("caption")) ? $a2 : doc_attrs["$[]"]("" + admonition_name + "-caption")];
                    $send2(attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    block2 = self5.$build_block(block_context, "compound", terminator, parent, reader, attributes);
                  } else if ("open"["$==="]($case) || "abstract"["$==="]($case) || "partintro"["$==="]($case)) {
                    block2 = self5.$build_block("open", "compound", terminator, parent, reader, attributes);
                  } else if ("literal"["$==="]($case)) {
                    block2 = self5.$build_block(block_context, "verbatim", terminator, parent, reader, attributes);
                  } else if ("example"["$==="]($case)) {
                    if ($truthy2(attributes["$[]"]("collapsible-option"))) {
                      $writer = ["caption", ""];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    block2 = self5.$build_block(block_context, "compound", terminator, parent, reader, attributes);
                  } else if ("quote"["$==="]($case) || "verse"["$==="]($case)) {
                    $$2($nesting4, "AttributeList").$rekey(attributes, [nil2, "attribution", "citetitle"]);
                    block2 = self5.$build_block(block_context, function() {
                      if (block_context["$=="]("verse")) {
                        return "verbatim";
                      } else {
                        return "compound";
                      }
                      ;
                      return nil2;
                    }(), terminator, parent, reader, attributes);
                  } else if ("stem"["$==="]($case) || "latexmath"["$==="]($case) || "asciimath"["$==="]($case)) {
                    if (block_context["$=="]("stem")) {
                      $writer = ["style", $$2($nesting4, "STEM_TYPE_ALIASES")["$[]"]($truthy2($a2 = attributes["$[]"](2)) ? $a2 : doc_attrs["$[]"]("stem"))];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    block2 = self5.$build_block("stem", "raw", terminator, parent, reader, attributes);
                  } else if ("pass"["$==="]($case)) {
                    block2 = self5.$build_block(block_context, "raw", terminator, parent, reader, attributes);
                  } else if ("comment"["$==="]($case)) {
                    self5.$build_block(block_context, "skip", terminator, parent, reader, attributes);
                    attributes.$clear();
                    return nil2;
                  } else {
                    if ($truthy2($truthy2($a2 = block_extensions) ? extension = extensions["$registered_for_block?"](block_context, cloaked_context) : $a2)) {
                      if ((content_model = (ext_config = extension.$config())["$[]"]("content_model"))["$=="]("skip")) {
                      } else {
                        if ($truthy2((positional_attrs = $truthy2($a2 = ext_config["$[]"]("positional_attrs")) ? $a2 : ext_config["$[]"]("pos_attrs"))["$nil_or_empty?"]())) {
                        } else {
                          $$2($nesting4, "AttributeList").$rekey(attributes, $rb_plus([nil2], positional_attrs));
                        }
                        ;
                        if ($truthy2(default_attrs = ext_config["$[]"]("default_attrs"))) {
                          $send2(default_attrs, "each", [], ($$13 = function(k, v) {
                            var self6 = $$13.$$s || this, $e;
                            if (k == null) {
                              k = nil2;
                            }
                            ;
                            if (v == null) {
                              v = nil2;
                            }
                            ;
                            return $truthy2($e = attributes["$[]"](k)) ? $e : ($writer = [k, v], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                          }, $$13.$$s = self5, $$13.$$arity = 2, $$13));
                        }
                        ;
                        $writer = ["cloaked-context", cloaked_context];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                      }
                      ;
                      if ($truthy2(block2 = self5.$build_block(block_context, content_model, terminator, parent, reader, attributes, $hash22(["extension"], { "extension": extension })))) {
                      } else {
                        attributes.$clear();
                        return nil2;
                      }
                      ;
                    } else {
                      self5.$raise("Unsupported block type " + block_context + " at " + reader.$cursor());
                    }
                  }
                }
                ;
                if ($truthy2(document.$sourcemap())) {
                  $writer = [reader.$cursor_at_mark()];
                  $send2(block2, "source_location=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ($truthy2(attributes["$[]"]("title"))) {
                  $writer = [block_title = attributes.$delete("title")];
                  $send2(block2, "title=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if ($truthy2($$2($nesting4, "CAPTION_ATTRIBUTE_NAMES")["$[]"](block2.$context()))) {
                    block2.$assign_caption(attributes.$delete("caption"));
                  }
                  ;
                }
                ;
                $writer = [attributes["$[]"]("style")];
                $send2(block2, "style=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                if ($truthy2(block_id = $truthy2($a2 = block2.$id()) ? $a2 : ($writer = [attributes["$[]"]("id")], $send2(block2, "id=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
                  if ($truthy2(function() {
                    if ($truthy2(block_title)) {
                      return block_title["$include?"]($$2($nesting4, "ATTR_REF_HEAD"));
                    } else {
                      return block2["$title?"]();
                    }
                    ;
                    return nil2;
                  }())) {
                    block2.$title();
                  }
                  ;
                  if ($truthy2(document.$register("refs", [block_id, block2]))) {
                  } else {
                    self5.$logger().$warn(self5.$message_with_context("id assigned to block already in use: " + block_id, $hash22(["source_location"], { "source_location": reader.$cursor_at_mark() })));
                  }
                  ;
                }
                ;
                if ($truthy2(attributes["$empty?"]())) {
                } else {
                  block2.$update_attributes(attributes);
                }
                ;
                block2.$commit_subs();
                if ($truthy2(block2["$sub?"]("callouts"))) {
                  if ($truthy2(self5.$catalog_callouts(block2.$source(), document))) {
                  } else {
                    block2.$remove_sub("callouts");
                  }
                }
                ;
                return block2;
              } catch ($returner) {
                if ($returner === Opal2.returner) {
                  return $returner.$v;
                }
                throw $returner;
              }
            }, $Parser_next_block$10.$$arity = -3);
            Opal2.defs(self4, "$read_paragraph_lines", $Parser_read_paragraph_lines$14 = function $$read_paragraph_lines(reader, break_at_list, opts) {
              var self5 = this, $writer = nil2, break_condition = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              $writer = ["break_on_blank_lines", true];
              $send2(opts, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = ["break_on_list_continuation", true];
              $send2(opts, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = ["preserve_last_line", true];
              $send2(opts, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              break_condition = function() {
                if ($truthy2(break_at_list)) {
                  if ($truthy2($$2($nesting4, "Compliance").$block_terminates_paragraph())) {
                    return $$2($nesting4, "StartOfBlockOrListProc");
                  } else {
                    return $$2($nesting4, "StartOfListProc");
                  }
                  ;
                } else {
                  if ($truthy2($$2($nesting4, "Compliance").$block_terminates_paragraph())) {
                    return $$2($nesting4, "StartOfBlockProc");
                  } else {
                    return $$2($nesting4, "NoOp");
                  }
                  ;
                }
                ;
                return nil2;
              }();
              return $send2(reader, "read_lines_until", [opts], break_condition.$to_proc());
            }, $Parser_read_paragraph_lines$14.$$arity = -3);
            Opal2.defs(self4, "$is_delimited_block?", $Parser_is_delimited_block$ques$15 = function(line, return_match_data) {
              var $a2, $b2, self5 = this, line_len = nil2, tip = nil2, tip_len = nil2, context = nil2, masq = nil2;
              if (return_match_data == null) {
                return_match_data = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = $rb_gt2(line_len = line.$length(), 1)) ? $$2($nesting4, "DELIMITED_BLOCK_HEADS")["$[]"](line.$slice(0, 2)) : $a2)) {
              } else {
                return nil2;
              }
              ;
              if (line_len["$=="](2)) {
                tip = line;
                tip_len = 2;
              } else {
                if ($truthy2($rb_lt2(line_len, 5))) {
                  tip = line;
                  tip_len = line_len;
                } else {
                  tip = line.$slice(0, tip_len = 4);
                }
                ;
                if ($truthy2($truthy2($a2 = $$2($nesting4, "Compliance").$markdown_syntax()) ? tip["$start_with?"]("`") : $a2)) {
                  if (tip_len["$=="](4)) {
                    if ($truthy2($truthy2($a2 = tip["$=="]("````")) ? $a2 : (tip = tip.$chop())["$!="]("```"))) {
                      return nil2;
                    }
                    ;
                    line = tip;
                    line_len = tip_len = 3;
                  } else if ($truthy2(tip["$!="]("```"))) {
                    return nil2;
                  }
                } else if (tip_len["$=="](3)) {
                  return nil2;
                }
                ;
              }
              ;
              $b2 = $$2($nesting4, "DELIMITED_BLOCKS")["$[]"](tip), $a2 = Opal2.to_ary($b2), context = $a2[0] == null ? nil2 : $a2[0], masq = $a2[1] == null ? nil2 : $a2[1], $b2;
              if ($truthy2($truthy2($a2 = context) ? $truthy2($b2 = line_len["$=="](tip_len)) ? $b2 : self5["$uniform?"](line.$slice(1, line_len), $$2($nesting4, "DELIMITED_BLOCK_TAILS")["$[]"](tip), $rb_minus(line_len, 1)) : $a2)) {
                if ($truthy2(return_match_data)) {
                  return $$2($nesting4, "BlockMatchData").$new(context, masq, tip, line);
                } else {
                  return true;
                }
              } else {
                return nil2;
              }
              ;
            }, $Parser_is_delimited_block$ques$15.$$arity = -2);
            Opal2.defs(self4, "$build_block", $Parser_build_block$16 = function $$build_block(block_context, content_model, terminator, parent, reader, attributes, options) {
              var $a2, $b2, self5 = this, $case = nil2, skip_processing = nil2, parse_as_content_model = nil2, lines = nil2, block_reader = nil2, block_cursor = nil2, tab_size = nil2, indent = nil2, extension = nil2, block2 = nil2;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              $case = content_model;
              if ("skip"["$==="]($case)) {
                $a2 = [true, "simple"], skip_processing = $a2[0], parse_as_content_model = $a2[1], $a2;
              } else if ("raw"["$==="]($case)) {
                $a2 = [false, "simple"], skip_processing = $a2[0], parse_as_content_model = $a2[1], $a2;
              } else {
                $a2 = [false, content_model], skip_processing = $a2[0], parse_as_content_model = $a2[1], $a2;
              }
              ;
              if ($truthy2(terminator["$nil?"]())) {
                if (parse_as_content_model["$=="]("verbatim")) {
                  lines = reader.$read_lines_until($hash22(["break_on_blank_lines", "break_on_list_continuation"], { "break_on_blank_lines": true, "break_on_list_continuation": true }));
                } else {
                  if (content_model["$=="]("compound")) {
                    content_model = "simple";
                  }
                  ;
                  lines = self5.$read_paragraph_lines(reader, false, $hash22(["skip_line_comments", "skip_processing"], { "skip_line_comments": true, "skip_processing": skip_processing }));
                }
                ;
                block_reader = nil2;
              } else if ($truthy2(parse_as_content_model["$!="]("compound"))) {
                lines = reader.$read_lines_until($hash22(["terminator", "skip_processing", "context", "cursor"], { "terminator": terminator, "skip_processing": skip_processing, "context": block_context, "cursor": "at_mark" }));
                block_reader = nil2;
              } else if (terminator["$=="](false)) {
                lines = nil2;
                block_reader = reader;
              } else {
                lines = nil2;
                block_cursor = reader.$cursor();
                block_reader = $$2($nesting4, "Reader").$new(reader.$read_lines_until($hash22(["terminator", "skip_processing", "context", "cursor"], { "terminator": terminator, "skip_processing": skip_processing, "context": block_context, "cursor": "at_mark" })), block_cursor);
              }
              ;
              $case = content_model;
              if ("verbatim"["$==="]($case)) {
                tab_size = ($truthy2($a2 = attributes["$[]"]("tabsize")) ? $a2 : parent.$document().$attributes()["$[]"]("tabsize")).$to_i();
                if ($truthy2(indent = attributes["$[]"]("indent"))) {
                  self5["$adjust_indentation!"](lines, indent.$to_i(), tab_size);
                } else if ($truthy2($rb_gt2(tab_size, 0))) {
                  self5["$adjust_indentation!"](lines, -1, tab_size);
                }
                ;
              } else if ("skip"["$==="]($case)) {
                return nil2;
              }
              ;
              if ($truthy2(extension = options["$[]"]("extension"))) {
                attributes.$delete("style");
                if ($truthy2($truthy2($a2 = block2 = extension.$process_method()["$[]"](parent, $truthy2($b2 = block_reader) ? $b2 : $$2($nesting4, "Reader").$new(lines), attributes.$merge())) ? block2["$!="](parent) : $a2)) {
                  attributes.$replace(block2.$attributes());
                  if ($truthy2($truthy2($a2 = ($b2 = block2.$content_model()["$=="]("compound")) ? $$2($nesting4, "Block")["$==="](block2) : block2.$content_model()["$=="]("compound")) ? (lines = block2.$lines())["$empty?"]()["$!"]() : $a2)) {
                    content_model = "compound";
                    block_reader = $$2($nesting4, "Reader").$new(lines);
                  }
                  ;
                } else {
                  return nil2;
                }
                ;
              } else {
                block2 = $$2($nesting4, "Block").$new(parent, block_context, $hash22(["content_model", "source", "attributes"], { "content_model": content_model, "source": lines, "attributes": attributes }));
              }
              ;
              if (content_model["$=="]("compound")) {
                self5.$parse_blocks(block_reader, block2);
              }
              ;
              return block2;
            }, $Parser_build_block$16.$$arity = -7);
            Opal2.defs(self4, "$parse_blocks", $Parser_parse_blocks$17 = function $$parse_blocks(reader, parent, attributes) {
              var $a2, $b2, $c, self5 = this, block2 = nil2;
              if (attributes == null) {
                attributes = nil2;
              }
              ;
              if ($truthy2(attributes)) {
                while ($truthy2($truthy2($b2 = $truthy2($c = block2 = self5.$next_block(reader, parent, attributes.$merge())) ? parent.$blocks()["$<<"](block2) : $c) ? $b2 : reader["$has_more_lines?"]())) {
                }
              } else {
                while ($truthy2($truthy2($b2 = $truthy2($c = block2 = self5.$next_block(reader, parent)) ? parent.$blocks()["$<<"](block2) : $c) ? $b2 : reader["$has_more_lines?"]())) {
                }
              }
              ;
              return nil2;
            }, $Parser_parse_blocks$17.$$arity = -3);
            Opal2.defs(self4, "$parse_list", $Parser_parse_list$18 = function $$parse_list(reader, list_type, parent, style) {
              var $a2, $b2, self5 = this, list_block = nil2, list_rx = nil2, list_item = nil2;
              if ($gvars["~"] == null)
                $gvars["~"] = nil2;
              list_block = $$2($nesting4, "List").$new(parent, list_type);
              list_rx = $$2($nesting4, "ListRxMap")["$[]"](list_type);
              while ($truthy2($truthy2($b2 = reader["$has_more_lines?"]()) ? list_rx["$=~"](reader.$peek_line()) : $b2)) {
                if ($truthy2(list_item = self5.$parse_list_item(reader, list_block, $gvars["~"], ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1), style))) {
                  list_block.$items()["$<<"](list_item);
                }
                ;
                if ($truthy2($b2 = reader.$skip_blank_lines())) {
                  $b2;
                } else {
                  break;
                }
                ;
              }
              ;
              return list_block;
            }, $Parser_parse_list$18.$$arity = 4);
            Opal2.defs(self4, "$catalog_callouts", $Parser_catalog_callouts$19 = function $$catalog_callouts(text, document) {
              var $$20, self5 = this, found = nil2, autonum = nil2;
              found = false;
              autonum = 0;
              if ($truthy2(text["$include?"]("<"))) {
                $send2(text, "scan", [$$2($nesting4, "CalloutScanRx")], ($$20 = function() {
                  var self6 = $$20.$$s || this, $a2;
                  if ($truthy2((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](0))["$start_with?"]("\\"))) {
                  } else {
                    document.$callouts().$register(function() {
                      if ((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2))["$=="](".")) {
                        return (autonum = $rb_plus(autonum, 1)).$to_s();
                      } else {
                        return ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2);
                      }
                      ;
                      return nil2;
                    }());
                  }
                  ;
                  return found = true;
                }, $$20.$$s = self5, $$20.$$arity = 0, $$20));
              }
              ;
              return found;
            }, $Parser_catalog_callouts$19.$$arity = 2);
            Opal2.defs(self4, "$catalog_inline_anchor", $Parser_catalog_inline_anchor$21 = function $$catalog_inline_anchor(id, reftext, node, location, doc) {
              var $a2, self5 = this;
              if (doc == null) {
                doc = node.$document();
              }
              ;
              if ($truthy2($truthy2($a2 = reftext) ? reftext["$include?"]($$2($nesting4, "ATTR_REF_HEAD")) : $a2)) {
                reftext = doc.$sub_attributes(reftext);
              }
              ;
              if ($truthy2(doc.$register("refs", [id, $$2($nesting4, "Inline").$new(node, "anchor", reftext, $hash22(["type", "id"], { "type": "ref", "id": id }))]))) {
              } else {
                if ($truthy2($$2($nesting4, "Reader")["$==="](location))) {
                  location = location.$cursor();
                }
                ;
                self5.$logger().$warn(self5.$message_with_context("id assigned to anchor already in use: " + id, $hash22(["source_location"], { "source_location": location })));
              }
              ;
              return nil2;
            }, $Parser_catalog_inline_anchor$21.$$arity = -5);
            Opal2.defs(self4, "$catalog_inline_anchors", $Parser_catalog_inline_anchors$22 = function $$catalog_inline_anchors(text, block2, document, reader) {
              var $a2, $$23, self5 = this;
              if ($truthy2($truthy2($a2 = text["$include?"]("[[")) ? $a2 : text["$include?"]("or:"))) {
                $send2(text, "scan", [$$2($nesting4, "InlineAnchorScanRx")], ($$23 = function() {
                  var self6 = $$23.$$s || this, $b2, $c, $d, id = nil2, reftext = nil2, location = nil2, offset = nil2;
                  if ($truthy2(id = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1))) {
                    if ($truthy2($truthy2($b2 = $truthy2($c = reftext = ($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](2)) ? reftext["$include?"]($$2($nesting4, "ATTR_REF_HEAD")) : $c) ? (reftext = document.$sub_attributes(reftext))["$empty?"]() : $b2)) {
                      return nil2;
                    }
                  } else {
                    id = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](3);
                    if ($truthy2(reftext = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](4))) {
                      if ($truthy2(reftext["$include?"]("]"))) {
                        reftext = reftext.$gsub("\\]", "]");
                        if ($truthy2(reftext["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                          reftext = document.$sub_attributes(reftext);
                        }
                        ;
                      } else if ($truthy2($truthy2($b2 = reftext["$include?"]($$2($nesting4, "ATTR_REF_HEAD"))) ? (reftext = document.$sub_attributes(reftext))["$empty?"]() : $b2)) {
                        return nil2;
                      }
                    }
                    ;
                  }
                  ;
                  if ($truthy2(document.$register("refs", [id, $$2($nesting4, "Inline").$new(block2, "anchor", reftext, $hash22(["type", "id"], { "type": "ref", "id": id }))]))) {
                    return nil2;
                  } else {
                    location = reader.$cursor_at_mark();
                    if ($truthy2($rb_gt2(offset = $rb_plus((($b2 = $gvars["~"]) === nil2 ? nil2 : $b2.$pre_match()).$count($$2($nesting4, "LF")), function() {
                      if ($truthy2((($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](0))["$start_with?"]($$2($nesting4, "LF")))) {
                        return 1;
                      } else {
                        return 0;
                      }
                      ;
                      return nil2;
                    }()), 0))) {
                      (location = location.$dup()).$advance(offset);
                    }
                    ;
                    return self6.$logger().$warn(self6.$message_with_context("id assigned to anchor already in use: " + id, $hash22(["source_location"], { "source_location": location })));
                  }
                  ;
                }, $$23.$$s = self5, $$23.$$arity = 0, $$23));
              }
              ;
              return nil2;
            }, $Parser_catalog_inline_anchors$22.$$arity = 4);
            Opal2.defs(self4, "$catalog_inline_biblio_anchor", $Parser_catalog_inline_biblio_anchor$24 = function $$catalog_inline_biblio_anchor(id, reftext, node, reader) {
              var $a2, self5 = this;
              if ($truthy2(node.$document().$register("refs", [id, $$2($nesting4, "Inline").$new(node, "anchor", $truthy2($a2 = reftext) ? "[" + reftext + "]" : $a2, $hash22(["type", "id"], { "type": "bibref", "id": id }))]))) {
              } else {
                self5.$logger().$warn(self5.$message_with_context("id assigned to bibliography anchor already in use: " + id, $hash22(["source_location"], { "source_location": reader.$cursor() })));
              }
              ;
              return nil2;
            }, $Parser_catalog_inline_biblio_anchor$24.$$arity = 4);
            Opal2.defs(self4, "$parse_description_list", $Parser_parse_description_list$25 = function $$parse_description_list(reader, match, parent) {
              var $a2, $b2, self5 = this, list_block = nil2, sibling_pattern = nil2, current_pair = nil2, next_pair = nil2, $writer = nil2;
              if ($gvars["~"] == null)
                $gvars["~"] = nil2;
              list_block = $$2($nesting4, "List").$new(parent, "dlist");
              sibling_pattern = $$2($nesting4, "DescriptionListSiblingRx")["$[]"](match["$[]"](2));
              list_block.$items()["$<<"](current_pair = self5.$parse_list_item(reader, list_block, match, sibling_pattern));
              while ($truthy2($truthy2($b2 = reader["$has_more_lines?"]()) ? sibling_pattern["$=~"](reader.$peek_line()) : $b2)) {
                next_pair = self5.$parse_list_item(reader, list_block, $gvars["~"], sibling_pattern);
                if ($truthy2(current_pair["$[]"](1))) {
                  list_block.$items()["$<<"](current_pair = next_pair);
                } else {
                  current_pair["$[]"](0)["$<<"](next_pair["$[]"](0)["$[]"](0));
                  $writer = [1, next_pair["$[]"](1)];
                  $send2(current_pair, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                }
                ;
              }
              ;
              return list_block;
            }, $Parser_parse_description_list$25.$$arity = 3);
            Opal2.defs(self4, "$parse_callout_list", $Parser_parse_callout_list$26 = function $$parse_callout_list(reader, match, parent, callouts) {
              var $a2, $b2, $c, self5 = this, list_block = nil2, next_index = nil2, autonum = nil2, num = nil2, list_item = nil2, coids = nil2, $writer = nil2;
              list_block = $$2($nesting4, "List").$new(parent, "colist");
              next_index = 1;
              autonum = 0;
              while ($truthy2($truthy2($b2 = match) ? $b2 : $truthy2($c = match = $$2($nesting4, "CalloutListRx").$match(reader.$peek_line())) ? reader.$mark() : $c)) {
                if ((num = match["$[]"](1))["$=="](".")) {
                  num = (autonum = $rb_plus(autonum, 1)).$to_s();
                }
                ;
                if (num["$=="](next_index.$to_s())) {
                } else {
                  self5.$logger().$warn(self5.$message_with_context("callout list item index: expected " + next_index + ", got " + num, $hash22(["source_location"], { "source_location": reader.$cursor_at_mark() })));
                }
                ;
                if ($truthy2(list_item = self5.$parse_list_item(reader, list_block, match, "<1>"))) {
                  list_block.$items()["$<<"](list_item);
                  if ($truthy2((coids = callouts.$callout_ids(list_block.$items().$size()))["$empty?"]())) {
                    self5.$logger().$warn(self5.$message_with_context("no callout found for <" + list_block.$items().$size() + ">", $hash22(["source_location"], { "source_location": reader.$cursor_at_mark() })));
                  } else {
                    $writer = ["coids", coids];
                    $send2(list_item.$attributes(), "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }
                ;
                next_index = $rb_plus(next_index, 1);
                match = nil2;
              }
              ;
              callouts.$next_list();
              return list_block;
            }, $Parser_parse_callout_list$26.$$arity = 4);
            Opal2.defs(self4, "$parse_list_item", $Parser_parse_list_item$27 = function $$parse_list_item(reader, list_block, match, sibling_trait, style) {
              var $a2, $b2, self5 = this, list_type = nil2, dlist = nil2, list_term = nil2, term_text = nil2, item_text = nil2, has_text = nil2, list_item = nil2, $writer = nil2, sourcemap_assignment_deferred = nil2, $case = nil2, ordinal = nil2, implicit_style = nil2, block_cursor = nil2, list_item_reader = nil2, comment_lines = nil2, subsequent_line = nil2, content_adjacent = nil2, block2 = nil2, first_block = nil2;
              if (style == null) {
                style = nil2;
              }
              ;
              if ((list_type = list_block.$context())["$=="]("dlist")) {
                dlist = true;
                list_term = $$2($nesting4, "ListItem").$new(list_block, term_text = match["$[]"](1));
                if ($truthy2($truthy2($a2 = term_text["$start_with?"]("[[")) ? $$2($nesting4, "LeadingInlineAnchorRx")["$=~"](term_text) : $a2)) {
                  self5.$catalog_inline_anchor(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1), $truthy2($a2 = ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](2)) ? $a2 : (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2.$post_match()).$lstrip(), list_term, reader);
                }
                ;
                if ($truthy2(item_text = match["$[]"](3))) {
                  has_text = true;
                }
                ;
                list_item = $$2($nesting4, "ListItem").$new(list_block, item_text);
                if ($truthy2(list_block.$document().$sourcemap())) {
                  $writer = [reader.$cursor()];
                  $send2(list_term, "source_location=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if ($truthy2(has_text)) {
                    $writer = [list_term.$source_location()];
                    $send2(list_item, "source_location=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    sourcemap_assignment_deferred = true;
                  }
                  ;
                }
                ;
              } else {
                has_text = true;
                list_item = $$2($nesting4, "ListItem").$new(list_block, item_text = match["$[]"](2));
                if ($truthy2(list_block.$document().$sourcemap())) {
                  $writer = [reader.$cursor()];
                  $send2(list_item, "source_location=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                $case = list_type;
                if ("ulist"["$==="]($case)) {
                  $writer = [sibling_trait];
                  $send2(list_item, "marker=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if ($truthy2(item_text["$start_with?"]("["))) {
                    if ($truthy2($truthy2($a2 = style) ? style["$=="]("bibliography") : $a2)) {
                      if ($truthy2($$2($nesting4, "InlineBiblioAnchorRx")["$=~"](item_text))) {
                        self5.$catalog_inline_biblio_anchor(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), list_item, reader);
                      }
                    } else if ($truthy2(item_text["$start_with?"]("[["))) {
                      if ($truthy2($$2($nesting4, "LeadingInlineAnchorRx")["$=~"](item_text))) {
                        self5.$catalog_inline_anchor(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), list_item, reader);
                      }
                    } else if ($truthy2(item_text["$start_with?"]("[ ] ", "[x] ", "[*] "))) {
                      list_block.$set_option("checklist");
                      $writer = ["checkbox", ""];
                      $send2(list_item.$attributes(), "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      if ($truthy2(item_text["$start_with?"]("[ "))) {
                      } else {
                        $writer = ["checked", ""];
                        $send2(list_item.$attributes(), "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      $writer = [item_text.$slice(4, item_text.$length())];
                      $send2(list_item, "text=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                    }
                  }
                  ;
                } else if ("olist"["$==="]($case)) {
                  $b2 = self5.$resolve_ordered_list_marker(sibling_trait, ordinal = list_block.$items().$size(), true, reader), $a2 = Opal2.to_ary($b2), sibling_trait = $a2[0] == null ? nil2 : $a2[0], implicit_style = $a2[1] == null ? nil2 : $a2[1], $b2;
                  $writer = [sibling_trait];
                  $send2(list_item, "marker=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if ($truthy2(($a2 = ordinal["$=="](0)) ? style["$!"]() : ordinal["$=="](0))) {
                    $writer = [$truthy2($a2 = implicit_style) ? $a2 : ($truthy2($b2 = $$2($nesting4, "ORDERED_LIST_STYLES")["$[]"]($rb_minus(sibling_trait.$length(), 1))) ? $b2 : "arabic").$to_s()];
                    $send2(list_block, "style=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2($truthy2($a2 = item_text["$start_with?"]("[[")) ? $$2($nesting4, "LeadingInlineAnchorRx")["$=~"](item_text) : $a2)) {
                    self5.$catalog_inline_anchor(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), list_item, reader);
                  }
                  ;
                } else {
                  $writer = [sibling_trait];
                  $send2(list_item, "marker=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if ($truthy2($truthy2($a2 = item_text["$start_with?"]("[[")) ? $$2($nesting4, "LeadingInlineAnchorRx")["$=~"](item_text) : $a2)) {
                    self5.$catalog_inline_anchor(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), list_item, reader);
                  }
                  ;
                }
                ;
              }
              ;
              reader.$shift();
              block_cursor = reader.$cursor();
              list_item_reader = $$2($nesting4, "Reader").$new(self5.$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), block_cursor);
              if ($truthy2(list_item_reader["$has_more_lines?"]())) {
                if ($truthy2(sourcemap_assignment_deferred)) {
                  $writer = [block_cursor];
                  $send2(list_item, "source_location=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                comment_lines = list_item_reader.$skip_line_comments();
                if ($truthy2(subsequent_line = list_item_reader.$peek_line())) {
                  if ($truthy2(comment_lines["$empty?"]())) {
                  } else {
                    list_item_reader.$unshift_lines(comment_lines);
                  }
                  ;
                  if ($truthy2(subsequent_line["$empty?"]())) {
                  } else {
                    content_adjacent = true;
                    if ($truthy2(dlist)) {
                    } else {
                      has_text = nil2;
                    }
                    ;
                  }
                  ;
                }
                ;
                if ($truthy2(block2 = self5.$next_block(list_item_reader, list_item, $hash22([], {}), $hash22(["text_only", "list_type"], { "text_only": function() {
                  if ($truthy2(has_text)) {
                    return nil2;
                  } else {
                    return true;
                  }
                  ;
                  return nil2;
                }(), "list_type": list_type })))) {
                  list_item.$blocks()["$<<"](block2);
                }
                ;
                while ($truthy2(list_item_reader["$has_more_lines?"]())) {
                  if ($truthy2(block2 = self5.$next_block(list_item_reader, list_item, $hash22([], {}), $hash22(["list_type"], { "list_type": list_type })))) {
                    list_item.$blocks()["$<<"](block2);
                  }
                }
                ;
                if ($truthy2($truthy2($a2 = $truthy2($b2 = content_adjacent) ? first_block = list_item.$blocks()["$[]"](0) : $b2) ? first_block.$context()["$=="]("paragraph") : $a2)) {
                  list_item.$fold_first();
                }
                ;
              }
              ;
              if ($truthy2(dlist)) {
                return [[list_term], function() {
                  if ($truthy2($truthy2($a2 = list_item["$text?"]()) ? $a2 : list_item["$blocks?"]())) {
                    return list_item;
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }()];
              } else {
                return list_item;
              }
              ;
            }, $Parser_parse_list_item$27.$$arity = -5);
            Opal2.defs(self4, "$read_lines_for_list_item", $Parser_read_lines_for_list_item$28 = function $$read_lines_for_list_item(reader, list_type, sibling_trait, has_text) {
              var $a2, $b2, $c, $$29, $$30, $$31, $$32, $$33, self5 = this, buffer = nil2, continuation = nil2, within_nested_list = nil2, detached_continuation = nil2, dlist = nil2, this_line = nil2, prev_line = nil2, $writer = nil2, match = nil2, nested_list_type = nil2, last_line = nil2;
              if (sibling_trait == null) {
                sibling_trait = nil2;
              }
              ;
              if (has_text == null) {
                has_text = true;
              }
              ;
              buffer = [];
              continuation = "inactive";
              within_nested_list = false;
              detached_continuation = nil2;
              dlist = list_type["$=="]("dlist");
              while ($truthy2(reader["$has_more_lines?"]())) {
                this_line = reader.$read_line();
                if ($truthy2(self5["$is_sibling_list_item?"](this_line, list_type, sibling_trait))) {
                  break;
                }
                ;
                prev_line = function() {
                  if ($truthy2(buffer["$empty?"]())) {
                    return nil2;
                  } else {
                    return buffer["$[]"](-1);
                  }
                  ;
                  return nil2;
                }();
                if (prev_line["$=="]($$2($nesting4, "LIST_CONTINUATION"))) {
                  if (continuation["$=="]("inactive")) {
                    continuation = "active";
                    has_text = true;
                    if ($truthy2(within_nested_list)) {
                    } else {
                      $writer = [-1, ""];
                      $send2(buffer, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                  }
                  ;
                  if (this_line["$=="]($$2($nesting4, "LIST_CONTINUATION"))) {
                    if ($truthy2(continuation["$!="]("frozen"))) {
                      continuation = "frozen";
                      buffer["$<<"](this_line);
                    }
                    ;
                    this_line = nil2;
                    continue;
                    ;
                  }
                  ;
                }
                ;
                if ($truthy2(match = self5["$is_delimited_block?"](this_line, true))) {
                  if (continuation["$=="]("active")) {
                    buffer["$<<"](this_line);
                    buffer.$concat(reader.$read_lines_until($hash22(["terminator", "read_last_line", "context"], { "terminator": match.$terminator(), "read_last_line": true, "context": nil2 })));
                    continuation = "inactive";
                  } else {
                    break;
                  }
                } else if ($truthy2($truthy2($b2 = $truthy2($c = dlist) ? continuation["$!="]("active") : $c) ? $$2($nesting4, "BlockAttributeLineRx")["$match?"](this_line) : $b2)) {
                  break;
                } else if ($truthy2(($b2 = continuation["$=="]("active")) ? this_line["$empty?"]()["$!"]() : continuation["$=="]("active"))) {
                  if ($truthy2($$2($nesting4, "LiteralParagraphRx")["$match?"](this_line))) {
                    reader.$unshift_line(this_line);
                    if ($truthy2(dlist)) {
                      buffer.$concat($send2(reader, "read_lines_until", [$hash22(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { "preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true })], ($$29 = function(line) {
                        var self6 = $$29.$$s || this;
                        if (line == null) {
                          line = nil2;
                        }
                        ;
                        return self6["$is_sibling_list_item?"](line, list_type, sibling_trait);
                      }, $$29.$$s = self5, $$29.$$arity = 1, $$29)));
                    } else {
                      buffer.$concat(reader.$read_lines_until($hash22(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { "preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true })));
                    }
                    ;
                    continuation = "inactive";
                  } else if ($truthy2($truthy2($b2 = $truthy2($c = $$2($nesting4, "BlockTitleRx")["$match?"](this_line)) ? $c : $$2($nesting4, "BlockAttributeLineRx")["$match?"](this_line)) ? $b2 : $$2($nesting4, "AttributeEntryRx")["$match?"](this_line))) {
                    buffer["$<<"](this_line);
                  } else {
                    if ($truthy2(nested_list_type = $send2(function() {
                      if ($truthy2(within_nested_list)) {
                        return ["dlist"];
                      } else {
                        return $$2($nesting4, "NESTABLE_LIST_CONTEXTS");
                      }
                      ;
                      return nil2;
                    }(), "find", [], ($$30 = function(ctx) {
                      var self6 = $$30.$$s || this;
                      if (ctx == null) {
                        ctx = nil2;
                      }
                      ;
                      return $$2($nesting4, "ListRxMap")["$[]"](ctx)["$match?"](this_line);
                    }, $$30.$$s = self5, $$30.$$arity = 1, $$30)))) {
                      within_nested_list = true;
                      if ($truthy2(($b2 = nested_list_type["$=="]("dlist")) ? (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3))["$nil_or_empty?"]() : nested_list_type["$=="]("dlist"))) {
                        has_text = false;
                      }
                      ;
                    }
                    ;
                    buffer["$<<"](this_line);
                    continuation = "inactive";
                  }
                } else if ($truthy2($truthy2($b2 = prev_line) ? prev_line["$empty?"]() : $b2)) {
                  if ($truthy2(this_line["$empty?"]())) {
                    if ($truthy2(this_line = $truthy2($b2 = reader.$skip_blank_lines()) ? reader.$read_line() : $b2)) {
                    } else {
                      break;
                    }
                    ;
                    if ($truthy2(self5["$is_sibling_list_item?"](this_line, list_type, sibling_trait))) {
                      break;
                    }
                    ;
                  }
                  ;
                  if (this_line["$=="]($$2($nesting4, "LIST_CONTINUATION"))) {
                    detached_continuation = buffer.$size();
                    buffer["$<<"](this_line);
                  } else if ($truthy2(has_text)) {
                    if ($truthy2(self5["$is_sibling_list_item?"](this_line, list_type, sibling_trait))) {
                      break;
                    } else if ($truthy2(nested_list_type = $send2($$2($nesting4, "NESTABLE_LIST_CONTEXTS"), "find", [], ($$31 = function(ctx) {
                      var self6 = $$31.$$s || this;
                      if (ctx == null) {
                        ctx = nil2;
                      }
                      ;
                      return $$2($nesting4, "ListRxMap")["$[]"](ctx)["$=~"](this_line);
                    }, $$31.$$s = self5, $$31.$$arity = 1, $$31)))) {
                      buffer["$<<"](this_line);
                      within_nested_list = true;
                      if ($truthy2(($b2 = nested_list_type["$=="]("dlist")) ? (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3))["$nil_or_empty?"]() : nested_list_type["$=="]("dlist"))) {
                        has_text = false;
                      }
                      ;
                    } else if ($truthy2($$2($nesting4, "LiteralParagraphRx")["$match?"](this_line))) {
                      reader.$unshift_line(this_line);
                      if ($truthy2(dlist)) {
                        buffer.$concat($send2(reader, "read_lines_until", [$hash22(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { "preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true })], ($$32 = function(line) {
                          var self6 = $$32.$$s || this;
                          if (line == null) {
                            line = nil2;
                          }
                          ;
                          return self6["$is_sibling_list_item?"](line, list_type, sibling_trait);
                        }, $$32.$$s = self5, $$32.$$arity = 1, $$32)));
                      } else {
                        buffer.$concat(reader.$read_lines_until($hash22(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], { "preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true })));
                      }
                      ;
                    } else {
                      break;
                    }
                  } else {
                    if ($truthy2(within_nested_list)) {
                    } else {
                      buffer.$pop();
                    }
                    ;
                    buffer["$<<"](this_line);
                    has_text = true;
                  }
                  ;
                } else {
                  if ($truthy2(this_line["$empty?"]())) {
                  } else {
                    has_text = true;
                  }
                  ;
                  if ($truthy2(nested_list_type = $send2(function() {
                    if ($truthy2(within_nested_list)) {
                      return ["dlist"];
                    } else {
                      return $$2($nesting4, "NESTABLE_LIST_CONTEXTS");
                    }
                    ;
                    return nil2;
                  }(), "find", [], ($$33 = function(ctx) {
                    var self6 = $$33.$$s || this;
                    if (ctx == null) {
                      ctx = nil2;
                    }
                    ;
                    return $$2($nesting4, "ListRxMap")["$[]"](ctx)["$=~"](this_line);
                  }, $$33.$$s = self5, $$33.$$arity = 1, $$33)))) {
                    within_nested_list = true;
                    if ($truthy2(($b2 = nested_list_type["$=="]("dlist")) ? (($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](3))["$nil_or_empty?"]() : nested_list_type["$=="]("dlist"))) {
                      has_text = false;
                    }
                    ;
                  }
                  ;
                  buffer["$<<"](this_line);
                }
                ;
                this_line = nil2;
              }
              ;
              if ($truthy2(this_line)) {
                reader.$unshift_line(this_line);
              }
              ;
              if ($truthy2(detached_continuation)) {
                $writer = [detached_continuation, ""];
                $send2(buffer, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              while (!$truthy2(buffer["$empty?"]())) {
                if ($truthy2((last_line = buffer["$[]"](-1))["$empty?"]())) {
                  buffer.$pop();
                } else {
                  if (last_line["$=="]($$2($nesting4, "LIST_CONTINUATION"))) {
                    buffer.$pop();
                  }
                  ;
                  break;
                  ;
                }
              }
              ;
              return buffer;
            }, $Parser_read_lines_for_list_item$28.$$arity = -3);
            Opal2.defs(self4, "$initialize_section", $Parser_initialize_section$34 = function $$initialize_section(reader, parent, attributes) {
              var $a2, $b2, self5 = this, document = nil2, book = nil2, doctype = nil2, source_location = nil2, sect_style = nil2, sect_id = nil2, sect_reftext = nil2, sect_title = nil2, sect_level = nil2, sect_atx = nil2, sect_name = nil2, sect_special = nil2, sect_numbered = nil2, $writer = nil2, section = nil2, id = nil2, generated_id = nil2;
              if (attributes == null) {
                attributes = $hash22([], {});
              }
              ;
              document = parent.$document();
              book = (doctype = document.$doctype())["$=="]("book");
              if ($truthy2(document.$sourcemap())) {
                source_location = reader.$cursor();
              }
              ;
              sect_style = attributes["$[]"](1);
              $b2 = self5.$parse_section_title(reader, document, attributes["$[]"]("id")), $a2 = Opal2.to_ary($b2), sect_id = $a2[0] == null ? nil2 : $a2[0], sect_reftext = $a2[1] == null ? nil2 : $a2[1], sect_title = $a2[2] == null ? nil2 : $a2[2], sect_level = $a2[3] == null ? nil2 : $a2[3], sect_atx = $a2[4] == null ? nil2 : $a2[4], $b2;
              if ($truthy2(sect_style)) {
                if ($truthy2($truthy2($a2 = book) ? sect_style["$=="]("abstract") : $a2)) {
                  $a2 = ["chapter", 1], sect_name = $a2[0], sect_level = $a2[1], $a2;
                } else if ($truthy2($truthy2($a2 = sect_style["$start_with?"]("sect")) ? $$2($nesting4, "SectionLevelStyleRx")["$match?"](sect_style) : $a2)) {
                  sect_name = "section";
                } else {
                  $a2 = [sect_style, true], sect_name = $a2[0], sect_special = $a2[1], $a2;
                  if (sect_level["$=="](0)) {
                    sect_level = 1;
                  }
                  ;
                  sect_numbered = sect_name["$=="]("appendix");
                }
              } else if ($truthy2(book)) {
                sect_name = function() {
                  if (sect_level["$=="](0)) {
                    return "part";
                  } else {
                    if ($truthy2($rb_gt2(sect_level, 1))) {
                      return "section";
                    } else {
                      return "chapter";
                    }
                    ;
                  }
                  ;
                  return nil2;
                }();
              } else if ($truthy2(($a2 = doctype["$=="]("manpage")) ? sect_title.$casecmp("synopsis")["$=="](0) : doctype["$=="]("manpage"))) {
                $a2 = ["synopsis", true], sect_name = $a2[0], sect_special = $a2[1], $a2;
              } else {
                sect_name = "section";
              }
              ;
              if ($truthy2(sect_reftext)) {
                $writer = ["reftext", sect_reftext];
                $send2(attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              section = $$2($nesting4, "Section").$new(parent, sect_level);
              $a2 = [sect_id, sect_title, sect_name, source_location], section["$id="]($a2[0]), section["$title="]($a2[1]), section["$sectname="]($a2[2]), section["$source_location="]($a2[3]), $a2;
              if ($truthy2(sect_special)) {
                $writer = [true];
                $send2(section, "special=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                if ($truthy2(sect_numbered)) {
                  $writer = [true];
                  $send2(section, "numbered=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else if (document.$attributes()["$[]"]("sectnums")["$=="]("all")) {
                  $writer = [function() {
                    if ($truthy2($truthy2($a2 = book) ? sect_level["$=="](1) : $a2)) {
                      return "chapter";
                    } else {
                      return true;
                    }
                    ;
                    return nil2;
                  }()];
                  $send2(section, "numbered=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
              } else if ($truthy2($truthy2($a2 = document.$attributes()["$[]"]("sectnums")) ? $rb_gt2(sect_level, 0) : $a2)) {
                $writer = [function() {
                  if ($truthy2(section.$special())) {
                    return $truthy2($a2 = parent.$numbered()) ? true : $a2;
                  } else {
                    return true;
                  }
                  ;
                  return nil2;
                }()];
                $send2(section, "numbered=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy2($truthy2($a2 = $truthy2($b2 = book) ? sect_level["$=="](0) : $b2) ? document.$attributes()["$[]"]("partnums") : $a2)) {
                $writer = [true];
                $send2(section, "numbered=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(id = $truthy2($a2 = section.$id()) ? $a2 : ($writer = [function() {
                if ($truthy2(document.$attributes()["$key?"]("sectids"))) {
                  return generated_id = $$2($nesting4, "Section").$generate_id(section.$title(), document);
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }()], $send2(section, "id=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
                if ($truthy2($truthy2($a2 = generated_id) ? $a2 : sect_title["$include?"]($$2($nesting4, "ATTR_REF_HEAD"))["$!"]())) {
                } else {
                  section.$title();
                }
                ;
                if ($truthy2(document.$register("refs", [id, section]))) {
                } else {
                  self5.$logger().$warn(self5.$message_with_context("id assigned to section already in use: " + id, $hash22(["source_location"], { "source_location": reader.$cursor_at_line($rb_minus(reader.$lineno(), function() {
                    if ($truthy2(sect_atx)) {
                      return 1;
                    } else {
                      return 2;
                    }
                    ;
                    return nil2;
                  }())) })));
                }
                ;
              }
              ;
              section.$update_attributes(attributes);
              reader.$skip_blank_lines();
              return section;
            }, $Parser_initialize_section$34.$$arity = -3);
            Opal2.defs(self4, "$is_next_line_section?", $Parser_is_next_line_section$ques$35 = function(reader, attributes) {
              var $a2, $b2, self5 = this, style = nil2, next_lines = nil2;
              if ($truthy2($truthy2($a2 = style = attributes["$[]"](1)) ? $truthy2($b2 = style["$=="]("discrete")) ? $b2 : style["$=="]("float") : $a2)) {
                return nil2;
              }
              ;
              if ($truthy2($$2($nesting4, "Compliance").$underline_style_section_titles())) {
                next_lines = reader.$peek_lines(2, $truthy2($a2 = style) ? style["$=="]("comment") : $a2);
                return self5["$is_section_title?"]($truthy2($a2 = next_lines["$[]"](0)) ? $a2 : "", next_lines["$[]"](1));
              } else {
                return self5["$atx_section_title?"]($truthy2($a2 = reader.$peek_line()) ? $a2 : "");
              }
              ;
            }, $Parser_is_next_line_section$ques$35.$$arity = 2);
            Opal2.defs(self4, "$is_next_line_doctitle?", $Parser_is_next_line_doctitle$ques$36 = function(reader, attributes, leveloffset) {
              var $a2, self5 = this, sect_level = nil2;
              if ($truthy2(leveloffset)) {
                return $truthy2($a2 = sect_level = self5["$is_next_line_section?"](reader, attributes)) ? $rb_plus(sect_level, leveloffset.$to_i())["$=="](0) : $a2;
              } else {
                return self5["$is_next_line_section?"](reader, attributes)["$=="](0);
              }
            }, $Parser_is_next_line_doctitle$ques$36.$$arity = 3);
            Opal2.defs(self4, "$is_section_title?", $Parser_is_section_title$ques$37 = function(line1, line2) {
              var $a2, self5 = this;
              if (line2 == null) {
                line2 = nil2;
              }
              ;
              return $truthy2($a2 = self5["$atx_section_title?"](line1)) ? $a2 : function() {
                if ($truthy2(line2["$nil_or_empty?"]())) {
                  return nil2;
                } else {
                  return self5["$setext_section_title?"](line1, line2);
                }
                ;
                return nil2;
              }();
            }, $Parser_is_section_title$ques$37.$$arity = -2);
            Opal2.defs(self4, "$atx_section_title?", $Parser_atx_section_title$ques$38 = function(line) {
              var $a2, self5 = this;
              if ($truthy2(function() {
                if ($truthy2($$2($nesting4, "Compliance").$markdown_syntax())) {
                  return $truthy2($a2 = line["$start_with?"]("=", "#")) ? $$2($nesting4, "ExtAtxSectionTitleRx")["$=~"](line) : $a2;
                } else {
                  return $truthy2($a2 = line["$start_with?"]("=")) ? $$2($nesting4, "AtxSectionTitleRx")["$=~"](line) : $a2;
                }
                ;
                return nil2;
              }())) {
                return $rb_minus((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1)).$length(), 1);
              } else {
                return nil2;
              }
            }, $Parser_atx_section_title$ques$38.$$arity = 1);
            Opal2.defs(self4, "$setext_section_title?", $Parser_setext_section_title$ques$39 = function(line1, line2) {
              var $a2, $b2, $c, self5 = this, level = nil2, line2_ch0 = nil2, line2_len = nil2;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = $truthy2($c = level = $$2($nesting4, "SETEXT_SECTION_LEVELS")["$[]"](line2_ch0 = line2.$chr())) ? self5["$uniform?"](line2, line2_ch0, line2_len = line2.$length()) : $c) ? $$2($nesting4, "SetextSectionTitleRx")["$match?"](line1) : $b2) ? $rb_lt2($rb_minus(line1.$length(), line2_len).$abs(), 2) : $a2)) {
                return level;
              } else {
                return nil2;
              }
            }, $Parser_setext_section_title$ques$39.$$arity = 2);
            Opal2.defs(self4, "$parse_section_title", $Parser_parse_section_title$40 = function $$parse_section_title(reader, document, sect_id) {
              var $a2, $b2, $c, $d, $e, self5 = this, sect_reftext = nil2, line1 = nil2, sect_level = nil2, sect_title = nil2, atx = nil2, line2 = nil2, line2_ch0 = nil2, line2_len = nil2;
              if (sect_id == null) {
                sect_id = nil2;
              }
              ;
              sect_reftext = nil2;
              line1 = reader.$read_line();
              if ($truthy2(function() {
                if ($truthy2($$2($nesting4, "Compliance").$markdown_syntax())) {
                  return $truthy2($a2 = line1["$start_with?"]("=", "#")) ? $$2($nesting4, "ExtAtxSectionTitleRx")["$=~"](line1) : $a2;
                } else {
                  return $truthy2($a2 = line1["$start_with?"]("=")) ? $$2($nesting4, "AtxSectionTitleRx")["$=~"](line1) : $a2;
                }
                ;
                return nil2;
              }())) {
                $a2 = [$rb_minus((($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1)).$length(), 1), ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](2), true], sect_level = $a2[0], sect_title = $a2[1], atx = $a2[2], $a2;
                if ($truthy2(sect_id)) {
                } else if ($truthy2($truthy2($a2 = $truthy2($b2 = sect_title["$end_with?"]("]]")) ? $$2($nesting4, "InlineSectionAnchorRx")["$=~"](sect_title) : $b2) ? (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1))["$!"]() : $a2)) {
                  $a2 = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](0)).$length())), ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](2), ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](3)], sect_title = $a2[0], sect_id = $a2[1], sect_reftext = $a2[2], $a2;
                }
                ;
              } else if ($truthy2($truthy2($a2 = $truthy2($b2 = $truthy2($c = $truthy2($d = $truthy2($e = $$2($nesting4, "Compliance").$underline_style_section_titles()) ? line2 = reader.$peek_line(true) : $e) ? sect_level = $$2($nesting4, "SETEXT_SECTION_LEVELS")["$[]"](line2_ch0 = line2.$chr()) : $d) ? self5["$uniform?"](line2, line2_ch0, line2_len = line2.$length()) : $c) ? sect_title = $truthy2($c = $$2($nesting4, "SetextSectionTitleRx")["$=~"](line1)) ? ($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](1) : $c : $b2) ? $rb_lt2($rb_minus(line1.$length(), line2_len).$abs(), 2) : $a2)) {
                atx = false;
                if ($truthy2(sect_id)) {
                } else if ($truthy2($truthy2($a2 = $truthy2($b2 = sect_title["$end_with?"]("]]")) ? $$2($nesting4, "InlineSectionAnchorRx")["$=~"](sect_title) : $b2) ? (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1))["$!"]() : $a2)) {
                  $a2 = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](0)).$length())), ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](2), ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](3)], sect_title = $a2[0], sect_id = $a2[1], sect_reftext = $a2[2], $a2;
                }
                ;
                reader.$shift();
              } else {
                self5.$raise("Unrecognized section at " + reader.$cursor_at_prev_line());
              }
              ;
              if ($truthy2(document["$attr?"]("leveloffset"))) {
                sect_level = $rb_plus(sect_level, document.$attr("leveloffset").$to_i());
                if ($truthy2($rb_lt2(sect_level, 0))) {
                  sect_level = 0;
                }
                ;
              }
              ;
              return [sect_id, sect_reftext, sect_title, sect_level, atx];
            }, $Parser_parse_section_title$40.$$arity = -3);
            Opal2.defs(self4, "$parse_header_metadata", $Parser_parse_header_metadata$41 = function $$parse_header_metadata(reader, document, retrieve) {
              var $a2, $$42, $$43, $$44, self5 = this, doc_attrs = nil2, authorcount = nil2, implicit_author_metadata = nil2, $writer = nil2, implicit_author = nil2, implicit_authorinitials = nil2, implicit_authors = nil2, rev_line = nil2, match = nil2, rev_metadata = nil2, component = nil2, author_line = nil2, author_metadata = nil2, authors = nil2, author_idx = nil2, author_key = nil2, explicit = nil2, sparse = nil2, author_override = nil2;
              if (document == null) {
                document = nil2;
              }
              ;
              if (retrieve == null) {
                retrieve = true;
              }
              ;
              doc_attrs = $truthy2($a2 = document) ? document.$attributes() : $a2;
              self5.$process_attribute_entries(reader, document);
              if ($truthy2($truthy2($a2 = reader["$has_more_lines?"]()) ? reader["$next_line_empty?"]()["$!"]() : $a2)) {
                authorcount = (implicit_author_metadata = self5.$process_authors(reader.$read_line())).$delete("authorcount");
                if ($truthy2($truthy2($a2 = document) ? $rb_gt2(($writer = ["authorcount", authorcount], $send2(doc_attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), 0) : $a2)) {
                  $send2(implicit_author_metadata, "each", [], ($$42 = function(key, val) {
                    var self6 = $$42.$$s || this;
                    if (key == null) {
                      key = nil2;
                    }
                    ;
                    if (val == null) {
                      val = nil2;
                    }
                    ;
                    if ($truthy2(doc_attrs["$key?"](key))) {
                      return nil2;
                    } else {
                      $writer = [key, document.$apply_header_subs(val)];
                      $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                  }, $$42.$$s = self5, $$42.$$arity = 2, $$42));
                  implicit_author = doc_attrs["$[]"]("author");
                  implicit_authorinitials = doc_attrs["$[]"]("authorinitials");
                  implicit_authors = doc_attrs["$[]"]("authors");
                }
                ;
                $writer = ["authorcount", authorcount];
                $send2(implicit_author_metadata, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                self5.$process_attribute_entries(reader, document);
                if ($truthy2($truthy2($a2 = reader["$has_more_lines?"]()) ? reader["$next_line_empty?"]()["$!"]() : $a2)) {
                  rev_line = reader.$read_line();
                  if ($truthy2(match = $$2($nesting4, "RevisionInfoLineRx").$match(rev_line))) {
                    rev_metadata = $hash22([], {});
                    if ($truthy2(match["$[]"](1))) {
                      $writer = ["revnumber", match["$[]"](1).$rstrip()];
                      $send2(rev_metadata, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    if ($truthy2((component = match["$[]"](2).$strip())["$empty?"]())) {
                    } else if ($truthy2($truthy2($a2 = match["$[]"](1)["$!"]()) ? component["$start_with?"]("v") : $a2)) {
                      $writer = ["revnumber", component.$slice(1, component.$length())];
                      $send2(rev_metadata, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    } else {
                      $writer = ["revdate", component];
                      $send2(rev_metadata, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    if ($truthy2(match["$[]"](3))) {
                      $writer = ["revremark", match["$[]"](3).$rstrip()];
                      $send2(rev_metadata, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    if ($truthy2($truthy2($a2 = document) ? rev_metadata["$empty?"]()["$!"]() : $a2)) {
                      $send2(rev_metadata, "each", [], ($$43 = function(key, val) {
                        var self6 = $$43.$$s || this;
                        if (key == null) {
                          key = nil2;
                        }
                        ;
                        if (val == null) {
                          val = nil2;
                        }
                        ;
                        if ($truthy2(doc_attrs["$key?"](key))) {
                          return nil2;
                        } else {
                          $writer = [key, document.$apply_header_subs(val)];
                          $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                          return $writer[$rb_minus($writer["length"], 1)];
                        }
                        ;
                      }, $$43.$$s = self5, $$43.$$arity = 2, $$43));
                    }
                    ;
                  } else {
                    reader.$unshift_line(rev_line);
                  }
                  ;
                }
                ;
                self5.$process_attribute_entries(reader, document);
                reader.$skip_blank_lines();
              } else {
                implicit_author_metadata = $hash22([], {});
              }
              ;
              if ($truthy2(document)) {
                if ($truthy2($truthy2($a2 = doc_attrs["$key?"]("author")) ? (author_line = doc_attrs["$[]"]("author"))["$!="](implicit_author) : $a2)) {
                  author_metadata = self5.$process_authors(author_line, true, false);
                  if ($truthy2(doc_attrs["$[]"]("authorinitials")["$!="](implicit_authorinitials))) {
                    author_metadata.$delete("authorinitials");
                  }
                  ;
                } else if ($truthy2($truthy2($a2 = doc_attrs["$key?"]("authors")) ? (author_line = doc_attrs["$[]"]("authors"))["$!="](implicit_authors) : $a2)) {
                  author_metadata = self5.$process_authors(author_line, true);
                } else {
                  $a2 = [[], 1, "author_1", false, false], authors = $a2[0], author_idx = $a2[1], author_key = $a2[2], explicit = $a2[3], sparse = $a2[4], $a2;
                  while ($truthy2(doc_attrs["$key?"](author_key))) {
                    if ((author_override = doc_attrs["$[]"](author_key))["$=="](implicit_author_metadata["$[]"](author_key))) {
                      authors["$<<"](nil2);
                      sparse = true;
                    } else {
                      authors["$<<"](author_override);
                      explicit = true;
                    }
                    ;
                    author_key = "author_" + (author_idx = $rb_plus(author_idx, 1));
                  }
                  ;
                  if ($truthy2(explicit)) {
                    if ($truthy2(sparse)) {
                      $send2(authors, "each_with_index", [], ($$44 = function(author, idx) {
                        var self6 = $$44.$$s || this, $$45, name_idx = nil2;
                        if (author == null) {
                          author = nil2;
                        }
                        ;
                        if (idx == null) {
                          idx = nil2;
                        }
                        ;
                        if ($truthy2(author)) {
                          return nil2;
                        }
                        ;
                        $writer = [idx, $send2([implicit_author_metadata["$[]"]("firstname_" + (name_idx = $rb_plus(idx, 1))), implicit_author_metadata["$[]"]("middlename_" + name_idx), implicit_author_metadata["$[]"]("lastname_" + name_idx)].$compact(), "map", [], ($$45 = function(it) {
                          var self7 = $$45.$$s || this;
                          if (it == null) {
                            it = nil2;
                          }
                          ;
                          return it.$tr(" ", "_");
                        }, $$45.$$s = self6, $$45.$$arity = 1, $$45)).$join(" ")];
                        $send2(authors, "[]=", Opal2.to_a($writer));
                        return $writer[$rb_minus($writer["length"], 1)];
                        ;
                      }, $$44.$$s = self5, $$44.$$arity = 2, $$44));
                    }
                    ;
                    author_metadata = self5.$process_authors(authors, true, false);
                  } else {
                    author_metadata = $hash22(["authorcount"], { "authorcount": 0 });
                  }
                  ;
                }
                ;
                if (author_metadata["$[]"]("authorcount")["$=="](0)) {
                  if ($truthy2(authorcount)) {
                    author_metadata = nil2;
                  } else {
                    $writer = ["authorcount", 0];
                    $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else {
                  doc_attrs.$update(author_metadata);
                  if ($truthy2($truthy2($a2 = doc_attrs["$key?"]("email")["$!"]()) ? doc_attrs["$key?"]("email_1") : $a2)) {
                    $writer = ["email", doc_attrs["$[]"]("email_1")];
                    $send2(doc_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }
                ;
              }
              ;
              if ($truthy2(retrieve)) {
                return implicit_author_metadata.$merge(rev_metadata.$to_h(), author_metadata.$to_h());
              } else {
                return nil2;
              }
              ;
            }, $Parser_parse_header_metadata$41.$$arity = -2);
            Opal2.defs(self4, "$process_authors", $Parser_process_authors$46 = function $$process_authors(author_line, names_only, multiple) {
              var $a2, $$472, self5 = this, author_metadata = nil2, author_idx = nil2, $writer = nil2;
              if (names_only == null) {
                names_only = false;
              }
              ;
              if (multiple == null) {
                multiple = true;
              }
              ;
              author_metadata = $hash22([], {});
              author_idx = 0;
              $send2(function() {
                if ($truthy2($truthy2($a2 = multiple) ? author_line["$include?"](";") : $a2)) {
                  return author_line.$split($$2($nesting4, "AuthorDelimiterRx"));
                } else {
                  return [].concat(Opal2.to_a(author_line));
                }
                ;
                return nil2;
              }(), "each", [], ($$472 = function(author_entry) {
                var self6 = $$472.$$s || this, $$48, $$49, $b2, $$50, key_map = nil2, $writer2 = nil2, segments = nil2, match = nil2, author = nil2, fname = nil2, mname = nil2, lname = nil2;
                if (author_entry == null) {
                  author_entry = nil2;
                }
                ;
                if ($truthy2(author_entry["$empty?"]())) {
                  return nil2;
                }
                ;
                key_map = $hash22([], {});
                if ((author_idx = $rb_plus(author_idx, 1))["$=="](1)) {
                  $send2($$2($nesting4, "AuthorKeys"), "each", [], ($$48 = function(key) {
                    var self7 = $$48.$$s || this, $writer3 = nil2;
                    if (key == null) {
                      key = nil2;
                    }
                    ;
                    $writer3 = [key.$to_sym(), key];
                    $send2(key_map, "[]=", Opal2.to_a($writer3));
                    return $writer3[$rb_minus($writer3["length"], 1)];
                  }, $$48.$$s = self6, $$48.$$arity = 1, $$48));
                } else {
                  $send2($$2($nesting4, "AuthorKeys"), "each", [], ($$49 = function(key) {
                    var self7 = $$49.$$s || this, $writer3 = nil2;
                    if (key == null) {
                      key = nil2;
                    }
                    ;
                    $writer3 = [key.$to_sym(), "" + key + "_" + author_idx];
                    $send2(key_map, "[]=", Opal2.to_a($writer3));
                    return $writer3[$rb_minus($writer3["length"], 1)];
                  }, $$49.$$s = self6, $$49.$$arity = 1, $$49));
                }
                ;
                if ($truthy2(names_only)) {
                  if ($truthy2(author_entry["$include?"]("<"))) {
                    $writer2 = [key_map["$[]"]("author"), author_entry.$tr("_", " ")];
                    $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                    $writer2[$rb_minus($writer2["length"], 1)];
                    ;
                    author_entry = author_entry.$gsub($$2($nesting4, "XmlSanitizeRx"), "");
                  }
                  ;
                  if ((segments = author_entry.$split(nil2, 3)).$size()["$=="](3)) {
                    segments["$<<"](segments.$pop().$squeeze(" "));
                  }
                  ;
                } else if ($truthy2(match = $$2($nesting4, "AuthorInfoLineRx").$match(author_entry))) {
                  (segments = match.$to_a()).$shift();
                }
                ;
                if ($truthy2(segments)) {
                  author = ($writer2 = [key_map["$[]"]("firstname"), fname = segments["$[]"](0).$tr("_", " ")], $send2(author_metadata, "[]=", Opal2.to_a($writer2)), $writer2[$rb_minus($writer2["length"], 1)]);
                  $writer2 = [key_map["$[]"]("authorinitials"), fname.$chr()];
                  $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                  $writer2[$rb_minus($writer2["length"], 1)];
                  ;
                  if ($truthy2(segments["$[]"](1))) {
                    if ($truthy2(segments["$[]"](2))) {
                      $writer2 = [key_map["$[]"]("middlename"), mname = segments["$[]"](1).$tr("_", " ")];
                      $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                      $writer2[$rb_minus($writer2["length"], 1)];
                      ;
                      $writer2 = [key_map["$[]"]("lastname"), lname = segments["$[]"](2).$tr("_", " ")];
                      $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                      $writer2[$rb_minus($writer2["length"], 1)];
                      ;
                      author = $rb_plus($rb_plus($rb_plus($rb_plus(fname, " "), mname), " "), lname);
                      $writer2 = [key_map["$[]"]("authorinitials"), "" + fname.$chr() + mname.$chr() + lname.$chr()];
                      $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                      $writer2[$rb_minus($writer2["length"], 1)];
                      ;
                    } else {
                      $writer2 = [key_map["$[]"]("lastname"), lname = segments["$[]"](1).$tr("_", " ")];
                      $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                      $writer2[$rb_minus($writer2["length"], 1)];
                      ;
                      author = $rb_plus($rb_plus(fname, " "), lname);
                      $writer2 = [key_map["$[]"]("authorinitials"), "" + fname.$chr() + lname.$chr()];
                      $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                      $writer2[$rb_minus($writer2["length"], 1)];
                      ;
                    }
                  }
                  ;
                  $truthy2($b2 = author_metadata["$[]"](key_map["$[]"]("author"))) ? $b2 : ($writer2 = [key_map["$[]"]("author"), author], $send2(author_metadata, "[]=", Opal2.to_a($writer2)), $writer2[$rb_minus($writer2["length"], 1)]);
                  if ($truthy2($truthy2($b2 = names_only) ? $b2 : segments["$[]"](3)["$!"]())) {
                  } else {
                    $writer2 = [key_map["$[]"]("email"), segments["$[]"](3)];
                    $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                    $writer2[$rb_minus($writer2["length"], 1)];
                  }
                  ;
                } else {
                  $writer2 = [key_map["$[]"]("author"), ($writer2 = [key_map["$[]"]("firstname"), fname = author_entry.$squeeze(" ").$strip()], $send2(author_metadata, "[]=", Opal2.to_a($writer2)), $writer2[$rb_minus($writer2["length"], 1)])];
                  $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                  $writer2[$rb_minus($writer2["length"], 1)];
                  ;
                  $writer2 = [key_map["$[]"]("authorinitials"), fname.$chr()];
                  $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                  $writer2[$rb_minus($writer2["length"], 1)];
                  ;
                }
                ;
                if (author_idx["$=="](1)) {
                  $writer2 = ["authors", author_metadata["$[]"](key_map["$[]"]("author"))];
                  $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                  return $writer2[$rb_minus($writer2["length"], 1)];
                } else {
                  if (author_idx["$=="](2)) {
                    $send2($$2($nesting4, "AuthorKeys"), "each", [], ($$50 = function(key) {
                      var self7 = $$50.$$s || this;
                      if (key == null) {
                        key = nil2;
                      }
                      ;
                      if ($truthy2(author_metadata["$key?"](key))) {
                        $writer2 = ["" + key + "_1", author_metadata["$[]"](key)];
                        $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                        return $writer2[$rb_minus($writer2["length"], 1)];
                      } else {
                        return nil2;
                      }
                      ;
                    }, $$50.$$s = self6, $$50.$$arity = 1, $$50));
                  }
                  ;
                  $writer2 = ["authors", "" + author_metadata["$[]"]("authors") + ", " + author_metadata["$[]"](key_map["$[]"]("author"))];
                  $send2(author_metadata, "[]=", Opal2.to_a($writer2));
                  return $writer2[$rb_minus($writer2["length"], 1)];
                  ;
                }
                ;
              }, $$472.$$s = self5, $$472.$$arity = 1, $$472));
              $writer = ["authorcount", author_idx];
              $send2(author_metadata, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return author_metadata;
            }, $Parser_process_authors$46.$$arity = -2);
            Opal2.defs(self4, "$parse_block_metadata_lines", $Parser_parse_block_metadata_lines$51 = function $$parse_block_metadata_lines(reader, document, attributes, options) {
              var $a2, $b2, self5 = this;
              if (attributes == null) {
                attributes = $hash22([], {});
              }
              ;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              while ($truthy2(self5.$parse_block_metadata_line(reader, document, attributes, options))) {
                reader.$shift();
                if ($truthy2($b2 = reader.$skip_blank_lines())) {
                  $b2;
                } else {
                  break;
                }
                ;
              }
              ;
              return attributes;
            }, $Parser_parse_block_metadata_lines$51.$$arity = -3);
            Opal2.defs(self4, "$parse_block_metadata_line", $Parser_parse_block_metadata_line$52 = function $$parse_block_metadata_line(reader, document, attributes, options) {
              var $a2, $b2, self5 = this, next_line = nil2, normal = nil2, $writer = nil2, reftext = nil2, current_style = nil2, ll = nil2;
              if ($gvars["~"] == null)
                $gvars["~"] = nil2;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              if ($truthy2($truthy2($a2 = next_line = reader.$peek_line()) ? function() {
                if ($truthy2(options["$[]"]("text_only"))) {
                  return next_line["$start_with?"]("[", "/");
                } else {
                  return normal = next_line["$start_with?"]("[", ".", "/", ":");
                }
                ;
                return nil2;
              }() : $a2)) {
                if ($truthy2(next_line["$start_with?"]("["))) {
                  if ($truthy2(next_line["$start_with?"]("[["))) {
                    if ($truthy2($truthy2($a2 = next_line["$end_with?"]("]]")) ? $$2($nesting4, "BlockAnchorRx")["$=~"](next_line) : $a2)) {
                      $writer = ["id", ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1)];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                      if ($truthy2(reftext = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2))) {
                        $writer = ["reftext", function() {
                          if ($truthy2(reftext["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                            return document.$sub_attributes(reftext);
                          } else {
                            return reftext;
                          }
                          ;
                          return nil2;
                        }()];
                        $send2(attributes, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                      return true;
                    }
                  } else if ($truthy2($truthy2($a2 = next_line["$end_with?"]("]")) ? $$2($nesting4, "BlockAttributeListRx")["$=~"](next_line) : $a2)) {
                    current_style = attributes["$[]"](1);
                    if ($truthy2(document.$parse_attributes(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1), [], $hash22(["sub_input", "sub_result", "into"], { "sub_input": true, "sub_result": true, "into": attributes }))["$[]"](1))) {
                      $writer = [1, $truthy2($a2 = self5.$parse_style_attribute(attributes, reader)) ? $a2 : current_style];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    return true;
                  }
                } else if ($truthy2($truthy2($a2 = normal) ? next_line["$start_with?"](".") : $a2)) {
                  if ($truthy2($$2($nesting4, "BlockTitleRx")["$=~"](next_line))) {
                    $writer = ["title", ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1)];
                    $send2(attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    return true;
                  }
                } else if ($truthy2($truthy2($a2 = normal["$!"]()) ? $a2 : next_line["$start_with?"]("/"))) {
                  if ($truthy2(next_line["$start_with?"]("//"))) {
                    if (next_line["$=="]("//")) {
                      return true;
                    } else if ($truthy2($truthy2($a2 = normal) ? self5["$uniform?"](next_line, "/", ll = next_line.$length()) : $a2)) {
                      if (ll["$=="](3)) {
                      } else {
                        reader.$read_lines_until($hash22(["terminator", "skip_first_line", "preserve_last_line", "skip_processing", "context"], { "terminator": next_line, "skip_first_line": true, "preserve_last_line": true, "skip_processing": true, "context": "comment" }));
                        return true;
                      }
                    } else if ($truthy2(next_line["$start_with?"]("///"))) {
                    } else {
                      return true;
                    }
                  }
                } else if ($truthy2($truthy2($a2 = $truthy2($b2 = normal) ? next_line["$start_with?"](":") : $b2) ? $$2($nesting4, "AttributeEntryRx")["$=~"](next_line) : $a2)) {
                  self5.$process_attribute_entry(reader, document, attributes, $gvars["~"]);
                  return true;
                }
              }
              ;
              return nil2;
            }, $Parser_parse_block_metadata_line$52.$$arity = -4);
            Opal2.defs(self4, "$process_attribute_entries", $Parser_process_attribute_entries$53 = function $$process_attribute_entries(reader, document, attributes) {
              var $a2, self5 = this;
              if (attributes == null) {
                attributes = nil2;
              }
              ;
              reader.$skip_comment_lines();
              while ($truthy2(self5.$process_attribute_entry(reader, document, attributes))) {
                reader.$shift();
                reader.$skip_comment_lines();
              }
              ;
            }, $Parser_process_attribute_entries$53.$$arity = -3);
            Opal2.defs(self4, "$process_attribute_entry", $Parser_process_attribute_entry$54 = function $$process_attribute_entry(reader, document, attributes, match) {
              var $a2, $b2, $c, self5 = this, value = nil2, con = nil2, next_line = nil2, keep_open = nil2;
              if (attributes == null) {
                attributes = nil2;
              }
              ;
              if (match == null) {
                match = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = match) ? $a2 : match = function() {
                if ($truthy2(reader["$has_more_lines?"]())) {
                  return $$2($nesting4, "AttributeEntryRx").$match(reader.$peek_line());
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }())) {
                if ($truthy2((value = match["$[]"](2))["$nil_or_empty?"]())) {
                  value = "";
                } else if ($truthy2(value["$end_with?"]($$2($nesting4, "LINE_CONTINUATION"), $$2($nesting4, "LINE_CONTINUATION_LEGACY")))) {
                  $a2 = [value.$slice($rb_minus(value.$length(), 2), 2), value.$slice(0, $rb_minus(value.$length(), 2)).$rstrip()], con = $a2[0], value = $a2[1], $a2;
                  while ($truthy2($truthy2($b2 = reader.$advance()) ? (next_line = $truthy2($c = reader.$peek_line()) ? $c : "")["$empty?"]()["$!"]() : $b2)) {
                    next_line = next_line.$lstrip();
                    if ($truthy2(keep_open = next_line["$end_with?"](con))) {
                      next_line = next_line.$slice(0, $rb_minus(next_line.$length(), 2)).$rstrip();
                    }
                    ;
                    value = "" + value + function() {
                      if ($truthy2(value["$end_with?"]($$2($nesting4, "HARD_LINE_BREAK")))) {
                        return $$2($nesting4, "LF");
                      } else {
                        return " ";
                      }
                      ;
                      return nil2;
                    }() + next_line;
                    if ($truthy2(keep_open)) {
                    } else {
                      break;
                    }
                    ;
                  }
                  ;
                }
                ;
                self5.$store_attribute(match["$[]"](1), value, document, attributes);
                return true;
              } else {
                return nil2;
              }
              ;
            }, $Parser_process_attribute_entry$54.$$arity = -3);
            Opal2.defs(self4, "$store_attribute", $Parser_store_attribute$55 = function $$store_attribute(name, value, doc, attrs) {
              var $a2, self5 = this, resolved_value = nil2;
              if (doc == null) {
                doc = nil2;
              }
              ;
              if (attrs == null) {
                attrs = nil2;
              }
              ;
              if ($truthy2(name["$end_with?"]("!"))) {
                name = name.$chop();
                value = nil2;
              } else if ($truthy2(name["$start_with?"]("!"))) {
                name = name.$slice(1, name.$length());
                value = nil2;
              }
              ;
              if ((name = self5.$sanitize_attribute_name(name))["$=="]("numbered")) {
                name = "sectnums";
              } else if (name["$=="]("hardbreaks")) {
                name = "hardbreaks-option";
              } else if (name["$=="]("showtitle")) {
                self5.$store_attribute("notitle", function() {
                  if ($truthy2(value)) {
                    return nil2;
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }(), doc, attrs);
              }
              ;
              if ($truthy2(doc)) {
                if ($truthy2(value)) {
                  if (name["$=="]("leveloffset")) {
                    if ($truthy2(value["$start_with?"]("+"))) {
                      value = $rb_plus(doc.$attr("leveloffset", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s();
                    } else if ($truthy2(value["$start_with?"]("-"))) {
                      value = $rb_minus(doc.$attr("leveloffset", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s();
                    }
                  }
                  ;
                  if ($truthy2(resolved_value = doc.$set_attribute(name, value))) {
                    value = resolved_value;
                    if ($truthy2(attrs)) {
                      $$$2($$2($nesting4, "Document"), "AttributeEntry").$new(name, value).$save_to(attrs);
                    }
                    ;
                  }
                  ;
                } else if ($truthy2($truthy2($a2 = doc.$delete_attribute(name)) ? attrs : $a2)) {
                  $$$2($$2($nesting4, "Document"), "AttributeEntry").$new(name, value).$save_to(attrs);
                }
              } else if ($truthy2(attrs)) {
                $$$2($$2($nesting4, "Document"), "AttributeEntry").$new(name, value).$save_to(attrs);
              }
              ;
              return [name, value];
            }, $Parser_store_attribute$55.$$arity = -3);
            Opal2.defs(self4, "$resolve_list_marker", $Parser_resolve_list_marker$56 = function $$resolve_list_marker(list_type, marker, ordinal, validate, reader) {
              var self5 = this, $case = nil2;
              if (ordinal == null) {
                ordinal = 0;
              }
              ;
              if (validate == null) {
                validate = false;
              }
              ;
              if (reader == null) {
                reader = nil2;
              }
              ;
              return function() {
                $case = list_type;
                if ("ulist"["$==="]($case)) {
                  return marker;
                } else if ("olist"["$==="]($case)) {
                  return self5.$resolve_ordered_list_marker(marker, ordinal, validate, reader)["$[]"](0);
                } else {
                  return "<1>";
                }
              }();
            }, $Parser_resolve_list_marker$56.$$arity = -3);
            Opal2.defs(self4, "$resolve_ordered_list_marker", $Parser_resolve_ordered_list_marker$57 = function $$resolve_ordered_list_marker(marker, ordinal, validate, reader) {
              var $$58, $a2, self5 = this, $case = nil2, style = nil2, expected = nil2, actual = nil2;
              if (ordinal == null) {
                ordinal = 0;
              }
              ;
              if (validate == null) {
                validate = false;
              }
              ;
              if (reader == null) {
                reader = nil2;
              }
              ;
              if ($truthy2(marker["$start_with?"]("."))) {
                return [marker];
              }
              ;
              $case = style = $send2($$2($nesting4, "ORDERED_LIST_STYLES"), "find", [], ($$58 = function(s) {
                var self6 = $$58.$$s || this;
                if (s == null) {
                  s = nil2;
                }
                ;
                return $$2($nesting4, "OrderedListMarkerRxMap")["$[]"](s)["$match?"](marker);
              }, $$58.$$s = self5, $$58.$$arity = 1, $$58));
              if ("arabic"["$==="]($case)) {
                if ($truthy2(validate)) {
                  expected = $rb_plus(ordinal, 1);
                  actual = marker.$to_i();
                }
                ;
                marker = "1.";
              } else if ("loweralpha"["$==="]($case)) {
                if ($truthy2(validate)) {
                  expected = $rb_plus("a"["$[]"](0).$ord(), ordinal).$chr();
                  actual = marker.$chop();
                }
                ;
                marker = "a.";
              } else if ("upperalpha"["$==="]($case)) {
                if ($truthy2(validate)) {
                  expected = $rb_plus("A"["$[]"](0).$ord(), ordinal).$chr();
                  actual = marker.$chop();
                }
                ;
                marker = "A.";
              } else if ("lowerroman"["$==="]($case)) {
                if ($truthy2(validate)) {
                  expected = $$2($nesting4, "Helpers").$int_to_roman($rb_plus(ordinal, 1)).$downcase();
                  actual = marker.$chop();
                }
                ;
                marker = "i)";
              } else if ("upperroman"["$==="]($case)) {
                if ($truthy2(validate)) {
                  expected = $$2($nesting4, "Helpers").$int_to_roman($rb_plus(ordinal, 1));
                  actual = marker.$chop();
                }
                ;
                marker = "I)";
              }
              ;
              if ($truthy2($truthy2($a2 = validate) ? expected["$!="](actual) : $a2)) {
                self5.$logger().$warn(self5.$message_with_context("list item index: expected " + expected + ", got " + actual, $hash22(["source_location"], { "source_location": reader.$cursor() })));
              }
              ;
              return [marker, style];
            }, $Parser_resolve_ordered_list_marker$57.$$arity = -2);
            Opal2.defs(self4, "$is_sibling_list_item?", $Parser_is_sibling_list_item$ques$59 = function(line, list_type, sibling_trait) {
              var $a2, $b2, self5 = this;
              if ($truthy2($$$2("::", "Regexp")["$==="](sibling_trait))) {
                return sibling_trait["$match?"](line);
              } else {
                return $truthy2($a2 = $$2($nesting4, "ListRxMap")["$[]"](list_type)["$=~"](line)) ? sibling_trait["$=="](self5.$resolve_list_marker(list_type, ($b2 = $gvars["~"]) === nil2 ? nil2 : $b2["$[]"](1))) : $a2;
              }
            }, $Parser_is_sibling_list_item$ques$59.$$arity = 3);
            Opal2.defs(self4, "$parse_table", $Parser_parse_table$60 = function $$parse_table(table_reader, parent, attributes) {
              var $a2, $b2, $c, $d, self5 = this, table = nil2, colspecs = nil2, explicit_colspecs = nil2, skipped = nil2, $writer = nil2, implicit_header = nil2, parser_ctx = nil2, format = nil2, loop_idx = nil2, implicit_header_boundary = nil2, line = nil2, beyond_first = nil2, next_cellspec = nil2, m = nil2, pre_match = nil2, post_match = nil2, $case = nil2, cell_text = nil2, $logical_op_recvr_tmp_2 = nil2;
              table = $$2($nesting4, "Table").$new(parent, attributes);
              if ($truthy2($truthy2($a2 = attributes["$key?"]("cols")) ? (colspecs = self5.$parse_colspecs(attributes["$[]"]("cols")))["$empty?"]()["$!"]() : $a2)) {
                table.$create_columns(colspecs);
                explicit_colspecs = true;
              }
              ;
              skipped = $truthy2($a2 = table_reader.$skip_blank_lines()) ? $a2 : 0;
              if ($truthy2(attributes["$[]"]("header-option"))) {
                $writer = [true];
                $send2(table, "has_header_option=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy2(($a2 = skipped["$=="](0)) ? attributes["$[]"]("noheader-option")["$!"]() : skipped["$=="](0))) {
                $writer = ["implicit"];
                $send2(table, "has_header_option=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                implicit_header = true;
              }
              ;
              parser_ctx = $$$2($$2($nesting4, "Table"), "ParserContext").$new(table_reader, table, attributes);
              $a2 = [parser_ctx.$format(), -1, nil2], format = $a2[0], loop_idx = $a2[1], implicit_header_boundary = $a2[2], $a2;
              $a2 = false;
              while ($a2 || $truthy2(line = table_reader.$read_line())) {
                $a2 = false;
                if ($truthy2($truthy2($b2 = beyond_first = $rb_gt2(loop_idx = $rb_plus(loop_idx, 1), 0)) ? line["$empty?"]() : $b2)) {
                  line = nil2;
                  if ($truthy2(implicit_header_boundary)) {
                    implicit_header_boundary = $rb_plus(implicit_header_boundary, 1);
                  }
                  ;
                } else if (format["$=="]("psv")) {
                  if ($truthy2(parser_ctx["$starts_with_delimiter?"](line))) {
                    line = line.$slice(1, line.$length());
                    parser_ctx.$close_open_cell();
                    if ($truthy2(implicit_header_boundary)) {
                      implicit_header_boundary = nil2;
                    }
                    ;
                  } else {
                    $c = self5.$parse_cellspec(line, "start", parser_ctx.$delimiter()), $b2 = Opal2.to_ary($c), next_cellspec = $b2[0] == null ? nil2 : $b2[0], line = $b2[1] == null ? nil2 : $b2[1], $c;
                    if ($truthy2(next_cellspec)) {
                      parser_ctx.$close_open_cell(next_cellspec);
                      if ($truthy2(implicit_header_boundary)) {
                        implicit_header_boundary = nil2;
                      }
                      ;
                    } else if ($truthy2($truthy2($b2 = implicit_header_boundary) ? implicit_header_boundary["$=="](loop_idx) : $b2)) {
                      $writer = [implicit_header = implicit_header_boundary = nil2];
                      $send2(table, "has_header_option=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                  }
                }
                ;
                if ($truthy2(beyond_first)) {
                } else {
                  table_reader.$mark();
                  if ($truthy2(implicit_header)) {
                    if ($truthy2($truthy2($b2 = table_reader["$has_more_lines?"]()) ? table_reader.$peek_line()["$empty?"]() : $b2)) {
                      implicit_header_boundary = 1;
                    } else {
                      $writer = [implicit_header = nil2];
                      $send2(table, "has_header_option=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                  }
                  ;
                }
                ;
                $b2 = false;
                while ($b2 || $truthy2(true)) {
                  $b2 = false;
                  if ($truthy2($truthy2($c = line) ? m = parser_ctx.$match_delimiter(line) : $c)) {
                    $c = [m.$pre_match(), m.$post_match()], pre_match = $c[0], post_match = $c[1], $c;
                    $case = format;
                    if ("csv"["$==="]($case)) {
                      if ($truthy2(parser_ctx["$buffer_has_unclosed_quotes?"](pre_match))) {
                        parser_ctx.$skip_past_delimiter(pre_match);
                        if ($truthy2((line = post_match)["$empty?"]())) {
                          break;
                        }
                        ;
                        $b2 = true;
                        continue;
                        ;
                      }
                      ;
                      $writer = ["" + parser_ctx.$buffer() + pre_match];
                      $send2(parser_ctx, "buffer=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                    } else if ("dsv"["$==="]($case)) {
                      if ($truthy2(pre_match["$end_with?"]("\\"))) {
                        parser_ctx.$skip_past_escaped_delimiter(pre_match);
                        if ($truthy2((line = post_match)["$empty?"]())) {
                          $writer = ["" + parser_ctx.$buffer() + $$2($nesting4, "LF")];
                          $send2(parser_ctx, "buffer=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                          ;
                          parser_ctx.$keep_cell_open();
                          break;
                          ;
                        }
                        ;
                        $b2 = true;
                        continue;
                        ;
                      }
                      ;
                      $writer = ["" + parser_ctx.$buffer() + pre_match];
                      $send2(parser_ctx, "buffer=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                    } else {
                      if ($truthy2(pre_match["$end_with?"]("\\"))) {
                        parser_ctx.$skip_past_escaped_delimiter(pre_match);
                        if ($truthy2((line = post_match)["$empty?"]())) {
                          $writer = ["" + parser_ctx.$buffer() + $$2($nesting4, "LF")];
                          $send2(parser_ctx, "buffer=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                          ;
                          parser_ctx.$keep_cell_open();
                          break;
                          ;
                        }
                        ;
                        $b2 = true;
                        continue;
                        ;
                      }
                      ;
                      $d = self5.$parse_cellspec(pre_match), $c = Opal2.to_ary($d), next_cellspec = $c[0] == null ? nil2 : $c[0], cell_text = $c[1] == null ? nil2 : $c[1], $d;
                      parser_ctx.$push_cellspec(next_cellspec);
                      $writer = ["" + parser_ctx.$buffer() + cell_text];
                      $send2(parser_ctx, "buffer=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      ;
                    }
                    ;
                    if ($truthy2((line = post_match)["$empty?"]())) {
                      line = nil2;
                    }
                    ;
                    parser_ctx.$close_cell();
                  } else {
                    $writer = ["" + parser_ctx.$buffer() + line + $$2($nesting4, "LF")];
                    $send2(parser_ctx, "buffer=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    $case = format;
                    if ("csv"["$==="]($case)) {
                      if ($truthy2(parser_ctx["$buffer_has_unclosed_quotes?"]())) {
                        if ($truthy2($truthy2($c = implicit_header_boundary) ? loop_idx["$=="](0) : $c)) {
                          $writer = [implicit_header = implicit_header_boundary = nil2];
                          $send2(table, "has_header_option=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        }
                        ;
                        parser_ctx.$keep_cell_open();
                      } else {
                        parser_ctx.$close_cell(true);
                      }
                    } else if ("dsv"["$==="]($case)) {
                      parser_ctx.$close_cell(true);
                    } else {
                      parser_ctx.$keep_cell_open();
                    }
                    ;
                    break;
                    ;
                  }
                }
                ;
                if ($truthy2(parser_ctx["$cell_open?"]())) {
                  if ($truthy2(table_reader["$has_more_lines?"]())) {
                  } else {
                    parser_ctx.$close_cell(true);
                  }
                } else {
                  if ($truthy2($b2 = table_reader.$skip_blank_lines())) {
                    $b2;
                  } else {
                    break;
                  }
                }
                ;
              }
              ;
              if ($truthy2($truthy2($a2 = ($logical_op_recvr_tmp_2 = table.$attributes(), $truthy2($b2 = $logical_op_recvr_tmp_2["$[]"]("colcount")) ? $b2 : ($writer = ["colcount", table.$columns().$size()], $send2($logical_op_recvr_tmp_2, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))["$=="](0)) ? $a2 : explicit_colspecs)) {
              } else {
                table.$assign_column_widths();
              }
              ;
              if ($truthy2(implicit_header)) {
                $writer = [true];
                $send2(table, "has_header_option=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              table.$partition_header_footer(attributes);
              return table;
            }, $Parser_parse_table$60.$$arity = 3);
            Opal2.defs(self4, "$parse_colspecs", $Parser_parse_colspecs$61 = function $$parse_colspecs(records) {
              var $$62, $$63, self5 = this, specs = nil2;
              if ($truthy2(records["$include?"](" "))) {
                records = records.$delete(" ");
              }
              ;
              if (records["$=="](records.$to_i().$to_s())) {
                return $send2($$$2("::", "Array"), "new", [records.$to_i()], ($$62 = function() {
                  var self6 = $$62.$$s || this;
                  return $hash22(["width"], { "width": 1 });
                }, $$62.$$s = self5, $$62.$$arity = 0, $$62));
              }
              ;
              specs = [];
              $send2(function() {
                if ($truthy2(records["$include?"](","))) {
                  return records.$split(",", -1);
                } else {
                  return records.$split(";", -1);
                }
                ;
                return nil2;
              }(), "each", [], ($$63 = function(record) {
                var self6 = $$63.$$s || this, $a2, $b2, $$64, m = nil2, spec = nil2, colspec = nil2, rowspec = nil2, $writer = nil2, width = nil2;
                if (record == null) {
                  record = nil2;
                }
                ;
                if ($truthy2(record["$empty?"]())) {
                  return specs["$<<"]($hash22(["width"], { "width": 1 }));
                } else if ($truthy2(m = $$2($nesting4, "ColumnSpecRx").$match(record))) {
                  spec = $hash22([], {});
                  if ($truthy2(m["$[]"](2))) {
                    $b2 = m["$[]"](2).$split("."), $a2 = Opal2.to_ary($b2), colspec = $a2[0] == null ? nil2 : $a2[0], rowspec = $a2[1] == null ? nil2 : $a2[1], $b2;
                    if ($truthy2($truthy2($a2 = colspec["$nil_or_empty?"]()["$!"]()) ? $$2($nesting4, "TableCellHorzAlignments")["$key?"](colspec) : $a2)) {
                      $writer = ["halign", $$2($nesting4, "TableCellHorzAlignments")["$[]"](colspec)];
                      $send2(spec, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    if ($truthy2($truthy2($a2 = rowspec["$nil_or_empty?"]()["$!"]()) ? $$2($nesting4, "TableCellVertAlignments")["$key?"](rowspec) : $a2)) {
                      $writer = ["valign", $$2($nesting4, "TableCellVertAlignments")["$[]"](rowspec)];
                      $send2(spec, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                  }
                  ;
                  if ($truthy2(width = m["$[]"](3))) {
                    $writer = ["width", function() {
                      if (width["$=="]("~")) {
                        return -1;
                      } else {
                        return width.$to_i();
                      }
                      ;
                      return nil2;
                    }()];
                    $send2(spec, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    $writer = ["width", 1];
                    $send2(spec, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2($truthy2($a2 = m["$[]"](4)) ? $$2($nesting4, "TableCellStyles")["$key?"](m["$[]"](4)) : $a2)) {
                    $writer = ["style", $$2($nesting4, "TableCellStyles")["$[]"](m["$[]"](4))];
                    $send2(spec, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(m["$[]"](1))) {
                    return $send2(1, "upto", [m["$[]"](1).$to_i()], ($$64 = function() {
                      var self7 = $$64.$$s || this;
                      return specs["$<<"](spec.$merge());
                    }, $$64.$$s = self6, $$64.$$arity = 0, $$64));
                  } else {
                    return specs["$<<"](spec);
                  }
                  ;
                } else {
                  return nil2;
                }
                ;
              }, $$63.$$s = self5, $$63.$$arity = 1, $$63));
              return specs;
            }, $Parser_parse_colspecs$61.$$arity = 1);
            Opal2.defs(self4, "$parse_cellspec", $Parser_parse_cellspec$65 = function $$parse_cellspec(line, pos, delimiter) {
              var $a2, $b2, self5 = this, m = nil2, rest = nil2, spec_part = nil2, _ = nil2, spec = nil2, colspec = nil2, rowspec = nil2, $case = nil2, $writer = nil2;
              if (pos == null) {
                pos = "end";
              }
              ;
              if (delimiter == null) {
                delimiter = nil2;
              }
              ;
              $a2 = [nil2, ""], m = $a2[0], rest = $a2[1], $a2;
              if (pos["$=="]("start")) {
                if ($truthy2(line["$include?"](delimiter))) {
                  $b2 = line.$partition(delimiter), $a2 = Opal2.to_ary($b2), spec_part = $a2[0] == null ? nil2 : $a2[0], _ = $a2[1] == null ? nil2 : $a2[1], rest = $a2[2] == null ? nil2 : $a2[2], $b2;
                  if ($truthy2(m = $$2($nesting4, "CellSpecStartRx").$match(spec_part))) {
                    if ($truthy2(m["$[]"](0)["$empty?"]())) {
                      return [$hash22([], {}), rest];
                    }
                  } else {
                    return [nil2, line];
                  }
                  ;
                } else {
                  return [nil2, line];
                }
              } else if ($truthy2(m = $$2($nesting4, "CellSpecEndRx").$match(line))) {
                if ($truthy2(m["$[]"](0).$lstrip()["$empty?"]())) {
                  return [$hash22([], {}), line.$rstrip()];
                }
                ;
                rest = m.$pre_match();
              } else {
                return [$hash22([], {}), line];
              }
              ;
              spec = $hash22([], {});
              if ($truthy2(m["$[]"](1))) {
                $b2 = m["$[]"](1).$split("."), $a2 = Opal2.to_ary($b2), colspec = $a2[0] == null ? nil2 : $a2[0], rowspec = $a2[1] == null ? nil2 : $a2[1], $b2;
                colspec = function() {
                  if ($truthy2(colspec["$nil_or_empty?"]())) {
                    return 1;
                  } else {
                    return colspec.$to_i();
                  }
                  ;
                  return nil2;
                }();
                rowspec = function() {
                  if ($truthy2(rowspec["$nil_or_empty?"]())) {
                    return 1;
                  } else {
                    return rowspec.$to_i();
                  }
                  ;
                  return nil2;
                }();
                $case = m["$[]"](2);
                if ("+"["$==="]($case)) {
                  if (colspec["$=="](1)) {
                  } else {
                    $writer = ["colspan", colspec];
                    $send2(spec, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if (rowspec["$=="](1)) {
                  } else {
                    $writer = ["rowspan", rowspec];
                    $send2(spec, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                } else if ("*"["$==="]($case)) {
                  if (colspec["$=="](1)) {
                  } else {
                    $writer = ["repeatcol", colspec];
                    $send2(spec, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                }
                ;
              }
              ;
              if ($truthy2(m["$[]"](3))) {
                $b2 = m["$[]"](3).$split("."), $a2 = Opal2.to_ary($b2), colspec = $a2[0] == null ? nil2 : $a2[0], rowspec = $a2[1] == null ? nil2 : $a2[1], $b2;
                if ($truthy2($truthy2($a2 = colspec["$nil_or_empty?"]()["$!"]()) ? $$2($nesting4, "TableCellHorzAlignments")["$key?"](colspec) : $a2)) {
                  $writer = ["halign", $$2($nesting4, "TableCellHorzAlignments")["$[]"](colspec)];
                  $send2(spec, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ($truthy2($truthy2($a2 = rowspec["$nil_or_empty?"]()["$!"]()) ? $$2($nesting4, "TableCellVertAlignments")["$key?"](rowspec) : $a2)) {
                  $writer = ["valign", $$2($nesting4, "TableCellVertAlignments")["$[]"](rowspec)];
                  $send2(spec, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
              }
              ;
              if ($truthy2($truthy2($a2 = m["$[]"](4)) ? $$2($nesting4, "TableCellStyles")["$key?"](m["$[]"](4)) : $a2)) {
                $writer = ["style", $$2($nesting4, "TableCellStyles")["$[]"](m["$[]"](4))];
                $send2(spec, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              return [spec, rest];
            }, $Parser_parse_cellspec$65.$$arity = -2);
            Opal2.defs(self4, "$parse_style_attribute", $Parser_parse_style_attribute$66 = function $$parse_style_attribute(attributes, reader) {
              var $a2, $b2, $$67, $$68, self5 = this, raw_style = nil2, name = nil2, accum = nil2, parsed_attrs = nil2, parsed_style = nil2, $writer = nil2, existing_role = nil2;
              if (reader == null) {
                reader = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = raw_style = attributes["$[]"](1)) ? raw_style["$include?"](" ")["$!"]() : $b2) ? $$2($nesting4, "Compliance").$shorthand_property_syntax() : $a2)) {
                name = nil2;
                accum = "";
                parsed_attrs = $hash22([], {});
                $send2(raw_style, "each_char", [], ($$67 = function(c) {
                  var self6 = $$67.$$s || this, $case = nil2;
                  if (c == null) {
                    c = nil2;
                  }
                  ;
                  return function() {
                    $case = c;
                    if ("."["$==="]($case)) {
                      self6.$yield_buffered_attribute(parsed_attrs, name, accum, reader);
                      accum = "";
                      return name = "role";
                    } else if ("#"["$==="]($case)) {
                      self6.$yield_buffered_attribute(parsed_attrs, name, accum, reader);
                      accum = "";
                      return name = "id";
                    } else if ("%"["$==="]($case)) {
                      self6.$yield_buffered_attribute(parsed_attrs, name, accum, reader);
                      accum = "";
                      return name = "option";
                    } else {
                      return accum = $rb_plus(accum, c);
                    }
                  }();
                }, $$67.$$s = self5, $$67.$$arity = 1, $$67));
                if ($truthy2(name)) {
                  self5.$yield_buffered_attribute(parsed_attrs, name, accum, reader);
                  if ($truthy2(parsed_style = parsed_attrs["$[]"]("style"))) {
                    $writer = ["style", parsed_style];
                    $send2(attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(parsed_attrs["$key?"]("id"))) {
                    $writer = ["id", parsed_attrs["$[]"]("id")];
                    $send2(attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(parsed_attrs["$key?"]("role"))) {
                    $writer = ["role", function() {
                      if ($truthy2((existing_role = attributes["$[]"]("role"))["$nil_or_empty?"]())) {
                        return parsed_attrs["$[]"]("role").$join(" ");
                      } else {
                        return "" + existing_role + " " + parsed_attrs["$[]"]("role").$join(" ");
                      }
                      ;
                      return nil2;
                    }()];
                    $send2(attributes, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  if ($truthy2(parsed_attrs["$key?"]("option"))) {
                    $send2(parsed_attrs["$[]"]("option"), "each", [], ($$68 = function(opt) {
                      var self6 = $$68.$$s || this;
                      if (opt == null) {
                        opt = nil2;
                      }
                      ;
                      $writer = ["" + opt + "-option", ""];
                      $send2(attributes, "[]=", Opal2.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];
                    }, $$68.$$s = self5, $$68.$$arity = 1, $$68));
                  }
                  ;
                  return parsed_style;
                } else {
                  $writer = ["style", raw_style];
                  $send2(attributes, "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                }
                ;
              } else {
                $writer = ["style", raw_style];
                $send2(attributes, "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }
              ;
            }, $Parser_parse_style_attribute$66.$$arity = -2);
            Opal2.defs(self4, "$yield_buffered_attribute", $Parser_yield_buffered_attribute$69 = function $$yield_buffered_attribute(attrs, name, value, reader) {
              var $a2, self5 = this, $writer = nil2;
              if ($truthy2(name)) {
                if ($truthy2(value["$empty?"]())) {
                  if ($truthy2(reader)) {
                    self5.$logger().$warn(self5.$message_with_context("invalid empty " + name + " detected in style attribute", $hash22(["source_location"], { "source_location": reader.$cursor_at_prev_line() })));
                  } else {
                    self5.$logger().$warn("invalid empty " + name + " detected in style attribute");
                  }
                } else if (name["$=="]("id")) {
                  if ($truthy2(attrs["$key?"]("id"))) {
                    if ($truthy2(reader)) {
                      self5.$logger().$warn(self5.$message_with_context("multiple ids detected in style attribute", $hash22(["source_location"], { "source_location": reader.$cursor_at_prev_line() })));
                    } else {
                      self5.$logger().$warn("multiple ids detected in style attribute");
                    }
                  }
                  ;
                  $writer = [name, value];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else {
                  ($truthy2($a2 = attrs["$[]"](name)) ? $a2 : ($writer = [name, []], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))["$<<"](value);
                }
              } else if ($truthy2(value["$empty?"]())) {
              } else {
                $writer = ["style", value];
                $send2(attrs, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              return nil2;
            }, $Parser_yield_buffered_attribute$69.$$arity = 4);
            Opal2.defs(self4, "$adjust_indentation!", $Parser_adjust_indentation$excl$70 = function(lines, indent_size, tab_size) {
              var $a2, $$71, $$72, $$75, $$76, $$77, $$78, self5 = this, full_tab_space = nil2, block_indent = nil2, new_block_indent = nil2;
              if (indent_size == null) {
                indent_size = 0;
              }
              ;
              if (tab_size == null) {
                tab_size = 0;
              }
              ;
              if ($truthy2(lines["$empty?"]())) {
                return nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = $rb_gt2(tab_size, 0)) ? $send2(lines, "any?", [], ($$71 = function(line) {
                var self6 = $$71.$$s || this;
                if (line == null) {
                  line = nil2;
                }
                ;
                return line["$include?"]($$2($nesting4, "TAB"));
              }, $$71.$$s = self5, $$71.$$arity = 1, $$71)) : $a2)) {
                full_tab_space = $rb_times(" ", tab_size);
                (function() {
                  var $brk = Opal2.new_brk();
                  try {
                    return $send2(lines, "map!", [], ($$72 = function(line) {
                      var self6 = $$72.$$s || this, $b2, $$73, $$74, tab_idx = nil2, leading_tabs = nil2, spaces_added = nil2, idx = nil2, result2 = nil2;
                      if (line == null) {
                        line = nil2;
                      }
                      ;
                      if ($truthy2($truthy2($b2 = line["$empty?"]()) ? $b2 : (tab_idx = line.$index($$2($nesting4, "TAB")))["$nil?"]())) {
                        return line;
                      } else {
                        if (tab_idx["$=="](0)) {
                          leading_tabs = 0;
                          (function() {
                            var $brk2 = Opal2.new_brk();
                            try {
                              return $send2(line, "each_byte", [], ($$73 = function(b) {
                                var self7 = $$73.$$s || this;
                                if (b == null) {
                                  b = nil2;
                                }
                                ;
                                if (b["$=="](9)) {
                                } else {
                                  Opal2.brk(nil2, $brk2);
                                }
                                ;
                                return leading_tabs = $rb_plus(leading_tabs, 1);
                              }, $$73.$$s = self6, $$73.$$brk = $brk2, $$73.$$arity = 1, $$73));
                            } catch (err) {
                              if (err === $brk2) {
                                return err.$v;
                              } else {
                                throw err;
                              }
                            }
                          })();
                          line = "" + $rb_times(full_tab_space, leading_tabs) + line.$slice(leading_tabs, line.$length());
                          if ($truthy2(line["$include?"]($$2($nesting4, "TAB")))) {
                          } else {
                            return line;
                          }
                          ;
                        }
                        ;
                        spaces_added = 0;
                        idx = 0;
                        result2 = "";
                        $send2(line, "each_char", [], ($$74 = function(c) {
                          var self7 = $$74.$$s || this, offset = nil2, spaces = nil2;
                          if (c == null) {
                            c = nil2;
                          }
                          ;
                          if (c["$=="]($$2($nesting4, "TAB"))) {
                            if ((offset = $rb_plus(idx, spaces_added))["$%"](tab_size)["$=="](0)) {
                              spaces_added = $rb_plus(spaces_added, $rb_minus(tab_size, 1));
                              result2 = $rb_plus(result2, full_tab_space);
                            } else {
                              if ((spaces = $rb_minus(tab_size, offset["$%"](tab_size)))["$=="](1)) {
                              } else {
                                spaces_added = $rb_plus(spaces_added, $rb_minus(spaces, 1));
                              }
                              ;
                              result2 = $rb_plus(result2, $rb_times(" ", spaces));
                            }
                          } else {
                            result2 = $rb_plus(result2, c);
                          }
                          ;
                          return idx = $rb_plus(idx, 1);
                        }, $$74.$$s = self6, $$74.$$arity = 1, $$74));
                        return result2;
                      }
                      ;
                    }, $$72.$$s = self5, $$72.$$brk = $brk, $$72.$$arity = 1, $$72));
                  } catch (err) {
                    if (err === $brk) {
                      return err.$v;
                    } else {
                      throw err;
                    }
                  }
                })();
              }
              ;
              if ($truthy2($rb_lt2(indent_size, 0))) {
                return nil2;
              }
              ;
              block_indent = nil2;
              (function() {
                var $brk = Opal2.new_brk();
                try {
                  return $send2(lines, "each", [], ($$75 = function(line) {
                    var self6 = $$75.$$s || this, $b2, line_indent = nil2;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    if ($truthy2(line["$empty?"]())) {
                      return nil2;
                    }
                    ;
                    if ((line_indent = $rb_minus(line.$length(), line.$lstrip().$length()))["$=="](0)) {
                      block_indent = nil2;
                      Opal2.brk(nil2, $brk);
                    }
                    ;
                    if ($truthy2($truthy2($b2 = block_indent) ? $rb_lt2(block_indent, line_indent) : $b2)) {
                      return nil2;
                    } else {
                      return block_indent = line_indent;
                    }
                    ;
                  }, $$75.$$s = self5, $$75.$$brk = $brk, $$75.$$arity = 1, $$75));
                } catch (err) {
                  if (err === $brk) {
                    return err.$v;
                  } else {
                    throw err;
                  }
                }
              })();
              if (indent_size["$=="](0)) {
                if ($truthy2(block_indent)) {
                  $send2(lines, "map!", [], ($$76 = function(line) {
                    var self6 = $$76.$$s || this;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    if ($truthy2(line["$empty?"]())) {
                      return line;
                    } else {
                      return line.$slice(block_indent, line.$length());
                    }
                    ;
                  }, $$76.$$s = self5, $$76.$$arity = 1, $$76));
                }
              } else {
                new_block_indent = $rb_times(" ", indent_size);
                if ($truthy2(block_indent)) {
                  $send2(lines, "map!", [], ($$77 = function(line) {
                    var self6 = $$77.$$s || this;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    if ($truthy2(line["$empty?"]())) {
                      return line;
                    } else {
                      return $rb_plus(new_block_indent, line.$slice(block_indent, line.$length()));
                    }
                    ;
                  }, $$77.$$s = self5, $$77.$$arity = 1, $$77));
                } else {
                  $send2(lines, "map!", [], ($$78 = function(line) {
                    var self6 = $$78.$$s || this;
                    if (line == null) {
                      line = nil2;
                    }
                    ;
                    if ($truthy2(line["$empty?"]())) {
                      return line;
                    } else {
                      return $rb_plus(new_block_indent, line);
                    }
                    ;
                  }, $$78.$$s = self5, $$78.$$arity = 1, $$78));
                }
                ;
              }
              ;
              return nil2;
            }, $Parser_adjust_indentation$excl$70.$$arity = -2);
            Opal2.defs(self4, "$uniform?", $Parser_uniform$ques$79 = function(str, chr, len) {
              var self5 = this;
              return str.$count(chr)["$=="](len);
            }, $Parser_uniform$ques$79.$$arity = 3);
            return (Opal2.defs(self4, "$sanitize_attribute_name", $Parser_sanitize_attribute_name$80 = function $$sanitize_attribute_name(name) {
              var self5 = this;
              return name.$gsub($$2($nesting4, "InvalidAttributeNameCharsRx"), "").$downcase();
            }, $Parser_sanitize_attribute_name$80.$$arity = 1), nil2) && "sanitize_attribute_name";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/path_resolver"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2, $send2 = Opal2.send, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$include", "$attr_accessor", "$root?", "$posixify", "$expand_path", "$pwd", "$start_with?", "$==", "$match?", "$absolute_path?", "$+", "$length", "$descends_from?", "$slice", "$to_s", "$relative_path_from", "$new", "$include?", "$tr", "$partition_path", "$each", "$pop", "$<<", "$join_path", "$[]", "$web_root?", "$unc?", "$index", "$split", "$delete", "$[]=", "$-", "$join", "$raise", "$!", "$fetch", "$warn", "$logger", "$empty?", "$nil_or_empty?", "$chomp", "$!=", "$>", "$size", "$extract_uri_prefix", "$end_with?", "$gsub", "$private", "$=~"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "PathResolver");
            var $nesting4 = [self4].concat($parent_nesting3), $PathResolver_initialize$1, $PathResolver_absolute_path$ques$2, $a2, $PathResolver_root$ques$3, $PathResolver_unc$ques$4, $PathResolver_web_root$ques$5, $PathResolver_descends_from$ques$6, $PathResolver_relative_path$7, $PathResolver_posixify$8, $PathResolver_expand_path$9, $PathResolver_partition_path$11, $PathResolver_join_path$12, $PathResolver_system_path$13, $PathResolver_web_path$16, $PathResolver_extract_uri_prefix$18;
            self4.$$prototype.file_separator = self4.$$prototype._partition_path_web = self4.$$prototype._partition_path_sys = self4.$$prototype.working_dir = nil2;
            self4.$include($$2($nesting4, "Logging"));
            Opal2.const_set($nesting4[0], "DOT", ".");
            Opal2.const_set($nesting4[0], "DOT_DOT", "..");
            Opal2.const_set($nesting4[0], "DOT_SLASH", "./");
            Opal2.const_set($nesting4[0], "SLASH", "/");
            Opal2.const_set($nesting4[0], "BACKSLASH", "\\");
            Opal2.const_set($nesting4[0], "DOUBLE_SLASH", "//");
            Opal2.const_set($nesting4[0], "WindowsRootRx", /^(?:[a-zA-Z]:)?[\\\/]/);
            self4.$attr_accessor("file_separator");
            self4.$attr_accessor("working_dir");
            Opal2.def(self4, "$initialize", $PathResolver_initialize$1 = function $$initialize(file_separator, working_dir) {
              var $a3, $b2, self5 = this;
              if (file_separator == null) {
                file_separator = nil2;
              }
              ;
              if (working_dir == null) {
                working_dir = nil2;
              }
              ;
              self5.file_separator = $truthy2($a3 = $truthy2($b2 = file_separator) ? $b2 : $$$2($$$2("::", "File"), "ALT_SEPARATOR")) ? $a3 : $$$2($$$2("::", "File"), "SEPARATOR");
              self5.working_dir = function() {
                if ($truthy2(working_dir)) {
                  if ($truthy2(self5["$root?"](working_dir))) {
                    return self5.$posixify(working_dir);
                  } else {
                    return $$$2("::", "File").$expand_path(working_dir);
                  }
                  ;
                } else {
                  return $$$2("::", "Dir").$pwd();
                }
                ;
                return nil2;
              }();
              self5._partition_path_sys = $hash22([], {});
              return self5._partition_path_web = $hash22([], {});
            }, $PathResolver_initialize$1.$$arity = -1);
            Opal2.def(self4, "$absolute_path?", $PathResolver_absolute_path$ques$2 = function(path) {
              var $a3, $b2, self5 = this;
              return $truthy2($a3 = path["$start_with?"]($$2($nesting4, "SLASH"))) ? $a3 : ($b2 = self5.file_separator["$=="]($$2($nesting4, "BACKSLASH"))) ? $$2($nesting4, "WindowsRootRx")["$match?"](path) : self5.file_separator["$=="]($$2($nesting4, "BACKSLASH"));
            }, $PathResolver_absolute_path$ques$2.$$arity = 1);
            if ($truthy2(($a2 = $$2($nesting4, "RUBY_ENGINE")["$=="]("opal")) ? $$$2("::", "JAVASCRIPT_IO_MODULE")["$=="]("xmlhttprequest") : $$2($nesting4, "RUBY_ENGINE")["$=="]("opal"))) {
              Opal2.def(self4, "$root?", $PathResolver_root$ques$3 = function(path) {
                var $a3, self5 = this;
                return $truthy2($a3 = self5["$absolute_path?"](path)) ? $a3 : path["$start_with?"]("file://", "http://", "https://");
              }, $PathResolver_root$ques$3.$$arity = 1);
            } else {
              Opal2.alias(self4, "root?", "absolute_path?");
            }
            ;
            Opal2.def(self4, "$unc?", $PathResolver_unc$ques$4 = function(path) {
              var self5 = this;
              return path["$start_with?"]($$2($nesting4, "DOUBLE_SLASH"));
            }, $PathResolver_unc$ques$4.$$arity = 1);
            Opal2.def(self4, "$web_root?", $PathResolver_web_root$ques$5 = function(path) {
              var self5 = this;
              return path["$start_with?"]($$2($nesting4, "SLASH"));
            }, $PathResolver_web_root$ques$5.$$arity = 1);
            Opal2.def(self4, "$descends_from?", $PathResolver_descends_from$ques$6 = function(path, base) {
              var $a3, self5 = this;
              if (base["$=="](path)) {
                return 0;
              } else if (base["$=="]($$2($nesting4, "SLASH"))) {
                return $truthy2($a3 = path["$start_with?"]($$2($nesting4, "SLASH"))) ? 1 : $a3;
              } else {
                return $truthy2($a3 = path["$start_with?"]($rb_plus(base, $$2($nesting4, "SLASH")))) ? $rb_plus(base.$length(), 1) : $a3;
              }
            }, $PathResolver_descends_from$ques$6.$$arity = 2);
            Opal2.def(self4, "$relative_path", $PathResolver_relative_path$7 = function $$relative_path(path, base) {
              var self5 = this, offset = nil2;
              if ($truthy2(self5["$root?"](path))) {
                if ($truthy2(offset = self5["$descends_from?"](path, base))) {
                  return path.$slice(offset, path.$length());
                } else {
                  try {
                    return $$2($nesting4, "Pathname").$new(path).$relative_path_from($$2($nesting4, "Pathname").$new(base)).$to_s();
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        return path;
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                  ;
                }
              } else {
                return path;
              }
            }, $PathResolver_relative_path$7.$$arity = 2);
            Opal2.def(self4, "$posixify", $PathResolver_posixify$8 = function $$posixify(path) {
              var $a3, self5 = this;
              if ($truthy2(path)) {
                if ($truthy2(($a3 = self5.file_separator["$=="]($$2($nesting4, "BACKSLASH"))) ? path["$include?"]($$2($nesting4, "BACKSLASH")) : self5.file_separator["$=="]($$2($nesting4, "BACKSLASH")))) {
                  return path.$tr($$2($nesting4, "BACKSLASH"), $$2($nesting4, "SLASH"));
                } else {
                  return path;
                }
              } else {
                return "";
              }
            }, $PathResolver_posixify$8.$$arity = 1);
            Opal2.alias(self4, "posixfy", "posixify");
            Opal2.def(self4, "$expand_path", $PathResolver_expand_path$9 = function $$expand_path(path) {
              var $a3, $b2, $$10, self5 = this, path_segments = nil2, path_root = nil2, resolved_segments = nil2;
              $b2 = self5.$partition_path(path), $a3 = Opal2.to_ary($b2), path_segments = $a3[0] == null ? nil2 : $a3[0], path_root = $a3[1] == null ? nil2 : $a3[1], $b2;
              if ($truthy2(path["$include?"]($$2($nesting4, "DOT_DOT")))) {
                resolved_segments = [];
                $send2(path_segments, "each", [], ($$10 = function(segment) {
                  var self6 = $$10.$$s || this;
                  if (segment == null) {
                    segment = nil2;
                  }
                  ;
                  if (segment["$=="]($$2($nesting4, "DOT_DOT"))) {
                    return resolved_segments.$pop();
                  } else {
                    return resolved_segments["$<<"](segment);
                  }
                  ;
                }, $$10.$$s = self5, $$10.$$arity = 1, $$10));
                return self5.$join_path(resolved_segments, path_root);
              } else {
                return self5.$join_path(path_segments, path_root);
              }
              ;
            }, $PathResolver_expand_path$9.$$arity = 1);
            Opal2.def(self4, "$partition_path", $PathResolver_partition_path$11 = function $$partition_path(path, web) {
              var self5 = this, result2 = nil2, cache = nil2, posix_path = nil2, root = nil2, path_segments = nil2, $writer = nil2;
              if (web == null) {
                web = nil2;
              }
              ;
              if ($truthy2(result2 = (cache = function() {
                if ($truthy2(web)) {
                  return self5._partition_path_web;
                } else {
                  return self5._partition_path_sys;
                }
                ;
                return nil2;
              }())["$[]"](path))) {
                return result2;
              }
              ;
              posix_path = self5.$posixify(path);
              if ($truthy2(web)) {
                if ($truthy2(self5["$web_root?"](posix_path))) {
                  root = $$2($nesting4, "SLASH");
                } else if ($truthy2(posix_path["$start_with?"]($$2($nesting4, "DOT_SLASH")))) {
                  root = $$2($nesting4, "DOT_SLASH");
                }
              } else if ($truthy2(self5["$root?"](posix_path))) {
                if ($truthy2(self5["$unc?"](posix_path))) {
                  root = $$2($nesting4, "DOUBLE_SLASH");
                } else if ($truthy2(posix_path["$start_with?"]($$2($nesting4, "SLASH")))) {
                  root = $$2($nesting4, "SLASH");
                } else {
                  root = posix_path.$slice(0, $rb_plus(posix_path.$index($$2($nesting4, "SLASH")), 1));
                }
              } else if ($truthy2(posix_path["$start_with?"]($$2($nesting4, "DOT_SLASH")))) {
                root = $$2($nesting4, "DOT_SLASH");
              }
              ;
              path_segments = function() {
                if ($truthy2(root)) {
                  return posix_path.$slice(root.$length(), posix_path.$length());
                } else {
                  return posix_path;
                }
                ;
                return nil2;
              }().$split($$2($nesting4, "SLASH"));
              path_segments.$delete($$2($nesting4, "DOT"));
              $writer = [path, [path_segments, root]];
              $send2(cache, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              ;
            }, $PathResolver_partition_path$11.$$arity = -2);
            Opal2.def(self4, "$join_path", $PathResolver_join_path$12 = function $$join_path(segments, root) {
              var self5 = this;
              if (root == null) {
                root = nil2;
              }
              ;
              if ($truthy2(root)) {
                return "" + root + segments.$join($$2($nesting4, "SLASH"));
              } else {
                return segments.$join($$2($nesting4, "SLASH"));
              }
              ;
            }, $PathResolver_join_path$12.$$arity = -2);
            Opal2.def(self4, "$system_path", $PathResolver_system_path$13 = function $$system_path(target, start, jail, opts) {
              var $a3, $b2, $$14, $$15, self5 = this, target_path = nil2, target_segments = nil2, jail_segments = nil2, jail_root = nil2, recheck = nil2, start_segments = nil2, start_root = nil2, resolved_segments = nil2, unresolved_segments = nil2, warned = nil2;
              if (start == null) {
                start = nil2;
              }
              ;
              if (jail == null) {
                jail = nil2;
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2(jail)) {
                if ($truthy2(self5["$root?"](jail))) {
                } else {
                  self5.$raise($$$2("::", "SecurityError"), "Jail is not an absolute path: " + jail);
                }
                ;
                jail = self5.$posixify(jail);
              }
              ;
              if ($truthy2(target)) {
                if ($truthy2(self5["$root?"](target))) {
                  target_path = self5.$expand_path(target);
                  if ($truthy2($truthy2($a3 = jail) ? self5["$descends_from?"](target_path, jail)["$!"]() : $a3)) {
                    if ($truthy2(opts.$fetch("recover", true))) {
                      self5.$logger().$warn("" + ($truthy2($a3 = opts["$[]"]("target_name")) ? $a3 : "path") + " is outside of jail; recovering automatically");
                      $b2 = self5.$partition_path(target_path), $a3 = Opal2.to_ary($b2), target_segments = $a3[0] == null ? nil2 : $a3[0], $b2;
                      $b2 = self5.$partition_path(jail), $a3 = Opal2.to_ary($b2), jail_segments = $a3[0] == null ? nil2 : $a3[0], jail_root = $a3[1] == null ? nil2 : $a3[1], $b2;
                      return self5.$join_path($rb_plus(jail_segments, target_segments), jail_root);
                    } else {
                      self5.$raise($$$2("::", "SecurityError"), "" + ($truthy2($a3 = opts["$[]"]("target_name")) ? $a3 : "path") + " " + target + " is outside of jail: " + jail + " (disallowed in safe mode)");
                    }
                  }
                  ;
                  return target_path;
                } else {
                  $b2 = self5.$partition_path(target), $a3 = Opal2.to_ary($b2), target_segments = $a3[0] == null ? nil2 : $a3[0], $b2;
                }
              } else {
                target_segments = [];
              }
              ;
              if ($truthy2(target_segments["$empty?"]())) {
                if ($truthy2(start["$nil_or_empty?"]())) {
                  return $truthy2($a3 = jail) ? $a3 : self5.working_dir;
                } else if ($truthy2(self5["$root?"](start))) {
                  if ($truthy2(jail)) {
                    start = self5.$posixify(start);
                  } else {
                    return self5.$expand_path(start);
                  }
                } else {
                  $b2 = self5.$partition_path(start), $a3 = Opal2.to_ary($b2), target_segments = $a3[0] == null ? nil2 : $a3[0], $b2;
                  start = $truthy2($a3 = jail) ? $a3 : self5.working_dir;
                }
              } else if ($truthy2(start["$nil_or_empty?"]())) {
                start = $truthy2($a3 = jail) ? $a3 : self5.working_dir;
              } else if ($truthy2(self5["$root?"](start))) {
                if ($truthy2(jail)) {
                  start = self5.$posixify(start);
                }
              } else {
                start = "" + ($truthy2($a3 = jail) ? $a3 : self5.working_dir).$chomp("/") + "/" + start;
              }
              ;
              if ($truthy2($truthy2($a3 = $truthy2($b2 = jail) ? recheck = self5["$descends_from?"](start, jail)["$!"]() : $b2) ? self5.file_separator["$=="]($$2($nesting4, "BACKSLASH")) : $a3)) {
                $b2 = self5.$partition_path(start), $a3 = Opal2.to_ary($b2), start_segments = $a3[0] == null ? nil2 : $a3[0], start_root = $a3[1] == null ? nil2 : $a3[1], $b2;
                $b2 = self5.$partition_path(jail), $a3 = Opal2.to_ary($b2), jail_segments = $a3[0] == null ? nil2 : $a3[0], jail_root = $a3[1] == null ? nil2 : $a3[1], $b2;
                if ($truthy2(start_root["$!="](jail_root))) {
                  if ($truthy2(opts.$fetch("recover", true))) {
                    self5.$logger().$warn("start path for " + ($truthy2($a3 = opts["$[]"]("target_name")) ? $a3 : "path") + " is outside of jail root; recovering automatically");
                    start_segments = jail_segments;
                    recheck = false;
                  } else {
                    self5.$raise($$$2("::", "SecurityError"), "start path for " + ($truthy2($a3 = opts["$[]"]("target_name")) ? $a3 : "path") + " " + start + " refers to location outside jail root: " + jail + " (disallowed in safe mode)");
                  }
                }
                ;
              } else {
                $b2 = self5.$partition_path(start), $a3 = Opal2.to_ary($b2), start_segments = $a3[0] == null ? nil2 : $a3[0], jail_root = $a3[1] == null ? nil2 : $a3[1], $b2;
              }
              ;
              if ($truthy2((resolved_segments = $rb_plus(start_segments, target_segments))["$include?"]($$2($nesting4, "DOT_DOT")))) {
                $a3 = [resolved_segments, []], unresolved_segments = $a3[0], resolved_segments = $a3[1], $a3;
                if ($truthy2(jail)) {
                  if ($truthy2(jail_segments)) {
                  } else {
                    $b2 = self5.$partition_path(jail), $a3 = Opal2.to_ary($b2), jail_segments = $a3[0] == null ? nil2 : $a3[0], $b2;
                  }
                  ;
                  warned = false;
                  $send2(unresolved_segments, "each", [], ($$14 = function(segment) {
                    var self6 = $$14.$$s || this, $c;
                    if (segment == null) {
                      segment = nil2;
                    }
                    ;
                    if (segment["$=="]($$2($nesting4, "DOT_DOT"))) {
                      if ($truthy2($rb_gt2(resolved_segments.$size(), jail_segments.$size()))) {
                        return resolved_segments.$pop();
                      } else if ($truthy2(opts.$fetch("recover", true))) {
                        if ($truthy2(warned)) {
                          return nil2;
                        } else {
                          self6.$logger().$warn("" + ($truthy2($c = opts["$[]"]("target_name")) ? $c : "path") + " has illegal reference to ancestor of jail; recovering automatically");
                          return warned = true;
                        }
                      } else {
                        return self6.$raise($$$2("::", "SecurityError"), "" + ($truthy2($c = opts["$[]"]("target_name")) ? $c : "path") + " " + target + " refers to location outside jail: " + jail + " (disallowed in safe mode)");
                      }
                    } else {
                      return resolved_segments["$<<"](segment);
                    }
                    ;
                  }, $$14.$$s = self5, $$14.$$arity = 1, $$14));
                } else {
                  $send2(unresolved_segments, "each", [], ($$15 = function(segment) {
                    var self6 = $$15.$$s || this;
                    if (segment == null) {
                      segment = nil2;
                    }
                    ;
                    if (segment["$=="]($$2($nesting4, "DOT_DOT"))) {
                      return resolved_segments.$pop();
                    } else {
                      return resolved_segments["$<<"](segment);
                    }
                    ;
                  }, $$15.$$s = self5, $$15.$$arity = 1, $$15));
                }
                ;
              }
              ;
              if ($truthy2(recheck)) {
                target_path = self5.$join_path(resolved_segments, jail_root);
                if ($truthy2(self5["$descends_from?"](target_path, jail))) {
                  return target_path;
                } else if ($truthy2(opts.$fetch("recover", true))) {
                  self5.$logger().$warn("" + ($truthy2($a3 = opts["$[]"]("target_name")) ? $a3 : "path") + " is outside of jail; recovering automatically");
                  if ($truthy2(jail_segments)) {
                  } else {
                    $b2 = self5.$partition_path(jail), $a3 = Opal2.to_ary($b2), jail_segments = $a3[0] == null ? nil2 : $a3[0], $b2;
                  }
                  ;
                  return self5.$join_path($rb_plus(jail_segments, target_segments), jail_root);
                } else {
                  return self5.$raise($$$2("::", "SecurityError"), "" + ($truthy2($a3 = opts["$[]"]("target_name")) ? $a3 : "path") + " " + target + " is outside of jail: " + jail + " (disallowed in safe mode)");
                }
                ;
              } else {
                return self5.$join_path(resolved_segments, jail_root);
              }
              ;
            }, $PathResolver_system_path$13.$$arity = -2);
            Opal2.def(self4, "$web_path", $PathResolver_web_path$16 = function $$web_path(target, start) {
              var $a3, $b2, $$17, self5 = this, uri_prefix = nil2, target_segments = nil2, target_root = nil2, resolved_segments = nil2, resolved_path = nil2;
              if (start == null) {
                start = nil2;
              }
              ;
              target = self5.$posixify(target);
              start = self5.$posixify(start);
              if ($truthy2($truthy2($a3 = start["$nil_or_empty?"]()) ? $a3 : self5["$web_root?"](target))) {
              } else {
                $b2 = self5.$extract_uri_prefix("" + start + function() {
                  if ($truthy2(start["$end_with?"]($$2($nesting4, "SLASH")))) {
                    return "";
                  } else {
                    return $$2($nesting4, "SLASH");
                  }
                  ;
                  return nil2;
                }() + target), $a3 = Opal2.to_ary($b2), target = $a3[0] == null ? nil2 : $a3[0], uri_prefix = $a3[1] == null ? nil2 : $a3[1], $b2;
              }
              ;
              $b2 = self5.$partition_path(target, true), $a3 = Opal2.to_ary($b2), target_segments = $a3[0] == null ? nil2 : $a3[0], target_root = $a3[1] == null ? nil2 : $a3[1], $b2;
              resolved_segments = [];
              $send2(target_segments, "each", [], ($$17 = function(segment) {
                var self6 = $$17.$$s || this, $c;
                if (segment == null) {
                  segment = nil2;
                }
                ;
                if (segment["$=="]($$2($nesting4, "DOT_DOT"))) {
                  if ($truthy2(resolved_segments["$empty?"]())) {
                    if ($truthy2($truthy2($c = target_root) ? target_root["$!="]($$2($nesting4, "DOT_SLASH")) : $c)) {
                      return nil2;
                    } else {
                      return resolved_segments["$<<"](segment);
                    }
                  } else if (resolved_segments["$[]"](-1)["$=="]($$2($nesting4, "DOT_DOT"))) {
                    return resolved_segments["$<<"](segment);
                  } else {
                    return resolved_segments.$pop();
                  }
                } else {
                  return resolved_segments["$<<"](segment);
                }
                ;
              }, $$17.$$s = self5, $$17.$$arity = 1, $$17));
              if ($truthy2((resolved_path = self5.$join_path(resolved_segments, target_root))["$include?"](" "))) {
                resolved_path = resolved_path.$gsub(" ", "%20");
              }
              ;
              if ($truthy2(uri_prefix)) {
                return "" + uri_prefix + resolved_path;
              } else {
                return resolved_path;
              }
              ;
            }, $PathResolver_web_path$16.$$arity = -2);
            self4.$private();
            return (Opal2.def(self4, "$extract_uri_prefix", $PathResolver_extract_uri_prefix$18 = function $$extract_uri_prefix(str) {
              var $a3, self5 = this;
              if ($truthy2($truthy2($a3 = str["$include?"](":")) ? $$2($nesting4, "UriSniffRx")["$=~"](str) : $a3)) {
                return [str.$slice((($a3 = $gvars["~"]) === nil2 ? nil2 : $a3["$[]"](0)).$length(), str.$length()), ($a3 = $gvars["~"]) === nil2 ? nil2 : $a3["$[]"](0)];
              } else {
                return str;
              }
            }, $PathResolver_extract_uri_prefix$18.$$arity = 1), nil2) && "extract_uri_prefix";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/reader"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_times(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
        }
        function $rb_ge(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send, $gvars = Opal2.gvars, $hash = Opal2.hash;
        Opal2.add_stubs(["$include", "$attr_reader", "$+", "$attr_accessor", "$!", "$===", "$split", "$file", "$dir", "$dirname", "$path", "$basename", "$lineno", "$reverse", "$prepare_lines", "$empty?", "$nil_or_empty?", "$peek_line", "$>", "$slice", "$[]", "$length", "$process_line", "$times", "$shift", "$read_line", "$<<", "$-", "$unshift_all", "$has_more_lines?", "$join", "$read_lines", "$unshift", "$start_with?", "$==", "$*", "$read_lines_until", "$size", "$clear", "$cursor", "$[]=", "$!=", "$fetch", "$cursor_at_mark", "$warn", "$logger", "$message_with_context", "$pop", "$push", "$respond_to?", "$reverse_each", "$new", "$tap", "$each", "$instance_variables", "$instance_variable_get", "$drop", "$instance_variable_set", "$class", "$object_id", "$inspect", "$private", "$prepare_source_array", "$prepare_source_string", "$chomp", "$valid_encoding?", "$to_s", "$raise", "$to_i", "$attributes", "$catalog", "$pop_include", "$parse", "$path=", "$dup", "$end_with?", "$keys", "$rindex", "$rootname", "$key?", "$attr", "$reverse!", "$>=", "$nil?", "$extensions?", "$include_processors?", "$extensions", "$include_processors", "$map", "$skip_front_matter!", "$adjust_indentation!", "$include?", "$=~", "$preprocess_conditional_directive", "$preprocess_include_directive", "$downcase", "$error", "$none?", "$any?", "$all?", "$strip", "$send", "$resolve_expr_val", "$replace_next_line", "$rstrip", "$sub_attributes", "$attribute_missing", "$info", "$parse_attributes", "$find", "$handles?", "$instance", "$process_method", "$safe", "$resolve_include_path", "$method", "$split_delimited_value", "$partition", "$<", "$to_a", "$uniq", "$sort", "$call", "$each_line", "$infinite?", "$push_include", "$delete", "$first", "$values", "$value?", "$create_include_cursor", "$delete_at", "$keep_if", "$read", "$uriish?", "$attr?", "$require_library", "$normalize_system_path", "$file?", "$relative_path", "$path_resolver", "$base_dir", "$to_f"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Reader");
            var $nesting4 = [self4].concat($parent_nesting3), $Reader_initialize$4, $Reader_has_more_lines$ques$5, $Reader_empty$ques$6, $Reader_next_line_empty$ques$7, $Reader_peek_line$8, $Reader_peek_lines$9, $Reader_read_line$11, $Reader_read_lines$12, $Reader_read$13, $Reader_advance$14, $Reader_unshift_line$15, $Reader_unshift_lines$16, $Reader_replace_next_line$17, $Reader_skip_blank_lines$18, $Reader_skip_comment_lines$19, $Reader_skip_line_comments$20, $Reader_terminate$21, $Reader_read_lines_until$22, $Reader_shift$23, $Reader_unshift$24, $Reader_unshift_all$25, $Reader_unshift_all$27, $Reader_cursor$28, $Reader_cursor_at_line$29, $Reader_cursor_at_mark$30, $Reader_cursor_before_mark$31, $Reader_cursor_at_prev_line$32, $Reader_mark$33, $Reader_line_info$34, $Reader_lines$35, $Reader_string$36, $Reader_source$37, $Reader_save$38, $Reader_restore_save$41, $Reader_discard_save$43, $Reader_to_s$44, $Reader_prepare_lines$45, $Reader_process_line$46;
            self4.$$prototype.file = self4.$$prototype.lines = self4.$$prototype.look_ahead = self4.$$prototype.unescape_next_line = self4.$$prototype.lineno = self4.$$prototype.process_lines = self4.$$prototype.dir = self4.$$prototype.path = self4.$$prototype.mark = self4.$$prototype.source_lines = self4.$$prototype.saved = nil2;
            self4.$include($$2($nesting4, "Logging"));
            (function($base4, $super3, $parent_nesting4) {
              var self5 = $klass2($base4, $super3, "Cursor");
              var $nesting5 = [self5].concat($parent_nesting4), $Cursor_initialize$1, $Cursor_advance$2, $Cursor_line_info$3;
              self5.$$prototype.lineno = self5.$$prototype.path = nil2;
              self5.$attr_reader("file", "dir", "path", "lineno");
              Opal2.def(self5, "$initialize", $Cursor_initialize$1 = function $$initialize(file2, dir, path, lineno) {
                var $a2, self6 = this;
                if (dir == null) {
                  dir = nil2;
                }
                ;
                if (path == null) {
                  path = nil2;
                }
                ;
                if (lineno == null) {
                  lineno = 1;
                }
                ;
                return $a2 = [file2, dir, path, lineno], self6.file = $a2[0], self6.dir = $a2[1], self6.path = $a2[2], self6.lineno = $a2[3], $a2;
              }, $Cursor_initialize$1.$$arity = -2);
              Opal2.def(self5, "$advance", $Cursor_advance$2 = function $$advance(num) {
                var self6 = this;
                return self6.lineno = $rb_plus(self6.lineno, num);
              }, $Cursor_advance$2.$$arity = 1);
              Opal2.def(self5, "$line_info", $Cursor_line_info$3 = function $$line_info() {
                var self6 = this;
                return "" + self6.path + ": line " + self6.lineno;
              }, $Cursor_line_info$3.$$arity = 0);
              return Opal2.alias(self5, "to_s", "line_info");
            })($nesting4[0], null, $nesting4);
            self4.$attr_reader("file");
            self4.$attr_reader("dir");
            self4.$attr_reader("path");
            self4.$attr_reader("lineno");
            self4.$attr_reader("source_lines");
            self4.$attr_accessor("process_lines");
            self4.$attr_accessor("unterminated");
            Opal2.def(self4, "$initialize", $Reader_initialize$4 = function $$initialize(data, cursor, opts) {
              var $a2, $b2, self5 = this;
              if (data == null) {
                data = nil2;
              }
              ;
              if (cursor == null) {
                cursor = nil2;
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2(cursor["$!"]())) {
                self5.file = nil2;
                self5.dir = ".";
                self5.path = "<stdin>";
                self5.lineno = 1;
              } else if ($truthy2($$$2("::", "String")["$==="](cursor))) {
                self5.file = cursor;
                $b2 = $$$2("::", "File").$split(self5.file), $a2 = Opal2.to_ary($b2), self5.dir = $a2[0] == null ? nil2 : $a2[0], self5.path = $a2[1] == null ? nil2 : $a2[1], $b2;
                self5.lineno = 1;
              } else {
                if ($truthy2(self5.file = cursor.$file())) {
                  self5.dir = $truthy2($a2 = cursor.$dir()) ? $a2 : $$$2("::", "File").$dirname(self5.file);
                  self5.path = $truthy2($a2 = cursor.$path()) ? $a2 : $$$2("::", "File").$basename(self5.file);
                } else {
                  self5.dir = $truthy2($a2 = cursor.$dir()) ? $a2 : ".";
                  self5.path = $truthy2($a2 = cursor.$path()) ? $a2 : "<stdin>";
                }
                ;
                self5.lineno = $truthy2($a2 = cursor.$lineno()) ? $a2 : 1;
              }
              ;
              self5.lines = (self5.source_lines = self5.$prepare_lines(data, opts)).$reverse();
              self5.mark = nil2;
              self5.look_ahead = 0;
              self5.process_lines = true;
              self5.unescape_next_line = false;
              self5.unterminated = nil2;
              return self5.saved = nil2;
            }, $Reader_initialize$4.$$arity = -1);
            Opal2.def(self4, "$has_more_lines?", $Reader_has_more_lines$ques$5 = function() {
              var self5 = this;
              if ($truthy2(self5.lines["$empty?"]())) {
                self5.look_ahead = 0;
                return false;
              } else {
                return true;
              }
            }, $Reader_has_more_lines$ques$5.$$arity = 0);
            Opal2.def(self4, "$empty?", $Reader_empty$ques$6 = function() {
              var self5 = this;
              if ($truthy2(self5.lines["$empty?"]())) {
                self5.look_ahead = 0;
                return true;
              } else {
                return false;
              }
            }, $Reader_empty$ques$6.$$arity = 0);
            Opal2.alias(self4, "eof?", "empty?");
            Opal2.def(self4, "$next_line_empty?", $Reader_next_line_empty$ques$7 = function() {
              var self5 = this;
              return self5.$peek_line()["$nil_or_empty?"]();
            }, $Reader_next_line_empty$ques$7.$$arity = 0);
            Opal2.def(self4, "$peek_line", $Reader_peek_line$8 = function $$peek_line(direct) {
              var $a2, self5 = this, line = nil2;
              if (direct == null) {
                direct = false;
              }
              ;
              if ($truthy2($truthy2($a2 = direct) ? $a2 : $rb_gt2(self5.look_ahead, 0))) {
                if ($truthy2(self5.unescape_next_line)) {
                  return (line = self5.lines["$[]"](-1)).$slice(1, line.$length());
                } else {
                  return self5.lines["$[]"](-1);
                }
              } else if ($truthy2(self5.lines["$empty?"]())) {
                self5.look_ahead = 0;
                return nil2;
              } else {
                return $truthy2($a2 = self5.$process_line(self5.lines["$[]"](-1))) ? $a2 : self5.$peek_line();
              }
              ;
            }, $Reader_peek_line$8.$$arity = -1);
            Opal2.def(self4, "$peek_lines", $Reader_peek_lines$9 = function $$peek_lines(num, direct) {
              var $a2, $$10, self5 = this, old_look_ahead = nil2, result2 = nil2;
              if (num == null) {
                num = nil2;
              }
              ;
              if (direct == null) {
                direct = false;
              }
              ;
              old_look_ahead = self5.look_ahead;
              result2 = [];
              (function() {
                var $brk = Opal2.new_brk();
                try {
                  return $send2($truthy2($a2 = num) ? $a2 : $$2($nesting4, "MAX_INT"), "times", [], ($$10 = function() {
                    var self6 = $$10.$$s || this, line = nil2;
                    if (self6.lineno == null)
                      self6.lineno = nil2;
                    if ($truthy2(line = function() {
                      if ($truthy2(direct)) {
                        return self6.$shift();
                      } else {
                        return self6.$read_line();
                      }
                      ;
                      return nil2;
                    }())) {
                      return result2["$<<"](line);
                    } else {
                      if ($truthy2(direct)) {
                        self6.lineno = $rb_minus(self6.lineno, 1);
                      }
                      ;
                      Opal2.brk(nil2, $brk);
                    }
                  }, $$10.$$s = self5, $$10.$$brk = $brk, $$10.$$arity = 0, $$10));
                } catch (err) {
                  if (err === $brk) {
                    return err.$v;
                  } else {
                    throw err;
                  }
                }
              })();
              if ($truthy2(result2["$empty?"]())) {
              } else {
                self5.$unshift_all(result2);
                if ($truthy2(direct)) {
                  self5.look_ahead = old_look_ahead;
                }
                ;
              }
              ;
              return result2;
            }, $Reader_peek_lines$9.$$arity = -1);
            Opal2.def(self4, "$read_line", $Reader_read_line$11 = function $$read_line() {
              var $a2, self5 = this;
              if ($truthy2($truthy2($a2 = $rb_gt2(self5.look_ahead, 0)) ? $a2 : self5["$has_more_lines?"]())) {
                return self5.$shift();
              } else {
                return nil2;
              }
            }, $Reader_read_line$11.$$arity = 0);
            Opal2.def(self4, "$read_lines", $Reader_read_lines$12 = function $$read_lines() {
              var $a2, self5 = this, lines = nil2;
              lines = [];
              while ($truthy2(self5["$has_more_lines?"]())) {
                lines["$<<"](self5.$shift());
              }
              ;
              return lines;
            }, $Reader_read_lines$12.$$arity = 0);
            Opal2.alias(self4, "readlines", "read_lines");
            Opal2.def(self4, "$read", $Reader_read$13 = function $$read() {
              var self5 = this;
              return self5.$read_lines().$join($$2($nesting4, "LF"));
            }, $Reader_read$13.$$arity = 0);
            Opal2.def(self4, "$advance", $Reader_advance$14 = function $$advance() {
              var self5 = this;
              if ($truthy2(self5.$shift())) {
                return true;
              } else {
                return false;
              }
            }, $Reader_advance$14.$$arity = 0);
            Opal2.def(self4, "$unshift_line", $Reader_unshift_line$15 = function $$unshift_line(line_to_restore) {
              var self5 = this;
              self5.$unshift(line_to_restore);
              return nil2;
            }, $Reader_unshift_line$15.$$arity = 1);
            Opal2.alias(self4, "restore_line", "unshift_line");
            Opal2.def(self4, "$unshift_lines", $Reader_unshift_lines$16 = function $$unshift_lines(lines_to_restore) {
              var self5 = this;
              return self5.$unshift_all(lines_to_restore);
            }, $Reader_unshift_lines$16.$$arity = 1);
            Opal2.alias(self4, "restore_lines", "unshift_lines");
            Opal2.def(self4, "$replace_next_line", $Reader_replace_next_line$17 = function $$replace_next_line(replacement) {
              var self5 = this;
              self5.$shift();
              self5.$unshift(replacement);
              return true;
            }, $Reader_replace_next_line$17.$$arity = 1);
            Opal2.alias(self4, "replace_line", "replace_next_line");
            Opal2.def(self4, "$skip_blank_lines", $Reader_skip_blank_lines$18 = function $$skip_blank_lines() {
              var $a2, self5 = this, num_skipped = nil2, next_line = nil2;
              if ($truthy2(self5["$empty?"]())) {
                return nil2;
              }
              ;
              num_skipped = 0;
              while ($truthy2(next_line = self5.$peek_line())) {
                if ($truthy2(next_line["$empty?"]())) {
                  self5.$shift();
                  num_skipped = $rb_plus(num_skipped, 1);
                } else {
                  return num_skipped;
                }
              }
              ;
            }, $Reader_skip_blank_lines$18.$$arity = 0);
            Opal2.def(self4, "$skip_comment_lines", $Reader_skip_comment_lines$19 = function $$skip_comment_lines() {
              var $a2, $b2, self5 = this, next_line = nil2, ll = nil2;
              if ($truthy2(self5["$empty?"]())) {
                return nil2;
              }
              ;
              while ($truthy2($truthy2($b2 = next_line = self5.$peek_line()) ? next_line["$empty?"]()["$!"]() : $b2)) {
                if ($truthy2(next_line["$start_with?"]("//"))) {
                  if ($truthy2(next_line["$start_with?"]("///"))) {
                    if ($truthy2($truthy2($b2 = $rb_gt2(ll = next_line.$length(), 3)) ? next_line["$=="]($rb_times("/", ll)) : $b2)) {
                      self5.$read_lines_until($hash22(["terminator", "skip_first_line", "read_last_line", "skip_processing", "context"], { "terminator": next_line, "skip_first_line": true, "read_last_line": true, "skip_processing": true, "context": "comment" }));
                    } else {
                      break;
                    }
                  } else {
                    self5.$shift();
                  }
                } else {
                  break;
                }
              }
              ;
              return nil2;
            }, $Reader_skip_comment_lines$19.$$arity = 0);
            Opal2.def(self4, "$skip_line_comments", $Reader_skip_line_comments$20 = function $$skip_line_comments() {
              var $a2, $b2, self5 = this, comment_lines = nil2, next_line = nil2;
              if ($truthy2(self5["$empty?"]())) {
                return [];
              }
              ;
              comment_lines = [];
              while ($truthy2($truthy2($b2 = next_line = self5.$peek_line()) ? next_line["$empty?"]()["$!"]() : $b2)) {
                if ($truthy2(next_line["$start_with?"]("//"))) {
                  comment_lines["$<<"](self5.$shift());
                } else {
                  break;
                }
              }
              ;
              return comment_lines;
            }, $Reader_skip_line_comments$20.$$arity = 0);
            Opal2.def(self4, "$terminate", $Reader_terminate$21 = function $$terminate() {
              var self5 = this;
              self5.lineno = $rb_plus(self5.lineno, self5.lines.$size());
              self5.lines.$clear();
              self5.look_ahead = 0;
              return nil2;
            }, $Reader_terminate$21.$$arity = 0);
            Opal2.def(self4, "$read_lines_until", $Reader_read_lines_until$22 = function $$read_lines_until(options) {
              var $a2, $b2, $c, $d, $e, $f, $iter2 = $Reader_read_lines_until$22.$$p, $yield = $iter2 || nil2, self5 = this, result2 = nil2, restore_process_lines = nil2, terminator = nil2, start_cursor = nil2, break_on_blank_lines = nil2, break_on_list_continuation = nil2, skip_comments = nil2, line_read = nil2, line_restored = nil2, line = nil2, $writer = nil2, context = nil2;
              if ($iter2)
                $Reader_read_lines_until$22.$$p = null;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              result2 = [];
              if ($truthy2($truthy2($a2 = self5.process_lines) ? options["$[]"]("skip_processing") : $a2)) {
                self5.process_lines = false;
                restore_process_lines = true;
              }
              ;
              if ($truthy2(terminator = options["$[]"]("terminator"))) {
                start_cursor = $truthy2($a2 = options["$[]"]("cursor")) ? $a2 : self5.$cursor();
                break_on_blank_lines = false;
                break_on_list_continuation = false;
              } else {
                break_on_blank_lines = options["$[]"]("break_on_blank_lines");
                break_on_list_continuation = options["$[]"]("break_on_list_continuation");
              }
              ;
              skip_comments = options["$[]"]("skip_line_comments");
              line_read = line_restored = nil2;
              if ($truthy2(options["$[]"]("skip_first_line"))) {
                self5.$shift();
              }
              ;
              while ($truthy2(line = self5.$read_line())) {
                if ($truthy2(function() {
                  if ($truthy2(terminator)) {
                    return line["$=="](terminator);
                  } else {
                    return $truthy2($b2 = $truthy2($c = $truthy2($d = break_on_blank_lines) ? line["$empty?"]() : $d) ? $c : $truthy2($d = $truthy2($e = $truthy2($f = break_on_list_continuation) ? line_read : $f) ? line["$=="]($$2($nesting4, "LIST_CONTINUATION")) : $e) ? ($writer = ["preserve_last_line", true], $send2(options, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]) : $d) ? $b2 : ($c = $yield !== nil2) ? Opal2.yield1($yield, line) : $yield !== nil2;
                  }
                  ;
                  return nil2;
                }())) {
                  if ($truthy2(options["$[]"]("read_last_line"))) {
                    result2["$<<"](line);
                  }
                  ;
                  if ($truthy2(options["$[]"]("preserve_last_line"))) {
                    self5.$unshift(line);
                    line_restored = true;
                  }
                  ;
                  break;
                  ;
                }
                ;
                if ($truthy2($truthy2($b2 = $truthy2($c = skip_comments) ? line["$start_with?"]("//") : $c) ? line["$start_with?"]("///")["$!"]() : $b2)) {
                } else {
                  result2["$<<"](line);
                  line_read = true;
                }
                ;
              }
              ;
              if ($truthy2(restore_process_lines)) {
                self5.process_lines = true;
                if ($truthy2($truthy2($a2 = line_restored) ? terminator["$!"]() : $a2)) {
                  self5.look_ahead = $rb_minus(self5.look_ahead, 1);
                }
                ;
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = terminator) ? terminator["$!="](line) : $b2) ? context = options.$fetch("context", terminator) : $a2)) {
                if (start_cursor["$=="]("at_mark")) {
                  start_cursor = self5.$cursor_at_mark();
                }
                ;
                self5.$logger().$warn(self5.$message_with_context("unterminated " + context + " block", $hash22(["source_location"], { "source_location": start_cursor })));
                self5.unterminated = true;
              }
              ;
              return result2;
            }, $Reader_read_lines_until$22.$$arity = -1);
            Opal2.def(self4, "$shift", $Reader_shift$23 = function $$shift() {
              var self5 = this;
              self5.lineno = $rb_plus(self5.lineno, 1);
              if (self5.look_ahead["$=="](0)) {
              } else {
                self5.look_ahead = $rb_minus(self5.look_ahead, 1);
              }
              ;
              return self5.lines.$pop();
            }, $Reader_shift$23.$$arity = 0);
            Opal2.def(self4, "$unshift", $Reader_unshift$24 = function $$unshift(line) {
              var self5 = this;
              self5.lineno = $rb_minus(self5.lineno, 1);
              self5.look_ahead = $rb_plus(self5.look_ahead, 1);
              self5.lines.$push(line);
              return nil2;
            }, $Reader_unshift$24.$$arity = 1);
            if ($$$2("::", "RUBY_ENGINE")["$=="]("jruby")) {
              Opal2.def(self4, "$unshift_all", $Reader_unshift_all$25 = function $$unshift_all(lines_to_restore) {
                var $$26, self5 = this;
                self5.lineno = $rb_minus(self5.lineno, lines_to_restore.$size());
                self5.look_ahead = $rb_plus(self5.look_ahead, lines_to_restore.$size());
                if ($truthy2(lines_to_restore["$respond_to?"]("reverse"))) {
                  $send2(self5.lines, "push", Opal2.to_a(lines_to_restore.$reverse()));
                } else {
                  $send2(lines_to_restore, "reverse_each", [], ($$26 = function(it) {
                    var self6 = $$26.$$s || this;
                    if (self6.lines == null)
                      self6.lines = nil2;
                    if (it == null) {
                      it = nil2;
                    }
                    ;
                    return self6.lines.$push(it);
                  }, $$26.$$s = self5, $$26.$$arity = 1, $$26));
                }
                ;
                return nil2;
              }, $Reader_unshift_all$25.$$arity = 1);
            } else {
              Opal2.def(self4, "$unshift_all", $Reader_unshift_all$27 = function $$unshift_all(lines_to_restore) {
                var self5 = this;
                self5.lineno = $rb_minus(self5.lineno, lines_to_restore.$size());
                self5.look_ahead = $rb_plus(self5.look_ahead, lines_to_restore.$size());
                $send2(self5.lines, "push", Opal2.to_a(lines_to_restore.$reverse()));
                return nil2;
              }, $Reader_unshift_all$27.$$arity = 1);
            }
            ;
            Opal2.def(self4, "$cursor", $Reader_cursor$28 = function $$cursor() {
              var self5 = this;
              return $$2($nesting4, "Cursor").$new(self5.file, self5.dir, self5.path, self5.lineno);
            }, $Reader_cursor$28.$$arity = 0);
            Opal2.def(self4, "$cursor_at_line", $Reader_cursor_at_line$29 = function $$cursor_at_line(lineno) {
              var self5 = this;
              return $$2($nesting4, "Cursor").$new(self5.file, self5.dir, self5.path, lineno);
            }, $Reader_cursor_at_line$29.$$arity = 1);
            Opal2.def(self4, "$cursor_at_mark", $Reader_cursor_at_mark$30 = function $$cursor_at_mark() {
              var self5 = this;
              if ($truthy2(self5.mark)) {
                return $send2($$2($nesting4, "Cursor"), "new", Opal2.to_a(self5.mark));
              } else {
                return self5.$cursor();
              }
            }, $Reader_cursor_at_mark$30.$$arity = 0);
            Opal2.def(self4, "$cursor_before_mark", $Reader_cursor_before_mark$31 = function $$cursor_before_mark() {
              var $a2, $b2, self5 = this, m_file = nil2, m_dir = nil2, m_path = nil2, m_lineno = nil2;
              if ($truthy2(self5.mark)) {
                $b2 = self5.mark, $a2 = Opal2.to_ary($b2), m_file = $a2[0] == null ? nil2 : $a2[0], m_dir = $a2[1] == null ? nil2 : $a2[1], m_path = $a2[2] == null ? nil2 : $a2[2], m_lineno = $a2[3] == null ? nil2 : $a2[3], $b2;
                return $$2($nesting4, "Cursor").$new(m_file, m_dir, m_path, $rb_minus(m_lineno, 1));
              } else {
                return $$2($nesting4, "Cursor").$new(self5.file, self5.dir, self5.path, $rb_minus(self5.lineno, 1));
              }
            }, $Reader_cursor_before_mark$31.$$arity = 0);
            Opal2.def(self4, "$cursor_at_prev_line", $Reader_cursor_at_prev_line$32 = function $$cursor_at_prev_line() {
              var self5 = this;
              return $$2($nesting4, "Cursor").$new(self5.file, self5.dir, self5.path, $rb_minus(self5.lineno, 1));
            }, $Reader_cursor_at_prev_line$32.$$arity = 0);
            Opal2.def(self4, "$mark", $Reader_mark$33 = function $$mark() {
              var self5 = this;
              return self5.mark = [self5.file, self5.dir, self5.path, self5.lineno];
            }, $Reader_mark$33.$$arity = 0);
            Opal2.def(self4, "$line_info", $Reader_line_info$34 = function $$line_info() {
              var self5 = this;
              return "" + self5.path + ": line " + self5.lineno;
            }, $Reader_line_info$34.$$arity = 0);
            Opal2.def(self4, "$lines", $Reader_lines$35 = function $$lines() {
              var self5 = this;
              return self5.lines.$reverse();
            }, $Reader_lines$35.$$arity = 0);
            Opal2.def(self4, "$string", $Reader_string$36 = function $$string() {
              var self5 = this;
              return self5.lines.$reverse().$join($$2($nesting4, "LF"));
            }, $Reader_string$36.$$arity = 0);
            Opal2.def(self4, "$source", $Reader_source$37 = function $$source() {
              var self5 = this;
              return self5.source_lines.$join($$2($nesting4, "LF"));
            }, $Reader_source$37.$$arity = 0);
            Opal2.def(self4, "$save", $Reader_save$38 = function $$save() {
              var $$39, self5 = this;
              self5.saved = $send2($hash22([], {}), "tap", [], ($$39 = function(accum) {
                var self6 = $$39.$$s || this, $$40;
                if (accum == null) {
                  accum = nil2;
                }
                ;
                return $send2(self6.$instance_variables(), "each", [], ($$40 = function(name) {
                  var self7 = $$40.$$s || this, $a2, $writer = nil2, val = nil2;
                  if (name == null) {
                    name = nil2;
                  }
                  ;
                  if ($truthy2($truthy2($a2 = name["$=="]("@saved")) ? $a2 : name["$=="]("@source_lines"))) {
                    return nil2;
                  } else {
                    $writer = [name, function() {
                      if ($truthy2($$$2("::", "Array")["$==="](val = self7.$instance_variable_get(name)))) {
                        return val.$drop(0);
                      } else {
                        return val;
                      }
                      ;
                      return nil2;
                    }()];
                    $send2(accum, "[]=", Opal2.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                }, $$40.$$s = self6, $$40.$$arity = 1, $$40));
              }, $$39.$$s = self5, $$39.$$arity = 1, $$39));
              return nil2;
            }, $Reader_save$38.$$arity = 0);
            Opal2.def(self4, "$restore_save", $Reader_restore_save$41 = function $$restore_save() {
              var $$42, self5 = this;
              if ($truthy2(self5.saved)) {
                $send2(self5.saved, "each", [], ($$42 = function(name, val) {
                  var self6 = $$42.$$s || this;
                  if (name == null) {
                    name = nil2;
                  }
                  ;
                  if (val == null) {
                    val = nil2;
                  }
                  ;
                  return self6.$instance_variable_set(name, val);
                }, $$42.$$s = self5, $$42.$$arity = 2, $$42));
                return self5.saved = nil2;
              } else {
                return nil2;
              }
            }, $Reader_restore_save$41.$$arity = 0);
            Opal2.def(self4, "$discard_save", $Reader_discard_save$43 = function $$discard_save() {
              var self5 = this;
              return self5.saved = nil2;
            }, $Reader_discard_save$43.$$arity = 0);
            Opal2.def(self4, "$to_s", $Reader_to_s$44 = function $$to_s() {
              var self5 = this;
              return "#<" + self5.$class() + "@" + self5.$object_id() + " {path: " + self5.path.$inspect() + ", line: " + self5.lineno + "}>";
            }, $Reader_to_s$44.$$arity = 0);
            self4.$private();
            Opal2.def(self4, "$prepare_lines", $Reader_prepare_lines$45 = function $$prepare_lines(data, opts) {
              var self5 = this, normalize = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              try {
                if ($truthy2(normalize = opts["$[]"]("normalize"))) {
                  if ($truthy2($$$2("::", "Array")["$==="](data))) {
                    return $$2($nesting4, "Helpers").$prepare_source_array(data, normalize["$!="]("chomp"));
                  } else {
                    return $$2($nesting4, "Helpers").$prepare_source_string(data, normalize["$!="]("chomp"));
                  }
                } else if ($truthy2($$$2("::", "Array")["$==="](data))) {
                  return data.$drop(0);
                } else if ($truthy2(data)) {
                  return data.$chomp().$split($$2($nesting4, "LF"), -1);
                } else {
                  return [];
                }
              } catch ($err) {
                if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                  try {
                    if ($truthy2(function() {
                      if ($truthy2($$$2("::", "Array")["$==="](data))) {
                        return data.$join();
                      } else {
                        return data.$to_s();
                      }
                      ;
                      return nil2;
                    }()["$valid_encoding?"]())) {
                      return self5.$raise();
                    } else {
                      return self5.$raise($$$2("::", "ArgumentError"), "source is either binary or contains invalid Unicode data");
                    }
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
              ;
            }, $Reader_prepare_lines$45.$$arity = -2);
            return (Opal2.def(self4, "$process_line", $Reader_process_line$46 = function $$process_line(line) {
              var self5 = this;
              if ($truthy2(self5.process_lines)) {
                self5.look_ahead = $rb_plus(self5.look_ahead, 1);
              }
              ;
              return line;
            }, $Reader_process_line$46.$$arity = 1), nil2) && "process_line";
          })($nesting3[0], null, $nesting3);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "PreprocessorReader");
            var $nesting4 = [self4].concat($parent_nesting3), $PreprocessorReader_initialize$47, $PreprocessorReader_has_more_lines$ques$48, $PreprocessorReader_empty$ques$49, $PreprocessorReader_peek_line$50, $PreprocessorReader_push_include$51, $PreprocessorReader_include_depth$52, $PreprocessorReader_exceeds_max_depth$ques$53, $PreprocessorReader_shift$54, $PreprocessorReader_include_processors$ques$55, $PreprocessorReader_create_include_cursor$56, $PreprocessorReader_to_s$57, $PreprocessorReader_prepare_lines$59, $PreprocessorReader_process_line$60, $PreprocessorReader_preprocess_conditional_directive$61, $PreprocessorReader_preprocess_include_directive$66, $PreprocessorReader_resolve_include_path$80, $PreprocessorReader_pop_include$82, $PreprocessorReader_split_delimited_value$83, $PreprocessorReader_skip_front_matter$excl$84, $PreprocessorReader_resolve_expr_val$85;
            self4.$$prototype.include_stack = self4.$$prototype.lines = self4.$$prototype.file = self4.$$prototype.dir = self4.$$prototype.path = self4.$$prototype.lineno = self4.$$prototype.maxdepth = self4.$$prototype.process_lines = self4.$$prototype.includes = self4.$$prototype.document = self4.$$prototype.unescape_next_line = self4.$$prototype.include_processor_extensions = self4.$$prototype.look_ahead = self4.$$prototype.skipping = self4.$$prototype.conditional_stack = nil2;
            self4.$attr_reader("include_stack");
            Opal2.def(self4, "$initialize", $PreprocessorReader_initialize$47 = function $$initialize(document, data, cursor, opts) {
              var $a2, $iter2 = $PreprocessorReader_initialize$47.$$p, $yield = $iter2 || nil2, self5 = this, default_include_depth = nil2;
              if ($iter2)
                $PreprocessorReader_initialize$47.$$p = null;
              if (data == null) {
                data = nil2;
              }
              ;
              if (cursor == null) {
                cursor = nil2;
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              self5.document = document;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $PreprocessorReader_initialize$47, false), [data, cursor, opts], null);
              if ($truthy2($rb_gt2(default_include_depth = ($truthy2($a2 = document.$attributes()["$[]"]("max-include-depth")) ? $a2 : 64).$to_i(), 0))) {
                self5.maxdepth = $hash22(["abs", "curr", "rel"], { "abs": default_include_depth, "curr": default_include_depth, "rel": default_include_depth });
              } else {
                self5.maxdepth = nil2;
              }
              ;
              self5.include_stack = [];
              self5.includes = document.$catalog()["$[]"]("includes");
              self5.skipping = false;
              self5.conditional_stack = [];
              return self5.include_processor_extensions = nil2;
            }, $PreprocessorReader_initialize$47.$$arity = -2);
            Opal2.def(self4, "$has_more_lines?", $PreprocessorReader_has_more_lines$ques$48 = function() {
              var self5 = this;
              if ($truthy2(self5.$peek_line())) {
                return true;
              } else {
                return false;
              }
            }, $PreprocessorReader_has_more_lines$ques$48.$$arity = 0);
            Opal2.def(self4, "$empty?", $PreprocessorReader_empty$ques$49 = function() {
              var self5 = this;
              if ($truthy2(self5.$peek_line())) {
                return false;
              } else {
                return true;
              }
            }, $PreprocessorReader_empty$ques$49.$$arity = 0);
            Opal2.alias(self4, "eof?", "empty?");
            Opal2.def(self4, "$peek_line", $PreprocessorReader_peek_line$50 = function $$peek_line(direct) {
              var $iter2 = $PreprocessorReader_peek_line$50.$$p, $yield = $iter2 || nil2, self5 = this, line = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $PreprocessorReader_peek_line$50.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (direct == null) {
                direct = false;
              }
              ;
              if ($truthy2(line = $send2(self5, Opal2.find_super_dispatcher(self5, "peek_line", $PreprocessorReader_peek_line$50, false), $zuper, $iter2))) {
                return line;
              } else if ($truthy2(self5.include_stack["$empty?"]())) {
                return nil2;
              } else {
                self5.$pop_include();
                return self5.$peek_line(direct);
              }
              ;
            }, $PreprocessorReader_peek_line$50.$$arity = -1);
            Opal2.def(self4, "$push_include", $PreprocessorReader_push_include$51 = function $$push_include(data, file2, path, lineno, attributes) {
              var $a2, self5 = this, $writer = nil2, dir = nil2, rel_maxdepth = nil2, curr_maxdepth = nil2, abs_maxdepth = nil2, leveloffset = nil2;
              if (file2 == null) {
                file2 = nil2;
              }
              ;
              if (path == null) {
                path = nil2;
              }
              ;
              if (lineno == null) {
                lineno = 1;
              }
              ;
              if (attributes == null) {
                attributes = $hash22([], {});
              }
              ;
              self5.include_stack["$<<"]([self5.lines, self5.file, self5.dir, self5.path, self5.lineno, self5.maxdepth, self5.process_lines]);
              if ($truthy2(self5.file = file2)) {
                if ($truthy2($$$2("::", "String")["$==="](file2))) {
                  self5.dir = $$$2("::", "File").$dirname(file2);
                } else if ($truthy2($$2($nesting4, "RUBY_ENGINE_OPAL"))) {
                  self5.dir = $$$2("::", "URI").$parse($$$2("::", "File").$dirname(file2 = file2.$to_s()));
                } else {
                  $writer = [function() {
                    if ((dir = $$$2("::", "File").$dirname(file2.$path()))["$=="]("/")) {
                      return "";
                    } else {
                      return dir;
                    }
                    ;
                    return nil2;
                  }()];
                  $send2(self5.dir = file2.$dup(), "path=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  file2 = file2.$to_s();
                }
                ;
                self5.path = path = $truthy2($a2 = path) ? $a2 : $$$2("::", "File").$basename(file2);
                if ($truthy2(self5.process_lines = $send2(file2, "end_with?", Opal2.to_a($$2($nesting4, "ASCIIDOC_EXTENSIONS").$keys())))) {
                  $writer = [path.$slice(0, path.$rindex(".")), function() {
                    if ($truthy2(attributes["$[]"]("partial-option"))) {
                      return nil2;
                    } else {
                      return true;
                    }
                    ;
                    return nil2;
                  }()];
                  $send2(self5.includes, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
              } else {
                self5.dir = ".";
                self5.process_lines = true;
                if ($truthy2(self5.path = path)) {
                  $writer = [$$2($nesting4, "Helpers").$rootname(path), function() {
                    if ($truthy2(attributes["$[]"]("partial-option"))) {
                      return nil2;
                    } else {
                      return true;
                    }
                    ;
                    return nil2;
                  }()];
                  $send2(self5.includes, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  self5.path = "<stdin>";
                }
                ;
              }
              ;
              self5.lineno = lineno;
              if ($truthy2($truthy2($a2 = self5.maxdepth) ? attributes["$key?"]("depth") : $a2)) {
                if ($truthy2($rb_gt2(rel_maxdepth = attributes["$[]"]("depth").$to_i(), 0))) {
                  if ($truthy2($rb_gt2(curr_maxdepth = $rb_plus(self5.include_stack.$size(), rel_maxdepth), abs_maxdepth = self5.maxdepth["$[]"]("abs")))) {
                    curr_maxdepth = rel_maxdepth = abs_maxdepth;
                  }
                  ;
                  self5.maxdepth = $hash22(["abs", "curr", "rel"], { "abs": abs_maxdepth, "curr": curr_maxdepth, "rel": rel_maxdepth });
                } else {
                  self5.maxdepth = $hash22(["abs", "curr", "rel"], { "abs": self5.maxdepth["$[]"]("abs"), "curr": self5.include_stack.$size(), "rel": 0 });
                }
              }
              ;
              if ($truthy2((self5.lines = self5.$prepare_lines(data, $hash22(["normalize", "condense", "indent"], { "normalize": $truthy2($a2 = self5.process_lines) ? $a2 : "chomp", "condense": false, "indent": attributes["$[]"]("indent") })))["$empty?"]())) {
                self5.$pop_include();
              } else {
                if ($truthy2(attributes["$key?"]("leveloffset"))) {
                  self5.lines = $rb_plus($rb_plus([function() {
                    if ($truthy2(leveloffset = self5.document.$attr("leveloffset"))) {
                      return ":leveloffset: " + leveloffset;
                    } else {
                      return ":leveloffset!:";
                    }
                    ;
                    return nil2;
                  }(), ""], self5.lines.$reverse()), ["", ":leveloffset: " + attributes["$[]"]("leveloffset")]);
                  self5.lineno = $rb_minus(self5.lineno, 2);
                } else {
                  self5.lines["$reverse!"]();
                }
                ;
                self5.look_ahead = 0;
              }
              ;
              return self5;
            }, $PreprocessorReader_push_include$51.$$arity = -2);
            Opal2.def(self4, "$include_depth", $PreprocessorReader_include_depth$52 = function $$include_depth() {
              var self5 = this;
              return self5.include_stack.$size();
            }, $PreprocessorReader_include_depth$52.$$arity = 0);
            Opal2.def(self4, "$exceeds_max_depth?", $PreprocessorReader_exceeds_max_depth$ques$53 = function() {
              var $a2, $b2, self5 = this;
              return $truthy2($a2 = $truthy2($b2 = self5.maxdepth) ? $rb_ge(self5.include_stack.$size(), self5.maxdepth["$[]"]("curr")) : $b2) ? self5.maxdepth["$[]"]("rel") : $a2;
            }, $PreprocessorReader_exceeds_max_depth$ques$53.$$arity = 0);
            Opal2.alias(self4, "exceeded_max_depth?", "exceeds_max_depth?");
            Opal2.def(self4, "$shift", $PreprocessorReader_shift$54 = function $$shift() {
              var $iter2 = $PreprocessorReader_shift$54.$$p, $yield = $iter2 || nil2, self5 = this, line = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $PreprocessorReader_shift$54.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if ($truthy2(self5.unescape_next_line)) {
                self5.unescape_next_line = false;
                return (line = $send2(self5, Opal2.find_super_dispatcher(self5, "shift", $PreprocessorReader_shift$54, false), $zuper, $iter2)).$slice(1, line.$length());
              } else {
                return $send2(self5, Opal2.find_super_dispatcher(self5, "shift", $PreprocessorReader_shift$54, false), $zuper, $iter2);
              }
            }, $PreprocessorReader_shift$54.$$arity = 0);
            Opal2.def(self4, "$include_processors?", $PreprocessorReader_include_processors$ques$55 = function() {
              var $a2, self5 = this;
              if ($truthy2(self5.include_processor_extensions["$nil?"]())) {
                if ($truthy2($truthy2($a2 = self5.document["$extensions?"]()) ? self5.document.$extensions()["$include_processors?"]() : $a2)) {
                  return (self5.include_processor_extensions = self5.document.$extensions().$include_processors())["$!"]()["$!"]();
                } else {
                  return self5.include_processor_extensions = false;
                }
              } else {
                return self5.include_processor_extensions["$!="](false);
              }
            }, $PreprocessorReader_include_processors$ques$55.$$arity = 0);
            Opal2.def(self4, "$create_include_cursor", $PreprocessorReader_create_include_cursor$56 = function $$create_include_cursor(file2, path, lineno) {
              var self5 = this, dir = nil2;
              if ($truthy2($$$2("::", "String")["$==="](file2))) {
                dir = $$$2("::", "File").$dirname(file2);
              } else if ($truthy2($$2($nesting4, "RUBY_ENGINE_OPAL"))) {
                dir = $$$2("::", "File").$dirname(file2 = file2.$to_s());
              } else {
                dir = function() {
                  if ((dir = $$$2("::", "File").$dirname(file2.$path()))["$=="]("")) {
                    return "/";
                  } else {
                    return dir;
                  }
                  ;
                  return nil2;
                }();
                file2 = file2.$to_s();
              }
              ;
              return $$2($nesting4, "Cursor").$new(file2, dir, path, lineno);
            }, $PreprocessorReader_create_include_cursor$56.$$arity = 3);
            Opal2.def(self4, "$to_s", $PreprocessorReader_to_s$57 = function $$to_s() {
              var $$58, self5 = this;
              return "#<" + self5.$class() + "@" + self5.$object_id() + " {path: " + self5.path.$inspect() + ", line: " + self5.lineno + ", include depth: " + self5.include_stack.$size() + ", include stack: [" + $send2(self5.include_stack, "map", [], ($$58 = function(inc) {
                var self6 = $$58.$$s || this;
                if (inc == null) {
                  inc = nil2;
                }
                ;
                return inc.$to_s();
              }, $$58.$$s = self5, $$58.$$arity = 1, $$58)).$join(", ") + "]}>";
            }, $PreprocessorReader_to_s$57.$$arity = 0);
            self4.$private();
            Opal2.def(self4, "$prepare_lines", $PreprocessorReader_prepare_lines$59 = function $$prepare_lines(data, opts) {
              var $a2, $b2, $iter2 = $PreprocessorReader_prepare_lines$59.$$p, $yield = $iter2 || nil2, self5 = this, result2 = nil2, front_matter = nil2, $writer = nil2, last = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $PreprocessorReader_prepare_lines$59.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              result2 = $send2(self5, Opal2.find_super_dispatcher(self5, "prepare_lines", $PreprocessorReader_prepare_lines$59, false), $zuper, $iter2);
              if ($truthy2($truthy2($a2 = $truthy2($b2 = self5.document) ? self5.document.$attributes()["$[]"]("skip-front-matter") : $b2) ? front_matter = self5["$skip_front_matter!"](result2) : $a2)) {
                $writer = ["front-matter", front_matter.$join($$2($nesting4, "LF"))];
                $send2(self5.document.$attributes(), "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(opts.$fetch("condense", true))) {
                while ($truthy2($truthy2($b2 = last = result2["$[]"](-1)) ? last["$empty?"]() : $b2)) {
                  result2.$pop();
                }
              }
              ;
              if ($truthy2(opts["$[]"]("indent"))) {
                $$2($nesting4, "Parser")["$adjust_indentation!"](result2, opts["$[]"]("indent").$to_i(), self5.document.$attr("tabsize").$to_i());
              }
              ;
              return result2;
            }, $PreprocessorReader_prepare_lines$59.$$arity = -2);
            Opal2.def(self4, "$process_line", $PreprocessorReader_process_line$60 = function $$process_line(line) {
              var $a2, $b2, self5 = this;
              if ($truthy2(self5.process_lines)) {
              } else {
                return line;
              }
              ;
              if ($truthy2(line["$empty?"]())) {
                self5.look_ahead = $rb_plus(self5.look_ahead, 1);
                return line;
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = line["$end_with?"]("]")) ? line["$start_with?"]("[")["$!"]() : $b2) ? line["$include?"]("::") : $a2)) {
                if ($truthy2($truthy2($a2 = line["$include?"]("if")) ? $$2($nesting4, "ConditionalDirectiveRx")["$=~"](line) : $a2)) {
                  if ((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1))["$=="]("\\")) {
                    self5.unescape_next_line = true;
                    self5.look_ahead = $rb_plus(self5.look_ahead, 1);
                    return line.$slice(1, line.$length());
                  } else if ($truthy2(self5.$preprocess_conditional_directive(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](3), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](4), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](5)))) {
                    self5.$shift();
                    return nil2;
                  } else {
                    self5.look_ahead = $rb_plus(self5.look_ahead, 1);
                    return line;
                  }
                } else if ($truthy2(self5.skipping)) {
                  self5.$shift();
                  return nil2;
                } else if ($truthy2($truthy2($a2 = line["$start_with?"]("inc", "\\inc")) ? $$2($nesting4, "IncludeDirectiveRx")["$=~"](line) : $a2)) {
                  if ((($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1))["$=="]("\\")) {
                    self5.unescape_next_line = true;
                    self5.look_ahead = $rb_plus(self5.look_ahead, 1);
                    return line.$slice(1, line.$length());
                  } else if ($truthy2(self5.$preprocess_include_directive(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](3)))) {
                    return nil2;
                  } else {
                    self5.look_ahead = $rb_plus(self5.look_ahead, 1);
                    return line;
                  }
                } else {
                  self5.look_ahead = $rb_plus(self5.look_ahead, 1);
                  return line;
                }
              } else if ($truthy2(self5.skipping)) {
                self5.$shift();
                return nil2;
              } else {
                self5.look_ahead = $rb_plus(self5.look_ahead, 1);
                return line;
              }
              ;
            }, $PreprocessorReader_process_line$60.$$arity = 1);
            Opal2.def(self4, "$preprocess_conditional_directive", $PreprocessorReader_preprocess_conditional_directive$61 = function $$preprocess_conditional_directive(keyword, target, delimiter, text) {
              var $a2, $$62, $$63, $$64, $$65, self5 = this, no_target = nil2, pair = nil2, skip = nil2, $case = nil2, lhs = nil2, op = nil2, rhs = nil2;
              if ($truthy2(no_target = target["$empty?"]())) {
              } else {
                target = target.$downcase();
              }
              ;
              if (keyword["$=="]("endif")) {
                if ($truthy2(text)) {
                  self5.$logger().$error(self5.$message_with_context("malformed preprocessor directive - text not permitted: endif::" + target + "[" + text + "]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                } else if ($truthy2(self5.conditional_stack["$empty?"]())) {
                  self5.$logger().$error(self5.$message_with_context("unmatched preprocessor directive: endif::" + target + "[]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                } else if ($truthy2($truthy2($a2 = no_target) ? $a2 : target["$=="]((pair = self5.conditional_stack["$[]"](-1))["$[]"]("target")))) {
                  self5.conditional_stack.$pop();
                  self5.skipping = function() {
                    if ($truthy2(self5.conditional_stack["$empty?"]())) {
                      return false;
                    } else {
                      return self5.conditional_stack["$[]"](-1)["$[]"]("skipping");
                    }
                    ;
                    return nil2;
                  }();
                } else {
                  self5.$logger().$error(self5.$message_with_context("mismatched preprocessor directive: endif::" + target + "[], expected endif::" + pair["$[]"]("target") + "[]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                }
                ;
                return true;
              } else if ($truthy2(self5.skipping)) {
                skip = false;
              } else {
                $case = keyword;
                if ("ifdef"["$==="]($case)) {
                  if ($truthy2(no_target)) {
                    self5.$logger().$error(self5.$message_with_context("malformed preprocessor directive - missing target: ifdef::[" + text + "]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                    return true;
                  }
                  ;
                  $case = delimiter;
                  if (","["$==="]($case)) {
                    skip = $send2(target.$split(",", -1), "none?", [], ($$62 = function(name) {
                      var self6 = $$62.$$s || this;
                      if (self6.document == null)
                        self6.document = nil2;
                      if (name == null) {
                        name = nil2;
                      }
                      ;
                      return self6.document.$attributes()["$key?"](name);
                    }, $$62.$$s = self5, $$62.$$arity = 1, $$62));
                  } else if ("+"["$==="]($case)) {
                    skip = $send2(target.$split("+", -1), "any?", [], ($$63 = function(name) {
                      var self6 = $$63.$$s || this;
                      if (self6.document == null)
                        self6.document = nil2;
                      if (name == null) {
                        name = nil2;
                      }
                      ;
                      return self6.document.$attributes()["$key?"](name)["$!"]();
                    }, $$63.$$s = self5, $$63.$$arity = 1, $$63));
                  } else {
                    skip = self5.document.$attributes()["$key?"](target)["$!"]();
                  }
                  ;
                } else if ("ifndef"["$==="]($case)) {
                  if ($truthy2(no_target)) {
                    self5.$logger().$error(self5.$message_with_context("malformed preprocessor directive - missing target: ifndef::[" + text + "]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                    return true;
                  }
                  ;
                  $case = delimiter;
                  if (","["$==="]($case)) {
                    skip = $send2(target.$split(",", -1), "any?", [], ($$64 = function(name) {
                      var self6 = $$64.$$s || this;
                      if (self6.document == null)
                        self6.document = nil2;
                      if (name == null) {
                        name = nil2;
                      }
                      ;
                      return self6.document.$attributes()["$key?"](name);
                    }, $$64.$$s = self5, $$64.$$arity = 1, $$64));
                  } else if ("+"["$==="]($case)) {
                    skip = $send2(target.$split("+", -1), "all?", [], ($$65 = function(name) {
                      var self6 = $$65.$$s || this;
                      if (self6.document == null)
                        self6.document = nil2;
                      if (name == null) {
                        name = nil2;
                      }
                      ;
                      return self6.document.$attributes()["$key?"](name);
                    }, $$65.$$s = self5, $$65.$$arity = 1, $$65));
                  } else {
                    skip = self5.document.$attributes()["$key?"](target);
                  }
                  ;
                } else if ("ifeval"["$==="]($case)) {
                  if ($truthy2(no_target)) {
                    if ($truthy2($truthy2($a2 = text) ? $$2($nesting4, "EvalExpressionRx")["$=~"](text.$strip()) : $a2)) {
                      lhs = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1);
                      op = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2);
                      rhs = ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](3);
                      skip = function() {
                        try {
                          if ($truthy2(self5.$resolve_expr_val(lhs).$send(op, self5.$resolve_expr_val(rhs)))) {
                            return false;
                          } else {
                            return true;
                          }
                        } catch ($err) {
                          if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                            try {
                              return true;
                            } finally {
                              Opal2.pop_exception();
                            }
                          } else {
                            throw $err;
                          }
                        }
                      }();
                    } else {
                      self5.$logger().$error(self5.$message_with_context("malformed preprocessor directive - " + function() {
                        if ($truthy2(text)) {
                          return "invalid expression";
                        } else {
                          return "missing expression";
                        }
                        ;
                        return nil2;
                      }() + ": ifeval::[" + text + "]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                      return true;
                    }
                  } else {
                    self5.$logger().$error(self5.$message_with_context("malformed preprocessor directive - target not permitted: ifeval::" + target + "[" + text + "]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                    return true;
                  }
                }
              }
              ;
              if ($truthy2($truthy2($a2 = keyword["$=="]("ifeval")) ? $a2 : text["$!"]())) {
                if ($truthy2(skip)) {
                  self5.skipping = true;
                }
                ;
                self5.conditional_stack["$<<"]($hash22(["target", "skip", "skipping"], { "target": target, "skip": skip, "skipping": self5.skipping }));
              } else if ($truthy2($truthy2($a2 = self5.skipping) ? $a2 : skip)) {
              } else {
                self5.$replace_next_line(text.$rstrip());
                self5.$unshift("");
                if ($truthy2(text["$start_with?"]("include::"))) {
                  self5.look_ahead = $rb_minus(self5.look_ahead, 1);
                }
                ;
              }
              ;
              return true;
            }, $PreprocessorReader_preprocess_conditional_directive$61.$$arity = 4);
            Opal2.def(self4, "$preprocess_include_directive", $PreprocessorReader_preprocess_include_directive$66 = function $$preprocess_include_directive(target, attrlist) {
              var $a2, $b2, $$67, $$68, $$69, $$70, $$71, $$72, $$74, $$77, $$78, $$79, self5 = this, doc = nil2, expanded_target = nil2, attr_missing = nil2, ext = nil2, parsed_attrs = nil2, inc_path = nil2, target_type = nil2, relpath = nil2, $case = nil2, reader = nil2, read_mode = nil2, enc = nil2, $writer = nil2, read_mode_params = nil2, inc_linenos = nil2, inc_tags = nil2, tag = nil2, inc_lines = nil2, inc_offset = nil2, inc_lineno = nil2, tag_stack = nil2, tags_selected = nil2, active_tag = nil2, select = nil2, base_select = nil2, wildcard = nil2, missing_tags = nil2, inc_content = nil2;
              doc = self5.document;
              if ($truthy2($truthy2($a2 = (expanded_target = target)["$include?"]($$2($nesting4, "ATTR_REF_HEAD"))) ? (expanded_target = doc.$sub_attributes(target, $hash22(["attribute_missing"], { "attribute_missing": function() {
                if ((attr_missing = $truthy2($b2 = doc.$attributes()["$[]"]("attribute-missing")) ? $b2 : $$2($nesting4, "Compliance").$attribute_missing())["$=="]("warn")) {
                  return "drop-line";
                } else {
                  return attr_missing;
                }
                ;
                return nil2;
              }() })))["$empty?"]() : $a2)) {
                if ($truthy2(($a2 = attr_missing["$=="]("drop-line")) ? doc.$sub_attributes($rb_plus(target, " "), $hash22(["attribute_missing", "drop_line_severity"], { "attribute_missing": "drop-line", "drop_line_severity": "ignore" }))["$empty?"]() : attr_missing["$=="]("drop-line"))) {
                  $send2(self5.$logger(), "info", [], ($$67 = function() {
                    var self6 = $$67.$$s || this;
                    return self6.$message_with_context("include dropped due to missing attribute: include::" + target + "[" + attrlist + "]", $hash22(["source_location"], { "source_location": self6.$cursor() }));
                  }, $$67.$$s = self5, $$67.$$arity = 0, $$67));
                  self5.$shift();
                  return true;
                } else if ($truthy2(doc.$parse_attributes(attrlist, [], $hash22(["sub_input"], { "sub_input": true }))["$[]"]("optional-option"))) {
                  $send2(self5.$logger(), "info", [], ($$68 = function() {
                    var self6 = $$68.$$s || this, $c;
                    return self6.$message_with_context("optional include dropped " + function() {
                      if ($truthy2(($c = attr_missing["$=="]("warn")) ? doc.$sub_attributes($rb_plus(target, " "), $hash22(["attribute_missing", "drop_line_severity"], { "attribute_missing": "drop-line", "drop_line_severity": "ignore" }))["$empty?"]() : attr_missing["$=="]("warn"))) {
                        return "due to missing attribute";
                      } else {
                        return "because resolved target is blank";
                      }
                      ;
                      return nil2;
                    }() + ": include::" + target + "[" + attrlist + "]", $hash22(["source_location"], { "source_location": self6.$cursor() }));
                  }, $$68.$$s = self5, $$68.$$arity = 0, $$68));
                  self5.$shift();
                  return true;
                } else {
                  self5.$logger().$warn(self5.$message_with_context("include dropped " + function() {
                    if ($truthy2(($a2 = attr_missing["$=="]("warn")) ? doc.$sub_attributes($rb_plus(target, " "), $hash22(["attribute_missing", "drop_line_severity"], { "attribute_missing": "drop-line", "drop_line_severity": "ignore" }))["$empty?"]() : attr_missing["$=="]("warn"))) {
                      return "due to missing attribute";
                    } else {
                      return "because resolved target is blank";
                    }
                    ;
                    return nil2;
                  }() + ": include::" + target + "[" + attrlist + "]", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                  return self5.$replace_next_line("Unresolved directive in " + self5.path + " - include::" + target + "[" + attrlist + "]");
                }
              } else if ($truthy2($truthy2($a2 = self5["$include_processors?"]()) ? ext = $send2(self5.include_processor_extensions, "find", [], ($$69 = function(candidate) {
                var self6 = $$69.$$s || this;
                if (candidate == null) {
                  candidate = nil2;
                }
                ;
                return candidate.$instance()["$handles?"](expanded_target);
              }, $$69.$$s = self5, $$69.$$arity = 1, $$69)) : $a2)) {
                self5.$shift();
                ext.$process_method()["$[]"](doc, self5, expanded_target, doc.$parse_attributes(attrlist, [], $hash22(["sub_input"], { "sub_input": true })));
                return true;
              } else if ($truthy2($rb_ge(doc.$safe(), $$$2($$2($nesting4, "SafeMode"), "SECURE")))) {
                return self5.$replace_next_line("link:" + expanded_target + "[]");
              } else if ($truthy2(self5.maxdepth)) {
                if ($truthy2($rb_ge(self5.include_stack.$size(), self5.maxdepth["$[]"]("curr")))) {
                  self5.$logger().$error(self5.$message_with_context("maximum include depth of " + self5.maxdepth["$[]"]("rel") + " exceeded", $hash22(["source_location"], { "source_location": self5.$cursor() })));
                  return nil2;
                }
                ;
                parsed_attrs = doc.$parse_attributes(attrlist, [], $hash22(["sub_input"], { "sub_input": true }));
                $b2 = self5.$resolve_include_path(expanded_target, attrlist, parsed_attrs), $a2 = Opal2.to_ary($b2), inc_path = $a2[0] == null ? nil2 : $a2[0], target_type = $a2[1] == null ? nil2 : $a2[1], relpath = $a2[2] == null ? nil2 : $a2[2], $b2;
                $case = target_type;
                if ("file"["$==="]($case)) {
                  reader = $$$2("::", "File").$method("open");
                  read_mode = $$2($nesting4, "FILE_READ_MODE");
                } else if ("uri"["$==="]($case)) {
                  reader = $$$2("::", "OpenURI").$method("open_uri");
                  read_mode = $$2($nesting4, "URI_READ_MODE");
                } else {
                  return inc_path;
                }
                ;
                if ($truthy2($$2($nesting4, "RUBY_ENGINE_OPAL"))) {
                } else if ($truthy2($truthy2($a2 = enc = parsed_attrs["$[]"]("encoding")) ? function() {
                  try {
                    return $$$2("::", "Encoding").$find(enc);
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        return nil2;
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                }() : $a2)) {
                  $writer = [1, enc];
                  $send2(read_mode_params = read_mode.$split(":"), "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  read_mode = read_mode_params.$join(":");
                }
                ;
                inc_linenos = inc_tags = nil2;
                if ($truthy2(attrlist)) {
                  if ($truthy2(parsed_attrs["$key?"]("lines"))) {
                    inc_linenos = [];
                    $send2(self5.$split_delimited_value(parsed_attrs["$[]"]("lines")), "each", [], ($$70 = function(linedef) {
                      var self6 = $$70.$$s || this, $c, $d, from = nil2, _ = nil2, to = nil2;
                      if (linedef == null) {
                        linedef = nil2;
                      }
                      ;
                      if ($truthy2(linedef["$include?"](".."))) {
                        $d = linedef.$partition(".."), $c = Opal2.to_ary($d), from = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], to = $c[2] == null ? nil2 : $c[2], $d;
                        return inc_linenos = $rb_plus(inc_linenos, function() {
                          if ($truthy2($truthy2($c = to["$empty?"]()) ? $c : $rb_lt2(to = to.$to_i(), 0))) {
                            return [from.$to_i(), $$$2($$$2("::", "Float"), "INFINITY")];
                          } else {
                            return Opal2.Range.$new(from.$to_i(), to, false).$to_a();
                          }
                          ;
                          return nil2;
                        }());
                      } else {
                        return inc_linenos["$<<"](linedef.$to_i());
                      }
                      ;
                    }, $$70.$$s = self5, $$70.$$arity = 1, $$70));
                    inc_linenos = function() {
                      if ($truthy2(inc_linenos["$empty?"]())) {
                        return nil2;
                      } else {
                        return inc_linenos.$sort().$uniq();
                      }
                      ;
                      return nil2;
                    }();
                  } else if ($truthy2(parsed_attrs["$key?"]("tag"))) {
                    if ($truthy2($truthy2($a2 = (tag = parsed_attrs["$[]"]("tag"))["$empty?"]()) ? $a2 : tag["$=="]("!"))) {
                    } else {
                      inc_tags = function() {
                        if ($truthy2(tag["$start_with?"]("!"))) {
                          return $hash(tag.$slice(1, tag.$length()), false);
                        } else {
                          return $hash(tag, true);
                        }
                        ;
                        return nil2;
                      }();
                    }
                  } else if ($truthy2(parsed_attrs["$key?"]("tags"))) {
                    inc_tags = $hash22([], {});
                    $send2(self5.$split_delimited_value(parsed_attrs["$[]"]("tags")), "each", [], ($$71 = function(tagdef) {
                      var self6 = $$71.$$s || this, $c;
                      if (tagdef == null) {
                        tagdef = nil2;
                      }
                      ;
                      if ($truthy2($truthy2($c = tagdef["$empty?"]()) ? $c : tagdef["$=="]("!"))) {
                        return nil2;
                      } else if ($truthy2(tagdef["$start_with?"]("!"))) {
                        $writer = [tagdef.$slice(1, tagdef.$length()), false];
                        $send2(inc_tags, "[]=", Opal2.to_a($writer));
                        return $writer[$rb_minus($writer["length"], 1)];
                      } else {
                        $writer = [tagdef, true];
                        $send2(inc_tags, "[]=", Opal2.to_a($writer));
                        return $writer[$rb_minus($writer["length"], 1)];
                      }
                      ;
                    }, $$71.$$s = self5, $$71.$$arity = 1, $$71));
                    if ($truthy2(inc_tags["$empty?"]())) {
                      inc_tags = nil2;
                    }
                    ;
                  }
                }
                ;
                if ($truthy2(inc_linenos)) {
                  $a2 = [[], nil2, 0], inc_lines = $a2[0], inc_offset = $a2[1], inc_lineno = $a2[2], $a2;
                  try {
                    (function() {
                      var $brk = Opal2.new_brk();
                      try {
                        return $send2(reader, "call", [inc_path, read_mode], ($$72 = function(f) {
                          var self6 = $$72.$$s || this, $$73, select_remaining = nil2;
                          if (f == null) {
                            f = nil2;
                          }
                          ;
                          select_remaining = nil2;
                          return function() {
                            var $brk2 = Opal2.new_brk();
                            try {
                              return $send2(f, "each_line", [], ($$73 = function(l) {
                                var self7 = $$73.$$s || this, $c, $d, select2 = nil2;
                                if (l == null) {
                                  l = nil2;
                                }
                                ;
                                inc_lineno = $rb_plus(inc_lineno, 1);
                                if ($truthy2($truthy2($c = select_remaining) ? $c : $truthy2($d = $$$2("::", "Float")["$==="](select2 = inc_linenos["$[]"](0))) ? select_remaining = select2["$infinite?"]() : $d)) {
                                  inc_offset = $truthy2($c = inc_offset) ? $c : inc_lineno;
                                  return inc_lines["$<<"](l);
                                } else {
                                  if (select2["$=="](inc_lineno)) {
                                    inc_offset = $truthy2($c = inc_offset) ? $c : inc_lineno;
                                    inc_lines["$<<"](l);
                                    inc_linenos.$shift();
                                  }
                                  ;
                                  if ($truthy2(inc_linenos["$empty?"]())) {
                                    Opal2.brk(nil2, $brk2);
                                  } else {
                                    return nil2;
                                  }
                                  ;
                                }
                                ;
                              }, $$73.$$s = self6, $$73.$$brk = $brk2, $$73.$$arity = 1, $$73));
                            } catch (err) {
                              if (err === $brk2) {
                                return err.$v;
                              } else {
                                throw err;
                              }
                            }
                          }();
                        }, $$72.$$s = self5, $$72.$$brk = $brk, $$72.$$arity = 1, $$72));
                      } catch (err) {
                        if (err === $brk) {
                          return err.$v;
                        } else {
                          throw err;
                        }
                      }
                    })();
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        self5.$logger().$error(self5.$message_with_context("include " + target_type + " not readable: " + inc_path, $hash22(["source_location"], { "source_location": self5.$cursor() })));
                        return self5.$replace_next_line("Unresolved directive in " + self5.path + " - include::" + expanded_target + "[" + attrlist + "]");
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                  ;
                  ;
                  self5.$shift();
                  if ($truthy2(inc_offset)) {
                    $writer = ["partial-option", ""];
                    $send2(parsed_attrs, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    ;
                    self5.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);
                  }
                  ;
                } else if ($truthy2(inc_tags)) {
                  $a2 = [[], nil2, 0, [], $$$2("::", "Set").$new(), nil2], inc_lines = $a2[0], inc_offset = $a2[1], inc_lineno = $a2[2], tag_stack = $a2[3], tags_selected = $a2[4], active_tag = $a2[5], $a2;
                  if ($truthy2(inc_tags["$key?"]("**"))) {
                    select = base_select = inc_tags.$delete("**");
                    if ($truthy2(inc_tags["$key?"]("*"))) {
                      wildcard = inc_tags.$delete("*");
                    } else if ($truthy2($truthy2($a2 = select["$!"]()) ? inc_tags.$values().$first()["$=="](false) : $a2)) {
                      wildcard = true;
                    }
                    ;
                  } else if ($truthy2(inc_tags["$key?"]("*"))) {
                    if (inc_tags.$keys().$first()["$=="]("*")) {
                      select = base_select = (wildcard = inc_tags.$delete("*"))["$!"]();
                    } else {
                      select = base_select = false;
                      wildcard = inc_tags.$delete("*");
                    }
                  } else {
                    select = base_select = inc_tags["$value?"](true)["$!"]();
                  }
                  ;
                  try {
                    $send2(reader, "call", [inc_path, read_mode], ($$74 = function(f) {
                      var self6 = $$74.$$s || this, $c, $$75, dbl_co = nil2, dbl_sb = nil2;
                      if (f == null) {
                        f = nil2;
                      }
                      ;
                      $c = ["::", "[]"], dbl_co = $c[0], dbl_sb = $c[1], $c;
                      return $send2(f, "each_line", [], ($$75 = function(l) {
                        var self7 = $$75.$$s || this, $d, $e, $$76, this_tag = nil2, include_cursor = nil2, idx = nil2;
                        if (l == null) {
                          l = nil2;
                        }
                        ;
                        inc_lineno = $rb_plus(inc_lineno, 1);
                        if ($truthy2($truthy2($d = $truthy2($e = l["$include?"](dbl_co)) ? l["$include?"](dbl_sb) : $e) ? $$2($nesting4, "TagDirectiveRx")["$=~"](l) : $d)) {
                          this_tag = ($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](2);
                          if ($truthy2(($d = $gvars["~"]) === nil2 ? nil2 : $d["$[]"](1))) {
                            if (this_tag["$=="](active_tag)) {
                              tag_stack.$pop();
                              return $e = function() {
                                if ($truthy2(tag_stack["$empty?"]())) {
                                  return [nil2, base_select];
                                } else {
                                  return tag_stack["$[]"](-1);
                                }
                                ;
                                return nil2;
                              }(), $d = Opal2.to_ary($e), active_tag = $d[0] == null ? nil2 : $d[0], select = $d[1] == null ? nil2 : $d[1], $e;
                            } else if ($truthy2(inc_tags["$key?"](this_tag))) {
                              include_cursor = self7.$create_include_cursor(inc_path, expanded_target, inc_lineno);
                              if ($truthy2(idx = $send2(tag_stack, "rindex", [], ($$76 = function(key) {
                                var self8 = $$76.$$s || this;
                                if (key == null) {
                                  key = nil2;
                                }
                                ;
                                return key["$=="](this_tag);
                              }, $$76.$$s = self7, $$76.$$arity = 1, $$76.$$has_trailing_comma_in_args = true, $$76)))) {
                                if (idx["$=="](0)) {
                                  tag_stack.$shift();
                                } else {
                                  tag_stack.$delete_at(idx);
                                }
                                ;
                                return self7.$logger().$warn(self7.$message_with_context("mismatched end tag (expected '" + active_tag + "' but found '" + this_tag + "') at line " + inc_lineno + " of include " + target_type + ": " + inc_path, $hash22(["source_location", "include_location"], { "source_location": self7.$cursor(), "include_location": include_cursor })));
                              } else {
                                return self7.$logger().$warn(self7.$message_with_context("unexpected end tag '" + this_tag + "' at line " + inc_lineno + " of include " + target_type + ": " + inc_path, $hash22(["source_location", "include_location"], { "source_location": self7.$cursor(), "include_location": include_cursor })));
                              }
                              ;
                            } else {
                              return nil2;
                            }
                          } else if ($truthy2(inc_tags["$key?"](this_tag))) {
                            if ($truthy2(select = inc_tags["$[]"](this_tag))) {
                              tags_selected["$<<"](this_tag);
                            }
                            ;
                            return tag_stack["$<<"]([active_tag = this_tag, select, inc_lineno]);
                          } else if ($truthy2(wildcard["$nil?"]()["$!"]())) {
                            select = function() {
                              if ($truthy2($truthy2($d = active_tag) ? select["$!"]() : $d)) {
                                return false;
                              } else {
                                return wildcard;
                              }
                              ;
                              return nil2;
                            }();
                            return tag_stack["$<<"]([active_tag = this_tag, select, inc_lineno]);
                          } else {
                            return nil2;
                          }
                          ;
                        } else if ($truthy2(select)) {
                          inc_offset = $truthy2($d = inc_offset) ? $d : inc_lineno;
                          return inc_lines["$<<"](l);
                        } else {
                          return nil2;
                        }
                        ;
                      }, $$75.$$s = self6, $$75.$$arity = 1, $$75));
                    }, $$74.$$s = self5, $$74.$$arity = 1, $$74));
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        self5.$logger().$error(self5.$message_with_context("include " + target_type + " not readable: " + inc_path, $hash22(["source_location"], { "source_location": self5.$cursor() })));
                        return self5.$replace_next_line("Unresolved directive in " + self5.path + " - include::" + expanded_target + "[" + attrlist + "]");
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                  ;
                  ;
                  if ($truthy2(tag_stack["$empty?"]())) {
                  } else {
                    $send2(tag_stack, "each", [], ($$77 = function(tag_name, _, tag_lineno) {
                      var self6 = $$77.$$s || this;
                      if (tag_name == null) {
                        tag_name = nil2;
                      }
                      ;
                      if (_ == null) {
                        _ = nil2;
                      }
                      ;
                      if (tag_lineno == null) {
                        tag_lineno = nil2;
                      }
                      ;
                      return self6.$logger().$warn(self6.$message_with_context("detected unclosed tag '" + tag_name + "' starting at line " + tag_lineno + " of include " + target_type + ": " + inc_path, $hash22(["source_location", "include_location"], { "source_location": self6.$cursor(), "include_location": self6.$create_include_cursor(inc_path, expanded_target, tag_lineno) })));
                    }, $$77.$$s = self5, $$77.$$arity = 3, $$77));
                  }
                  ;
                  if ($truthy2((missing_tags = $rb_minus($send2(inc_tags, "keep_if", [], ($$78 = function(_, v) {
                    var self6 = $$78.$$s || this;
                    if (_ == null) {
                      _ = nil2;
                    }
                    ;
                    if (v == null) {
                      v = nil2;
                    }
                    ;
                    return v;
                  }, $$78.$$s = self5, $$78.$$arity = 2, $$78)).$keys(), tags_selected.$to_a()))["$empty?"]())) {
                  } else {
                    self5.$logger().$warn(self5.$message_with_context("tag" + function() {
                      if ($truthy2($rb_gt2(missing_tags.$size(), 1))) {
                        return "s";
                      } else {
                        return "";
                      }
                      ;
                      return nil2;
                    }() + " '" + missing_tags.$join(", ") + "' not found in include " + target_type + ": " + inc_path, $hash22(["source_location"], { "source_location": self5.$cursor() })));
                  }
                  ;
                  self5.$shift();
                  if ($truthy2(inc_offset)) {
                    if ($truthy2($truthy2($a2 = $truthy2($b2 = base_select) ? wildcard["$!="](false) : $b2) ? inc_tags["$empty?"]() : $a2)) {
                    } else {
                      $writer = ["partial-option", ""];
                      $send2(parsed_attrs, "[]=", Opal2.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    }
                    ;
                    self5.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);
                  }
                  ;
                } else {
                  try {
                    inc_content = $send2(reader, "call", [inc_path, read_mode], ($$79 = function(f) {
                      var self6 = $$79.$$s || this;
                      if (f == null) {
                        f = nil2;
                      }
                      ;
                      return f.$read();
                    }, $$79.$$s = self5, $$79.$$arity = 1, $$79));
                    self5.$shift();
                    self5.$push_include(inc_content, inc_path, relpath, 1, parsed_attrs);
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        self5.$logger().$error(self5.$message_with_context("include " + target_type + " not readable: " + inc_path, $hash22(["source_location"], { "source_location": self5.$cursor() })));
                        return self5.$replace_next_line("Unresolved directive in " + self5.path + " - include::" + expanded_target + "[" + attrlist + "]");
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                  ;
                }
                ;
                return true;
              } else {
                return nil2;
              }
              ;
            }, $PreprocessorReader_preprocess_include_directive$66.$$arity = 2);
            Opal2.def(self4, "$resolve_include_path", $PreprocessorReader_resolve_include_path$80 = function $$resolve_include_path(target, attrlist, attributes) {
              var $a2, $b2, $$81, self5 = this, doc = nil2, inc_path = nil2, relpath = nil2;
              doc = self5.document;
              if ($truthy2($truthy2($a2 = $$2($nesting4, "Helpers")["$uriish?"](target)) ? $a2 : function() {
                if ($truthy2($$$2("::", "String")["$==="](self5.dir))) {
                  return nil2;
                } else {
                  return target = "" + self5.dir + "/" + target;
                }
                ;
                return nil2;
              }())) {
                if ($truthy2(doc["$attr?"]("allow-uri-read"))) {
                } else {
                  return self5.$replace_next_line("link:" + target + "[" + attrlist + "]");
                }
                ;
                if ($truthy2(doc["$attr?"]("cache-uri"))) {
                  if ($truthy2(($b2 = $$$2("::", "OpenURI", "skip_raise")) && ($a2 = $$$2($b2, "Cache", "skip_raise")) ? "constant" : nil2)) {
                  } else {
                    $$2($nesting4, "Helpers").$require_library("open-uri/cached", "open-uri-cached");
                  }
                } else if ($truthy2($$2($nesting4, "RUBY_ENGINE_OPAL")["$!"]())) {
                  $$$2("::", "OpenURI");
                }
                ;
                return [$$$2("::", "URI").$parse(target), "uri", target];
              } else {
                inc_path = doc.$normalize_system_path(target, self5.dir, nil2, $hash22(["target_name"], { "target_name": "include file" }));
                if ($truthy2($$$2("::", "File")["$file?"](inc_path))) {
                } else if ($truthy2(attributes["$[]"]("optional-option"))) {
                  $send2(self5.$logger(), "info", [], ($$81 = function() {
                    var self6 = $$81.$$s || this;
                    return self6.$message_with_context("optional include dropped because include file not found: " + inc_path, $hash22(["source_location"], { "source_location": self6.$cursor() }));
                  }, $$81.$$s = self5, $$81.$$arity = 0, $$81));
                  self5.$shift();
                  return true;
                } else {
                  self5.$logger().$error(self5.$message_with_context("include file not found: " + inc_path, $hash22(["source_location"], { "source_location": self5.$cursor() })));
                  return self5.$replace_next_line("Unresolved directive in " + self5.path + " - include::" + target + "[" + attrlist + "]");
                }
                ;
                relpath = doc.$path_resolver().$relative_path(inc_path, doc.$base_dir());
                return [inc_path, "file", relpath];
              }
              ;
            }, $PreprocessorReader_resolve_include_path$80.$$arity = 3);
            Opal2.def(self4, "$pop_include", $PreprocessorReader_pop_include$82 = function $$pop_include() {
              var $a2, $b2, self5 = this;
              if ($truthy2(self5.include_stack["$empty?"]())) {
                return nil2;
              } else {
                $b2 = self5.include_stack.$pop(), $a2 = Opal2.to_ary($b2), self5.lines = $a2[0] == null ? nil2 : $a2[0], self5.file = $a2[1] == null ? nil2 : $a2[1], self5.dir = $a2[2] == null ? nil2 : $a2[2], self5.path = $a2[3] == null ? nil2 : $a2[3], self5.lineno = $a2[4] == null ? nil2 : $a2[4], self5.maxdepth = $a2[5] == null ? nil2 : $a2[5], self5.process_lines = $a2[6] == null ? nil2 : $a2[6], $b2;
                self5.look_ahead = 0;
                return nil2;
              }
            }, $PreprocessorReader_pop_include$82.$$arity = 0);
            Opal2.def(self4, "$split_delimited_value", $PreprocessorReader_split_delimited_value$83 = function $$split_delimited_value(val) {
              var self5 = this;
              if ($truthy2(val["$include?"](","))) {
                return val.$split(",");
              } else {
                return val.$split(";");
              }
            }, $PreprocessorReader_split_delimited_value$83.$$arity = 1);
            Opal2.def(self4, "$skip_front_matter!", $PreprocessorReader_skip_front_matter$excl$84 = function(data, increment_linenos) {
              var $a2, $b2, self5 = this, front_matter = nil2, original_data = nil2;
              if (increment_linenos == null) {
                increment_linenos = true;
              }
              ;
              front_matter = nil2;
              if (data["$[]"](0)["$=="]("---")) {
                original_data = data.$drop(0);
                data.$shift();
                front_matter = [];
                if ($truthy2(increment_linenos)) {
                  self5.lineno = $rb_plus(self5.lineno, 1);
                }
                ;
                while ($truthy2($truthy2($b2 = data["$empty?"]()["$!"]()) ? data["$[]"](0)["$!="]("---") : $b2)) {
                  front_matter["$<<"](data.$shift());
                  if ($truthy2(increment_linenos)) {
                    self5.lineno = $rb_plus(self5.lineno, 1);
                  }
                  ;
                }
                ;
                if ($truthy2(data["$empty?"]())) {
                  $send2(data, "unshift", Opal2.to_a(original_data));
                  if ($truthy2(increment_linenos)) {
                    self5.lineno = 0;
                  }
                  ;
                  front_matter = nil2;
                } else {
                  data.$shift();
                  if ($truthy2(increment_linenos)) {
                    self5.lineno = $rb_plus(self5.lineno, 1);
                  }
                  ;
                }
                ;
              }
              ;
              return front_matter;
            }, $PreprocessorReader_skip_front_matter$excl$84.$$arity = -2);
            return (Opal2.def(self4, "$resolve_expr_val", $PreprocessorReader_resolve_expr_val$85 = function $$resolve_expr_val(val) {
              var $a2, $b2, self5 = this, quoted = nil2;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = val["$start_with?"]('"')) ? val["$end_with?"]('"') : $b2) ? $a2 : $truthy2($b2 = val["$start_with?"]("'")) ? val["$end_with?"]("'") : $b2)) {
                quoted = true;
                val = val.$slice(1, $rb_minus(val.$length(), 1));
              } else {
                quoted = false;
              }
              ;
              if ($truthy2(val["$include?"]($$2($nesting4, "ATTR_REF_HEAD")))) {
                val = self5.document.$sub_attributes(val, $hash22(["attribute_missing"], { "attribute_missing": "drop" }));
              }
              ;
              if ($truthy2(quoted)) {
                return val;
              } else if ($truthy2(val["$empty?"]())) {
                return nil2;
              } else if (val["$=="]("true")) {
                return true;
              } else if (val["$=="]("false")) {
                return false;
              } else if ($truthy2(val.$rstrip()["$empty?"]())) {
                return " ";
              } else if ($truthy2(val["$include?"]("."))) {
                return val.$to_f();
              } else {
                return val.$to_i();
              }
              ;
            }, $PreprocessorReader_resolve_expr_val$85.$$arity = 1), nil2) && "resolve_expr_val";
          })($nesting3[0], $$2($nesting3, "Reader"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/section"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$attr_accessor", "$attr_reader", "$===", "$+", "$level", "$special", "$generate_id", "$title", "$>", "$==", "$sectnum", "$reftext", "$!", "$empty?", "$sub_placeholder", "$sub_quotes", "$compat_mode", "$[]", "$attributes", "$context", "$assign_numeral", "$class", "$object_id", "$inspect", "$size", "$length", "$chr", "$[]=", "$-", "$gsub", "$downcase", "$delete", "$tr_s", "$end_with?", "$chop", "$start_with?", "$slice", "$key?", "$catalog", "$unique_id_start_index"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Section");
            var $nesting4 = [self4].concat($parent_nesting3), $Section_initialize$1, $Section_generate_id$2, $Section_sections$ques$3, $Section_sectnum$4, $Section_xreftext$5, $Section_$lt$lt$6, $Section_to_s$7, $Section_generate_id$8;
            self4.$$prototype.document = self4.$$prototype.next_section_index = self4.$$prototype.level = self4.$$prototype.parent = self4.$$prototype.numeral = self4.$$prototype.numbered = self4.$$prototype.sectname = self4.$$prototype.title = self4.$$prototype.blocks = nil2;
            self4.$attr_accessor("index");
            self4.$attr_accessor("sectname");
            self4.$attr_accessor("special");
            self4.$attr_accessor("numbered");
            self4.$attr_reader("caption");
            Opal2.def(self4, "$initialize", $Section_initialize$1 = function $$initialize(parent, level, numbered, opts) {
              var $a2, $b2, $iter2 = $Section_initialize$1.$$p, $yield = $iter2 || nil2, self5 = this;
              if ($iter2)
                $Section_initialize$1.$$p = null;
              if (parent == null) {
                parent = nil2;
              }
              ;
              if (level == null) {
                level = nil2;
              }
              ;
              if (numbered == null) {
                numbered = false;
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Section_initialize$1, false), [parent, "section", opts], null);
              if ($truthy2($$2($nesting4, "Section")["$==="](parent))) {
                $a2 = [$truthy2($b2 = level) ? $b2 : $rb_plus(parent.$level(), 1), parent.$special()], self5.level = $a2[0], self5.special = $a2[1], $a2;
              } else {
                $a2 = [$truthy2($b2 = level) ? $b2 : 1, false], self5.level = $a2[0], self5.special = $a2[1], $a2;
              }
              ;
              self5.numbered = numbered;
              return self5.index = 0;
            }, $Section_initialize$1.$$arity = -1);
            Opal2.alias(self4, "name", "title");
            Opal2.def(self4, "$generate_id", $Section_generate_id$2 = function $$generate_id() {
              var self5 = this;
              return $$2($nesting4, "Section").$generate_id(self5.$title(), self5.document);
            }, $Section_generate_id$2.$$arity = 0);
            Opal2.def(self4, "$sections?", $Section_sections$ques$3 = function() {
              var self5 = this;
              return $rb_gt2(self5.next_section_index, 0);
            }, $Section_sections$ques$3.$$arity = 0);
            Opal2.def(self4, "$sectnum", $Section_sectnum$4 = function $$sectnum(delimiter, append) {
              var $a2, self5 = this;
              if (delimiter == null) {
                delimiter = ".";
              }
              ;
              if (append == null) {
                append = nil2;
              }
              ;
              append = $truthy2($a2 = append) ? $a2 : function() {
                if (append["$=="](false)) {
                  return "";
                } else {
                  return delimiter;
                }
                ;
                return nil2;
              }();
              if ($truthy2($truthy2($a2 = $rb_gt2(self5.level, 1)) ? $$2($nesting4, "Section")["$==="](self5.parent) : $a2)) {
                return "" + self5.parent.$sectnum(delimiter, delimiter) + self5.numeral + append;
              } else {
                return "" + self5.numeral + append;
              }
              ;
            }, $Section_sectnum$4.$$arity = -1);
            Opal2.def(self4, "$xreftext", $Section_xreftext$5 = function $$xreftext(xrefstyle) {
              var $a2, self5 = this, val = nil2, $case = nil2, type = nil2, quoted_title = nil2, signifier = nil2;
              if (xrefstyle == null) {
                xrefstyle = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = val = self5.$reftext()) ? val["$empty?"]()["$!"]() : $a2)) {
                return val;
              } else if ($truthy2(xrefstyle)) {
                if ($truthy2(self5.numbered)) {
                  return function() {
                    $case = xrefstyle;
                    if ("full"["$==="]($case)) {
                      if ($truthy2($truthy2($a2 = (type = self5.sectname)["$=="]("chapter")) ? $a2 : type["$=="]("appendix"))) {
                        quoted_title = self5.$sub_placeholder(self5.$sub_quotes("_%s_"), self5.$title());
                      } else {
                        quoted_title = self5.$sub_placeholder(self5.$sub_quotes(function() {
                          if ($truthy2(self5.document.$compat_mode())) {
                            return "``%s''";
                          } else {
                            return '"`%s`"';
                          }
                          ;
                          return nil2;
                        }()), self5.$title());
                      }
                      ;
                      if ($truthy2(signifier = self5.document.$attributes()["$[]"]("" + type + "-refsig"))) {
                        return "" + signifier + " " + self5.$sectnum(".", ",") + " " + quoted_title;
                      } else {
                        return "" + self5.$sectnum(".", ",") + " " + quoted_title;
                      }
                      ;
                    } else if ("short"["$==="]($case)) {
                      if ($truthy2(signifier = self5.document.$attributes()["$[]"]("" + self5.sectname + "-refsig"))) {
                        return "" + signifier + " " + self5.$sectnum(".", "");
                      } else {
                        return self5.$sectnum(".", "");
                      }
                    } else {
                      if ($truthy2($truthy2($a2 = (type = self5.sectname)["$=="]("chapter")) ? $a2 : type["$=="]("appendix"))) {
                        return self5.$sub_placeholder(self5.$sub_quotes("_%s_"), self5.$title());
                      } else {
                        return self5.$title();
                      }
                    }
                  }();
                } else if ($truthy2($truthy2($a2 = (type = self5.sectname)["$=="]("chapter")) ? $a2 : type["$=="]("appendix"))) {
                  return self5.$sub_placeholder(self5.$sub_quotes("_%s_"), self5.$title());
                } else {
                  return self5.$title();
                }
              } else {
                return self5.$title();
              }
              ;
            }, $Section_xreftext$5.$$arity = -1);
            Opal2.def(self4, "$<<", $Section_$lt$lt$6 = function(block2) {
              var $iter2 = $Section_$lt$lt$6.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Section_$lt$lt$6.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (block2.$context()["$=="]("section")) {
                self5.$assign_numeral(block2);
              }
              ;
              return $send2(self5, Opal2.find_super_dispatcher(self5, "<<", $Section_$lt$lt$6, false), $zuper, $iter2);
            }, $Section_$lt$lt$6.$$arity = 1);
            Opal2.def(self4, "$to_s", $Section_to_s$7 = function $$to_s() {
              var $iter2 = $Section_to_s$7.$$p, $yield = $iter2 || nil2, self5 = this, formal_title = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Section_to_s$7.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if ($truthy2(self5.title)) {
                formal_title = function() {
                  if ($truthy2(self5.numbered)) {
                    return "" + self5.$sectnum() + " " + self5.title;
                  } else {
                    return self5.title;
                  }
                  ;
                  return nil2;
                }();
                return "#<" + self5.$class() + "@" + self5.$object_id() + " {level: " + self5.level + ", title: " + formal_title.$inspect() + ", blocks: " + self5.blocks.$size() + "}>";
              } else {
                return $send2(self5, Opal2.find_super_dispatcher(self5, "to_s", $Section_to_s$7, false), $zuper, $iter2);
              }
            }, $Section_to_s$7.$$arity = 0);
            return (Opal2.defs(self4, "$generate_id", $Section_generate_id$8 = function $$generate_id(title, document) {
              var $a2, $b2, self5 = this, attrs = nil2, pre = nil2, sep = nil2, no_sep = nil2, $writer = nil2, sep_sub = nil2, gen_id = nil2, ids = nil2, cnt = nil2, candidate_id = nil2;
              attrs = document.$attributes();
              pre = $truthy2($a2 = attrs["$[]"]("idprefix")) ? $a2 : "_";
              if ($truthy2(sep = attrs["$[]"]("idseparator"))) {
                if ($truthy2($truthy2($a2 = sep.$length()["$=="](1)) ? $a2 : $truthy2($b2 = (no_sep = sep["$empty?"]())["$!"]()) ? sep = ($writer = ["idseparator", sep.$chr()], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]) : $b2)) {
                  sep_sub = function() {
                    if ($truthy2($truthy2($a2 = sep["$=="]("-")) ? $a2 : sep["$=="]("."))) {
                      return " .-";
                    } else {
                      return " " + sep + ".-";
                    }
                    ;
                    return nil2;
                  }();
                }
              } else {
                $a2 = ["_", " _.-"], sep = $a2[0], sep_sub = $a2[1], $a2;
              }
              ;
              gen_id = "" + pre + title.$downcase().$gsub($$2($nesting4, "InvalidSectionIdCharsRx"), "");
              if ($truthy2(no_sep)) {
                gen_id = gen_id.$delete(" ");
              } else {
                gen_id = gen_id.$tr_s(sep_sub, sep);
                if ($truthy2(gen_id["$end_with?"](sep))) {
                  gen_id = gen_id.$chop();
                }
                ;
                if ($truthy2($truthy2($a2 = pre["$empty?"]()) ? gen_id["$start_with?"](sep) : $a2)) {
                  gen_id = gen_id.$slice(1, gen_id.$length());
                }
                ;
              }
              ;
              if ($truthy2(document.$catalog()["$[]"]("refs")["$key?"](gen_id))) {
                ids = document.$catalog()["$[]"]("refs");
                cnt = $$2($nesting4, "Compliance").$unique_id_start_index();
                while ($truthy2(ids["$[]"](candidate_id = "" + gen_id + sep + cnt))) {
                  cnt = $rb_plus(cnt, 1);
                }
                ;
                return candidate_id;
              } else {
                return gen_id;
              }
              ;
            }, $Section_generate_id$8.$$arity = 2), nil2) && "generate_id";
          })($nesting3[0], $$2($nesting3, "AbstractBlock"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/stylesheets"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2;
        Opal2.add_stubs(["$join", "$new", "$rstrip", "$read", "$primary_stylesheet_data", "$write", "$primary_stylesheet_name", "$stylesheet_basename", "$for", "$read_stylesheet", "$coderay_stylesheet_data", "$coderay_stylesheet_name", "$pygments_stylesheet_data", "$pygments_stylesheet_name"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Stylesheets");
            var $nesting4 = [self4].concat($parent_nesting3), $Stylesheets_instance$1, $Stylesheets_primary_stylesheet_name$2, $Stylesheets_primary_stylesheet_data$3, $Stylesheets_embed_primary_stylesheet$4, $Stylesheets_write_primary_stylesheet$5, $Stylesheets_coderay_stylesheet_name$6, $Stylesheets_coderay_stylesheet_data$7, $Stylesheets_embed_coderay_stylesheet$8, $Stylesheets_write_coderay_stylesheet$9, $Stylesheets_pygments_stylesheet_name$10, $Stylesheets_pygments_stylesheet_data$11, $Stylesheets_embed_pygments_stylesheet$12, $Stylesheets_write_pygments_stylesheet$13;
            self4.$$prototype.primary_stylesheet_data = nil2;
            Opal2.const_set($nesting4[0], "DEFAULT_STYLESHEET_NAME", "asciidoctor.css");
            Opal2.const_set($nesting4[0], "STYLESHEETS_DIR", $$$2("::", "File").$join($$2($nesting4, "DATA_DIR"), "stylesheets"));
            self4.__instance__ = self4.$new();
            Opal2.defs(self4, "$instance", $Stylesheets_instance$1 = function $$instance() {
              var self5 = this;
              if (self5.__instance__ == null)
                self5.__instance__ = nil2;
              return self5.__instance__;
            }, $Stylesheets_instance$1.$$arity = 0);
            Opal2.def(self4, "$primary_stylesheet_name", $Stylesheets_primary_stylesheet_name$2 = function $$primary_stylesheet_name() {
              var self5 = this;
              return $$2($nesting4, "DEFAULT_STYLESHEET_NAME");
            }, $Stylesheets_primary_stylesheet_name$2.$$arity = 0);
            Opal2.def(self4, "$primary_stylesheet_data", $Stylesheets_primary_stylesheet_data$3 = function $$primary_stylesheet_data() {
              var $a2, self5 = this;
              return self5.primary_stylesheet_data = $truthy2($a2 = self5.primary_stylesheet_data) ? $a2 : $$$2("::", "File").$read($$$2("::", "File").$join($$2($nesting4, "STYLESHEETS_DIR"), "asciidoctor-default.css"), $hash22(["mode"], { "mode": $$2($nesting4, "FILE_READ_MODE") })).$rstrip();
            }, $Stylesheets_primary_stylesheet_data$3.$$arity = 0);
            Opal2.def(self4, "$embed_primary_stylesheet", $Stylesheets_embed_primary_stylesheet$4 = function $$embed_primary_stylesheet() {
              var self5 = this;
              return "<style>\n" + self5.$primary_stylesheet_data() + "\n</style>";
            }, $Stylesheets_embed_primary_stylesheet$4.$$arity = 0);
            Opal2.def(self4, "$write_primary_stylesheet", $Stylesheets_write_primary_stylesheet$5 = function $$write_primary_stylesheet(target_dir) {
              var self5 = this;
              if (target_dir == null) {
                target_dir = ".";
              }
              ;
              return $$$2("::", "File").$write($$$2("::", "File").$join(target_dir, self5.$primary_stylesheet_name()), self5.$primary_stylesheet_data(), $hash22(["mode"], { "mode": $$2($nesting4, "FILE_WRITE_MODE") }));
            }, $Stylesheets_write_primary_stylesheet$5.$$arity = -1);
            Opal2.def(self4, "$coderay_stylesheet_name", $Stylesheets_coderay_stylesheet_name$6 = function $$coderay_stylesheet_name() {
              var self5 = this;
              return $$2($nesting4, "SyntaxHighlighter").$for("coderay").$stylesheet_basename();
            }, $Stylesheets_coderay_stylesheet_name$6.$$arity = 0);
            Opal2.def(self4, "$coderay_stylesheet_data", $Stylesheets_coderay_stylesheet_data$7 = function $$coderay_stylesheet_data() {
              var self5 = this;
              return $$2($nesting4, "SyntaxHighlighter").$for("coderay").$read_stylesheet();
            }, $Stylesheets_coderay_stylesheet_data$7.$$arity = 0);
            Opal2.def(self4, "$embed_coderay_stylesheet", $Stylesheets_embed_coderay_stylesheet$8 = function $$embed_coderay_stylesheet() {
              var self5 = this;
              return "<style>\n" + self5.$coderay_stylesheet_data() + "\n</style>";
            }, $Stylesheets_embed_coderay_stylesheet$8.$$arity = 0);
            Opal2.def(self4, "$write_coderay_stylesheet", $Stylesheets_write_coderay_stylesheet$9 = function $$write_coderay_stylesheet(target_dir) {
              var self5 = this;
              if (target_dir == null) {
                target_dir = ".";
              }
              ;
              return $$$2("::", "File").$write($$$2("::", "File").$join(target_dir, self5.$coderay_stylesheet_name()), self5.$coderay_stylesheet_data(), $hash22(["mode"], { "mode": $$2($nesting4, "FILE_WRITE_MODE") }));
            }, $Stylesheets_write_coderay_stylesheet$9.$$arity = -1);
            Opal2.def(self4, "$pygments_stylesheet_name", $Stylesheets_pygments_stylesheet_name$10 = function $$pygments_stylesheet_name(style) {
              var self5 = this;
              if (style == null) {
                style = nil2;
              }
              ;
              return $$2($nesting4, "SyntaxHighlighter").$for("pygments").$stylesheet_basename(style);
            }, $Stylesheets_pygments_stylesheet_name$10.$$arity = -1);
            Opal2.def(self4, "$pygments_stylesheet_data", $Stylesheets_pygments_stylesheet_data$11 = function $$pygments_stylesheet_data(style) {
              var self5 = this;
              if (style == null) {
                style = nil2;
              }
              ;
              return $$2($nesting4, "SyntaxHighlighter").$for("pygments").$read_stylesheet(style);
            }, $Stylesheets_pygments_stylesheet_data$11.$$arity = -1);
            Opal2.def(self4, "$embed_pygments_stylesheet", $Stylesheets_embed_pygments_stylesheet$12 = function $$embed_pygments_stylesheet(style) {
              var self5 = this;
              if (style == null) {
                style = nil2;
              }
              ;
              return "<style>\n" + self5.$pygments_stylesheet_data(style) + "\n</style>";
            }, $Stylesheets_embed_pygments_stylesheet$12.$$arity = -1);
            return (Opal2.def(self4, "$write_pygments_stylesheet", $Stylesheets_write_pygments_stylesheet$13 = function $$write_pygments_stylesheet(target_dir, style) {
              var self5 = this;
              if (target_dir == null) {
                target_dir = ".";
              }
              ;
              if (style == null) {
                style = nil2;
              }
              ;
              return $$$2("::", "File").$write($$$2("::", "File").$join(target_dir, self5.$pygments_stylesheet_name(style)), self5.$pygments_stylesheet_data(style), $hash22(["mode"], { "mode": $$2($nesting4, "FILE_WRITE_MODE") }));
            }, $Stylesheets_write_pygments_stylesheet$13.$$arity = -1), nil2) && "write_pygments_stylesheet";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/table"] = function(Opal2) {
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_times(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
        }
        function $rb_divide(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs / rhs : lhs["$/"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$attr_accessor", "$attr_reader", "$new", "$[]", "$>", "$to_i", "$<", "$==", "$[]=", "$-", "$attributes", "$truncate", "$*", "$/", "$to_f", "$empty?", "$body", "$each", "$<<", "$size", "$+", "$assign_column_widths", "$warn", "$logger", "$update_attributes", "$assign_width", "$round", "$map", "$shift", "$reinitialize", "$head=", "$nil?", "$unshift", "$pop", "$foot=", "$parent", "$sourcemap", "$dup", "$header_row?", "$table", "$style", "$merge", "$delete", "$===", "$start_with?", "$rstrip", "$slice", "$length", "$advance", "$lstrip", "$strip", "$split", "$include?", "$readlines", "$catalog_inline_anchor", "$=~", "$apply_subs", "$attr_writer", "$convert", "$text", "$!=", "$file", "$lineno", "$include", "$to_set", "$mark", "$key?", "$nested?", "$document", "$error", "$message_with_context", "$cursor_at_prev_line", "$nil_or_empty?", "$escape", "$columns", "$match", "$chop", "$end_with?", "$gsub", "$!", "$push_cellspec", "$cell_open?", "$close_cell", "$take_cellspec", "$squeeze", "$upto", "$times", "$cursor_before_mark", "$rowspan", "$activate_rowspan", "$colspan", "$end_of_row?", "$close_row", "$private", "$rows", "$effective_column_visits"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Table");
            var $nesting4 = [self4].concat($parent_nesting3), $Table_initialize$4, $Table_header_row$ques$5, $Table_create_columns$6, $Table_assign_column_widths$8, $Table_partition_header_footer$12;
            self4.$$prototype.attributes = self4.$$prototype.document = self4.$$prototype.has_header_option = self4.$$prototype.rows = self4.$$prototype.columns = nil2;
            Opal2.const_set($nesting4[0], "DEFAULT_PRECISION", 4);
            (function($base4, $super3, $parent_nesting4) {
              var self5 = $klass2($base4, $super3, "Rows");
              var $nesting5 = [self5].concat($parent_nesting4), $Rows_initialize$1, $Rows_by_section$2, $Rows_to_h$3;
              self5.$$prototype.head = self5.$$prototype.body = self5.$$prototype.foot = nil2;
              self5.$attr_accessor("head", "foot", "body");
              Opal2.def(self5, "$initialize", $Rows_initialize$1 = function $$initialize(head, foot, body) {
                var self6 = this;
                if (head == null) {
                  head = [];
                }
                ;
                if (foot == null) {
                  foot = [];
                }
                ;
                if (body == null) {
                  body = [];
                }
                ;
                self6.head = head;
                self6.foot = foot;
                return self6.body = body;
              }, $Rows_initialize$1.$$arity = -1);
              Opal2.alias(self5, "[]", "send");
              Opal2.def(self5, "$by_section", $Rows_by_section$2 = function $$by_section() {
                var self6 = this;
                return [["head", self6.head], ["body", self6.body], ["foot", self6.foot]];
              }, $Rows_by_section$2.$$arity = 0);
              return (Opal2.def(self5, "$to_h", $Rows_to_h$3 = function $$to_h() {
                var self6 = this;
                return $hash22(["head", "body", "foot"], { "head": self6.head, "body": self6.body, "foot": self6.foot });
              }, $Rows_to_h$3.$$arity = 0), nil2) && "to_h";
            })($nesting4[0], null, $nesting4);
            self4.$attr_accessor("columns");
            self4.$attr_accessor("rows");
            self4.$attr_accessor("has_header_option");
            self4.$attr_reader("caption");
            Opal2.def(self4, "$initialize", $Table_initialize$4 = function $$initialize(parent, attributes) {
              var $a2, $b2, $iter2 = $Table_initialize$4.$$p, $yield = $iter2 || nil2, self5 = this, pcwidth = nil2, pcwidth_intval = nil2, $writer = nil2, abswidth_val = nil2;
              if ($iter2)
                $Table_initialize$4.$$p = null;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Table_initialize$4, false), [parent, "table"], null);
              self5.rows = $$2($nesting4, "Rows").$new();
              self5.columns = [];
              self5.has_header_option = false;
              if ($truthy2(pcwidth = attributes["$[]"]("width"))) {
                if ($truthy2($truthy2($a2 = $rb_gt2(pcwidth_intval = pcwidth.$to_i(), 100)) ? $a2 : $rb_lt2(pcwidth_intval, 1))) {
                  if ($truthy2(($a2 = pcwidth_intval["$=="](0)) ? $truthy2($b2 = pcwidth["$=="]("0")) ? $b2 : pcwidth["$=="]("0%") : pcwidth_intval["$=="](0))) {
                  } else {
                    pcwidth_intval = 100;
                  }
                }
              } else {
                pcwidth_intval = 100;
              }
              ;
              $writer = ["tablepcwidth", pcwidth_intval];
              $send2(self5.attributes, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              if ($truthy2(self5.document.$attributes()["$[]"]("pagewidth"))) {
                $writer = ["tableabswidth", function() {
                  if ((abswidth_val = $rb_times($rb_divide(pcwidth_intval, 100), self5.document.$attributes()["$[]"]("pagewidth").$to_f()).$truncate($$2($nesting4, "DEFAULT_PRECISION")))["$=="](abswidth_val.$to_i())) {
                    return abswidth_val.$to_i();
                  } else {
                    return abswidth_val;
                  }
                  ;
                  return nil2;
                }()];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(attributes["$[]"]("rotate-option"))) {
                $writer = ["orientation", "landscape"];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil2;
              }
              ;
            }, $Table_initialize$4.$$arity = 2);
            Opal2.def(self4, "$header_row?", $Table_header_row$ques$5 = function() {
              var $a2, self5 = this, val = nil2;
              if ($truthy2($truthy2($a2 = val = self5.has_header_option) ? self5.rows.$body()["$empty?"]() : $a2)) {
                return val;
              } else {
                return nil2;
              }
            }, $Table_header_row$ques$5.$$arity = 0);
            Opal2.def(self4, "$create_columns", $Table_create_columns$6 = function $$create_columns(colspecs) {
              var $$7, $a2, self5 = this, cols = nil2, autowidth_cols = nil2, width_base = nil2, num_cols = nil2, $writer = nil2;
              cols = [];
              autowidth_cols = nil2;
              width_base = 0;
              $send2(colspecs, "each", [], ($$7 = function(colspec) {
                var self6 = $$7.$$s || this, $a3, colwidth = nil2;
                if (colspec == null) {
                  colspec = nil2;
                }
                ;
                colwidth = colspec["$[]"]("width");
                cols["$<<"]($$2($nesting4, "Column").$new(self6, cols.$size(), colspec));
                if ($truthy2($rb_lt2(colwidth, 0))) {
                  return (autowidth_cols = $truthy2($a3 = autowidth_cols) ? $a3 : [])["$<<"](cols["$[]"](-1));
                } else {
                  return width_base = $rb_plus(width_base, colwidth);
                }
                ;
              }, $$7.$$s = self5, $$7.$$arity = 1, $$7));
              if ($truthy2($rb_gt2(num_cols = (self5.columns = cols).$size(), 0))) {
                $writer = ["colcount", num_cols];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                if ($truthy2($truthy2($a2 = $rb_gt2(width_base, 0)) ? $a2 : autowidth_cols)) {
                } else {
                  width_base = nil2;
                }
                ;
                self5.$assign_column_widths(width_base, autowidth_cols);
              }
              ;
              return nil2;
            }, $Table_create_columns$6.$$arity = 1);
            Opal2.def(self4, "$assign_column_widths", $Table_assign_column_widths$8 = function $$assign_column_widths(width_base, autowidth_cols) {
              var $$92, $$10, $$11, self5 = this, precision = nil2, total_width = nil2, col_pcwidth = nil2, autowidth = nil2, autowidth_attrs = nil2;
              if (width_base == null) {
                width_base = nil2;
              }
              ;
              if (autowidth_cols == null) {
                autowidth_cols = nil2;
              }
              ;
              precision = $$2($nesting4, "DEFAULT_PRECISION");
              total_width = col_pcwidth = 0;
              if ($truthy2(width_base)) {
                if ($truthy2(autowidth_cols)) {
                  if ($truthy2($rb_gt2(width_base, 100))) {
                    autowidth = 0;
                    self5.$logger().$warn("total column width must not exceed 100% when using autowidth columns; got " + width_base + "%");
                  } else {
                    autowidth = $rb_divide($rb_minus(100, width_base), autowidth_cols.$size()).$truncate(precision);
                    if (autowidth.$to_i()["$=="](autowidth)) {
                      autowidth = autowidth.$to_i();
                    }
                    ;
                    width_base = 100;
                  }
                  ;
                  autowidth_attrs = $hash22(["width", "autowidth-option"], { "width": autowidth, "autowidth-option": "" });
                  $send2(autowidth_cols, "each", [], ($$92 = function(col) {
                    var self6 = $$92.$$s || this;
                    if (col == null) {
                      col = nil2;
                    }
                    ;
                    return col.$update_attributes(autowidth_attrs);
                  }, $$92.$$s = self5, $$92.$$arity = 1, $$92));
                }
                ;
                $send2(self5.columns, "each", [], ($$10 = function(col) {
                  var self6 = $$10.$$s || this;
                  if (col == null) {
                    col = nil2;
                  }
                  ;
                  return total_width = $rb_plus(total_width, col_pcwidth = col.$assign_width(nil2, width_base, precision));
                }, $$10.$$s = self5, $$10.$$arity = 1, $$10));
              } else {
                col_pcwidth = $rb_divide(100, self5.columns.$size()).$truncate(precision);
                if (col_pcwidth.$to_i()["$=="](col_pcwidth)) {
                  col_pcwidth = col_pcwidth.$to_i();
                }
                ;
                $send2(self5.columns, "each", [], ($$11 = function(col) {
                  var self6 = $$11.$$s || this;
                  if (col == null) {
                    col = nil2;
                  }
                  ;
                  return total_width = $rb_plus(total_width, col.$assign_width(col_pcwidth, nil2, precision));
                }, $$11.$$s = self5, $$11.$$arity = 1, $$11));
              }
              ;
              if (total_width["$=="](100)) {
              } else {
                self5.columns["$[]"](-1).$assign_width($rb_plus($rb_minus(100, total_width), col_pcwidth).$round(precision), nil2, precision);
              }
              ;
              return nil2;
            }, $Table_assign_column_widths$8.$$arity = -1);
            return (Opal2.def(self4, "$partition_header_footer", $Table_partition_header_footer$12 = function $$partition_header_footer(attrs) {
              var $$13, $$14, $a2, self5 = this, num_body_rows = nil2, $writer = nil2, body = nil2;
              num_body_rows = ($writer = ["rowcount", (body = self5.rows.$body()).$size()], $send2(self5.attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              if ($truthy2($rb_gt2(num_body_rows, 0))) {
                if ($truthy2(self5.has_header_option)) {
                  $writer = [[$send2(body.$shift(), "map", [], ($$13 = function(cell) {
                    var self6 = $$13.$$s || this;
                    if (cell == null) {
                      cell = nil2;
                    }
                    ;
                    return cell.$reinitialize(true);
                  }, $$13.$$s = self5, $$13.$$arity = 1, $$13))]];
                  $send2(self5.rows, "head=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  num_body_rows = $rb_minus(num_body_rows, 1);
                } else if ($truthy2(self5.has_header_option["$nil?"]())) {
                  self5.has_header_option = false;
                  body.$unshift($send2(body.$shift(), "map", [], ($$14 = function(cell) {
                    var self6 = $$14.$$s || this;
                    if (cell == null) {
                      cell = nil2;
                    }
                    ;
                    return cell.$reinitialize(false);
                  }, $$14.$$s = self5, $$14.$$arity = 1, $$14)));
                }
              }
              ;
              if ($truthy2($truthy2($a2 = $rb_gt2(num_body_rows, 0)) ? attrs["$[]"]("footer-option") : $a2)) {
                $writer = [[body.$pop()]];
                $send2(self5.rows, "foot=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              return nil2;
            }, $Table_partition_header_footer$12.$$arity = 1), nil2) && "partition_header_footer";
          })($nesting3[0], $$2($nesting3, "AbstractBlock"), $nesting3);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Column");
            var $nesting4 = [self4].concat($parent_nesting3), $Column_initialize$15, $Column_assign_width$16, $Column_block$ques$17, $Column_inline$ques$18;
            self4.$$prototype.attributes = nil2;
            self4.$attr_accessor("style");
            Opal2.def(self4, "$initialize", $Column_initialize$15 = function $$initialize(table, index, attributes) {
              var $a2, $iter2 = $Column_initialize$15.$$p, $yield = $iter2 || nil2, self5 = this, $writer = nil2;
              if ($iter2)
                $Column_initialize$15.$$p = null;
              if (attributes == null) {
                attributes = $hash22([], {});
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Column_initialize$15, false), [table, "table_column"], null);
              self5.style = attributes["$[]"]("style");
              $writer = ["colnumber", $rb_plus(index, 1)];
              $send2(attributes, "[]=", Opal2.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $truthy2($a2 = attributes["$[]"]("width")) ? $a2 : ($writer = ["width", 1], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              $truthy2($a2 = attributes["$[]"]("halign")) ? $a2 : ($writer = ["halign", "left"], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              $truthy2($a2 = attributes["$[]"]("valign")) ? $a2 : ($writer = ["valign", "top"], $send2(attributes, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              return self5.$update_attributes(attributes);
            }, $Column_initialize$15.$$arity = -3);
            Opal2.alias(self4, "table", "parent");
            Opal2.def(self4, "$assign_width", $Column_assign_width$16 = function $$assign_width(col_pcwidth, width_base, precision) {
              var self5 = this, $writer = nil2, col_abswidth = nil2;
              if ($truthy2(width_base)) {
                col_pcwidth = $rb_divide($rb_times(self5.attributes["$[]"]("width").$to_f(), 100), width_base).$truncate(precision);
                if (col_pcwidth.$to_i()["$=="](col_pcwidth)) {
                  col_pcwidth = col_pcwidth.$to_i();
                }
                ;
              }
              ;
              if ($truthy2(self5.$parent().$attributes()["$[]"]("tableabswidth"))) {
                $writer = ["colabswidth", function() {
                  if ((col_abswidth = $rb_times($rb_divide(col_pcwidth, 100), self5.$parent().$attributes()["$[]"]("tableabswidth")).$truncate(precision))["$=="](col_abswidth.$to_i())) {
                    return col_abswidth.$to_i();
                  } else {
                    return col_abswidth;
                  }
                  ;
                  return nil2;
                }()];
                $send2(self5.attributes, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              $writer = ["colpcwidth", col_pcwidth];
              $send2(self5.attributes, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              ;
            }, $Column_assign_width$16.$$arity = 3);
            Opal2.def(self4, "$block?", $Column_block$ques$17 = function() {
              var self5 = this;
              return false;
            }, $Column_block$ques$17.$$arity = 0);
            return (Opal2.def(self4, "$inline?", $Column_inline$ques$18 = function() {
              var self5 = this;
              return false;
            }, $Column_inline$ques$18.$$arity = 0), nil2) && "inline?";
          })($$2($nesting3, "Table"), $$2($nesting3, "AbstractNode"), $nesting3);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Cell");
            var $nesting4 = [self4].concat($parent_nesting3), $Cell_initialize$19, $Cell_reinitialize$20, $Cell_catalog_inline_anchor$21, $Cell_text$22, $Cell_content$23, $Cell_lines$25, $Cell_source$26, $Cell_file$27, $Cell_lineno$28, $Cell_to_s$29;
            self4.$$prototype.document = self4.$$prototype.reinitialize_args = self4.$$prototype.attributes = self4.$$prototype.cursor = self4.$$prototype.text = self4.$$prototype.subs = self4.$$prototype.style = self4.$$prototype.inner_document = self4.$$prototype.source_location = self4.$$prototype.colspan = self4.$$prototype.rowspan = nil2;
            Opal2.const_set($nesting4[0], "DOUBLE_LF", $rb_times($$2($nesting4, "LF"), 2));
            self4.$attr_accessor("colspan");
            self4.$attr_accessor("rowspan");
            Opal2.alias(self4, "column", "parent");
            self4.$attr_reader("inner_document");
            Opal2.def(self4, "$initialize", $Cell_initialize$19 = function $$initialize(column, cell_text, attributes, opts) {
              var $a2, $b2, $c, $iter2 = $Cell_initialize$19.$$p, $yield = $iter2 || nil2, self5 = this, in_header_row = nil2, cell_style = nil2, $case = nil2, asciidoc = nil2, inner_document_cursor = nil2, lines_advanced = nil2, literal = nil2, normal_psv = nil2, parent_doctitle = nil2, inner_document_lines = nil2, unprocessed_line1 = nil2, preprocessed_lines = nil2, $writer = nil2;
              if ($iter2)
                $Cell_initialize$19.$$p = null;
              if (attributes == null) {
                attributes = $hash22([], {});
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $Cell_initialize$19, false), [column, "table_cell"], null);
              self5.cursor = self5.reinitialize_args = nil2;
              if ($truthy2(self5.document.$sourcemap())) {
                self5.source_location = opts["$[]"]("cursor").$dup();
              }
              ;
              if ($truthy2(column)) {
                if ($truthy2(in_header_row = column.$table()["$header_row?"]())) {
                  if ($truthy2(($a2 = in_header_row["$=="]("implicit")) ? cell_style = $truthy2($b2 = column.$style()) ? $b2 : $truthy2($c = attributes) ? attributes["$[]"]("style") : $c : in_header_row["$=="]("implicit"))) {
                    if ($truthy2($truthy2($a2 = cell_style["$=="]("asciidoc")) ? $a2 : cell_style["$=="]("literal"))) {
                      self5.reinitialize_args = [column, cell_text, $truthy2($a2 = attributes) ? attributes.$merge() : $a2, opts];
                    }
                    ;
                    cell_style = nil2;
                  }
                } else {
                  cell_style = column.$style();
                }
                ;
                self5.$update_attributes(column.$attributes());
              }
              ;
              if ($truthy2(attributes)) {
                if ($truthy2(attributes["$empty?"]())) {
                  self5.colspan = self5.rowspan = nil2;
                } else {
                  $a2 = [attributes.$delete("colspan"), attributes.$delete("rowspan")], self5.colspan = $a2[0], self5.rowspan = $a2[1], $a2;
                  if ($truthy2(in_header_row)) {
                  } else {
                    cell_style = $truthy2($a2 = attributes["$[]"]("style")) ? $a2 : cell_style;
                  }
                  ;
                  self5.$update_attributes(attributes);
                }
                ;
                $case = cell_style;
                if ("asciidoc"["$==="]($case)) {
                  asciidoc = true;
                  inner_document_cursor = opts["$[]"]("cursor");
                  if ($truthy2((cell_text = cell_text.$rstrip())["$start_with?"]($$2($nesting4, "LF")))) {
                    lines_advanced = 1;
                    while ($truthy2((cell_text = cell_text.$slice(1, cell_text.$length()))["$start_with?"]($$2($nesting4, "LF")))) {
                      lines_advanced = $rb_plus(lines_advanced, 1);
                    }
                    ;
                    inner_document_cursor.$advance(lines_advanced);
                  } else {
                    cell_text = cell_text.$lstrip();
                  }
                  ;
                } else if ("literal"["$==="]($case)) {
                  literal = true;
                  cell_text = cell_text.$rstrip();
                  while ($truthy2(cell_text["$start_with?"]($$2($nesting4, "LF")))) {
                    cell_text = cell_text.$slice(1, cell_text.$length());
                  }
                  ;
                } else {
                  normal_psv = true;
                  cell_text = function() {
                    if ($truthy2(cell_text)) {
                      return cell_text.$strip();
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                }
                ;
              } else {
                self5.colspan = self5.rowspan = nil2;
                if (cell_style["$=="]("asciidoc")) {
                  asciidoc = true;
                  inner_document_cursor = opts["$[]"]("cursor");
                }
                ;
              }
              ;
              if ($truthy2(asciidoc)) {
                parent_doctitle = self5.document.$attributes().$delete("doctitle");
                inner_document_lines = cell_text.$split($$2($nesting4, "LF"), -1);
                if ($truthy2(inner_document_lines["$empty?"]())) {
                } else if ($truthy2((unprocessed_line1 = inner_document_lines["$[]"](0))["$include?"]("::"))) {
                  preprocessed_lines = $$2($nesting4, "PreprocessorReader").$new(self5.document, [unprocessed_line1]).$readlines();
                  if ($truthy2(($a2 = unprocessed_line1["$=="](preprocessed_lines["$[]"](0))) ? $rb_lt2(preprocessed_lines.$size(), 2) : unprocessed_line1["$=="](preprocessed_lines["$[]"](0)))) {
                  } else {
                    inner_document_lines.$shift();
                    if ($truthy2(preprocessed_lines["$empty?"]())) {
                    } else {
                      $send2(inner_document_lines, "unshift", Opal2.to_a(preprocessed_lines));
                    }
                    ;
                  }
                  ;
                }
                ;
                self5.inner_document = $$2($nesting4, "Document").$new(inner_document_lines, $hash22(["standalone", "parent", "cursor"], { "standalone": false, "parent": self5.document, "cursor": inner_document_cursor }));
                if ($truthy2(parent_doctitle["$nil?"]())) {
                } else {
                  $writer = ["doctitle", parent_doctitle];
                  $send2(self5.document.$attributes(), "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                self5.subs = nil2;
              } else if ($truthy2(literal)) {
                self5.content_model = "verbatim";
                self5.subs = $$2($nesting4, "BASIC_SUBS");
              } else {
                if ($truthy2(normal_psv)) {
                  if ($truthy2(in_header_row)) {
                    self5.cursor = opts["$[]"]("cursor");
                  } else {
                    self5.$catalog_inline_anchor(cell_text, opts["$[]"]("cursor"));
                  }
                }
                ;
                self5.content_model = "simple";
                self5.subs = $$2($nesting4, "NORMAL_SUBS");
              }
              ;
              self5.text = cell_text;
              return self5.style = cell_style;
            }, $Cell_initialize$19.$$arity = -3);
            Opal2.def(self4, "$reinitialize", $Cell_reinitialize$20 = function $$reinitialize(has_header) {
              var self5 = this;
              if ($truthy2(has_header)) {
                self5.reinitialize_args = nil2;
              } else if ($truthy2(self5.reinitialize_args)) {
                return $send2($$$2($$2($nesting4, "Table"), "Cell"), "new", Opal2.to_a(self5.reinitialize_args));
              } else {
                self5.style = self5.attributes["$[]"]("style");
              }
              ;
              if ($truthy2(self5.cursor)) {
                self5.$catalog_inline_anchor();
              }
              ;
              return self5;
            }, $Cell_reinitialize$20.$$arity = 1);
            Opal2.def(self4, "$catalog_inline_anchor", $Cell_catalog_inline_anchor$21 = function $$catalog_inline_anchor(cell_text, cursor) {
              var $a2, self5 = this;
              if (cell_text == null) {
                cell_text = self5.text;
              }
              ;
              if (cursor == null) {
                cursor = nil2;
              }
              ;
              if ($truthy2(cursor)) {
              } else {
                $a2 = [self5.cursor, nil2], cursor = $a2[0], self5.cursor = $a2[1], $a2;
              }
              ;
              if ($truthy2($truthy2($a2 = cell_text["$start_with?"]("[[")) ? $$2($nesting4, "LeadingInlineAnchorRx")["$=~"](cell_text) : $a2)) {
                return $$2($nesting4, "Parser").$catalog_inline_anchor(($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](1), ($a2 = $gvars["~"]) === nil2 ? nil2 : $a2["$[]"](2), self5, cursor, self5.document);
              } else {
                return nil2;
              }
              ;
            }, $Cell_catalog_inline_anchor$21.$$arity = -1);
            Opal2.def(self4, "$text", $Cell_text$22 = function $$text() {
              var self5 = this;
              return self5.$apply_subs(self5.text, self5.subs);
            }, $Cell_text$22.$$arity = 0);
            self4.$attr_writer("text");
            Opal2.def(self4, "$content", $Cell_content$23 = function $$content() {
              var $$24, $a2, self5 = this, cell_style = nil2, subbed_text = nil2;
              if ((cell_style = self5.style)["$=="]("asciidoc")) {
                return self5.inner_document.$convert();
              } else if ($truthy2(self5.text["$include?"]($$2($nesting4, "DOUBLE_LF")))) {
                return $send2(self5.$text().$split($$2($nesting4, "BlankLineRx")), "map", [], ($$24 = function(para) {
                  var self6 = $$24.$$s || this, $a3;
                  if (para == null) {
                    para = nil2;
                  }
                  ;
                  if ($truthy2($truthy2($a3 = cell_style) ? cell_style["$!="]("header") : $a3)) {
                    return $$2($nesting4, "Inline").$new(self6.$parent(), "quoted", para, $hash22(["type"], { "type": cell_style })).$convert();
                  } else {
                    return para;
                  }
                  ;
                }, $$24.$$s = self5, $$24.$$arity = 1, $$24));
              } else if ($truthy2((subbed_text = self5.$text())["$empty?"]())) {
                return [];
              } else if ($truthy2($truthy2($a2 = cell_style) ? cell_style["$!="]("header") : $a2)) {
                return [$$2($nesting4, "Inline").$new(self5.$parent(), "quoted", subbed_text, $hash22(["type"], { "type": cell_style })).$convert()];
              } else {
                return [subbed_text];
              }
            }, $Cell_content$23.$$arity = 0);
            Opal2.def(self4, "$lines", $Cell_lines$25 = function $$lines() {
              var self5 = this;
              return self5.text.$split($$2($nesting4, "LF"));
            }, $Cell_lines$25.$$arity = 0);
            Opal2.def(self4, "$source", $Cell_source$26 = function $$source() {
              var self5 = this;
              return self5.text;
            }, $Cell_source$26.$$arity = 0);
            Opal2.def(self4, "$file", $Cell_file$27 = function $$file() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.source_location) ? self5.source_location.$file() : $a2;
            }, $Cell_file$27.$$arity = 0);
            Opal2.def(self4, "$lineno", $Cell_lineno$28 = function $$lineno() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.source_location) ? self5.source_location.$lineno() : $a2;
            }, $Cell_lineno$28.$$arity = 0);
            return (Opal2.def(self4, "$to_s", $Cell_to_s$29 = function $$to_s() {
              var $a2, $iter2 = $Cell_to_s$29.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Cell_to_s$29.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              return "" + $send2(self5, Opal2.find_super_dispatcher(self5, "to_s", $Cell_to_s$29, false), $zuper, $iter2) + " - [text: " + self5.text + ", colspan: " + ($truthy2($a2 = self5.colspan) ? $a2 : 1) + ", rowspan: " + ($truthy2($a2 = self5.rowspan) ? $a2 : 1) + ", attributes: " + self5.attributes + "]";
            }, $Cell_to_s$29.$$arity = 0), nil2) && "to_s";
          })($$2($nesting3, "Table"), $$2($nesting3, "AbstractBlock"), $nesting3);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "ParserContext");
            var $nesting4 = [self4].concat($parent_nesting3), $ParserContext_initialize$30, $ParserContext_starts_with_delimiter$ques$31, $ParserContext_match_delimiter$32, $ParserContext_skip_past_delimiter$33, $ParserContext_skip_past_escaped_delimiter$34, $ParserContext_buffer_has_unclosed_quotes$ques$35, $ParserContext_take_cellspec$36, $ParserContext_push_cellspec$37, $ParserContext_keep_cell_open$38, $ParserContext_mark_cell_closed$39, $ParserContext_cell_open$ques$40, $ParserContext_cell_closed$ques$41, $ParserContext_close_open_cell$42, $ParserContext_close_cell$43, $ParserContext_close_row$46, $ParserContext_activate_rowspan$47, $ParserContext_end_of_row$ques$49, $ParserContext_effective_column_visits$50, $ParserContext_advance$51;
            self4.$$prototype.delimiter = self4.$$prototype.delimiter_rx = self4.$$prototype.buffer = self4.$$prototype.cellspecs = self4.$$prototype.cell_open = self4.$$prototype.format = self4.$$prototype.start_cursor_data = self4.$$prototype.reader = self4.$$prototype.table = self4.$$prototype.current_row = self4.$$prototype.colcount = self4.$$prototype.column_visits = self4.$$prototype.active_rowspans = self4.$$prototype.linenum = nil2;
            self4.$include($$2($nesting4, "Logging"));
            Opal2.const_set($nesting4[0], "FORMATS", ["psv", "csv", "dsv", "tsv"].$to_set());
            Opal2.const_set($nesting4[0], "DELIMITERS", $hash22(["psv", "csv", "dsv", "tsv", "!sv"], { "psv": ["|", /\|/], "csv": [",", /,/], "dsv": [":", /:/], "tsv": ["	", /\t/], "!sv": ["!", /!/] }));
            self4.$attr_accessor("table");
            self4.$attr_accessor("format");
            self4.$attr_reader("colcount");
            self4.$attr_accessor("buffer");
            self4.$attr_reader("delimiter");
            self4.$attr_reader("delimiter_re");
            Opal2.def(self4, "$initialize", $ParserContext_initialize$30 = function $$initialize(reader, table, attributes) {
              var $a2, $b2, self5 = this, xsv = nil2, sep = nil2;
              if (attributes == null) {
                attributes = $hash22([], {});
              }
              ;
              self5.start_cursor_data = (self5.reader = reader).$mark();
              self5.table = table;
              if ($truthy2(attributes["$key?"]("format"))) {
                if ($truthy2($$2($nesting4, "FORMATS")["$include?"](xsv = attributes["$[]"]("format")))) {
                  if (xsv["$=="]("tsv")) {
                    self5.format = "csv";
                  } else if ($truthy2(($a2 = (self5.format = xsv)["$=="]("psv")) ? table.$document()["$nested?"]() : (self5.format = xsv)["$=="]("psv"))) {
                    xsv = "!sv";
                  }
                } else {
                  self5.$logger().$error(self5.$message_with_context("illegal table format: " + xsv, $hash22(["source_location"], { "source_location": reader.$cursor_at_prev_line() })));
                  $a2 = ["psv", function() {
                    if ($truthy2(table.$document()["$nested?"]())) {
                      return "!sv";
                    } else {
                      return "psv";
                    }
                    ;
                    return nil2;
                  }()], self5.format = $a2[0], xsv = $a2[1], $a2;
                }
              } else {
                $a2 = ["psv", function() {
                  if ($truthy2(table.$document()["$nested?"]())) {
                    return "!sv";
                  } else {
                    return "psv";
                  }
                  ;
                  return nil2;
                }()], self5.format = $a2[0], xsv = $a2[1], $a2;
              }
              ;
              if ($truthy2(attributes["$key?"]("separator"))) {
                if ($truthy2((sep = attributes["$[]"]("separator"))["$nil_or_empty?"]())) {
                  $b2 = $$2($nesting4, "DELIMITERS")["$[]"](xsv), $a2 = Opal2.to_ary($b2), self5.delimiter = $a2[0] == null ? nil2 : $a2[0], self5.delimiter_rx = $a2[1] == null ? nil2 : $a2[1], $b2;
                } else if (sep["$=="]("\\t")) {
                  $b2 = $$2($nesting4, "DELIMITERS")["$[]"]("tsv"), $a2 = Opal2.to_ary($b2), self5.delimiter = $a2[0] == null ? nil2 : $a2[0], self5.delimiter_rx = $a2[1] == null ? nil2 : $a2[1], $b2;
                } else {
                  $a2 = [sep, new RegExp($$$2("::", "Regexp").$escape(sep))], self5.delimiter = $a2[0], self5.delimiter_rx = $a2[1], $a2;
                }
              } else {
                $b2 = $$2($nesting4, "DELIMITERS")["$[]"](xsv), $a2 = Opal2.to_ary($b2), self5.delimiter = $a2[0] == null ? nil2 : $a2[0], self5.delimiter_rx = $a2[1] == null ? nil2 : $a2[1], $b2;
              }
              ;
              self5.colcount = function() {
                if ($truthy2(table.$columns()["$empty?"]())) {
                  return -1;
                } else {
                  return table.$columns().$size();
                }
                ;
                return nil2;
              }();
              self5.buffer = "";
              self5.cellspecs = [];
              self5.cell_open = false;
              self5.active_rowspans = [0];
              self5.column_visits = 0;
              self5.current_row = [];
              return self5.linenum = -1;
            }, $ParserContext_initialize$30.$$arity = -3);
            Opal2.def(self4, "$starts_with_delimiter?", $ParserContext_starts_with_delimiter$ques$31 = function(line) {
              var self5 = this;
              return line["$start_with?"](self5.delimiter);
            }, $ParserContext_starts_with_delimiter$ques$31.$$arity = 1);
            Opal2.def(self4, "$match_delimiter", $ParserContext_match_delimiter$32 = function $$match_delimiter(line) {
              var self5 = this;
              return self5.delimiter_rx.$match(line);
            }, $ParserContext_match_delimiter$32.$$arity = 1);
            Opal2.def(self4, "$skip_past_delimiter", $ParserContext_skip_past_delimiter$33 = function $$skip_past_delimiter(pre) {
              var self5 = this;
              self5.buffer = "" + self5.buffer + pre + self5.delimiter;
              return nil2;
            }, $ParserContext_skip_past_delimiter$33.$$arity = 1);
            Opal2.def(self4, "$skip_past_escaped_delimiter", $ParserContext_skip_past_escaped_delimiter$34 = function $$skip_past_escaped_delimiter(pre) {
              var self5 = this;
              self5.buffer = "" + self5.buffer + pre.$chop() + self5.delimiter;
              return nil2;
            }, $ParserContext_skip_past_escaped_delimiter$34.$$arity = 1);
            Opal2.def(self4, "$buffer_has_unclosed_quotes?", $ParserContext_buffer_has_unclosed_quotes$ques$35 = function(append, q) {
              var $a2, $b2, self5 = this, record = nil2, qq = nil2, trailing_quote = nil2;
              if (append == null) {
                append = nil2;
              }
              ;
              if (q == null) {
                q = '"';
              }
              ;
              if ((record = function() {
                if ($truthy2(append)) {
                  return $rb_plus(self5.buffer, append).$strip();
                } else {
                  return self5.buffer.$strip();
                }
                ;
                return nil2;
              }())["$=="](q)) {
                return true;
              } else if ($truthy2(record["$start_with?"](q))) {
                qq = $rb_plus(q, q);
                if ($truthy2($truthy2($a2 = $truthy2($b2 = trailing_quote = record["$end_with?"](q)) ? record["$end_with?"](qq) : $b2) ? $a2 : record["$start_with?"](qq))) {
                  return $truthy2($a2 = (record = record.$gsub(qq, ""))["$start_with?"](q)) ? record["$end_with?"](q)["$!"]() : $a2;
                } else {
                  return trailing_quote["$!"]();
                }
                ;
              } else {
                return false;
              }
              ;
            }, $ParserContext_buffer_has_unclosed_quotes$ques$35.$$arity = -1);
            Opal2.def(self4, "$take_cellspec", $ParserContext_take_cellspec$36 = function $$take_cellspec() {
              var self5 = this;
              return self5.cellspecs.$shift();
            }, $ParserContext_take_cellspec$36.$$arity = 0);
            Opal2.def(self4, "$push_cellspec", $ParserContext_push_cellspec$37 = function $$push_cellspec(cellspec) {
              var $a2, self5 = this;
              if (cellspec == null) {
                cellspec = $hash22([], {});
              }
              ;
              self5.cellspecs["$<<"]($truthy2($a2 = cellspec) ? $a2 : $hash22([], {}));
              return nil2;
            }, $ParserContext_push_cellspec$37.$$arity = -1);
            Opal2.def(self4, "$keep_cell_open", $ParserContext_keep_cell_open$38 = function $$keep_cell_open() {
              var self5 = this;
              self5.cell_open = true;
              return nil2;
            }, $ParserContext_keep_cell_open$38.$$arity = 0);
            Opal2.def(self4, "$mark_cell_closed", $ParserContext_mark_cell_closed$39 = function $$mark_cell_closed() {
              var self5 = this;
              self5.cell_open = false;
              return nil2;
            }, $ParserContext_mark_cell_closed$39.$$arity = 0);
            Opal2.def(self4, "$cell_open?", $ParserContext_cell_open$ques$40 = function() {
              var self5 = this;
              return self5.cell_open;
            }, $ParserContext_cell_open$ques$40.$$arity = 0);
            Opal2.def(self4, "$cell_closed?", $ParserContext_cell_closed$ques$41 = function() {
              var self5 = this;
              return self5.cell_open["$!"]();
            }, $ParserContext_cell_closed$ques$41.$$arity = 0);
            Opal2.def(self4, "$close_open_cell", $ParserContext_close_open_cell$42 = function $$close_open_cell(next_cellspec) {
              var self5 = this;
              if (next_cellspec == null) {
                next_cellspec = $hash22([], {});
              }
              ;
              self5.$push_cellspec(next_cellspec);
              if ($truthy2(self5["$cell_open?"]())) {
                self5.$close_cell(true);
              }
              ;
              self5.$advance();
              return nil2;
            }, $ParserContext_close_open_cell$42.$$arity = -1);
            Opal2.def(self4, "$close_cell", $ParserContext_close_cell$43 = function $$close_cell(eol) {
              try {
                var $a2, $b2, $$44, self5 = this, cell_text = nil2, cellspec = nil2, repeat = nil2, q = nil2;
                if (eol == null) {
                  eol = false;
                }
                ;
                if (self5.format["$=="]("psv")) {
                  cell_text = self5.buffer;
                  self5.buffer = "";
                  if ($truthy2(cellspec = self5.$take_cellspec())) {
                    repeat = $truthy2($a2 = cellspec.$delete("repeatcol")) ? $a2 : 1;
                  } else {
                    self5.$logger().$error(self5.$message_with_context("table missing leading separator; recovering automatically", $hash22(["source_location"], { "source_location": $send2($$$2($$2($nesting4, "Reader"), "Cursor"), "new", Opal2.to_a(self5.start_cursor_data)) })));
                    cellspec = $hash22([], {});
                    repeat = 1;
                  }
                  ;
                } else {
                  cell_text = self5.buffer.$strip();
                  self5.buffer = "";
                  cellspec = nil2;
                  repeat = 1;
                  if ($truthy2($truthy2($a2 = ($b2 = self5.format["$=="]("csv")) ? cell_text["$empty?"]()["$!"]() : self5.format["$=="]("csv")) ? cell_text["$include?"](q = '"') : $a2)) {
                    if ($truthy2($truthy2($a2 = cell_text["$start_with?"](q)) ? cell_text["$end_with?"](q) : $a2)) {
                      if ($truthy2(cell_text = cell_text.$slice(1, $rb_minus(cell_text.$length(), 2)))) {
                        cell_text = cell_text.$strip().$squeeze(q);
                      } else {
                        self5.$logger().$error(self5.$message_with_context("unclosed quote in CSV data; setting cell to empty", $hash22(["source_location"], { "source_location": self5.reader.$cursor_at_prev_line() })));
                        cell_text = "";
                      }
                    } else {
                      cell_text = cell_text.$squeeze(q);
                    }
                  }
                  ;
                }
                ;
                $send2(1, "upto", [repeat], ($$44 = function(i) {
                  var self6 = $$44.$$s || this, $c, $d, $$45, $e, column = nil2, extra_cols = nil2, offset = nil2, cell = nil2;
                  if (self6.colcount == null)
                    self6.colcount = nil2;
                  if (self6.table == null)
                    self6.table = nil2;
                  if (self6.current_row == null)
                    self6.current_row = nil2;
                  if (self6.reader == null)
                    self6.reader = nil2;
                  if (self6.column_visits == null)
                    self6.column_visits = nil2;
                  if (self6.linenum == null)
                    self6.linenum = nil2;
                  if (i == null) {
                    i = nil2;
                  }
                  ;
                  if (self6.colcount["$=="](-1)) {
                    self6.table.$columns()["$<<"](column = $$$2($$2($nesting4, "Table"), "Column").$new(self6.table, $rb_minus($rb_plus(self6.table.$columns().$size(), i), 1)));
                    if ($truthy2($truthy2($c = $truthy2($d = cellspec) ? cellspec["$key?"]("colspan") : $d) ? $rb_gt2(extra_cols = $rb_minus(cellspec["$[]"]("colspan").$to_i(), 1), 0) : $c)) {
                      offset = self6.table.$columns().$size();
                      $send2(extra_cols, "times", [], ($$45 = function(j) {
                        var self7 = $$45.$$s || this;
                        if (self7.table == null)
                          self7.table = nil2;
                        if (j == null) {
                          j = nil2;
                        }
                        ;
                        return self7.table.$columns()["$<<"]($$$2($$2($nesting4, "Table"), "Column").$new(self7.table, $rb_plus(offset, j)));
                      }, $$45.$$s = self6, $$45.$$arity = 1, $$45));
                    }
                    ;
                  } else if ($truthy2(column = self6.table.$columns()["$[]"](self6.current_row.$size()))) {
                  } else {
                    self6.$logger().$error(self6.$message_with_context("dropping cell because it exceeds specified number of columns", $hash22(["source_location"], { "source_location": self6.reader.$cursor_before_mark() })));
                    Opal2.ret(nil2);
                  }
                  ;
                  cell = $$$2($$2($nesting4, "Table"), "Cell").$new(column, cell_text, cellspec, $hash22(["cursor"], { "cursor": self6.reader.$cursor_before_mark() }));
                  self6.reader.$mark();
                  if ($truthy2($truthy2($c = cell.$rowspan()["$!"]()) ? $c : cell.$rowspan()["$=="](1))) {
                  } else {
                    self6.$activate_rowspan(cell.$rowspan(), $truthy2($c = cell.$colspan()) ? $c : 1);
                  }
                  ;
                  self6.column_visits = $rb_plus(self6.column_visits, $truthy2($c = cell.$colspan()) ? $c : 1);
                  self6.current_row["$<<"](cell);
                  if ($truthy2($truthy2($c = self6["$end_of_row?"]()) ? $truthy2($d = $truthy2($e = self6.colcount["$!="](-1)) ? $e : $rb_gt2(self6.linenum, 0)) ? $d : $truthy2($e = eol) ? i["$=="](repeat) : $e : $c)) {
                    return self6.$close_row();
                  } else {
                    return nil2;
                  }
                  ;
                }, $$44.$$s = self5, $$44.$$arity = 1, $$44));
                self5.cell_open = false;
                return nil2;
              } catch ($returner) {
                if ($returner === Opal2.returner) {
                  return $returner.$v;
                }
                throw $returner;
              }
            }, $ParserContext_close_cell$43.$$arity = -1);
            self4.$private();
            Opal2.def(self4, "$close_row", $ParserContext_close_row$46 = function $$close_row() {
              var $a2, self5 = this, $writer = nil2;
              self5.table.$rows().$body()["$<<"](self5.current_row);
              if (self5.colcount["$=="](-1)) {
                self5.colcount = self5.column_visits;
              }
              ;
              self5.column_visits = 0;
              self5.current_row = [];
              self5.active_rowspans.$shift();
              $truthy2($a2 = self5.active_rowspans["$[]"](0)) ? $a2 : ($writer = [0, 0], $send2(self5.active_rowspans, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              return nil2;
            }, $ParserContext_close_row$46.$$arity = 0);
            Opal2.def(self4, "$activate_rowspan", $ParserContext_activate_rowspan$47 = function $$activate_rowspan(rowspan, colspan) {
              var $$48, self5 = this;
              $send2(1, "upto", [$rb_minus(rowspan, 1)], ($$48 = function(i) {
                var self6 = $$48.$$s || this, $a2, $writer = nil2;
                if (self6.active_rowspans == null)
                  self6.active_rowspans = nil2;
                if (i == null) {
                  i = nil2;
                }
                ;
                $writer = [i, $rb_plus($truthy2($a2 = self6.active_rowspans["$[]"](i)) ? $a2 : 0, colspan)];
                $send2(self6.active_rowspans, "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }, $$48.$$s = self5, $$48.$$arity = 1, $$48));
              return nil2;
            }, $ParserContext_activate_rowspan$47.$$arity = 2);
            Opal2.def(self4, "$end_of_row?", $ParserContext_end_of_row$ques$49 = function() {
              var $a2, self5 = this;
              return $truthy2($a2 = self5.colcount["$=="](-1)) ? $a2 : self5.$effective_column_visits()["$=="](self5.colcount);
            }, $ParserContext_end_of_row$ques$49.$$arity = 0);
            Opal2.def(self4, "$effective_column_visits", $ParserContext_effective_column_visits$50 = function $$effective_column_visits() {
              var self5 = this;
              return $rb_plus(self5.column_visits, self5.active_rowspans["$[]"](0));
            }, $ParserContext_effective_column_visits$50.$$arity = 0);
            return (Opal2.def(self4, "$advance", $ParserContext_advance$51 = function $$advance() {
              var self5 = this;
              return self5.linenum = $rb_plus(self5.linenum, 1);
            }, $ParserContext_advance$51.$$arity = 0), nil2) && "advance";
          })($$2($nesting3, "Table"), null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/writer"] = function(Opal2) {
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2;
        Opal2.add_stubs(["$respond_to?", "$write", "$+", "$chomp", "$include"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Writer");
            var $nesting4 = [self4].concat($parent_nesting3), $Writer_write$1;
            Opal2.def(self4, "$write", $Writer_write$1 = function $$write(output, target) {
              var self5 = this;
              if ($truthy2(target["$respond_to?"]("write"))) {
                target.$write($rb_plus(output.$chomp(), $$2($nesting4, "LF")));
              } else {
                $$$2("::", "File").$write(target, output, $hash22(["mode"], { "mode": $$2($nesting4, "FILE_WRITE_MODE") }));
              }
              ;
              return nil2;
            }, $Writer_write$1.$$arity = 2);
          })($nesting3[0], $nesting3);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "VoidWriter");
            var $nesting4 = [self4].concat($parent_nesting3), $VoidWriter_write$2;
            self4.$include($$2($nesting4, "Writer"));
            Opal2.def(self4, "$write", $VoidWriter_write$2 = function $$write(output, target) {
              var self5 = this;
              return nil2;
            }, $VoidWriter_write$2.$$arity = 2);
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/load"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
        Opal2.add_stubs(["$merge", "$[]", "$start", "$key?", "$!=", "$logger", "$new", "$logger=", "$-", "$!", "$===", "$dup", "$tap", "$each", "$partition", "$[]=", "$split", "$gsub", "$+", "$respond_to?", "$keys", "$raise", "$join", "$ancestors", "$class", "$==", "$at", "$to_i", "$mtime", "$absolute_path", "$path", "$dirname", "$basename", "$extname", "$read", "$rewind", "$drop", "$record", "$parse", "$exception", "$message", "$set_backtrace", "$backtrace", "$stack_trace", "$stack_trace=", "$open", "$load"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function(self4, $parent_nesting3) {
            var $nesting4 = [self4].concat($parent_nesting3), $load$1, $load_file$8;
            Opal2.def(self4, "$load", $load$1 = function $$load(input, options) {
              var $a2, $b2, $c, $d, $$22, $$4, $$6, self5 = this, timings = nil2, logger = nil2, $writer = nil2, attrs = nil2, input_path = nil2, source = nil2, doc = nil2, e = nil2, context = nil2, wrapped_e = nil2;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              try {
                options = options.$merge();
                if ($truthy2(timings = options["$[]"]("timings"))) {
                  timings.$start("read");
                }
                ;
                if ($truthy2($truthy2($a2 = options["$key?"]("logger")) ? (logger = options["$[]"]("logger"))["$!="]($$2($nesting4, "LoggerManager").$logger()) : $a2)) {
                  $writer = [$truthy2($a2 = logger) ? $a2 : $$2($nesting4, "NullLogger").$new()];
                  $send2($$2($nesting4, "LoggerManager"), "logger=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ($truthy2((attrs = options["$[]"]("attributes"))["$!"]())) {
                  attrs = $hash22([], {});
                } else if ($truthy2($$$2("::", "Hash")["$==="](attrs))) {
                  attrs = attrs.$merge();
                } else if ($truthy2($truthy2($a2 = ($d = $$$2("::", "Java", "skip_raise")) && ($c = $$$2($d, "JavaUtil", "skip_raise")) && ($b2 = $$$2($c, "Map", "skip_raise")) ? "constant" : nil2) ? $$$2($$$2($$$2("::", "Java"), "JavaUtil"), "Map")["$==="](attrs) : $a2)) {
                  attrs = attrs.$dup();
                } else if ($truthy2($$$2("::", "Array")["$==="](attrs))) {
                  attrs = $send2($hash22([], {}), "tap", [], ($$22 = function(accum) {
                    var self6 = $$22.$$s || this, $$3;
                    if (accum == null) {
                      accum = nil2;
                    }
                    ;
                    return $send2(attrs, "each", [], ($$3 = function(entry) {
                      var self7 = $$3.$$s || this, $e, $f, k = nil2, _ = nil2, v = nil2;
                      if (entry == null) {
                        entry = nil2;
                      }
                      ;
                      $f = entry.$partition("="), $e = Opal2.to_ary($f), k = $e[0] == null ? nil2 : $e[0], _ = $e[1] == null ? nil2 : $e[1], v = $e[2] == null ? nil2 : $e[2], $f;
                      $writer = [k, v];
                      $send2(accum, "[]=", Opal2.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];
                      ;
                    }, $$3.$$s = self6, $$3.$$arity = 1, $$3));
                  }, $$22.$$s = self5, $$22.$$arity = 1, $$22));
                } else if ($truthy2($$$2("::", "String")["$==="](attrs))) {
                  attrs = $send2($hash22([], {}), "tap", [], ($$4 = function(accum) {
                    var self6 = $$4.$$s || this, $$5;
                    if (accum == null) {
                      accum = nil2;
                    }
                    ;
                    return $send2(attrs.$gsub($$2($nesting4, "SpaceDelimiterRx"), $rb_plus("\\1", $$2($nesting4, "NULL"))).$gsub($$2($nesting4, "EscapedSpaceRx"), "\\1").$split($$2($nesting4, "NULL")), "each", [], ($$5 = function(entry) {
                      var self7 = $$5.$$s || this, $e, $f, k = nil2, _ = nil2, v = nil2;
                      if (entry == null) {
                        entry = nil2;
                      }
                      ;
                      $f = entry.$partition("="), $e = Opal2.to_ary($f), k = $e[0] == null ? nil2 : $e[0], _ = $e[1] == null ? nil2 : $e[1], v = $e[2] == null ? nil2 : $e[2], $f;
                      $writer = [k, v];
                      $send2(accum, "[]=", Opal2.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];
                      ;
                    }, $$5.$$s = self6, $$5.$$arity = 1, $$5));
                  }, $$4.$$s = self5, $$4.$$arity = 1, $$4));
                } else if ($truthy2($truthy2($a2 = attrs["$respond_to?"]("keys")) ? attrs["$respond_to?"]("[]") : $a2)) {
                  attrs = $send2($hash22([], {}), "tap", [], ($$6 = function(accum) {
                    var self6 = $$6.$$s || this, $$7;
                    if (accum == null) {
                      accum = nil2;
                    }
                    ;
                    return $send2(attrs.$keys(), "each", [], ($$7 = function(k) {
                      var self7 = $$7.$$s || this;
                      if (k == null) {
                        k = nil2;
                      }
                      ;
                      $writer = [k, attrs["$[]"](k)];
                      $send2(accum, "[]=", Opal2.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];
                    }, $$7.$$s = self6, $$7.$$arity = 1, $$7));
                  }, $$6.$$s = self5, $$6.$$arity = 1, $$6));
                } else {
                  self5.$raise($$$2("::", "ArgumentError"), "illegal type for attributes option: " + attrs.$class().$ancestors().$join(" < "));
                }
                ;
                if ($truthy2($$$2("::", "File")["$==="](input))) {
                  $writer = ["input_mtime", function() {
                    if ($$2($nesting4, "RUBY_ENGINE")["$=="]("jruby")) {
                      return $$$2("::", "Time").$at(input.$mtime().$to_i());
                    } else {
                      return input.$mtime();
                    }
                    ;
                    return nil2;
                  }()];
                  $send2(options, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["docfile", input_path = $$$2("::", "File").$absolute_path(input.$path())];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["docdir", $$$2("::", "File").$dirname(input_path)];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  $writer = ["docname", $$2($nesting4, "Helpers").$basename(input_path, ($writer = ["docfilesuffix", $$2($nesting4, "Helpers").$extname(input_path)], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))];
                  $send2(attrs, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  source = input.$read();
                } else if ($truthy2(input["$respond_to?"]("read"))) {
                  try {
                    input.$rewind();
                  } catch ($err) {
                    if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                      try {
                        nil2;
                      } finally {
                        Opal2.pop_exception();
                      }
                    } else {
                      throw $err;
                    }
                  }
                  ;
                  source = input.$read();
                } else if ($truthy2($$$2("::", "String")["$==="](input))) {
                  source = input;
                } else if ($truthy2($$$2("::", "Array")["$==="](input))) {
                  source = input.$drop(0);
                } else if ($truthy2(input)) {
                  self5.$raise($$$2("::", "ArgumentError"), "unsupported input type: " + input.$class());
                }
                ;
                if ($truthy2(timings)) {
                  timings.$record("read");
                  timings.$start("parse");
                }
                ;
                $writer = ["attributes", attrs];
                $send2(options, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                doc = function() {
                  if (options["$[]"]("parse")["$=="](false)) {
                    return $$2($nesting4, "Document").$new(source, options);
                  } else {
                    return $$2($nesting4, "Document").$new(source, options).$parse();
                  }
                  ;
                  return nil2;
                }();
                if ($truthy2(timings)) {
                  timings.$record("parse");
                }
                ;
                return doc;
              } catch ($err) {
                if (Opal2.rescue($err, [$$2($nesting4, "StandardError")])) {
                  e = $err;
                  try {
                    try {
                      context = "asciidoctor: FAILED: " + ($truthy2($a2 = attrs["$[]"]("docfile")) ? $a2 : "<stdin>") + ": Failed to load AsciiDoc document";
                      if ($truthy2(e["$respond_to?"]("exception"))) {
                        wrapped_e = e.$exception("" + context + " - " + e.$message());
                        wrapped_e.$set_backtrace(e.$backtrace());
                      } else {
                        wrapped_e = e.$class().$new(context, e);
                        $writer = [e.$stack_trace()];
                        $send2(wrapped_e, "stack_trace=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                      }
                      ;
                    } catch ($err2) {
                      if (Opal2.rescue($err2, [$$2($nesting4, "StandardError")])) {
                        try {
                          wrapped_e = e;
                        } finally {
                          Opal2.pop_exception();
                        }
                      } else {
                        throw $err2;
                      }
                    }
                    ;
                    ;
                    return self5.$raise(wrapped_e);
                  } finally {
                    Opal2.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }
              ;
            }, $load$1.$$arity = -2);
            return (Opal2.def(self4, "$load_file", $load_file$8 = function $$load_file(filename, options) {
              var $$92, self5 = this;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              return $send2($$$2("::", "File"), "open", [filename, $$2($nesting4, "FILE_READ_MODE")], ($$92 = function(file2) {
                var self6 = $$92.$$s || this;
                if (file2 == null) {
                  file2 = nil2;
                }
                ;
                return self6.$load(file2, options);
              }, $$92.$$s = self5, $$92.$$arity = 1, $$92));
            }, $load_file$8.$$arity = -2), nil2) && "load_file";
          })(Opal2.get_singleton_class(self3), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/convert"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_ge(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs >= rhs : lhs["$>="](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $send2 = Opal2.send;
        Opal2.add_stubs(["$delete", "$merge", "$===", "$absolute_path", "$path", "$load", "$respond_to?", "$[]=", "$-", "$key?", "$fetch", "$[]", "$dirname", "$expand_path", "$join", "$attributes", "$outfilesuffix", "$==", "$raise", "$pwd", "$>=", "$safe", "$normalize_system_path", "$mkdir_p", "$directory?", "$!", "$convert", "$write", "$<", "$attr?", "$basebackend?", "$attr", "$uriish?", "$include?", "$syntax_highlighter", "$write_stylesheet?", "$write_primary_stylesheet", "$instance", "$to_s", "$!=", "$read_asset", "$file?", "$write_stylesheet", "$open"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function(self4, $parent_nesting3) {
            var $nesting4 = [self4].concat($parent_nesting3), $convert$1, $convert_file$2;
            Opal2.def(self4, "$convert", $convert$1 = function $$convert(input, options) {
              var $a2, $b2, $c, $d, $e, self5 = this, to_dir = nil2, mkdirs = nil2, $case = nil2, to_file = nil2, write_to_target = nil2, sibling_path = nil2, stream_output = nil2, $writer = nil2, outdir = nil2, doc = nil2, outfile = nil2, working_dir = nil2, jail = nil2, output = nil2, stylesdir = nil2, stylesheet = nil2, copy_asciidoctor_stylesheet = nil2, copy_user_stylesheet = nil2, copy_syntax_hl_stylesheet = nil2, syntax_hl = nil2, stylesoutdir = nil2, stylesheet_src = nil2, stylesheet_dest = nil2, stylesheet_data = nil2, stylesheet_outdir = nil2;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              (options = options.$merge()).$delete("parse");
              to_dir = options.$delete("to_dir");
              mkdirs = options.$delete("mkdirs");
              $case = to_file = options.$delete("to_file");
              if (true["$==="]($case) || nil2["$==="]($case)) {
                if ($truthy2(write_to_target = to_dir)) {
                } else if ($truthy2($$$2("::", "File")["$==="](input))) {
                  sibling_path = $$$2("::", "File").$absolute_path(input.$path());
                }
                ;
                to_file = nil2;
              } else if (false["$==="]($case)) {
                to_file = nil2;
              } else if ("/dev/null"["$==="]($case)) {
                return self5.$load(input, options);
              } else {
                if ($truthy2(stream_output = to_file["$respond_to?"]("write"))) {
                } else {
                  $writer = ["to_file", write_to_target = to_file];
                  $send2(options, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
              }
              ;
              if ($truthy2(options["$key?"]("standalone"))) {
              } else if ($truthy2($truthy2($a2 = sibling_path) ? $a2 : write_to_target)) {
                $writer = ["standalone", options.$fetch("header_footer", true)];
                $send2(options, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy2(options["$key?"]("header_footer"))) {
                $writer = ["standalone", options["$[]"]("header_footer")];
                $send2(options, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              ;
              if ($truthy2(sibling_path)) {
                $writer = ["to_dir", outdir = $$$2("::", "File").$dirname(sibling_path)];
                $send2(options, "[]=", Opal2.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy2(write_to_target)) {
                if ($truthy2(to_dir)) {
                  if ($truthy2(to_file)) {
                    $writer = ["to_dir", $$$2("::", "File").$dirname($$$2("::", "File").$expand_path(to_file, to_dir))];
                    $send2(options, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    $writer = ["to_dir", $$$2("::", "File").$expand_path(to_dir)];
                    $send2(options, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else if ($truthy2(to_file)) {
                  $writer = ["to_dir", $$$2("::", "File").$dirname($$$2("::", "File").$expand_path(to_file))];
                  $send2(options, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
              }
              ;
              doc = self5.$load(input, options);
              if ($truthy2(sibling_path)) {
                outfile = $$$2("::", "File").$join(outdir, "" + doc.$attributes()["$[]"]("docname") + doc.$outfilesuffix());
                if (outfile["$=="](sibling_path)) {
                  self5.$raise($$$2("::", "IOError"), "input file and output file cannot be the same: " + outfile);
                }
                ;
              } else if ($truthy2(write_to_target)) {
                working_dir = function() {
                  if ($truthy2(options["$key?"]("base_dir"))) {
                    return $$$2("::", "File").$expand_path(options["$[]"]("base_dir"));
                  } else {
                    return $$$2("::", "Dir").$pwd();
                  }
                  ;
                  return nil2;
                }();
                jail = function() {
                  if ($truthy2($rb_ge(doc.$safe(), $$$2($$2($nesting4, "SafeMode"), "SAFE")))) {
                    return working_dir;
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }();
                if ($truthy2(to_dir)) {
                  outdir = doc.$normalize_system_path(to_dir, working_dir, jail, $hash22(["target_name", "recover"], { "target_name": "to_dir", "recover": false }));
                  if ($truthy2(to_file)) {
                    outfile = doc.$normalize_system_path(to_file, outdir, nil2, $hash22(["target_name", "recover"], { "target_name": "to_dir", "recover": false }));
                    outdir = $$$2("::", "File").$dirname(outfile);
                  } else {
                    outfile = $$$2("::", "File").$join(outdir, "" + doc.$attributes()["$[]"]("docname") + doc.$outfilesuffix());
                  }
                  ;
                } else if ($truthy2(to_file)) {
                  outfile = doc.$normalize_system_path(to_file, working_dir, jail, $hash22(["target_name", "recover"], { "target_name": "to_dir", "recover": false }));
                  outdir = $$$2("::", "File").$dirname(outfile);
                }
                ;
                if ($truthy2($truthy2($a2 = $$$2("::", "File")["$==="](input)) ? outfile["$=="]($$$2("::", "File").$absolute_path(input.$path())) : $a2)) {
                  self5.$raise($$$2("::", "IOError"), "input file and output file cannot be the same: " + outfile);
                }
                ;
                if ($truthy2(mkdirs)) {
                  $$2($nesting4, "Helpers").$mkdir_p(outdir);
                } else if ($truthy2($$$2("::", "File")["$directory?"](outdir))) {
                } else {
                  self5.$raise($$$2("::", "IOError"), "target directory does not exist: " + to_dir + " (hint: set :mkdirs option)");
                }
                ;
              } else {
                outfile = to_file;
                outdir = nil2;
              }
              ;
              if ($truthy2($truthy2($a2 = outfile) ? stream_output["$!"]() : $a2)) {
                output = doc.$convert($hash22(["outfile", "outdir"], { "outfile": outfile, "outdir": outdir }));
              } else {
                output = doc.$convert();
              }
              ;
              if ($truthy2(outfile)) {
                doc.$write(output, outfile);
                if ($truthy2($truthy2($a2 = $truthy2($b2 = $truthy2($c = $truthy2($d = $truthy2($e = stream_output["$!"]()) ? $rb_lt2(doc.$safe(), $$$2($$2($nesting4, "SafeMode"), "SECURE")) : $e) ? doc["$attr?"]("linkcss") : $d) ? doc["$attr?"]("copycss") : $c) ? doc["$basebackend?"]("html") : $b2) ? ($truthy2($b2 = stylesdir = doc.$attr("stylesdir")) ? $$2($nesting4, "Helpers")["$uriish?"](stylesdir) : $b2)["$!"]() : $a2)) {
                  if ($truthy2(stylesheet = doc.$attr("stylesheet"))) {
                    if ($truthy2($$2($nesting4, "DEFAULT_STYLESHEET_KEYS")["$include?"](stylesheet))) {
                      copy_asciidoctor_stylesheet = true;
                    } else if ($truthy2($$2($nesting4, "Helpers")["$uriish?"](stylesheet)["$!"]())) {
                      copy_user_stylesheet = true;
                    }
                  }
                  ;
                  copy_syntax_hl_stylesheet = $truthy2($a2 = syntax_hl = doc.$syntax_highlighter()) ? syntax_hl["$write_stylesheet?"](doc) : $a2;
                  if ($truthy2($truthy2($a2 = $truthy2($b2 = copy_asciidoctor_stylesheet) ? $b2 : copy_user_stylesheet) ? $a2 : copy_syntax_hl_stylesheet)) {
                    stylesoutdir = doc.$normalize_system_path(stylesdir, outdir, function() {
                      if ($truthy2($rb_ge(doc.$safe(), $$$2($$2($nesting4, "SafeMode"), "SAFE")))) {
                        return outdir;
                      } else {
                        return nil2;
                      }
                      ;
                      return nil2;
                    }());
                    if ($truthy2(mkdirs)) {
                      $$2($nesting4, "Helpers").$mkdir_p(stylesoutdir);
                    } else if ($truthy2($$$2("::", "File")["$directory?"](stylesoutdir))) {
                    } else {
                      self5.$raise($$$2("::", "IOError"), "target stylesheet directory does not exist: " + stylesoutdir + " (hint: set :mkdirs option)");
                    }
                    ;
                    if ($truthy2(copy_asciidoctor_stylesheet)) {
                      $$2($nesting4, "Stylesheets").$instance().$write_primary_stylesheet(stylesoutdir);
                    } else if ($truthy2(copy_user_stylesheet)) {
                      if ($truthy2($truthy2($a2 = (stylesheet_src = doc.$attr("copycss"))["$=="]("")) ? $a2 : stylesheet_src["$=="](true))) {
                        stylesheet_src = doc.$normalize_system_path(stylesheet);
                      } else {
                        stylesheet_src = doc.$normalize_system_path(stylesheet_src.$to_s());
                      }
                      ;
                      stylesheet_dest = doc.$normalize_system_path(stylesheet, stylesoutdir, function() {
                        if ($truthy2($rb_ge(doc.$safe(), $$$2($$2($nesting4, "SafeMode"), "SAFE")))) {
                          return outdir;
                        } else {
                          return nil2;
                        }
                        ;
                        return nil2;
                      }());
                      if ($truthy2($truthy2($a2 = stylesheet_src["$!="](stylesheet_dest)) ? stylesheet_data = doc.$read_asset(stylesheet_src, $hash22(["warn_on_failure", "label"], { "warn_on_failure": $$$2("::", "File")["$file?"](stylesheet_dest)["$!"](), "label": "stylesheet" })) : $a2)) {
                        if ($truthy2($truthy2($a2 = (stylesheet_outdir = $$$2("::", "File").$dirname(stylesheet_dest))["$!="](stylesoutdir)) ? $$$2("::", "File")["$directory?"](stylesheet_outdir)["$!"]() : $a2)) {
                          if ($truthy2(mkdirs)) {
                            $$2($nesting4, "Helpers").$mkdir_p(stylesheet_outdir);
                          } else {
                            self5.$raise($$$2("::", "IOError"), "target stylesheet directory does not exist: " + stylesheet_outdir + " (hint: set :mkdirs option)");
                          }
                        }
                        ;
                        $$$2("::", "File").$write(stylesheet_dest, stylesheet_data, $hash22(["mode"], { "mode": $$2($nesting4, "FILE_WRITE_MODE") }));
                      }
                      ;
                    }
                    ;
                    if ($truthy2(copy_syntax_hl_stylesheet)) {
                      syntax_hl.$write_stylesheet(doc, stylesoutdir);
                    }
                    ;
                  }
                  ;
                }
                ;
                return doc;
              } else {
                return output;
              }
              ;
            }, $convert$1.$$arity = -2);
            Opal2.def(self4, "$convert_file", $convert_file$2 = function $$convert_file(filename, options) {
              var $$3, self5 = this;
              if (options == null) {
                options = $hash22([], {});
              }
              ;
              return $send2($$$2("::", "File"), "open", [filename, $$2($nesting4, "FILE_READ_MODE")], ($$3 = function(file2) {
                var self6 = $$3.$$s || this;
                if (file2 == null) {
                  file2 = nil2;
                }
                ;
                return self6.$convert(file2, options);
              }, $$3.$$s = self5, $$3.$$arity = 1, $$3));
            }, $convert_file$2.$$arity = -2);
            Opal2.alias(self4, "render", "convert");
            return Opal2.alias(self4, "render_file", "convert_file");
          })(Opal2.get_singleton_class(self3), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/syntax_highlighter/highlightjs"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $send2 = Opal2.send, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$register_for", "$merge", "$proc", "$[]=", "$-", "$attr", "$[]", "$==", "$attr?", "$join", "$map", "$split", "$lstrip"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "HighlightJsAdapter");
            var $nesting4 = [self4].concat($parent_nesting3), $HighlightJsAdapter_initialize$1, $HighlightJsAdapter_format$2, $HighlightJsAdapter_docinfo$ques$4, $HighlightJsAdapter_docinfo$5;
            self4.$register_for("highlightjs", "highlight.js");
            Opal2.def(self4, "$initialize", $HighlightJsAdapter_initialize$1 = function $$initialize($a2) {
              var $post_args2, args2, $iter2 = $HighlightJsAdapter_initialize$1.$$p, $yield = $iter2 || nil2, self5 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $HighlightJsAdapter_initialize$1.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              args2 = $post_args2;
              ;
              $send2(self5, Opal2.find_super_dispatcher(self5, "initialize", $HighlightJsAdapter_initialize$1, false), $zuper, $iter2);
              return self5.name = self5.pre_class = "highlightjs";
            }, $HighlightJsAdapter_initialize$1.$$arity = -1);
            Opal2.def(self4, "$format", $HighlightJsAdapter_format$2 = function $$format(node, lang, opts) {
              var $$3, $iter2 = $HighlightJsAdapter_format$2.$$p, $yield = $iter2 || nil2, self5 = this;
              if ($iter2)
                $HighlightJsAdapter_format$2.$$p = null;
              return $send2(self5, Opal2.find_super_dispatcher(self5, "format", $HighlightJsAdapter_format$2, false), [node, lang, opts.$merge($hash22(["transform"], { "transform": $send2(self5, "proc", [], ($$3 = function(_, code) {
                var self6 = $$3.$$s || this, $a2, $writer = nil2;
                if (_ == null) {
                  _ = nil2;
                }
                ;
                if (code == null) {
                  code = nil2;
                }
                ;
                $writer = ["class", "language-" + ($truthy2($a2 = lang) ? $a2 : "none") + " hljs"];
                $send2(code, "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }, $$3.$$s = self5, $$3.$$arity = 2, $$3)) }))], null);
            }, $HighlightJsAdapter_format$2.$$arity = 3);
            Opal2.def(self4, "$docinfo?", $HighlightJsAdapter_docinfo$ques$4 = function(location) {
              var self5 = this;
              return true;
            }, $HighlightJsAdapter_docinfo$ques$4.$$arity = 1);
            return (Opal2.def(self4, "$docinfo", $HighlightJsAdapter_docinfo$5 = function $$docinfo(location, doc, opts) {
              var $$6, self5 = this, base_url = nil2;
              base_url = doc.$attr("highlightjsdir", "" + opts["$[]"]("cdn_base_url") + "/highlight.js/" + $$2($nesting4, "HIGHLIGHT_JS_VERSION"));
              if (location["$=="]("head")) {
                return '<link rel="stylesheet" href="' + base_url + "/styles/" + doc.$attr("highlightjs-theme", "github") + '.min.css"' + opts["$[]"]("self_closing_tag_slash") + ">";
              } else {
                return '<script src="' + base_url + '/highlight.min.js"><\/script>\n' + function() {
                  if ($truthy2(doc["$attr?"]("highlightjs-languages"))) {
                    return $send2(doc.$attr("highlightjs-languages").$split(","), "map", [], ($$6 = function(lang) {
                      var self6 = $$6.$$s || this;
                      if (lang == null) {
                        lang = nil2;
                      }
                      ;
                      return '<script src="' + base_url + "/languages/" + lang.$lstrip() + '.min.js"><\/script>\n';
                    }, $$6.$$s = self5, $$6.$$arity = 1, $$6)).$join();
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + "<script>\nif (!hljs.initHighlighting.called) {\n  hljs.initHighlighting.called = true\n  ;[].slice.call(document.querySelectorAll('pre.highlight > code')).forEach(function (el) { hljs.highlightBlock(el) })\n}\n<\/script>";
              }
              ;
            }, $HighlightJsAdapter_docinfo$5.$$arity = 3), nil2) && "docinfo";
          })($$2($nesting3, "SyntaxHighlighter"), $$$2($$2($nesting3, "SyntaxHighlighter"), "Base"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/syntax_highlighter"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $klass2 = Opal2.klass;
        Opal2.add_stubs(["$attr_reader", "$raise", "$class", "$extend", "$private_class_method", "$register", "$map", "$to_s", "$each", "$[]=", "$registry", "$-", "$[]", "$for", "$===", "$new", "$name", "$private", "$include", "$==", "$delete", "$join", "$content"]);
        (function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "SyntaxHighlighter");
            var $nesting4 = [self4].concat($parent_nesting3), $SyntaxHighlighter_initialize$1, $SyntaxHighlighter_docinfo$ques$2, $SyntaxHighlighter_docinfo$3, $SyntaxHighlighter_highlight$ques$4, $SyntaxHighlighter_highlight$5, $SyntaxHighlighter_format$6, $SyntaxHighlighter_write_stylesheet$ques$7, $SyntaxHighlighter_write_stylesheet$8, $SyntaxHighlighter_included$9;
            self4.$attr_reader("name");
            Opal2.def(self4, "$initialize", $SyntaxHighlighter_initialize$1 = function $$initialize(name, backend, opts) {
              var self5 = this;
              if (backend == null) {
                backend = "html5";
              }
              ;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              return self5.name = self5.pre_class = name;
            }, $SyntaxHighlighter_initialize$1.$$arity = -2);
            Opal2.def(self4, "$docinfo?", $SyntaxHighlighter_docinfo$ques$2 = function(location) {
              var self5 = this;
              return nil2;
            }, $SyntaxHighlighter_docinfo$ques$2.$$arity = 1);
            Opal2.def(self4, "$docinfo", $SyntaxHighlighter_docinfo$3 = function $$docinfo(location, doc, opts) {
              var self5 = this;
              return self5.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting4, "SyntaxHighlighter") + " subclass " + self5.$class() + " must implement the #docinfo method since #docinfo? returns true");
            }, $SyntaxHighlighter_docinfo$3.$$arity = 3);
            Opal2.def(self4, "$highlight?", $SyntaxHighlighter_highlight$ques$4 = function() {
              var self5 = this;
              return nil2;
            }, $SyntaxHighlighter_highlight$ques$4.$$arity = 0);
            Opal2.def(self4, "$highlight", $SyntaxHighlighter_highlight$5 = function $$highlight(node, source, lang, opts) {
              var self5 = this;
              return self5.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting4, "SyntaxHighlighter") + " subclass " + self5.$class() + " must implement the #highlight method since #highlight? returns true");
            }, $SyntaxHighlighter_highlight$5.$$arity = 4);
            Opal2.def(self4, "$format", $SyntaxHighlighter_format$6 = function $$format(node, lang, opts) {
              var self5 = this;
              return self5.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting4, "SyntaxHighlighter") + " subclass " + self5.$class() + " must implement the #format method");
            }, $SyntaxHighlighter_format$6.$$arity = 3);
            Opal2.def(self4, "$write_stylesheet?", $SyntaxHighlighter_write_stylesheet$ques$7 = function(doc) {
              var self5 = this;
              return nil2;
            }, $SyntaxHighlighter_write_stylesheet$ques$7.$$arity = 1);
            Opal2.def(self4, "$write_stylesheet", $SyntaxHighlighter_write_stylesheet$8 = function $$write_stylesheet(doc, to_dir) {
              var self5 = this;
              return self5.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting4, "SyntaxHighlighter") + " subclass " + self5.$class() + " must implement the #write_stylesheet method since #write_stylesheet? returns true");
            }, $SyntaxHighlighter_write_stylesheet$8.$$arity = 2);
            Opal2.defs(self4, "$included", $SyntaxHighlighter_included$9 = function $$included(into) {
              var self5 = this;
              return into.$extend($$2($nesting4, "Config"));
            }, $SyntaxHighlighter_included$9.$$arity = 1);
            self4.$private_class_method("included");
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "Config");
              var $nesting5 = [self5].concat($parent_nesting4), $Config_register_for$10;
              Opal2.def(self5, "$register_for", $Config_register_for$10 = function $$register_for($a2) {
                var $post_args2, names, $$11, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                names = $post_args2;
                ;
                return $send2($$2($nesting5, "SyntaxHighlighter"), "register", [self6].concat(Opal2.to_a($send2(names, "map", [], ($$11 = function(name) {
                  var self7 = $$11.$$s || this;
                  if (name == null) {
                    name = nil2;
                  }
                  ;
                  return name.$to_s();
                }, $$11.$$s = self6, $$11.$$arity = 1, $$11)))));
              }, $Config_register_for$10.$$arity = -1);
            })($nesting4[0], $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "Factory");
              var $nesting5 = [self5].concat($parent_nesting4), $Factory_register$12, $Factory_for$14, $Factory_create$15, $Factory_registry$16;
              Opal2.def(self5, "$register", $Factory_register$12 = function $$register(syntax_highlighter, $a2) {
                var $post_args2, names, $$13, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
                names = $post_args2;
                ;
                return $send2(names, "each", [], ($$13 = function(name) {
                  var self7 = $$13.$$s || this, $writer = nil2;
                  if (name == null) {
                    name = nil2;
                  }
                  ;
                  $writer = [name, syntax_highlighter];
                  $send2(self7.$registry(), "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                }, $$13.$$s = self6, $$13.$$arity = 1, $$13));
              }, $Factory_register$12.$$arity = -2);
              Opal2.def(self5, "$for", $Factory_for$14 = function(name) {
                var self6 = this;
                return self6.$registry()["$[]"](name);
              }, $Factory_for$14.$$arity = 1);
              Opal2.def(self5, "$create", $Factory_create$15 = function $$create(name, backend, opts) {
                var self6 = this, syntax_hl = nil2;
                if (backend == null) {
                  backend = "html5";
                }
                ;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                if ($truthy2(syntax_hl = self6.$for(name))) {
                  if ($truthy2($$$2("::", "Class")["$==="](syntax_hl))) {
                    syntax_hl = syntax_hl.$new(name, backend, opts);
                  }
                  ;
                  if ($truthy2(syntax_hl.$name())) {
                  } else {
                    self6.$raise($$$2("::", "NameError"), "" + syntax_hl.$class() + " must specify a value for `name'");
                  }
                  ;
                  return syntax_hl;
                } else {
                  return nil2;
                }
                ;
              }, $Factory_create$15.$$arity = -2);
              self5.$private();
              Opal2.def(self5, "$registry", $Factory_registry$16 = function $$registry() {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "Factory") + " subclass " + self6.$class() + " must implement the #registry method");
              }, $Factory_registry$16.$$arity = 0);
            })($nesting4[0], $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "CustomFactory");
              var $nesting5 = [self5].concat($parent_nesting4), $CustomFactory_initialize$17;
              self5.$include($$2($nesting5, "Factory"));
              Opal2.def(self5, "$initialize", $CustomFactory_initialize$17 = function $$initialize(seed_registry) {
                var $a2, self6 = this;
                if (seed_registry == null) {
                  seed_registry = nil2;
                }
                ;
                return self6.registry = $truthy2($a2 = seed_registry) ? $a2 : $hash22([], {});
              }, $CustomFactory_initialize$17.$$arity = -1);
              self5.$private();
              return self5.$attr_reader("registry");
            })($nesting4[0], null, $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "DefaultFactory");
              var $nesting5 = [self5].concat($parent_nesting4), $DefaultFactory_registry$18;
              self5.$include($$2($nesting5, "Factory"));
              Opal2.class_variable_set($nesting5[0], "@@registry", $hash22([], {}));
              self5.$private();
              Opal2.def(self5, "$registry", $DefaultFactory_registry$18 = function $$registry() {
                var $a2, self6 = this;
                return ($a2 = $nesting5[0].$$cvars["@@registry"]) == null ? nil2 : $a2;
              }, $DefaultFactory_registry$18.$$arity = 0);
              if ($$2($nesting5, "RUBY_ENGINE")["$=="]("opal")) {
              } else {
                nil2;
              }
              ;
            })($nesting4[0], $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "DefaultFactoryProxy");
              var $nesting5 = [self5].concat($parent_nesting4);
              self5.$include($$2($nesting5, "DefaultFactory"));
              if ($$2($nesting5, "RUBY_ENGINE")["$=="]("opal")) {
                return nil2;
              } else {
                return nil2;
              }
              ;
            })($nesting4[0], $$2($nesting4, "CustomFactory"), $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Base");
              var $nesting5 = [self5].concat($parent_nesting4), $Base_format$19;
              self5.$$prototype.pre_class = nil2;
              self5.$include($$2($nesting5, "SyntaxHighlighter"));
              return (Opal2.def(self5, "$format", $Base_format$19 = function $$format(node, lang, opts) {
                var $$20, $$21, self6 = this, class_attr_val = nil2, transform = nil2, pre = nil2, code = nil2, $writer = nil2;
                class_attr_val = function() {
                  if ($truthy2(opts["$[]"]("nowrap"))) {
                    return "" + self6.pre_class + " highlight nowrap";
                  } else {
                    return "" + self6.pre_class + " highlight";
                  }
                  ;
                  return nil2;
                }();
                if ($truthy2(transform = opts["$[]"]("transform"))) {
                  transform["$[]"](pre = $hash22(["class"], { "class": class_attr_val }), code = function() {
                    if ($truthy2(lang)) {
                      return $hash22(["data-lang"], { "data-lang": lang });
                    } else {
                      return $hash22([], {});
                    }
                    ;
                    return nil2;
                  }());
                  if ($truthy2(lang = code.$delete("data-lang"))) {
                    $writer = ["data-lang", lang];
                    $send2(code, "[]=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                  return "<pre" + $send2(pre, "map", [], ($$20 = function(k, v) {
                    var self7 = $$20.$$s || this;
                    if (k == null) {
                      k = nil2;
                    }
                    ;
                    if (v == null) {
                      v = nil2;
                    }
                    ;
                    return " " + k + '="' + v + '"';
                  }, $$20.$$s = self6, $$20.$$arity = 2, $$20)).$join() + "><code" + $send2(code, "map", [], ($$21 = function(k, v) {
                    var self7 = $$21.$$s || this;
                    if (k == null) {
                      k = nil2;
                    }
                    ;
                    if (v == null) {
                      v = nil2;
                    }
                    ;
                    return " " + k + '="' + v + '"';
                  }, $$21.$$s = self6, $$21.$$arity = 2, $$21)).$join() + ">" + node.$content() + "</code></pre>";
                } else {
                  return '<pre class="' + class_attr_val + '"><code' + function() {
                    if ($truthy2(lang)) {
                      return ' data-lang="' + lang + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + ">" + node.$content() + "</code></pre>";
                }
                ;
              }, $Base_format$19.$$arity = 3), nil2) && "format";
            })($nesting4[0], null, $nesting4);
            self4.$extend($$2($nesting4, "DefaultFactory"));
          })($nesting3[0], $nesting3);
        })($nesting2[0], $nesting2);
        self2.$require("asciidoctor/syntax_highlighter.rb/../syntax_highlighter/highlightjs");
        if ($$2($nesting2, "RUBY_ENGINE")["$=="]("opal")) {
          return nil2;
        } else {
          return nil2;
        }
        ;
      };
      Opal.modules["asciidoctor/timings"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$now", "$[]=", "$-", "$delete", "$reduce", "$+", "$[]", "$>", "$time", "$puts", "$sprintf", "$to_f", "$read_parse", "$convert", "$read_parse_convert", "$private", "$const_defined?", "$==", "$clock_gettime"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Timings");
            var $nesting4 = [self4].concat($parent_nesting3), $Timings_initialize$1, $Timings_start$2, $Timings_record$3, $Timings_time$4, $Timings_read$6, $Timings_parse$7, $Timings_read_parse$8, $Timings_convert$9, $Timings_read_parse_convert$10, $Timings_write$11, $Timings_total$12, $Timings_print_report$13, $a2, $b2, $c, $d, $e, $Timings_now$14, $Timings_now$15;
            self4.$$prototype.timers = self4.$$prototype.log = nil2;
            Opal2.def(self4, "$initialize", $Timings_initialize$1 = function $$initialize() {
              var self5 = this;
              self5.log = $hash22([], {});
              return self5.timers = $hash22([], {});
            }, $Timings_initialize$1.$$arity = 0);
            Opal2.def(self4, "$start", $Timings_start$2 = function $$start(key) {
              var self5 = this, $writer = nil2;
              $writer = [key, self5.$now()];
              $send2(self5.timers, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $Timings_start$2.$$arity = 1);
            Opal2.def(self4, "$record", $Timings_record$3 = function $$record(key) {
              var self5 = this, $writer = nil2;
              $writer = [key, $rb_minus(self5.$now(), self5.timers.$delete(key))];
              $send2(self5.log, "[]=", Opal2.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $Timings_record$3.$$arity = 1);
            Opal2.def(self4, "$time", $Timings_time$4 = function $$time($a3) {
              var $post_args2, keys, $$5, self5 = this, time = nil2;
              $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
              keys = $post_args2;
              ;
              time = $send2(keys, "reduce", [0], ($$5 = function(sum, key) {
                var self6 = $$5.$$s || this, $b3;
                if (self6.log == null)
                  self6.log = nil2;
                if (sum == null) {
                  sum = nil2;
                }
                ;
                if (key == null) {
                  key = nil2;
                }
                ;
                return $rb_plus(sum, $truthy2($b3 = self6.log["$[]"](key)) ? $b3 : 0);
              }, $$5.$$s = self5, $$5.$$arity = 2, $$5));
              if ($truthy2($rb_gt2(time, 0))) {
                return time;
              } else {
                return nil2;
              }
              ;
            }, $Timings_time$4.$$arity = -1);
            Opal2.def(self4, "$read", $Timings_read$6 = function $$read() {
              var self5 = this;
              return self5.$time("read");
            }, $Timings_read$6.$$arity = 0);
            Opal2.def(self4, "$parse", $Timings_parse$7 = function $$parse() {
              var self5 = this;
              return self5.$time("parse");
            }, $Timings_parse$7.$$arity = 0);
            Opal2.def(self4, "$read_parse", $Timings_read_parse$8 = function $$read_parse() {
              var self5 = this;
              return self5.$time("read", "parse");
            }, $Timings_read_parse$8.$$arity = 0);
            Opal2.def(self4, "$convert", $Timings_convert$9 = function $$convert() {
              var self5 = this;
              return self5.$time("convert");
            }, $Timings_convert$9.$$arity = 0);
            Opal2.def(self4, "$read_parse_convert", $Timings_read_parse_convert$10 = function $$read_parse_convert() {
              var self5 = this;
              return self5.$time("read", "parse", "convert");
            }, $Timings_read_parse_convert$10.$$arity = 0);
            Opal2.def(self4, "$write", $Timings_write$11 = function $$write() {
              var self5 = this;
              return self5.$time("write");
            }, $Timings_write$11.$$arity = 0);
            Opal2.def(self4, "$total", $Timings_total$12 = function $$total() {
              var self5 = this;
              return self5.$time("read", "parse", "convert", "write");
            }, $Timings_total$12.$$arity = 0);
            Opal2.def(self4, "$print_report", $Timings_print_report$13 = function $$print_report(to, subject) {
              var self5 = this;
              if ($gvars.stdout == null)
                $gvars.stdout = nil2;
              if (to == null) {
                to = $gvars.stdout;
              }
              ;
              if (subject == null) {
                subject = nil2;
              }
              ;
              if ($truthy2(subject)) {
                to.$puts("Input file: " + subject);
              }
              ;
              to.$puts("  Time to read and parse source: " + self5.$sprintf("%05.5f", self5.$read_parse().$to_f()));
              to.$puts("  Time to convert document: " + self5.$sprintf("%05.5f", self5.$convert().$to_f()));
              return to.$puts("  Total time (read, parse and convert): " + self5.$sprintf("%05.5f", self5.$read_parse_convert().$to_f()));
            }, $Timings_print_report$13.$$arity = -1);
            self4.$private();
            if ($truthy2($truthy2($a2 = $$$2("::", "Process")["$const_defined?"]("CLOCK_MONOTONIC", false)) ? (($b2 = $$$2("::", "Process", "skip_raise")) && ($c = $b2, $c) && ($d = $c) && (($e = $d.$clock_gettime) && !$e.$$stub || $d["$respond_to_missing?"]("clock_gettime")) ? "method" : nil2)["$=="]("method") : $a2)) {
              Opal2.const_set($nesting4[0], "CLOCK_ID", $$$2($$$2("::", "Process"), "CLOCK_MONOTONIC"));
              return (Opal2.def(self4, "$now", $Timings_now$14 = function $$now() {
                var self5 = this;
                return $$$2("::", "Process").$clock_gettime($$2($nesting4, "CLOCK_ID"));
              }, $Timings_now$14.$$arity = 0), nil2) && "now";
            } else {
              return (Opal2.def(self4, "$now", $Timings_now$15 = function $$now() {
                var self5 = this;
                return $$$2("::", "Time").$now();
              }, $Timings_now$15.$$arity = 0), nil2) && "now";
            }
            ;
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/converter/composite"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $hash22 = Opal2.hash2, $send2 = Opal2.send, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$attr_reader", "$each", "$respond_to?", "$composed", "$init_backend_traits", "$backend_traits", "$new", "$find_converter", "$[]=", "$-", "$convert", "$converter_for", "$node_name", "$[]", "$handles?", "$raise"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "CompositeConverter");
            var $nesting4 = [self4].concat($parent_nesting3), $CompositeConverter_initialize$1, $CompositeConverter_convert$4, $CompositeConverter_converter_for$5, $CompositeConverter_find_converter$6;
            self4.$$prototype.converter_cache = self4.$$prototype.converters = nil2;
            self4.$attr_reader("converters");
            Opal2.def(self4, "$initialize", $CompositeConverter_initialize$1 = function $$initialize(backend, $a2, $b2) {
              var $post_args2, $kwargs, converters, backend_traits_source, $$22, $$3, self5 = this;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              $kwargs = Opal2.extract_kwargs($post_args2);
              if ($kwargs == null) {
                $kwargs = $hash22([], {});
              } else if (!$kwargs.$$is_hash) {
                throw Opal2.ArgumentError.$new("expected kwargs");
              }
              ;
              converters = $post_args2;
              ;
              backend_traits_source = $kwargs.$$smap["backend_traits_source"];
              if (backend_traits_source == null) {
                backend_traits_source = nil2;
              }
              ;
              self5.backend = backend;
              $send2(self5.converters = converters, "each", [], ($$22 = function(converter) {
                var self6 = $$22.$$s || this;
                if (converter == null) {
                  converter = nil2;
                }
                ;
                if ($truthy2(converter["$respond_to?"]("composed"))) {
                  return converter.$composed(self6);
                } else {
                  return nil2;
                }
                ;
              }, $$22.$$s = self5, $$22.$$arity = 1, $$22));
              if ($truthy2(backend_traits_source)) {
                self5.$init_backend_traits(backend_traits_source.$backend_traits());
              }
              ;
              return self5.converter_cache = $send2($$$2("::", "Hash"), "new", [], ($$3 = function(hash, key) {
                var self6 = $$3.$$s || this, $writer = nil2;
                if (hash == null) {
                  hash = nil2;
                }
                ;
                if (key == null) {
                  key = nil2;
                }
                ;
                $writer = [key, self6.$find_converter(key)];
                $send2(hash, "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }, $$3.$$s = self5, $$3.$$arity = 2, $$3));
            }, $CompositeConverter_initialize$1.$$arity = -2);
            Opal2.def(self4, "$convert", $CompositeConverter_convert$4 = function $$convert(node, transform, opts) {
              var $a2, self5 = this;
              if (transform == null) {
                transform = nil2;
              }
              ;
              if (opts == null) {
                opts = nil2;
              }
              ;
              return self5.$converter_for(transform = $truthy2($a2 = transform) ? $a2 : node.$node_name()).$convert(node, transform, opts);
            }, $CompositeConverter_convert$4.$$arity = -2);
            Opal2.def(self4, "$converter_for", $CompositeConverter_converter_for$5 = function $$converter_for(transform) {
              var self5 = this;
              return self5.converter_cache["$[]"](transform);
            }, $CompositeConverter_converter_for$5.$$arity = 1);
            return (Opal2.def(self4, "$find_converter", $CompositeConverter_find_converter$6 = function $$find_converter(transform) {
              try {
                var $$7, self5 = this;
                $send2(self5.converters, "each", [], ($$7 = function(candidate) {
                  var self6 = $$7.$$s || this;
                  if (candidate == null) {
                    candidate = nil2;
                  }
                  ;
                  if ($truthy2(candidate["$handles?"](transform))) {
                    Opal2.ret(candidate);
                  } else {
                    return nil2;
                  }
                  ;
                }, $$7.$$s = self5, $$7.$$arity = 1, $$7));
                return self5.$raise("Could not find a converter to handle transform: " + transform);
              } catch ($returner) {
                if ($returner === Opal2.returner) {
                  return $returner.$v;
                }
                throw $returner;
              }
            }, $CompositeConverter_find_converter$6.$$arity = 1), nil2) && "find_converter";
          })($$2($nesting3, "Converter"), $$$2($$2($nesting3, "Converter"), "Base"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/converter/html5"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_le(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs <= rhs : lhs["$<="](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        function $rb_times(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs * rhs : lhs["$*"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $send2 = Opal2.send, $hash22 = Opal2.hash2, $truthy2 = Opal2.truthy, $gvars = Opal2.gvars;
        Opal2.add_stubs(["$register_for", "$default=", "$-", "$==", "$[]", "$init_backend_traits", "$node_name", "$===", "$convert_inline_quoted", "$convert_paragraph", "$convert_inline_anchor", "$convert_section", "$convert_listing", "$convert_literal", "$convert_ulist", "$convert_olist", "$convert_dlist", "$convert_admonition", "$convert_colist", "$convert_embedded", "$convert_example", "$convert_floating_title", "$convert_image", "$convert_inline_break", "$convert_inline_button", "$convert_inline_callout", "$convert_inline_footnote", "$convert_inline_image", "$convert_inline_indexterm", "$convert_inline_kbd", "$convert_inline_menu", "$convert_open", "$convert_page_break", "$convert_preamble", "$convert_quote", "$convert_sidebar", "$convert_stem", "$convert_table", "$convert_thematic_break", "$convert_verse", "$convert_video", "$convert_document", "$convert_toc", "$convert_pass", "$convert_audio", "$empty?", "$attr", "$attr?", "$<<", "$include?", "$sub_replacements", "$gsub", "$extname", "$slice", "$length", "$doctitle", "$normalize_web_path", "$primary_stylesheet_data", "$instance", "$read_contents", "$syntax_highlighter", "$size", "$docinfo", "$id", "$sections?", "$doctype", "$role?", "$role", "$join", "$noheader", "$convert", "$converter", "$generate_manname_section", "$header?", "$notitle", "$title", "$header", "$each", "$authors", "$>", "$name", "$email", "$sub_macros", "$+", "$downcase", "$concat", "$content", "$footnotes?", "$!", "$footnotes", "$index", "$text", "$nofooter", "$docinfo?", "$[]=", "$delete_at", "$inspect", "$!=", "$to_i", "$attributes", "$document", "$sections", "$level", "$caption", "$captioned_title", "$numbered", "$<=", "$<", "$sectname", "$sectnum", "$convert_outline", "$title?", "$icon_uri", "$compact", "$media_uri", "$option?", "$append_boolean_attribute", "$style", "$items", "$blocks?", "$text?", "$chomp", "$safe", "$read_svg_contents", "$alt", "$image_uri", "$encode_attribute_value", "$append_link_constraint_attrs", "$highlight?", "$to_sym", "$format", "$*", "$count", "$start_with?", "$end_with?", "$list_marker_keyword", "$parent", "$warn", "$logger", "$context", "$error", "$new", "$columns", "$to_h", "$rows", "$colspan", "$rowspan", "$unshift", "$shift", "$split", "$pop", "$nil_or_empty?", "$type", "$catalog", "$get_root_document", "$xreftext", "$target", "$reftext", "$chop", "$sub", "$match", "$private", "$upcase", "$nested?", "$parent_document", "$to_s", "$handles?", "$send"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Html5Converter");
            var $nesting4 = [self4].concat($parent_nesting3), $Html5Converter_initialize$1, $Html5Converter_convert$2, $Html5Converter_convert_document$3, $Html5Converter_convert_embedded$6, $Html5Converter_convert_outline$8, $Html5Converter_convert_section$10, $Html5Converter_convert_admonition$11, $Html5Converter_convert_audio$12, $Html5Converter_convert_colist$13, $Html5Converter_convert_dlist$16, $Html5Converter_convert_example$23, $Html5Converter_convert_floating_title$24, $Html5Converter_convert_image$25, $Html5Converter_convert_listing$26, $Html5Converter_convert_literal$27, $Html5Converter_convert_stem$28, $Html5Converter_convert_olist$30, $Html5Converter_convert_open$32, $Html5Converter_convert_page_break$33, $Html5Converter_convert_paragraph$34, $Html5Converter_convert_preamble$35, $Html5Converter_convert_quote$36, $Html5Converter_convert_thematic_break$37, $Html5Converter_convert_sidebar$38, $Html5Converter_convert_table$39, $Html5Converter_convert_toc$44, $Html5Converter_convert_ulist$45, $Html5Converter_convert_verse$47, $Html5Converter_convert_video$48, $Html5Converter_convert_inline_anchor$49, $Html5Converter_convert_inline_break$50, $Html5Converter_convert_inline_button$51, $Html5Converter_convert_inline_callout$52, $Html5Converter_convert_inline_footnote$53, $Html5Converter_convert_inline_image$54, $Html5Converter_convert_inline_indexterm$55, $Html5Converter_convert_inline_kbd$56, $Html5Converter_convert_inline_menu$57, $Html5Converter_convert_inline_quoted$58, $Html5Converter_read_svg_contents$59, $Html5Converter_append_boolean_attribute$61, $Html5Converter_append_link_constraint_attrs$62, $Html5Converter_encode_attribute_value$63, $Html5Converter_generate_manname_section$64, $Html5Converter_get_root_document$65, $Html5Converter_method_missing$66, $Html5Converter_respond_to_missing$ques$67, $writer = nil2;
            self4.$$prototype.void_element_slash = self4.$$prototype.xml_mode = self4.$$prototype.refs = self4.$$prototype.resolving_xref = nil2;
            self4.$register_for("html5");
            $writer = [["", ""]];
            $send2(Opal2.const_set($nesting4[0], "QUOTE_TAGS", $hash22(["monospaced", "emphasis", "strong", "double", "single", "mark", "superscript", "subscript", "asciimath", "latexmath"], { "monospaced": ["<code>", "</code>", true], "emphasis": ["<em>", "</em>", true], "strong": ["<strong>", "</strong>", true], "double": ["&#8220;", "&#8221;"], "single": ["&#8216;", "&#8217;"], "mark": ["<mark>", "</mark>", true], "superscript": ["<sup>", "</sup>", true], "subscript": ["<sub>", "</sub>", true], "asciimath": ["\\$", "\\$"], "latexmath": ["\\(", "\\)"] })), "default=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            Opal2.const_set($nesting4[0], "DropAnchorRx", /<(?:a\b[^>]*|\/a)>/);
            Opal2.const_set($nesting4[0], "StemBreakRx", / *\\\n(?:\\?\n)*|\n\n+/);
            if ($$2($nesting4, "RUBY_ENGINE")["$=="]("opal")) {
              Opal2.const_set($nesting4[0], "SvgPreambleRx", new RegExp("^" + $$2($nesting4, "CC_ALL") + "*?(?=<svg[\\s>])"));
              Opal2.const_set($nesting4[0], "SvgStartTagRx", /^<svg(?:\s[^>]*)?>/);
            } else {
              nil2;
            }
            ;
            Opal2.const_set($nesting4[0], "DimensionAttributeRx", new RegExp(`\\s(?:width|height|style)=(["'])` + $$2($nesting4, "CC_ANY") + "*?\\1"));
            Opal2.def(self4, "$initialize", $Html5Converter_initialize$1 = function $$initialize(backend, opts) {
              var self5 = this, syntax = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              self5.backend = backend;
              if (opts["$[]"]("htmlsyntax")["$=="]("xml")) {
                syntax = "xml";
                self5.xml_mode = true;
                self5.void_element_slash = "/";
              } else {
                syntax = "html";
                self5.xml_mode = nil2;
                self5.void_element_slash = "";
              }
              ;
              return self5.$init_backend_traits($hash22(["basebackend", "filetype", "htmlsyntax", "outfilesuffix", "supports_templates"], { "basebackend": "html", "filetype": "html", "htmlsyntax": syntax, "outfilesuffix": ".html", "supports_templates": true }));
            }, $Html5Converter_initialize$1.$$arity = -2);
            Opal2.def(self4, "$convert", $Html5Converter_convert$2 = function $$convert(node, transform, opts) {
              var $iter2 = $Html5Converter_convert$2.$$p, $yield = $iter2 || nil2, self5 = this, $case = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Html5Converter_convert$2.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              if (transform == null) {
                transform = node.$node_name();
              }
              ;
              if (opts == null) {
                opts = nil2;
              }
              ;
              return function() {
                $case = transform;
                if ("inline_quoted"["$==="]($case)) {
                  return self5.$convert_inline_quoted(node);
                } else if ("paragraph"["$==="]($case)) {
                  return self5.$convert_paragraph(node);
                } else if ("inline_anchor"["$==="]($case)) {
                  return self5.$convert_inline_anchor(node);
                } else if ("section"["$==="]($case)) {
                  return self5.$convert_section(node);
                } else if ("listing"["$==="]($case)) {
                  return self5.$convert_listing(node);
                } else if ("literal"["$==="]($case)) {
                  return self5.$convert_literal(node);
                } else if ("ulist"["$==="]($case)) {
                  return self5.$convert_ulist(node);
                } else if ("olist"["$==="]($case)) {
                  return self5.$convert_olist(node);
                } else if ("dlist"["$==="]($case)) {
                  return self5.$convert_dlist(node);
                } else if ("admonition"["$==="]($case)) {
                  return self5.$convert_admonition(node);
                } else if ("colist"["$==="]($case)) {
                  return self5.$convert_colist(node);
                } else if ("embedded"["$==="]($case)) {
                  return self5.$convert_embedded(node);
                } else if ("example"["$==="]($case)) {
                  return self5.$convert_example(node);
                } else if ("floating_title"["$==="]($case)) {
                  return self5.$convert_floating_title(node);
                } else if ("image"["$==="]($case)) {
                  return self5.$convert_image(node);
                } else if ("inline_break"["$==="]($case)) {
                  return self5.$convert_inline_break(node);
                } else if ("inline_button"["$==="]($case)) {
                  return self5.$convert_inline_button(node);
                } else if ("inline_callout"["$==="]($case)) {
                  return self5.$convert_inline_callout(node);
                } else if ("inline_footnote"["$==="]($case)) {
                  return self5.$convert_inline_footnote(node);
                } else if ("inline_image"["$==="]($case)) {
                  return self5.$convert_inline_image(node);
                } else if ("inline_indexterm"["$==="]($case)) {
                  return self5.$convert_inline_indexterm(node);
                } else if ("inline_kbd"["$==="]($case)) {
                  return self5.$convert_inline_kbd(node);
                } else if ("inline_menu"["$==="]($case)) {
                  return self5.$convert_inline_menu(node);
                } else if ("open"["$==="]($case)) {
                  return self5.$convert_open(node);
                } else if ("page_break"["$==="]($case)) {
                  return self5.$convert_page_break(node);
                } else if ("preamble"["$==="]($case)) {
                  return self5.$convert_preamble(node);
                } else if ("quote"["$==="]($case)) {
                  return self5.$convert_quote(node);
                } else if ("sidebar"["$==="]($case)) {
                  return self5.$convert_sidebar(node);
                } else if ("stem"["$==="]($case)) {
                  return self5.$convert_stem(node);
                } else if ("table"["$==="]($case)) {
                  return self5.$convert_table(node);
                } else if ("thematic_break"["$==="]($case)) {
                  return self5.$convert_thematic_break(node);
                } else if ("verse"["$==="]($case)) {
                  return self5.$convert_verse(node);
                } else if ("video"["$==="]($case)) {
                  return self5.$convert_video(node);
                } else if ("document"["$==="]($case)) {
                  return self5.$convert_document(node);
                } else if ("toc"["$==="]($case)) {
                  return self5.$convert_toc(node);
                } else if ("pass"["$==="]($case)) {
                  return self5.$convert_pass(node);
                } else if ("audio"["$==="]($case)) {
                  return self5.$convert_audio(node);
                } else {
                  return $send2(self5, Opal2.find_super_dispatcher(self5, "convert", $Html5Converter_convert$2, false), $zuper, $iter2);
                }
              }();
            }, $Html5Converter_convert$2.$$arity = -2);
            Opal2.def(self4, "$convert_document", $Html5Converter_convert_document$3 = function $$convert_document(node) {
              var $a2, $b2, $c, $$4, $$5, self5 = this, br = nil2, slash = nil2, asset_uri_scheme = nil2, cdn_base_url = nil2, linkcss = nil2, max_width_attr = nil2, result2 = nil2, lang_attribute = nil2, authors = nil2, icon_href = nil2, icon_type = nil2, icon_ext = nil2, webfonts = nil2, iconfont_stylesheet = nil2, syntax_hl = nil2, syntax_hl_docinfo_head_idx = nil2, docinfo_content = nil2, id_attr = nil2, sectioned = nil2, classes = nil2, details = nil2, idx = nil2, $writer2 = nil2, eqnums_val = nil2, eqnums_opt = nil2;
              br = "<br" + (slash = self5.void_element_slash) + ">";
              if ($truthy2((asset_uri_scheme = node.$attr("asset-uri-scheme", "https"))["$empty?"]())) {
              } else {
                asset_uri_scheme = "" + asset_uri_scheme + ":";
              }
              ;
              cdn_base_url = "" + asset_uri_scheme + "//cdnjs.cloudflare.com/ajax/libs";
              linkcss = node["$attr?"]("linkcss");
              max_width_attr = function() {
                if ($truthy2(node["$attr?"]("max-width"))) {
                  return ' style="max-width: ' + node.$attr("max-width") + ';"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              result2 = ["<!DOCTYPE html>"];
              lang_attribute = function() {
                if ($truthy2(node["$attr?"]("nolang"))) {
                  return "";
                } else {
                  return ' lang="' + node.$attr("lang", "en") + '"';
                }
                ;
                return nil2;
              }();
              result2["$<<"]("<html" + function() {
                if ($truthy2(self5.xml_mode)) {
                  return ' xmlns="http://www.w3.org/1999/xhtml"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + lang_attribute + ">");
              result2["$<<"]('<head>\n<meta charset="' + node.$attr("encoding", "UTF-8") + '"' + slash + '>\n<meta http-equiv="X-UA-Compatible" content="IE=edge"' + slash + '>\n<meta name="viewport" content="width=device-width, initial-scale=1.0"' + slash + '>\n<meta name="generator" content="Asciidoctor ' + node.$attr("asciidoctor-version") + '"' + slash + ">");
              if ($truthy2(node["$attr?"]("app-name"))) {
                result2["$<<"]('<meta name="application-name" content="' + node.$attr("app-name") + '"' + slash + ">");
              }
              ;
              if ($truthy2(node["$attr?"]("description"))) {
                result2["$<<"]('<meta name="description" content="' + node.$attr("description") + '"' + slash + ">");
              }
              ;
              if ($truthy2(node["$attr?"]("keywords"))) {
                result2["$<<"]('<meta name="keywords" content="' + node.$attr("keywords") + '"' + slash + ">");
              }
              ;
              if ($truthy2(node["$attr?"]("authors"))) {
                result2["$<<"]('<meta name="author" content="' + function() {
                  if ($truthy2((authors = node.$sub_replacements(node.$attr("authors")))["$include?"]("<"))) {
                    return authors.$gsub($$2($nesting4, "XmlSanitizeRx"), "");
                  } else {
                    return authors;
                  }
                  ;
                  return nil2;
                }() + '"' + slash + ">");
              }
              ;
              if ($truthy2(node["$attr?"]("copyright"))) {
                result2["$<<"]('<meta name="copyright" content="' + node.$attr("copyright") + '"' + slash + ">");
              }
              ;
              if ($truthy2(node["$attr?"]("favicon"))) {
                if ($truthy2((icon_href = node.$attr("favicon"))["$empty?"]())) {
                  icon_href = "favicon.ico";
                  icon_type = "image/x-icon";
                } else if ($truthy2(icon_ext = $$2($nesting4, "Helpers").$extname(icon_href, nil2))) {
                  icon_type = function() {
                    if (icon_ext["$=="](".ico")) {
                      return "image/x-icon";
                    } else {
                      return "image/" + icon_ext.$slice(1, icon_ext.$length());
                    }
                    ;
                    return nil2;
                  }();
                } else {
                  icon_type = "image/x-icon";
                }
                ;
                result2["$<<"]('<link rel="icon" type="' + icon_type + '" href="' + icon_href + '"' + slash + ">");
              }
              ;
              result2["$<<"]("<title>" + node.$doctitle($hash22(["sanitize", "use_fallback"], { "sanitize": true, "use_fallback": true })) + "</title>");
              if ($truthy2($$2($nesting4, "DEFAULT_STYLESHEET_KEYS")["$include?"](node.$attr("stylesheet")))) {
                if ($truthy2(webfonts = node.$attr("webfonts"))) {
                  result2["$<<"]('<link rel="stylesheet" href="' + asset_uri_scheme + "//fonts.googleapis.com/css?family=" + function() {
                    if ($truthy2(webfonts["$empty?"]())) {
                      return "Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700";
                    } else {
                      return webfonts;
                    }
                    ;
                    return nil2;
                  }() + '"' + slash + ">");
                }
                ;
                if ($truthy2(linkcss)) {
                  result2["$<<"]('<link rel="stylesheet" href="' + node.$normalize_web_path($$2($nesting4, "DEFAULT_STYLESHEET_NAME"), node.$attr("stylesdir", ""), false) + '"' + slash + ">");
                } else {
                  result2["$<<"]("<style>\n" + $$2($nesting4, "Stylesheets").$instance().$primary_stylesheet_data() + "\n</style>");
                }
                ;
              } else if ($truthy2(node["$attr?"]("stylesheet"))) {
                if ($truthy2(linkcss)) {
                  result2["$<<"]('<link rel="stylesheet" href="' + node.$normalize_web_path(node.$attr("stylesheet"), node.$attr("stylesdir", "")) + '"' + slash + ">");
                } else {
                  result2["$<<"]("<style>\n" + node.$read_contents(node.$attr("stylesheet"), $hash22(["start", "warn_on_failure", "label"], { "start": node.$attr("stylesdir"), "warn_on_failure": true, "label": "stylesheet" })) + "\n</style>");
                }
              }
              ;
              if ($truthy2(node["$attr?"]("icons", "font"))) {
                if ($truthy2(node["$attr?"]("iconfont-remote"))) {
                  result2["$<<"]('<link rel="stylesheet" href="' + node.$attr("iconfont-cdn", "" + cdn_base_url + "/font-awesome/" + $$2($nesting4, "FONT_AWESOME_VERSION") + "/css/font-awesome.min.css") + '"' + slash + ">");
                } else {
                  iconfont_stylesheet = "" + node.$attr("iconfont-name", "font-awesome") + ".css";
                  result2["$<<"]('<link rel="stylesheet" href="' + node.$normalize_web_path(iconfont_stylesheet, node.$attr("stylesdir", ""), false) + '"' + slash + ">");
                }
              }
              ;
              if ($truthy2(syntax_hl = node.$syntax_highlighter())) {
                result2["$<<"](syntax_hl_docinfo_head_idx = result2.$size());
              }
              ;
              if ($truthy2((docinfo_content = node.$docinfo())["$empty?"]())) {
              } else {
                result2["$<<"](docinfo_content);
              }
              ;
              result2["$<<"]("</head>");
              id_attr = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              if ($truthy2($truthy2($a2 = $truthy2($b2 = $truthy2($c = sectioned = node["$sections?"]()) ? node["$attr?"]("toc-class") : $c) ? node["$attr?"]("toc") : $b2) ? node["$attr?"]("toc-placement", "auto") : $a2)) {
                classes = [node.$doctype(), node.$attr("toc-class"), "toc-" + node.$attr("toc-position", "header")];
              } else {
                classes = [node.$doctype()];
              }
              ;
              if ($truthy2(node["$role?"]())) {
                classes["$<<"](node.$role());
              }
              ;
              result2["$<<"]("<body" + id_attr + ' class="' + classes.$join(" ") + '">');
              if ($truthy2((docinfo_content = node.$docinfo("header"))["$empty?"]())) {
              } else {
                result2["$<<"](docinfo_content);
              }
              ;
              if ($truthy2(node.$noheader())) {
              } else {
                result2["$<<"]('<div id="header"' + max_width_attr + ">");
                if (node.$doctype()["$=="]("manpage")) {
                  result2["$<<"]("<h1>" + node.$doctitle() + " Manual Page</h1>");
                  if ($truthy2($truthy2($a2 = $truthy2($b2 = sectioned) ? node["$attr?"]("toc") : $b2) ? node["$attr?"]("toc-placement", "auto") : $a2)) {
                    result2["$<<"]('<div id="toc" class="' + node.$attr("toc-class", "toc") + '">\n<div id="toctitle">' + node.$attr("toc-title") + "</div>\n" + node.$converter().$convert(node, "outline") + "\n</div>");
                  }
                  ;
                  if ($truthy2(node["$attr?"]("manpurpose"))) {
                    result2["$<<"](self5.$generate_manname_section(node));
                  }
                  ;
                } else {
                  if ($truthy2(node["$header?"]())) {
                    if ($truthy2(node.$notitle())) {
                    } else {
                      result2["$<<"]("<h1>" + node.$header().$title() + "</h1>");
                    }
                    ;
                    details = [];
                    idx = 1;
                    $send2(node.$authors(), "each", [], ($$4 = function(author) {
                      var self6 = $$4.$$s || this;
                      if (author == null) {
                        author = nil2;
                      }
                      ;
                      details["$<<"]('<span id="author' + function() {
                        if ($truthy2($rb_gt2(idx, 1))) {
                          return idx;
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }() + '" class="author">' + node.$sub_replacements(author.$name()) + "</span>" + br);
                      if ($truthy2(author.$email())) {
                        details["$<<"]('<span id="email' + function() {
                          if ($truthy2($rb_gt2(idx, 1))) {
                            return idx;
                          } else {
                            return "";
                          }
                          ;
                          return nil2;
                        }() + '" class="email">' + node.$sub_macros(author.$email()) + "</span>" + br);
                      }
                      ;
                      return idx = $rb_plus(idx, 1);
                    }, $$4.$$s = self5, $$4.$$arity = 1, $$4));
                    if ($truthy2(node["$attr?"]("revnumber"))) {
                      details["$<<"]('<span id="revnumber">' + ($truthy2($a2 = node.$attr("version-label")) ? $a2 : "").$downcase() + " " + node.$attr("revnumber") + function() {
                        if ($truthy2(node["$attr?"]("revdate"))) {
                          return ",";
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }() + "</span>");
                    }
                    ;
                    if ($truthy2(node["$attr?"]("revdate"))) {
                      details["$<<"]('<span id="revdate">' + node.$attr("revdate") + "</span>");
                    }
                    ;
                    if ($truthy2(node["$attr?"]("revremark"))) {
                      details["$<<"]("" + br + '<span id="revremark">' + node.$attr("revremark") + "</span>");
                    }
                    ;
                    if ($truthy2(details["$empty?"]())) {
                    } else {
                      result2["$<<"]('<div class="details">');
                      result2.$concat(details);
                      result2["$<<"]("</div>");
                    }
                    ;
                  }
                  ;
                  if ($truthy2($truthy2($a2 = $truthy2($b2 = sectioned) ? node["$attr?"]("toc") : $b2) ? node["$attr?"]("toc-placement", "auto") : $a2)) {
                    result2["$<<"]('<div id="toc" class="' + node.$attr("toc-class", "toc") + '">\n<div id="toctitle">' + node.$attr("toc-title") + "</div>\n" + node.$converter().$convert(node, "outline") + "\n</div>");
                  }
                  ;
                }
                ;
                result2["$<<"]("</div>");
              }
              ;
              result2["$<<"]('<div id="content"' + max_width_attr + ">\n" + node.$content() + "\n</div>");
              if ($truthy2($truthy2($a2 = node["$footnotes?"]()) ? node["$attr?"]("nofootnotes")["$!"]() : $a2)) {
                result2["$<<"]('<div id="footnotes"' + max_width_attr + ">\n<hr" + slash + ">");
                $send2(node.$footnotes(), "each", [], ($$5 = function(footnote) {
                  var self6 = $$5.$$s || this;
                  if (footnote == null) {
                    footnote = nil2;
                  }
                  ;
                  return result2["$<<"]('<div class="footnote" id="_footnotedef_' + footnote.$index() + '">\n<a href="#_footnoteref_' + footnote.$index() + '">' + footnote.$index() + "</a>. " + footnote.$text() + "\n</div>");
                }, $$5.$$s = self5, $$5.$$arity = 1, $$5));
                result2["$<<"]("</div>");
              }
              ;
              if ($truthy2(node.$nofooter())) {
              } else {
                result2["$<<"]('<div id="footer"' + max_width_attr + ">");
                result2["$<<"]('<div id="footer-text">');
                if ($truthy2(node["$attr?"]("revnumber"))) {
                  result2["$<<"]("" + node.$attr("version-label") + " " + node.$attr("revnumber") + br);
                }
                ;
                if ($truthy2($truthy2($a2 = node["$attr?"]("last-update-label")) ? node["$attr?"]("reproducible")["$!"]() : $a2)) {
                  result2["$<<"]("" + node.$attr("last-update-label") + " " + node.$attr("docdatetime"));
                }
                ;
                result2["$<<"]("</div>");
                result2["$<<"]("</div>");
              }
              ;
              if ($truthy2(syntax_hl)) {
                if ($truthy2(syntax_hl["$docinfo?"]("head"))) {
                  $writer2 = [syntax_hl_docinfo_head_idx, syntax_hl.$docinfo("head", node, $hash22(["cdn_base_url", "linkcss", "self_closing_tag_slash"], { "cdn_base_url": cdn_base_url, "linkcss": linkcss, "self_closing_tag_slash": slash }))];
                  $send2(result2, "[]=", Opal2.to_a($writer2));
                  $writer2[$rb_minus($writer2["length"], 1)];
                } else {
                  result2.$delete_at(syntax_hl_docinfo_head_idx);
                }
                ;
                if ($truthy2(syntax_hl["$docinfo?"]("footer"))) {
                  result2["$<<"](syntax_hl.$docinfo("footer", node, $hash22(["cdn_base_url", "linkcss", "self_closing_tag_slash"], { "cdn_base_url": cdn_base_url, "linkcss": linkcss, "self_closing_tag_slash": slash })));
                }
                ;
              }
              ;
              if ($truthy2(node["$attr?"]("stem"))) {
                eqnums_val = node.$attr("eqnums", "none");
                if ($truthy2(eqnums_val["$empty?"]())) {
                  eqnums_val = "AMS";
                }
                ;
                eqnums_opt = ' equationNumbers: { autoNumber: "' + eqnums_val + '" } ';
                result2["$<<"]('<script type="text/x-mathjax-config">\nMathJax.Hub.Config({\n  messageStyle: "none",\n  tex2jax: {\n    inlineMath: [' + $$2($nesting4, "INLINE_MATH_DELIMITERS")["$[]"]("latexmath").$inspect() + "],\n    displayMath: [" + $$2($nesting4, "BLOCK_MATH_DELIMITERS")["$[]"]("latexmath").$inspect() + '],\n    ignoreClass: "nostem|nolatexmath"\n  },\n  asciimath2jax: {\n    delimiters: [' + $$2($nesting4, "BLOCK_MATH_DELIMITERS")["$[]"]("asciimath").$inspect() + '],\n    ignoreClass: "nostem|noasciimath"\n  },\n  TeX: {' + eqnums_opt + '}\n})\nMathJax.Hub.Register.StartupHook("AsciiMath Jax Ready", function () {\n  MathJax.InputJax.AsciiMath.postfilterHooks.Add(function (data, node) {\n    if ((node = data.script.parentNode) && (node = node.parentNode) && node.classList.contains("stemblock")) {\n      data.math.root.display = "block"\n    }\n    return data\n  })\n})\n<\/script>\n<script src="' + cdn_base_url + "/mathjax/" + $$2($nesting4, "MATHJAX_VERSION") + '/MathJax.js?config=TeX-MML-AM_HTMLorMML"><\/script>');
              }
              ;
              if ($truthy2((docinfo_content = node.$docinfo("footer"))["$empty?"]())) {
              } else {
                result2["$<<"](docinfo_content);
              }
              ;
              result2["$<<"]("</body>");
              result2["$<<"]("</html>");
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_document$3.$$arity = 1);
            Opal2.def(self4, "$convert_embedded", $Html5Converter_convert_embedded$6 = function $$convert_embedded(node) {
              var $a2, $b2, $c, $$7, self5 = this, result2 = nil2, id_attr = nil2, toc_p = nil2;
              result2 = [];
              if (node.$doctype()["$=="]("manpage")) {
                if ($truthy2(node.$notitle())) {
                } else {
                  id_attr = function() {
                    if ($truthy2(node.$id())) {
                      return ' id="' + node.$id() + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  result2["$<<"]("<h1" + id_attr + ">" + node.$doctitle() + " Manual Page</h1>");
                }
                ;
                if ($truthy2(node["$attr?"]("manpurpose"))) {
                  result2["$<<"](self5.$generate_manname_section(node));
                }
                ;
              } else if ($truthy2($truthy2($a2 = node["$header?"]()) ? node.$notitle()["$!"]() : $a2)) {
                id_attr = function() {
                  if ($truthy2(node.$id())) {
                    return ' id="' + node.$id() + '"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                result2["$<<"]("<h1" + id_attr + ">" + node.$header().$title() + "</h1>");
              }
              ;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = $truthy2($c = node["$sections?"]()) ? node["$attr?"]("toc") : $c) ? (toc_p = node.$attr("toc-placement"))["$!="]("macro") : $b2) ? toc_p["$!="]("preamble") : $a2)) {
                result2["$<<"]('<div id="toc" class="toc">\n<div id="toctitle">' + node.$attr("toc-title") + "</div>\n" + node.$converter().$convert(node, "outline") + "\n</div>");
              }
              ;
              result2["$<<"](node.$content());
              if ($truthy2($truthy2($a2 = node["$footnotes?"]()) ? node["$attr?"]("nofootnotes")["$!"]() : $a2)) {
                result2["$<<"]('<div id="footnotes">\n<hr' + self5.void_element_slash + ">");
                $send2(node.$footnotes(), "each", [], ($$7 = function(footnote) {
                  var self6 = $$7.$$s || this;
                  if (footnote == null) {
                    footnote = nil2;
                  }
                  ;
                  return result2["$<<"]('<div class="footnote" id="_footnotedef_' + footnote.$index() + '">\n<a href="#_footnoteref_' + footnote.$index() + '">' + footnote.$index() + "</a>. " + footnote.$text() + "\n</div>");
                }, $$7.$$s = self5, $$7.$$arity = 1, $$7));
                result2["$<<"]("</div>");
              }
              ;
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_embedded$6.$$arity = 1);
            Opal2.def(self4, "$convert_outline", $Html5Converter_convert_outline$8 = function $$convert_outline(node, opts) {
              var $a2, $b2, $$92, self5 = this, sectnumlevels = nil2, toclevels = nil2, sections = nil2, result2 = nil2;
              if (opts == null) {
                opts = $hash22([], {});
              }
              ;
              if ($truthy2(node["$sections?"]())) {
              } else {
                return nil2;
              }
              ;
              sectnumlevels = $truthy2($a2 = opts["$[]"]("sectnumlevels")) ? $a2 : ($truthy2($b2 = node.$document().$attributes()["$[]"]("sectnumlevels")) ? $b2 : 3).$to_i();
              toclevels = $truthy2($a2 = opts["$[]"]("toclevels")) ? $a2 : ($truthy2($b2 = node.$document().$attributes()["$[]"]("toclevels")) ? $b2 : 2).$to_i();
              sections = node.$sections();
              result2 = ['<ul class="sectlevel' + sections["$[]"](0).$level() + '">'];
              $send2(sections, "each", [], ($$92 = function(section) {
                var self6 = $$92.$$s || this, $c, slevel = nil2, stitle = nil2, $case = nil2, signifier = nil2, child_toc_level = nil2;
                if (section == null) {
                  section = nil2;
                }
                ;
                slevel = section.$level();
                if ($truthy2(section.$caption())) {
                  stitle = section.$captioned_title();
                } else if ($truthy2($truthy2($c = section.$numbered()) ? $rb_le(slevel, sectnumlevels) : $c)) {
                  if ($truthy2($truthy2($c = $rb_lt2(slevel, 2)) ? node.$document().$doctype()["$=="]("book") : $c)) {
                    $case = section.$sectname();
                    if ("chapter"["$==="]($case)) {
                      stitle = "" + function() {
                        if ($truthy2(signifier = node.$document().$attributes()["$[]"]("chapter-signifier"))) {
                          return "" + signifier + " ";
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }() + section.$sectnum() + " " + section.$title();
                    } else if ("part"["$==="]($case)) {
                      stitle = "" + function() {
                        if ($truthy2(signifier = node.$document().$attributes()["$[]"]("part-signifier"))) {
                          return "" + signifier + " ";
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }() + section.$sectnum(nil2, ":") + " " + section.$title();
                    } else {
                      stitle = "" + section.$sectnum() + " " + section.$title();
                    }
                  } else {
                    stitle = "" + section.$sectnum() + " " + section.$title();
                  }
                } else {
                  stitle = section.$title();
                }
                ;
                if ($truthy2(stitle["$include?"]("<a"))) {
                  stitle = stitle.$gsub($$2($nesting4, "DropAnchorRx"), "");
                }
                ;
                if ($truthy2($truthy2($c = $rb_lt2(slevel, toclevels)) ? child_toc_level = self6.$convert_outline(section, $hash22(["toclevels", "sectnumlevels"], { "toclevels": toclevels, "sectnumlevels": sectnumlevels })) : $c)) {
                  result2["$<<"]('<li><a href="#' + section.$id() + '">' + stitle + "</a>");
                  result2["$<<"](child_toc_level);
                  return result2["$<<"]("</li>");
                } else {
                  return result2["$<<"]('<li><a href="#' + section.$id() + '">' + stitle + "</a></li>");
                }
                ;
              }, $$92.$$s = self5, $$92.$$arity = 1, $$92));
              result2["$<<"]("</ul>");
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_outline$8.$$arity = -2);
            Opal2.def(self4, "$convert_section", $Html5Converter_convert_section$10 = function $$convert_section(node) {
              var $a2, $b2, self5 = this, doc_attrs = nil2, level = nil2, title = nil2, $case = nil2, signifier = nil2, id_attr = nil2, id = nil2, role = nil2;
              doc_attrs = node.$document().$attributes();
              level = node.$level();
              if ($truthy2(node.$caption())) {
                title = node.$captioned_title();
              } else if ($truthy2($truthy2($a2 = node.$numbered()) ? $rb_le(level, ($truthy2($b2 = doc_attrs["$[]"]("sectnumlevels")) ? $b2 : 3).$to_i()) : $a2)) {
                if ($truthy2($truthy2($a2 = $rb_lt2(level, 2)) ? node.$document().$doctype()["$=="]("book") : $a2)) {
                  $case = node.$sectname();
                  if ("chapter"["$==="]($case)) {
                    title = "" + function() {
                      if ($truthy2(signifier = doc_attrs["$[]"]("chapter-signifier"))) {
                        return "" + signifier + " ";
                      } else {
                        return "";
                      }
                      ;
                      return nil2;
                    }() + node.$sectnum() + " " + node.$title();
                  } else if ("part"["$==="]($case)) {
                    title = "" + function() {
                      if ($truthy2(signifier = doc_attrs["$[]"]("part-signifier"))) {
                        return "" + signifier + " ";
                      } else {
                        return "";
                      }
                      ;
                      return nil2;
                    }() + node.$sectnum(nil2, ":") + " " + node.$title();
                  } else {
                    title = "" + node.$sectnum() + " " + node.$title();
                  }
                } else {
                  title = "" + node.$sectnum() + " " + node.$title();
                }
              } else {
                title = node.$title();
              }
              ;
              if ($truthy2(node.$id())) {
                id_attr = ' id="' + (id = node.$id()) + '"';
                if ($truthy2(doc_attrs["$[]"]("sectlinks"))) {
                  title = '<a class="link" href="#' + id + '">' + title + "</a>";
                }
                ;
                if ($truthy2(doc_attrs["$[]"]("sectanchors"))) {
                  if (doc_attrs["$[]"]("sectanchors")["$=="]("after")) {
                    title = "" + title + '<a class="anchor" href="#' + id + '"></a>';
                  } else {
                    title = '<a class="anchor" href="#' + id + '"></a>' + title;
                  }
                }
                ;
              } else {
                id_attr = "";
              }
              ;
              if (level["$=="](0)) {
                return "<h1" + id_attr + ' class="sect0' + function() {
                  if ($truthy2(role = node.$role())) {
                    return " " + role;
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + '">' + title + "</h1>\n" + node.$content();
              } else {
                return '<div class="sect' + level + function() {
                  if ($truthy2(role = node.$role())) {
                    return " " + role;
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + '">\n<h' + $rb_plus(level, 1) + id_attr + ">" + title + "</h" + $rb_plus(level, 1) + ">\n" + function() {
                  if (level["$=="](1)) {
                    return '<div class="sectionbody">\n' + node.$content() + "\n</div>";
                  } else {
                    return node.$content();
                  }
                  ;
                  return nil2;
                }() + "\n</div>";
              }
              ;
            }, $Html5Converter_convert_section$10.$$arity = 1);
            Opal2.def(self4, "$convert_admonition", $Html5Converter_convert_admonition$11 = function $$convert_admonition(node) {
              var $a2, self5 = this, id_attr = nil2, name = nil2, title_element = nil2, label = nil2, role = nil2;
              id_attr = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              name = node.$attr("name");
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '<div class="title">' + node.$title() + "</div>\n";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              if ($truthy2(node.$document()["$attr?"]("icons"))) {
                if ($truthy2($truthy2($a2 = node.$document()["$attr?"]("icons", "font")) ? node["$attr?"]("icon")["$!"]() : $a2)) {
                  label = '<i class="fa icon-' + name + '" title="' + node.$attr("textlabel") + '"></i>';
                } else {
                  label = '<img src="' + node.$icon_uri(name) + '" alt="' + node.$attr("textlabel") + '"' + self5.void_element_slash + ">";
                }
              } else {
                label = '<div class="title">' + node.$attr("textlabel") + "</div>";
              }
              ;
              return "<div" + id_attr + ' class="admonitionblock ' + name + function() {
                if ($truthy2(role = node.$role())) {
                  return " " + role;
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + '">\n<table>\n<tr>\n<td class="icon">\n' + label + '\n</td>\n<td class="content">\n' + title_element + node.$content() + "\n</td>\n</tr>\n</table>\n</div>";
            }, $Html5Converter_convert_admonition$11.$$arity = 1);
            Opal2.def(self4, "$convert_audio", $Html5Converter_convert_audio$12 = function $$convert_audio(node) {
              var $a2, self5 = this, xml = nil2, id_attribute = nil2, classes = nil2, class_attribute = nil2, title_element = nil2, start_t = nil2, end_t = nil2, time_anchor = nil2;
              xml = self5.xml_mode;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = ["audioblock", node.$role()].$compact();
              class_attribute = ' class="' + classes.$join(" ") + '"';
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '<div class="title">' + node.$title() + "</div>\n";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              start_t = node.$attr("start");
              end_t = node.$attr("end");
              time_anchor = function() {
                if ($truthy2($truthy2($a2 = start_t) ? $a2 : end_t)) {
                  return "#t=" + ($truthy2($a2 = start_t) ? $a2 : "") + function() {
                    if ($truthy2(end_t)) {
                      return "," + end_t;
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              return "<div" + id_attribute + class_attribute + ">\n" + title_element + '<div class="content">\n<audio src="' + node.$media_uri(node.$attr("target")) + time_anchor + '"' + function() {
                if ($truthy2(node["$option?"]("autoplay"))) {
                  return self5.$append_boolean_attribute("autoplay", xml);
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + function() {
                if ($truthy2(node["$option?"]("nocontrols"))) {
                  return "";
                } else {
                  return self5.$append_boolean_attribute("controls", xml);
                }
                ;
                return nil2;
              }() + function() {
                if ($truthy2(node["$option?"]("loop"))) {
                  return self5.$append_boolean_attribute("loop", xml);
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + ">\nYour browser does not support the audio tag.\n</audio>\n</div>\n</div>";
            }, $Html5Converter_convert_audio$12.$$arity = 1);
            Opal2.def(self4, "$convert_colist", $Html5Converter_convert_colist$13 = function $$convert_colist(node) {
              var $a2, $$14, $$15, self5 = this, result2 = nil2, id_attribute = nil2, classes = nil2, class_attribute = nil2, font_icons = nil2, num = nil2;
              result2 = [];
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = ["colist", node.$style(), node.$role()].$compact();
              class_attribute = ' class="' + classes.$join(" ") + '"';
              result2["$<<"]("<div" + id_attribute + class_attribute + ">");
              if ($truthy2(node["$title?"]())) {
                result2["$<<"]('<div class="title">' + node.$title() + "</div>");
              }
              ;
              if ($truthy2(node.$document()["$attr?"]("icons"))) {
                result2["$<<"]("<table>");
                $a2 = [node.$document()["$attr?"]("icons", "font"), 0], font_icons = $a2[0], num = $a2[1], $a2;
                $send2(node.$items(), "each", [], ($$14 = function(item) {
                  var self6 = $$14.$$s || this, num_label = nil2;
                  if (self6.void_element_slash == null)
                    self6.void_element_slash = nil2;
                  if (item == null) {
                    item = nil2;
                  }
                  ;
                  num = $rb_plus(num, 1);
                  if ($truthy2(font_icons)) {
                    num_label = '<i class="conum" data-value="' + num + '"></i><b>' + num + "</b>";
                  } else {
                    num_label = '<img src="' + node.$icon_uri("callouts/" + num) + '" alt="' + num + '"' + self6.void_element_slash + ">";
                  }
                  ;
                  return result2["$<<"]("<tr>\n<td>" + num_label + "</td>\n<td>" + item.$text() + function() {
                    if ($truthy2(item["$blocks?"]())) {
                      return $rb_plus($$2($nesting4, "LF"), item.$content());
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + "</td>\n</tr>");
                }, $$14.$$s = self5, $$14.$$arity = 1, $$14));
                result2["$<<"]("</table>");
              } else {
                result2["$<<"]("<ol>");
                $send2(node.$items(), "each", [], ($$15 = function(item) {
                  var self6 = $$15.$$s || this;
                  if (item == null) {
                    item = nil2;
                  }
                  ;
                  return result2["$<<"]("<li>\n<p>" + item.$text() + "</p>" + function() {
                    if ($truthy2(item["$blocks?"]())) {
                      return $rb_plus($$2($nesting4, "LF"), item.$content());
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + "\n</li>");
                }, $$15.$$s = self5, $$15.$$arity = 1, $$15));
                result2["$<<"]("</ol>");
              }
              ;
              result2["$<<"]("</div>");
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_colist$13.$$arity = 1);
            Opal2.def(self4, "$convert_dlist", $Html5Converter_convert_dlist$16 = function $$convert_dlist(node) {
              var $$17, $a2, $$19, $$21, self5 = this, result2 = nil2, id_attribute = nil2, $case = nil2, classes = nil2, class_attribute = nil2, slash = nil2, col_style_attribute = nil2, dt_style_attribute = nil2;
              result2 = [];
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              $case = node.$style();
              if ("qanda"["$==="]($case)) {
                classes = ["qlist", "qanda", node.$role()];
              } else if ("horizontal"["$==="]($case)) {
                classes = ["hdlist", node.$role()];
              } else {
                classes = ["dlist", node.$style(), node.$role()];
              }
              ;
              class_attribute = ' class="' + classes.$compact().$join(" ") + '"';
              result2["$<<"]("<div" + id_attribute + class_attribute + ">");
              if ($truthy2(node["$title?"]())) {
                result2["$<<"]('<div class="title">' + node.$title() + "</div>");
              }
              ;
              $case = node.$style();
              if ("qanda"["$==="]($case)) {
                result2["$<<"]("<ol>");
                $send2(node.$items(), "each", [], ($$17 = function(terms, dd) {
                  var self6 = $$17.$$s || this, $$18;
                  if (terms == null) {
                    terms = nil2;
                  }
                  ;
                  if (dd == null) {
                    dd = nil2;
                  }
                  ;
                  result2["$<<"]("<li>");
                  $send2(terms, "each", [], ($$18 = function(dt) {
                    var self7 = $$18.$$s || this;
                    if (dt == null) {
                      dt = nil2;
                    }
                    ;
                    return result2["$<<"]("<p><em>" + dt.$text() + "</em></p>");
                  }, $$18.$$s = self6, $$18.$$arity = 1, $$18));
                  if ($truthy2(dd)) {
                    if ($truthy2(dd["$text?"]())) {
                      result2["$<<"]("<p>" + dd.$text() + "</p>");
                    }
                    ;
                    if ($truthy2(dd["$blocks?"]())) {
                      result2["$<<"](dd.$content());
                    }
                    ;
                  }
                  ;
                  return result2["$<<"]("</li>");
                }, $$17.$$s = self5, $$17.$$arity = 2, $$17));
                result2["$<<"]("</ol>");
              } else if ("horizontal"["$==="]($case)) {
                slash = self5.void_element_slash;
                result2["$<<"]("<table>");
                if ($truthy2($truthy2($a2 = node["$attr?"]("labelwidth")) ? $a2 : node["$attr?"]("itemwidth"))) {
                  result2["$<<"]("<colgroup>");
                  col_style_attribute = function() {
                    if ($truthy2(node["$attr?"]("labelwidth"))) {
                      return ' style="width: ' + node.$attr("labelwidth").$chomp("%") + '%;"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  result2["$<<"]("<col" + col_style_attribute + slash + ">");
                  col_style_attribute = function() {
                    if ($truthy2(node["$attr?"]("itemwidth"))) {
                      return ' style="width: ' + node.$attr("itemwidth").$chomp("%") + '%;"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  result2["$<<"]("<col" + col_style_attribute + slash + ">");
                  result2["$<<"]("</colgroup>");
                }
                ;
                $send2(node.$items(), "each", [], ($$19 = function(terms, dd) {
                  var self6 = $$19.$$s || this, $$20, first_term = nil2;
                  if (terms == null) {
                    terms = nil2;
                  }
                  ;
                  if (dd == null) {
                    dd = nil2;
                  }
                  ;
                  result2["$<<"]("<tr>");
                  result2["$<<"]('<td class="hdlist1' + function() {
                    if ($truthy2(node["$option?"]("strong"))) {
                      return " strong";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + '">');
                  first_term = true;
                  $send2(terms, "each", [], ($$20 = function(dt) {
                    var self7 = $$20.$$s || this;
                    if (dt == null) {
                      dt = nil2;
                    }
                    ;
                    if ($truthy2(first_term)) {
                    } else {
                      result2["$<<"]("<br" + slash + ">");
                    }
                    ;
                    result2["$<<"](dt.$text());
                    return first_term = nil2;
                  }, $$20.$$s = self6, $$20.$$arity = 1, $$20));
                  result2["$<<"]("</td>");
                  result2["$<<"]('<td class="hdlist2">');
                  if ($truthy2(dd)) {
                    if ($truthy2(dd["$text?"]())) {
                      result2["$<<"]("<p>" + dd.$text() + "</p>");
                    }
                    ;
                    if ($truthy2(dd["$blocks?"]())) {
                      result2["$<<"](dd.$content());
                    }
                    ;
                  }
                  ;
                  result2["$<<"]("</td>");
                  return result2["$<<"]("</tr>");
                }, $$19.$$s = self5, $$19.$$arity = 2, $$19));
                result2["$<<"]("</table>");
              } else {
                result2["$<<"]("<dl>");
                dt_style_attribute = function() {
                  if ($truthy2(node.$style())) {
                    return "";
                  } else {
                    return ' class="hdlist1"';
                  }
                  ;
                  return nil2;
                }();
                $send2(node.$items(), "each", [], ($$21 = function(terms, dd) {
                  var self6 = $$21.$$s || this, $$22;
                  if (terms == null) {
                    terms = nil2;
                  }
                  ;
                  if (dd == null) {
                    dd = nil2;
                  }
                  ;
                  $send2(terms, "each", [], ($$22 = function(dt) {
                    var self7 = $$22.$$s || this;
                    if (dt == null) {
                      dt = nil2;
                    }
                    ;
                    return result2["$<<"]("<dt" + dt_style_attribute + ">" + dt.$text() + "</dt>");
                  }, $$22.$$s = self6, $$22.$$arity = 1, $$22));
                  if ($truthy2(dd)) {
                  } else {
                    return nil2;
                  }
                  ;
                  result2["$<<"]("<dd>");
                  if ($truthy2(dd["$text?"]())) {
                    result2["$<<"]("<p>" + dd.$text() + "</p>");
                  }
                  ;
                  if ($truthy2(dd["$blocks?"]())) {
                    result2["$<<"](dd.$content());
                  }
                  ;
                  return result2["$<<"]("</dd>");
                }, $$21.$$s = self5, $$21.$$arity = 2, $$21));
                result2["$<<"]("</dl>");
              }
              ;
              result2["$<<"]("</div>");
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_dlist$16.$$arity = 1);
            Opal2.def(self4, "$convert_example", $Html5Converter_convert_example$23 = function $$convert_example(node) {
              var self5 = this, id_attribute = nil2, class_attribute = nil2, summary_element = nil2, title_element = nil2, role = nil2;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              if ($truthy2(node["$option?"]("collapsible"))) {
                class_attribute = function() {
                  if ($truthy2(node.$role())) {
                    return ' class="' + node.$role() + '"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                summary_element = function() {
                  if ($truthy2(node["$title?"]())) {
                    return '<summary class="title">' + node.$title() + "</summary>";
                  } else {
                    return '<summary class="title">Details</summary>';
                  }
                  ;
                  return nil2;
                }();
                return "<details" + id_attribute + class_attribute + function() {
                  if ($truthy2(node["$option?"]("open"))) {
                    return " open";
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + ">\n" + summary_element + '\n<div class="content">\n' + node.$content() + "\n</div>\n</details>";
              } else {
                title_element = function() {
                  if ($truthy2(node["$title?"]())) {
                    return '<div class="title">' + node.$captioned_title() + "</div>\n";
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                return "<div" + id_attribute + ' class="exampleblock' + function() {
                  if ($truthy2(role = node.$role())) {
                    return " " + role;
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + '">\n' + title_element + '<div class="content">\n' + node.$content() + "\n</div>\n</div>";
              }
              ;
            }, $Html5Converter_convert_example$23.$$arity = 1);
            Opal2.def(self4, "$convert_floating_title", $Html5Converter_convert_floating_title$24 = function $$convert_floating_title(node) {
              var self5 = this, tag_name = nil2, id_attribute = nil2, classes = nil2;
              tag_name = "h" + $rb_plus(node.$level(), 1);
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = [node.$style(), node.$role()].$compact();
              return "<" + tag_name + id_attribute + ' class="' + classes.$join(" ") + '">' + node.$title() + "</" + tag_name + ">";
            }, $Html5Converter_convert_floating_title$24.$$arity = 1);
            Opal2.def(self4, "$convert_image", $Html5Converter_convert_image$25 = function $$convert_image(node) {
              var $a2, $b2, self5 = this, target = nil2, width_attr = nil2, height_attr = nil2, img = nil2, fallback = nil2, id_attr = nil2, classes = nil2, class_attr = nil2, title_el = nil2;
              target = node.$attr("target");
              width_attr = function() {
                if ($truthy2(node["$attr?"]("width"))) {
                  return ' width="' + node.$attr("width") + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              height_attr = function() {
                if ($truthy2(node["$attr?"]("height"))) {
                  return ' height="' + node.$attr("height") + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              if ($truthy2($truthy2($a2 = $truthy2($b2 = node["$attr?"]("format", "svg")) ? $b2 : target["$include?"](".svg")) ? $rb_lt2(node.$document().$safe(), $$$2($$2($nesting4, "SafeMode"), "SECURE")) : $a2)) {
                if ($truthy2(node["$option?"]("inline"))) {
                  img = $truthy2($a2 = self5.$read_svg_contents(node, target)) ? $a2 : '<span class="alt">' + node.$alt() + "</span>";
                } else if ($truthy2(node["$option?"]("interactive"))) {
                  fallback = function() {
                    if ($truthy2(node["$attr?"]("fallback"))) {
                      return '<img src="' + node.$image_uri(node.$attr("fallback")) + '" alt="' + self5.$encode_attribute_value(node.$alt()) + '"' + width_attr + height_attr + self5.void_element_slash + ">";
                    } else {
                      return '<span class="alt">' + node.$alt() + "</span>";
                    }
                    ;
                    return nil2;
                  }();
                  img = '<object type="image/svg+xml" data="' + node.$image_uri(target) + '"' + width_attr + height_attr + ">" + fallback + "</object>";
                } else {
                  img = '<img src="' + node.$image_uri(target) + '" alt="' + self5.$encode_attribute_value(node.$alt()) + '"' + width_attr + height_attr + self5.void_element_slash + ">";
                }
              } else {
                img = '<img src="' + node.$image_uri(target) + '" alt="' + self5.$encode_attribute_value(node.$alt()) + '"' + width_attr + height_attr + self5.void_element_slash + ">";
              }
              ;
              if ($truthy2(node["$attr?"]("link"))) {
                img = '<a class="image" href="' + node.$attr("link") + '"' + self5.$append_link_constraint_attrs(node).$join() + ">" + img + "</a>";
              }
              ;
              id_attr = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = ["imageblock"];
              if ($truthy2(node["$attr?"]("float"))) {
                classes["$<<"](node.$attr("float"));
              }
              ;
              if ($truthy2(node["$attr?"]("align"))) {
                classes["$<<"]("text-" + node.$attr("align"));
              }
              ;
              if ($truthy2(node.$role())) {
                classes["$<<"](node.$role());
              }
              ;
              class_attr = ' class="' + classes.$join(" ") + '"';
              title_el = function() {
                if ($truthy2(node["$title?"]())) {
                  return '\n<div class="title">' + node.$captioned_title() + "</div>";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              return "<div" + id_attr + class_attr + '>\n<div class="content">\n' + img + "\n</div>" + title_el + "\n</div>";
            }, $Html5Converter_convert_image$25.$$arity = 1);
            Opal2.def(self4, "$convert_listing", $Html5Converter_convert_listing$26 = function $$convert_listing(node) {
              var $a2, self5 = this, nowrap = nil2, lang = nil2, syntax_hl = nil2, opts = nil2, doc_attrs = nil2, $writer2 = nil2, pre_open = nil2, pre_close = nil2, id_attribute = nil2, title_element = nil2, role = nil2;
              nowrap = $truthy2($a2 = node["$option?"]("nowrap")) ? $a2 : node.$document()["$attr?"]("prewrap")["$!"]();
              if (node.$style()["$=="]("source")) {
                lang = node.$attr("language");
                if ($truthy2(syntax_hl = node.$document().$syntax_highlighter())) {
                  opts = function() {
                    if ($truthy2(syntax_hl["$highlight?"]())) {
                      return $hash22(["css_mode", "style"], { "css_mode": ($truthy2($a2 = (doc_attrs = node.$document().$attributes())["$[]"]("" + syntax_hl.$name() + "-css")) ? $a2 : "class").$to_sym(), "style": doc_attrs["$[]"]("" + syntax_hl.$name() + "-style") });
                    } else {
                      return $hash22([], {});
                    }
                    ;
                    return nil2;
                  }();
                  $writer2 = ["nowrap", nowrap];
                  $send2(opts, "[]=", Opal2.to_a($writer2));
                  $writer2[$rb_minus($writer2["length"], 1)];
                  ;
                } else {
                  pre_open = '<pre class="highlight' + function() {
                    if ($truthy2(nowrap)) {
                      return " nowrap";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + '"><code' + function() {
                    if ($truthy2(lang)) {
                      return ' class="language-' + lang + '" data-lang="' + lang + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + ">";
                  pre_close = "</code></pre>";
                }
                ;
              } else {
                pre_open = "<pre" + function() {
                  if ($truthy2(nowrap)) {
                    return ' class="nowrap"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + ">";
                pre_close = "</pre>";
              }
              ;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '<div class="title">' + node.$captioned_title() + "</div>\n";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              return "<div" + id_attribute + ' class="listingblock' + function() {
                if ($truthy2(role = node.$role())) {
                  return " " + role;
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + '">\n' + title_element + '<div class="content">\n' + function() {
                if ($truthy2(syntax_hl)) {
                  return syntax_hl.$format(node, lang, opts);
                } else {
                  return $rb_plus($rb_plus(pre_open, $truthy2($a2 = node.$content()) ? $a2 : ""), pre_close);
                }
                ;
                return nil2;
              }() + "\n</div>\n</div>";
            }, $Html5Converter_convert_listing$26.$$arity = 1);
            Opal2.def(self4, "$convert_literal", $Html5Converter_convert_literal$27 = function $$convert_literal(node) {
              var $a2, self5 = this, id_attribute = nil2, title_element = nil2, nowrap = nil2, role = nil2;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '<div class="title">' + node.$title() + "</div>\n";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              nowrap = $truthy2($a2 = node.$document()["$attr?"]("prewrap")["$!"]()) ? $a2 : node["$option?"]("nowrap");
              return "<div" + id_attribute + ' class="literalblock' + function() {
                if ($truthy2(role = node.$role())) {
                  return " " + role;
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + '">\n' + title_element + '<div class="content">\n<pre' + function() {
                if ($truthy2(nowrap)) {
                  return ' class="nowrap"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + ">" + node.$content() + "</pre>\n</div>\n</div>";
            }, $Html5Converter_convert_literal$27.$$arity = 1);
            Opal2.def(self4, "$convert_stem", $Html5Converter_convert_stem$28 = function $$convert_stem(node) {
              var $a2, $b2, $$29, self5 = this, id_attribute = nil2, title_element = nil2, style = nil2, open = nil2, close = nil2, equation = nil2, br = nil2, role = nil2;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '<div class="title">' + node.$title() + "</div>\n";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              $b2 = $$2($nesting4, "BLOCK_MATH_DELIMITERS")["$[]"](style = node.$style().$to_sym()), $a2 = Opal2.to_ary($b2), open = $a2[0] == null ? nil2 : $a2[0], close = $a2[1] == null ? nil2 : $a2[1], $b2;
              if ($truthy2(equation = node.$content())) {
                if ($truthy2(($a2 = style["$=="]("asciimath")) ? equation["$include?"]($$2($nesting4, "LF")) : style["$=="]("asciimath"))) {
                  br = "" + $$2($nesting4, "LF") + "<br" + self5.void_element_slash + ">";
                  equation = $send2(equation, "gsub", [$$2($nesting4, "StemBreakRx")], ($$29 = function() {
                    var self6 = $$29.$$s || this, $c;
                    return "" + close + $rb_times(br, $rb_minus((($c = $gvars["~"]) === nil2 ? nil2 : $c["$[]"](0)).$count($$2($nesting4, "LF")), 1)) + $$2($nesting4, "LF") + open;
                  }, $$29.$$s = self5, $$29.$$arity = 0, $$29));
                }
                ;
                if ($truthy2($truthy2($a2 = equation["$start_with?"](open)) ? equation["$end_with?"](close) : $a2)) {
                } else {
                  equation = "" + open + equation + close;
                }
                ;
              } else {
                equation = "";
              }
              ;
              return "<div" + id_attribute + ' class="stemblock' + function() {
                if ($truthy2(role = node.$role())) {
                  return " " + role;
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + '">\n' + title_element + '<div class="content">\n' + equation + "\n</div>\n</div>";
            }, $Html5Converter_convert_stem$28.$$arity = 1);
            Opal2.def(self4, "$convert_olist", $Html5Converter_convert_olist$30 = function $$convert_olist(node) {
              var $$31, self5 = this, result2 = nil2, id_attribute = nil2, classes = nil2, class_attribute = nil2, type_attribute = nil2, keyword = nil2, start_attribute = nil2, reversed_attribute = nil2;
              result2 = [];
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = ["olist", node.$style(), node.$role()].$compact();
              class_attribute = ' class="' + classes.$join(" ") + '"';
              result2["$<<"]("<div" + id_attribute + class_attribute + ">");
              if ($truthy2(node["$title?"]())) {
                result2["$<<"]('<div class="title">' + node.$title() + "</div>");
              }
              ;
              type_attribute = function() {
                if ($truthy2(keyword = node.$list_marker_keyword())) {
                  return ' type="' + keyword + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              start_attribute = function() {
                if ($truthy2(node["$attr?"]("start"))) {
                  return ' start="' + node.$attr("start") + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              reversed_attribute = function() {
                if ($truthy2(node["$option?"]("reversed"))) {
                  return self5.$append_boolean_attribute("reversed", self5.xml_mode);
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              result2["$<<"]('<ol class="' + node.$style() + '"' + type_attribute + start_attribute + reversed_attribute + ">");
              $send2(node.$items(), "each", [], ($$31 = function(item) {
                var self6 = $$31.$$s || this;
                if (item == null) {
                  item = nil2;
                }
                ;
                if ($truthy2(item.$id())) {
                  result2["$<<"]('<li id="' + item.$id() + '"' + function() {
                    if ($truthy2(item.$role())) {
                      return ' class="' + item.$role() + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + ">");
                } else if ($truthy2(item.$role())) {
                  result2["$<<"]('<li class="' + item.$role() + '">');
                } else {
                  result2["$<<"]("<li>");
                }
                ;
                result2["$<<"]("<p>" + item.$text() + "</p>");
                if ($truthy2(item["$blocks?"]())) {
                  result2["$<<"](item.$content());
                }
                ;
                return result2["$<<"]("</li>");
              }, $$31.$$s = self5, $$31.$$arity = 1, $$31));
              result2["$<<"]("</ol>");
              result2["$<<"]("</div>");
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_olist$30.$$arity = 1);
            Opal2.def(self4, "$convert_open", $Html5Converter_convert_open$32 = function $$convert_open(node) {
              var $a2, $b2, $c, self5 = this, style = nil2, id_attr = nil2, title_el = nil2, role = nil2;
              if ((style = node.$style())["$=="]("abstract")) {
                if ($truthy2(($a2 = node.$parent()["$=="](node.$document())) ? node.$document().$doctype()["$=="]("book") : node.$parent()["$=="](node.$document()))) {
                  self5.$logger().$warn("abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
                  return "";
                } else {
                  id_attr = function() {
                    if ($truthy2(node.$id())) {
                      return ' id="' + node.$id() + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  title_el = function() {
                    if ($truthy2(node["$title?"]())) {
                      return '<div class="title">' + node.$title() + "</div>\n";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  return "<div" + id_attr + ' class="quoteblock abstract' + function() {
                    if ($truthy2(role = node.$role())) {
                      return " " + role;
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + '">\n' + title_el + "<blockquote>\n" + node.$content() + "\n</blockquote>\n</div>";
                }
              } else if ($truthy2(($a2 = style["$=="]("partintro")) ? $truthy2($b2 = $truthy2($c = $rb_gt2(node.$level(), 0)) ? $c : node.$parent().$context()["$!="]("section")) ? $b2 : node.$document().$doctype()["$!="]("book") : style["$=="]("partintro"))) {
                self5.$logger().$error("partintro block can only be used when doctype is book and must be a child of a book part. Excluding block content.");
                return "";
              } else {
                id_attr = function() {
                  if ($truthy2(node.$id())) {
                    return ' id="' + node.$id() + '"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                title_el = function() {
                  if ($truthy2(node["$title?"]())) {
                    return '<div class="title">' + node.$title() + "</div>\n";
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                return "<div" + id_attr + ' class="openblock' + function() {
                  if ($truthy2($truthy2($a2 = style) ? style["$!="]("open") : $a2)) {
                    return " " + style;
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + function() {
                  if ($truthy2(role = node.$role())) {
                    return " " + role;
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + '">\n' + title_el + '<div class="content">\n' + node.$content() + "\n</div>\n</div>";
              }
            }, $Html5Converter_convert_open$32.$$arity = 1);
            Opal2.def(self4, "$convert_page_break", $Html5Converter_convert_page_break$33 = function $$convert_page_break(node) {
              var self5 = this;
              return '<div style="page-break-after: always;"></div>';
            }, $Html5Converter_convert_page_break$33.$$arity = 1);
            Opal2.def(self4, "$convert_paragraph", $Html5Converter_convert_paragraph$34 = function $$convert_paragraph(node) {
              var self5 = this, attributes = nil2;
              if ($truthy2(node.$role())) {
                attributes = "" + function() {
                  if ($truthy2(node.$id())) {
                    return ' id="' + node.$id() + '"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }() + ' class="paragraph ' + node.$role() + '"';
              } else if ($truthy2(node.$id())) {
                attributes = ' id="' + node.$id() + '" class="paragraph"';
              } else {
                attributes = ' class="paragraph"';
              }
              ;
              if ($truthy2(node["$title?"]())) {
                return "<div" + attributes + '>\n<div class="title">' + node.$title() + "</div>\n<p>" + node.$content() + "</p>\n</div>";
              } else {
                return "<div" + attributes + ">\n<p>" + node.$content() + "</p>\n</div>";
              }
              ;
            }, $Html5Converter_convert_paragraph$34.$$arity = 1);
            Opal2.alias(self4, "convert_pass", "content_only");
            Opal2.def(self4, "$convert_preamble", $Html5Converter_convert_preamble$35 = function $$convert_preamble(node) {
              var $a2, $b2, self5 = this, doc = nil2, toc = nil2;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = (doc = node.$document())["$attr?"]("toc-placement", "preamble")) ? doc["$sections?"]() : $b2) ? doc["$attr?"]("toc") : $a2)) {
                toc = '\n<div id="toc" class="' + doc.$attr("toc-class", "toc") + '">\n<div id="toctitle">' + doc.$attr("toc-title") + "</div>\n" + doc.$converter().$convert(doc, "outline") + "\n</div>";
              } else {
                toc = "";
              }
              ;
              return '<div id="preamble">\n<div class="sectionbody">\n' + node.$content() + "\n</div>" + toc + "\n</div>";
            }, $Html5Converter_convert_preamble$35.$$arity = 1);
            Opal2.def(self4, "$convert_quote", $Html5Converter_convert_quote$36 = function $$convert_quote(node) {
              var $a2, self5 = this, id_attribute = nil2, classes = nil2, class_attribute = nil2, title_element = nil2, attribution = nil2, citetitle = nil2, cite_element = nil2, attribution_text = nil2, attribution_element = nil2;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = ["quoteblock", node.$role()].$compact();
              class_attribute = ' class="' + classes.$join(" ") + '"';
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '\n<div class="title">' + node.$title() + "</div>";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              attribution = function() {
                if ($truthy2(node["$attr?"]("attribution"))) {
                  return node.$attr("attribution");
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }();
              citetitle = function() {
                if ($truthy2(node["$attr?"]("citetitle"))) {
                  return node.$attr("citetitle");
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }();
              if ($truthy2($truthy2($a2 = attribution) ? $a2 : citetitle)) {
                cite_element = function() {
                  if ($truthy2(citetitle)) {
                    return "<cite>" + citetitle + "</cite>";
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                attribution_text = function() {
                  if ($truthy2(attribution)) {
                    return "&#8212; " + attribution + function() {
                      if ($truthy2(citetitle)) {
                        return "<br" + self5.void_element_slash + ">\n";
                      } else {
                        return "";
                      }
                      ;
                      return nil2;
                    }();
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                attribution_element = '\n<div class="attribution">\n' + attribution_text + cite_element + "\n</div>";
              } else {
                attribution_element = "";
              }
              ;
              return "<div" + id_attribute + class_attribute + ">" + title_element + "\n<blockquote>\n" + node.$content() + "\n</blockquote>" + attribution_element + "\n</div>";
            }, $Html5Converter_convert_quote$36.$$arity = 1);
            Opal2.def(self4, "$convert_thematic_break", $Html5Converter_convert_thematic_break$37 = function $$convert_thematic_break(node) {
              var self5 = this;
              return "<hr" + self5.void_element_slash + ">";
            }, $Html5Converter_convert_thematic_break$37.$$arity = 1);
            Opal2.def(self4, "$convert_sidebar", $Html5Converter_convert_sidebar$38 = function $$convert_sidebar(node) {
              var self5 = this, id_attribute = nil2, title_element = nil2, role = nil2;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '<div class="title">' + node.$title() + "</div>\n";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              return "<div" + id_attribute + ' class="sidebarblock' + function() {
                if ($truthy2(role = node.$role())) {
                  return " " + role;
                } else {
                  return "";
                }
                ;
                return nil2;
              }() + '">\n<div class="content">\n' + title_element + node.$content() + "\n</div>\n</div>";
            }, $Html5Converter_convert_sidebar$38.$$arity = 1);
            Opal2.def(self4, "$convert_table", $Html5Converter_convert_table$39 = function $$convert_table(node) {
              var $a2, $$40, $$41, self5 = this, result2 = nil2, id_attribute = nil2, frame = nil2, classes = nil2, stripes = nil2, style_attribute = nil2, autowidth = nil2, tablewidth = nil2, role = nil2, class_attribute = nil2, slash = nil2;
              result2 = [];
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              if ((frame = node.$attr("frame", "all", "table-frame"))["$=="]("topbot")) {
                frame = "ends";
              }
              ;
              classes = ["tableblock", "frame-" + frame, "grid-" + node.$attr("grid", "all", "table-grid")];
              if ($truthy2(stripes = node.$attr("stripes", nil2, "table-stripes"))) {
                classes["$<<"]("stripes-" + stripes);
              }
              ;
              style_attribute = "";
              if ($truthy2($truthy2($a2 = autowidth = node["$option?"]("autowidth")) ? node["$attr?"]("width")["$!"]() : $a2)) {
                classes["$<<"]("fit-content");
              } else if ((tablewidth = node.$attr("tablepcwidth"))["$=="](100)) {
                classes["$<<"]("stretch");
              } else {
                style_attribute = ' style="width: ' + tablewidth + '%;"';
              }
              ;
              if ($truthy2(node["$attr?"]("float"))) {
                classes["$<<"](node.$attr("float"));
              }
              ;
              if ($truthy2(role = node.$role())) {
                classes["$<<"](role);
              }
              ;
              class_attribute = ' class="' + classes.$join(" ") + '"';
              result2["$<<"]("<table" + id_attribute + class_attribute + style_attribute + ">");
              if ($truthy2(node["$title?"]())) {
                result2["$<<"]('<caption class="title">' + node.$captioned_title() + "</caption>");
              }
              ;
              if ($truthy2($rb_gt2(node.$attr("rowcount"), 0))) {
                slash = self5.void_element_slash;
                result2["$<<"]("<colgroup>");
                if ($truthy2(autowidth)) {
                  result2 = $rb_plus(result2, $$2($nesting4, "Array").$new(node.$columns().$size(), "<col" + slash + ">"));
                } else {
                  $send2(node.$columns(), "each", [], ($$40 = function(col) {
                    var self6 = $$40.$$s || this;
                    if (col == null) {
                      col = nil2;
                    }
                    ;
                    return result2["$<<"](function() {
                      if ($truthy2(col["$option?"]("autowidth"))) {
                        return "<col" + slash + ">";
                      } else {
                        return '<col style="width: ' + col.$attr("colpcwidth") + '%;"' + slash + ">";
                      }
                      ;
                      return nil2;
                    }());
                  }, $$40.$$s = self5, $$40.$$arity = 1, $$40));
                }
                ;
                result2["$<<"]("</colgroup>");
                $send2(node.$rows().$to_h(), "each", [], ($$41 = function(tsec, rows) {
                  var self6 = $$41.$$s || this, $$42;
                  if (tsec == null) {
                    tsec = nil2;
                  }
                  ;
                  if (rows == null) {
                    rows = nil2;
                  }
                  ;
                  if ($truthy2(rows["$empty?"]())) {
                    return nil2;
                  }
                  ;
                  result2["$<<"]("<t" + tsec + ">");
                  $send2(rows, "each", [], ($$42 = function(row) {
                    var self7 = $$42.$$s || this, $$43;
                    if (row == null) {
                      row = nil2;
                    }
                    ;
                    result2["$<<"]("<tr>");
                    $send2(row, "each", [], ($$43 = function(cell) {
                      var self8 = $$43.$$s || this, $b2, cell_content = nil2, $case = nil2, cell_tag_name = nil2, cell_class_attribute = nil2, cell_colspan_attribute = nil2, cell_rowspan_attribute = nil2, cell_style_attribute = nil2;
                      if (cell == null) {
                        cell = nil2;
                      }
                      ;
                      if (tsec["$=="]("head")) {
                        cell_content = cell.$text();
                      } else {
                        $case = cell.$style();
                        if ("asciidoc"["$==="]($case)) {
                          cell_content = '<div class="content">' + cell.$content() + "</div>";
                        } else if ("literal"["$==="]($case)) {
                          cell_content = '<div class="literal"><pre>' + cell.$text() + "</pre></div>";
                        } else {
                          cell_content = function() {
                            if ($truthy2((cell_content = cell.$content())["$empty?"]())) {
                              return "";
                            } else {
                              return '<p class="tableblock">' + cell_content.$join('</p>\n<p class="tableblock">') + "</p>";
                            }
                            ;
                            return nil2;
                          }();
                        }
                      }
                      ;
                      cell_tag_name = function() {
                        if ($truthy2($truthy2($b2 = tsec["$=="]("head")) ? $b2 : cell.$style()["$=="]("header"))) {
                          return "th";
                        } else {
                          return "td";
                        }
                        ;
                        return nil2;
                      }();
                      cell_class_attribute = ' class="tableblock halign-' + cell.$attr("halign") + " valign-" + cell.$attr("valign") + '"';
                      cell_colspan_attribute = function() {
                        if ($truthy2(cell.$colspan())) {
                          return ' colspan="' + cell.$colspan() + '"';
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }();
                      cell_rowspan_attribute = function() {
                        if ($truthy2(cell.$rowspan())) {
                          return ' rowspan="' + cell.$rowspan() + '"';
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }();
                      cell_style_attribute = function() {
                        if ($truthy2(node.$document()["$attr?"]("cellbgcolor"))) {
                          return ' style="background-color: ' + node.$document().$attr("cellbgcolor") + ';"';
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }();
                      return result2["$<<"]("<" + cell_tag_name + cell_class_attribute + cell_colspan_attribute + cell_rowspan_attribute + cell_style_attribute + ">" + cell_content + "</" + cell_tag_name + ">");
                    }, $$43.$$s = self7, $$43.$$arity = 1, $$43));
                    return result2["$<<"]("</tr>");
                  }, $$42.$$s = self6, $$42.$$arity = 1, $$42));
                  return result2["$<<"]("</t" + tsec + ">");
                }, $$41.$$s = self5, $$41.$$arity = 2, $$41));
              }
              ;
              result2["$<<"]("</table>");
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_table$39.$$arity = 1);
            Opal2.def(self4, "$convert_toc", $Html5Converter_convert_toc$44 = function $$convert_toc(node) {
              var $a2, $b2, self5 = this, doc = nil2, id_attr = nil2, title_id_attr = nil2, title = nil2, levels = nil2, role = nil2;
              if ($truthy2($truthy2($a2 = $truthy2($b2 = (doc = node.$document())["$attr?"]("toc-placement", "macro")) ? doc["$sections?"]() : $b2) ? doc["$attr?"]("toc") : $a2)) {
              } else {
                return "<!-- toc disabled -->";
              }
              ;
              if ($truthy2(node.$id())) {
                id_attr = ' id="' + node.$id() + '"';
                title_id_attr = ' id="' + node.$id() + 'title"';
              } else {
                id_attr = ' id="toc"';
                title_id_attr = ' id="toctitle"';
              }
              ;
              title = function() {
                if ($truthy2(node["$title?"]())) {
                  return node.$title();
                } else {
                  return doc.$attr("toc-title");
                }
                ;
                return nil2;
              }();
              levels = function() {
                if ($truthy2(node["$attr?"]("levels"))) {
                  return node.$attr("levels").$to_i();
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }();
              role = function() {
                if ($truthy2(node["$role?"]())) {
                  return node.$role();
                } else {
                  return doc.$attr("toc-class", "toc");
                }
                ;
                return nil2;
              }();
              return "<div" + id_attr + ' class="' + role + '">\n<div' + title_id_attr + ' class="title">' + title + "</div>\n" + doc.$converter().$convert(doc, "outline", $hash22(["toclevels"], { "toclevels": levels })) + "\n</div>";
            }, $Html5Converter_convert_toc$44.$$arity = 1);
            Opal2.def(self4, "$convert_ulist", $Html5Converter_convert_ulist$45 = function $$convert_ulist(node) {
              var $$46, self5 = this, result2 = nil2, id_attribute = nil2, div_classes = nil2, marker_checked = nil2, marker_unchecked = nil2, checklist = nil2, ul_class_attribute = nil2;
              result2 = [];
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              div_classes = ["ulist", node.$style(), node.$role()].$compact();
              marker_checked = marker_unchecked = "";
              if ($truthy2(checklist = node["$option?"]("checklist"))) {
                div_classes.$unshift(div_classes.$shift(), "checklist");
                ul_class_attribute = ' class="checklist"';
                if ($truthy2(node["$option?"]("interactive"))) {
                  if ($truthy2(self5.xml_mode)) {
                    marker_checked = '<input type="checkbox" data-item-complete="1" checked="checked"/> ';
                    marker_unchecked = '<input type="checkbox" data-item-complete="0"/> ';
                  } else {
                    marker_checked = '<input type="checkbox" data-item-complete="1" checked> ';
                    marker_unchecked = '<input type="checkbox" data-item-complete="0"> ';
                  }
                } else if ($truthy2(node.$document()["$attr?"]("icons", "font"))) {
                  marker_checked = '<i class="fa fa-check-square-o"></i> ';
                  marker_unchecked = '<i class="fa fa-square-o"></i> ';
                } else {
                  marker_checked = "&#10003; ";
                  marker_unchecked = "&#10063; ";
                }
                ;
              } else {
                ul_class_attribute = function() {
                  if ($truthy2(node.$style())) {
                    return ' class="' + node.$style() + '"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
              }
              ;
              result2["$<<"]("<div" + id_attribute + ' class="' + div_classes.$join(" ") + '">');
              if ($truthy2(node["$title?"]())) {
                result2["$<<"]('<div class="title">' + node.$title() + "</div>");
              }
              ;
              result2["$<<"]("<ul" + ul_class_attribute + ">");
              $send2(node.$items(), "each", [], ($$46 = function(item) {
                var self6 = $$46.$$s || this, $a2;
                if (item == null) {
                  item = nil2;
                }
                ;
                if ($truthy2(item.$id())) {
                  result2["$<<"]('<li id="' + item.$id() + '"' + function() {
                    if ($truthy2(item.$role())) {
                      return ' class="' + item.$role() + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + ">");
                } else if ($truthy2(item.$role())) {
                  result2["$<<"]('<li class="' + item.$role() + '">');
                } else {
                  result2["$<<"]("<li>");
                }
                ;
                if ($truthy2($truthy2($a2 = checklist) ? item["$attr?"]("checkbox") : $a2)) {
                  result2["$<<"]("<p>" + function() {
                    if ($truthy2(item["$attr?"]("checked"))) {
                      return marker_checked;
                    } else {
                      return marker_unchecked;
                    }
                    ;
                    return nil2;
                  }() + item.$text() + "</p>");
                } else {
                  result2["$<<"]("<p>" + item.$text() + "</p>");
                }
                ;
                if ($truthy2(item["$blocks?"]())) {
                  result2["$<<"](item.$content());
                }
                ;
                return result2["$<<"]("</li>");
              }, $$46.$$s = self5, $$46.$$arity = 1, $$46));
              result2["$<<"]("</ul>");
              result2["$<<"]("</div>");
              return result2.$join($$2($nesting4, "LF"));
            }, $Html5Converter_convert_ulist$45.$$arity = 1);
            Opal2.def(self4, "$convert_verse", $Html5Converter_convert_verse$47 = function $$convert_verse(node) {
              var $a2, self5 = this, id_attribute = nil2, classes = nil2, class_attribute = nil2, title_element = nil2, attribution = nil2, citetitle = nil2, cite_element = nil2, attribution_text = nil2, attribution_element = nil2;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = ["verseblock", node.$role()].$compact();
              class_attribute = ' class="' + classes.$join(" ") + '"';
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '\n<div class="title">' + node.$title() + "</div>";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              attribution = function() {
                if ($truthy2(node["$attr?"]("attribution"))) {
                  return node.$attr("attribution");
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }();
              citetitle = function() {
                if ($truthy2(node["$attr?"]("citetitle"))) {
                  return node.$attr("citetitle");
                } else {
                  return nil2;
                }
                ;
                return nil2;
              }();
              if ($truthy2($truthy2($a2 = attribution) ? $a2 : citetitle)) {
                cite_element = function() {
                  if ($truthy2(citetitle)) {
                    return "<cite>" + citetitle + "</cite>";
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                attribution_text = function() {
                  if ($truthy2(attribution)) {
                    return "&#8212; " + attribution + function() {
                      if ($truthy2(citetitle)) {
                        return "<br" + self5.void_element_slash + ">\n";
                      } else {
                        return "";
                      }
                      ;
                      return nil2;
                    }();
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                attribution_element = '\n<div class="attribution">\n' + attribution_text + cite_element + "\n</div>";
              } else {
                attribution_element = "";
              }
              ;
              return "<div" + id_attribute + class_attribute + ">" + title_element + '\n<pre class="content">' + node.$content() + "</pre>" + attribution_element + "\n</div>";
            }, $Html5Converter_convert_verse$47.$$arity = 1);
            Opal2.def(self4, "$convert_video", $Html5Converter_convert_video$48 = function $$convert_video(node) {
              var $a2, $b2, self5 = this, xml = nil2, id_attribute = nil2, classes = nil2, class_attribute = nil2, title_element = nil2, width_attribute = nil2, height_attribute = nil2, $case = nil2, asset_uri_scheme = nil2, start_anchor = nil2, delimiter = nil2, target = nil2, hash = nil2, hash_param = nil2, autoplay_param = nil2, loop_param = nil2, muted_param = nil2, rel_param_val = nil2, start_param = nil2, end_param = nil2, has_loop_param = nil2, mute_param = nil2, controls_param = nil2, fs_param = nil2, fs_attribute = nil2, modest_param = nil2, theme_param = nil2, hl_param = nil2, list = nil2, list_param = nil2, playlist = nil2, poster_attribute = nil2, val = nil2, preload_attribute = nil2, start_t = nil2, end_t = nil2, time_anchor = nil2;
              xml = self5.xml_mode;
              id_attribute = function() {
                if ($truthy2(node.$id())) {
                  return ' id="' + node.$id() + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              classes = ["videoblock"];
              if ($truthy2(node["$attr?"]("float"))) {
                classes["$<<"](node.$attr("float"));
              }
              ;
              if ($truthy2(node["$attr?"]("align"))) {
                classes["$<<"]("text-" + node.$attr("align"));
              }
              ;
              if ($truthy2(node.$role())) {
                classes["$<<"](node.$role());
              }
              ;
              class_attribute = ' class="' + classes.$join(" ") + '"';
              title_element = function() {
                if ($truthy2(node["$title?"]())) {
                  return '\n<div class="title">' + node.$title() + "</div>";
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              width_attribute = function() {
                if ($truthy2(node["$attr?"]("width"))) {
                  return ' width="' + node.$attr("width") + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              height_attribute = function() {
                if ($truthy2(node["$attr?"]("height"))) {
                  return ' height="' + node.$attr("height") + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              return function() {
                $case = node.$attr("poster");
                if ("vimeo"["$==="]($case)) {
                  if ($truthy2((asset_uri_scheme = node.$document().$attr("asset-uri-scheme", "https"))["$empty?"]())) {
                  } else {
                    asset_uri_scheme = "" + asset_uri_scheme + ":";
                  }
                  ;
                  start_anchor = function() {
                    if ($truthy2(node["$attr?"]("start"))) {
                      return "#at=" + node.$attr("start");
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  delimiter = ["?"];
                  $b2 = node.$attr("target").$split("/", 2), $a2 = Opal2.to_ary($b2), target = $a2[0] == null ? nil2 : $a2[0], hash = $a2[1] == null ? nil2 : $a2[1], $b2;
                  hash_param = function() {
                    if ($truthy2(hash = $truthy2($a2 = hash) ? $a2 : node.$attr("hash"))) {
                      return "" + ($truthy2($a2 = delimiter.$pop()) ? $a2 : "&amp;") + "h=" + hash;
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  autoplay_param = function() {
                    if ($truthy2(node["$option?"]("autoplay"))) {
                      return "" + ($truthy2($a2 = delimiter.$pop()) ? $a2 : "&amp;") + "autoplay=1";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  loop_param = function() {
                    if ($truthy2(node["$option?"]("loop"))) {
                      return "" + ($truthy2($a2 = delimiter.$pop()) ? $a2 : "&amp;") + "loop=1";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  muted_param = function() {
                    if ($truthy2(node["$option?"]("muted"))) {
                      return "" + ($truthy2($a2 = delimiter.$pop()) ? $a2 : "&amp;") + "muted=1";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  return "<div" + id_attribute + class_attribute + ">" + title_element + '\n<div class="content">\n<iframe' + width_attribute + height_attribute + ' src="' + asset_uri_scheme + "//player.vimeo.com/video/" + target + hash_param + autoplay_param + loop_param + muted_param + start_anchor + '" frameborder="0"' + function() {
                    if ($truthy2(node["$option?"]("nofullscreen"))) {
                      return "";
                    } else {
                      return self5.$append_boolean_attribute("allowfullscreen", xml);
                    }
                    ;
                    return nil2;
                  }() + "></iframe>\n</div>\n</div>";
                } else if ("youtube"["$==="]($case)) {
                  if ($truthy2((asset_uri_scheme = node.$document().$attr("asset-uri-scheme", "https"))["$empty?"]())) {
                  } else {
                    asset_uri_scheme = "" + asset_uri_scheme + ":";
                  }
                  ;
                  rel_param_val = function() {
                    if ($truthy2(node["$option?"]("related"))) {
                      return 1;
                    } else {
                      return 0;
                    }
                    ;
                    return nil2;
                  }();
                  start_param = function() {
                    if ($truthy2(node["$attr?"]("start"))) {
                      return "&amp;start=" + node.$attr("start");
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  end_param = function() {
                    if ($truthy2(node["$attr?"]("end"))) {
                      return "&amp;end=" + node.$attr("end");
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  autoplay_param = function() {
                    if ($truthy2(node["$option?"]("autoplay"))) {
                      return "&amp;autoplay=1";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  loop_param = function() {
                    if ($truthy2(has_loop_param = node["$option?"]("loop"))) {
                      return "&amp;loop=1";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  mute_param = function() {
                    if ($truthy2(node["$option?"]("muted"))) {
                      return "&amp;mute=1";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  controls_param = function() {
                    if ($truthy2(node["$option?"]("nocontrols"))) {
                      return "&amp;controls=0";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  if ($truthy2(node["$option?"]("nofullscreen"))) {
                    fs_param = "&amp;fs=0";
                    fs_attribute = "";
                  } else {
                    fs_param = "";
                    fs_attribute = self5.$append_boolean_attribute("allowfullscreen", xml);
                  }
                  ;
                  modest_param = function() {
                    if ($truthy2(node["$option?"]("modest"))) {
                      return "&amp;modestbranding=1";
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  theme_param = function() {
                    if ($truthy2(node["$attr?"]("theme"))) {
                      return "&amp;theme=" + node.$attr("theme");
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  hl_param = function() {
                    if ($truthy2(node["$attr?"]("lang"))) {
                      return "&amp;hl=" + node.$attr("lang");
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  $b2 = node.$attr("target").$split("/", 2), $a2 = Opal2.to_ary($b2), target = $a2[0] == null ? nil2 : $a2[0], list = $a2[1] == null ? nil2 : $a2[1], $b2;
                  if ($truthy2(list = $truthy2($a2 = list) ? $a2 : node.$attr("list"))) {
                    list_param = "&amp;list=" + list;
                  } else {
                    $b2 = target.$split(",", 2), $a2 = Opal2.to_ary($b2), target = $a2[0] == null ? nil2 : $a2[0], playlist = $a2[1] == null ? nil2 : $a2[1], $b2;
                    if ($truthy2(playlist = $truthy2($a2 = playlist) ? $a2 : node.$attr("playlist"))) {
                      list_param = "&amp;playlist=" + target + "," + playlist;
                    } else {
                      list_param = function() {
                        if ($truthy2(has_loop_param)) {
                          return "&amp;playlist=" + target;
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }();
                    }
                    ;
                  }
                  ;
                  return "<div" + id_attribute + class_attribute + ">" + title_element + '\n<div class="content">\n<iframe' + width_attribute + height_attribute + ' src="' + asset_uri_scheme + "//www.youtube.com/embed/" + target + "?rel=" + rel_param_val + start_param + end_param + autoplay_param + loop_param + mute_param + controls_param + list_param + fs_param + modest_param + theme_param + hl_param + '" frameborder="0"' + fs_attribute + "></iframe>\n</div>\n</div>";
                } else {
                  poster_attribute = function() {
                    if ($truthy2((val = node.$attr("poster"))["$nil_or_empty?"]())) {
                      return "";
                    } else {
                      return ' poster="' + node.$media_uri(val) + '"';
                    }
                    ;
                    return nil2;
                  }();
                  preload_attribute = function() {
                    if ($truthy2((val = node.$attr("preload"))["$nil_or_empty?"]())) {
                      return "";
                    } else {
                      return ' preload="' + val + '"';
                    }
                    ;
                    return nil2;
                  }();
                  start_t = node.$attr("start");
                  end_t = node.$attr("end");
                  time_anchor = function() {
                    if ($truthy2($truthy2($a2 = start_t) ? $a2 : end_t)) {
                      return "#t=" + ($truthy2($a2 = start_t) ? $a2 : "") + function() {
                        if ($truthy2(end_t)) {
                          return "," + end_t;
                        } else {
                          return "";
                        }
                        ;
                        return nil2;
                      }();
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  return "<div" + id_attribute + class_attribute + ">" + title_element + '\n<div class="content">\n<video src="' + node.$media_uri(node.$attr("target")) + time_anchor + '"' + width_attribute + height_attribute + poster_attribute + function() {
                    if ($truthy2(node["$option?"]("autoplay"))) {
                      return self5.$append_boolean_attribute("autoplay", xml);
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + function() {
                    if ($truthy2(node["$option?"]("muted"))) {
                      return self5.$append_boolean_attribute("muted", xml);
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + function() {
                    if ($truthy2(node["$option?"]("nocontrols"))) {
                      return "";
                    } else {
                      return self5.$append_boolean_attribute("controls", xml);
                    }
                    ;
                    return nil2;
                  }() + function() {
                    if ($truthy2(node["$option?"]("loop"))) {
                      return self5.$append_boolean_attribute("loop", xml);
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }() + preload_attribute + ">\nYour browser does not support the video tag.\n</video>\n</div>\n</div>";
                }
              }();
            }, $Html5Converter_convert_video$48.$$arity = 1);
            Opal2.def(self4, "$convert_inline_anchor", $Html5Converter_convert_inline_anchor$49 = function $$convert_inline_anchor(node) {
              var $a2, $b2, self5 = this, $case = nil2, path = nil2, attrs = nil2, text = nil2, ref = nil2, refid = nil2, top = nil2, outer = nil2;
              return function() {
                $case = node.$type();
                if ("xref"["$==="]($case)) {
                  if ($truthy2(path = node.$attributes()["$[]"]("path"))) {
                    attrs = self5.$append_link_constraint_attrs(node, function() {
                      if ($truthy2(node.$role())) {
                        return [' class="' + node.$role() + '"'];
                      } else {
                        return [];
                      }
                      ;
                      return nil2;
                    }()).$join();
                    text = $truthy2($a2 = node.$text()) ? $a2 : path;
                  } else {
                    attrs = function() {
                      if ($truthy2(node.$role())) {
                        return ' class="' + node.$role() + '"';
                      } else {
                        return "";
                      }
                      ;
                      return nil2;
                    }();
                    if ($truthy2(text = node.$text())) {
                    } else if ($truthy2($$2($nesting4, "AbstractNode")["$==="](ref = $truthy2($a2 = (self5.refs = $truthy2($b2 = self5.refs) ? $b2 : node.$document().$catalog()["$[]"]("refs"))["$[]"](refid = node.$attributes()["$[]"]("refid"))) ? $a2 : function() {
                      if ($truthy2(refid["$nil_or_empty?"]())) {
                        return top = self5.$get_root_document(node);
                      } else {
                        return nil2;
                      }
                      ;
                      return nil2;
                    }()))) {
                      if ($truthy2($truthy2($a2 = self5.resolving_xref = $truthy2($b2 = self5.resolving_xref) ? $b2 : outer = true) ? outer : $a2)) {
                        if ($truthy2(text = ref.$xreftext(node.$attr("xrefstyle", nil2, true)))) {
                          if ($truthy2(text["$include?"]("<a"))) {
                            text = text.$gsub($$2($nesting4, "DropAnchorRx"), "");
                          }
                        } else {
                          text = function() {
                            if ($truthy2(top)) {
                              return "[^top]";
                            } else {
                              return "[" + refid + "]";
                            }
                            ;
                            return nil2;
                          }();
                        }
                        ;
                        self5.resolving_xref = nil2;
                      } else {
                        text = function() {
                          if ($truthy2(top)) {
                            return "[^top]";
                          } else {
                            return "[" + refid + "]";
                          }
                          ;
                          return nil2;
                        }();
                      }
                    } else {
                      text = "[" + refid + "]";
                    }
                    ;
                  }
                  ;
                  return '<a href="' + node.$target() + '"' + attrs + ">" + text + "</a>";
                } else if ("ref"["$==="]($case)) {
                  return '<a id="' + node.$id() + '"></a>';
                } else if ("link"["$==="]($case)) {
                  attrs = function() {
                    if ($truthy2(node.$id())) {
                      return [' id="' + node.$id() + '"'];
                    } else {
                      return [];
                    }
                    ;
                    return nil2;
                  }();
                  if ($truthy2(node.$role())) {
                    attrs["$<<"](' class="' + node.$role() + '"');
                  }
                  ;
                  if ($truthy2(node["$attr?"]("title"))) {
                    attrs["$<<"](' title="' + node.$attr("title") + '"');
                  }
                  ;
                  return '<a href="' + node.$target() + '"' + self5.$append_link_constraint_attrs(node, attrs).$join() + ">" + node.$text() + "</a>";
                } else if ("bibref"["$==="]($case)) {
                  return '<a id="' + node.$id() + '"></a>[' + ($truthy2($a2 = node.$reftext()) ? $a2 : node.$id()) + "]";
                } else {
                  self5.$logger().$warn("unknown anchor type: " + node.$type().$inspect());
                  return nil2;
                }
              }();
            }, $Html5Converter_convert_inline_anchor$49.$$arity = 1);
            Opal2.def(self4, "$convert_inline_break", $Html5Converter_convert_inline_break$50 = function $$convert_inline_break(node) {
              var self5 = this;
              return "" + node.$text() + "<br" + self5.void_element_slash + ">";
            }, $Html5Converter_convert_inline_break$50.$$arity = 1);
            Opal2.def(self4, "$convert_inline_button", $Html5Converter_convert_inline_button$51 = function $$convert_inline_button(node) {
              var self5 = this;
              return '<b class="button">' + node.$text() + "</b>";
            }, $Html5Converter_convert_inline_button$51.$$arity = 1);
            Opal2.def(self4, "$convert_inline_callout", $Html5Converter_convert_inline_callout$52 = function $$convert_inline_callout(node) {
              var self5 = this, src = nil2, guard = nil2;
              if ($truthy2(node.$document()["$attr?"]("icons", "font"))) {
                return '<i class="conum" data-value="' + node.$text() + '"></i><b>(' + node.$text() + ")</b>";
              } else if ($truthy2(node.$document()["$attr?"]("icons"))) {
                src = node.$icon_uri("callouts/" + node.$text());
                return '<img src="' + src + '" alt="' + node.$text() + '"' + self5.void_element_slash + ">";
              } else if ($truthy2($$$2("::", "Array")["$==="](guard = node.$attributes()["$[]"]("guard")))) {
                return '&lt;!--<b class="conum">(' + node.$text() + ")</b>--&gt;";
              } else {
                return "" + guard + '<b class="conum">(' + node.$text() + ")</b>";
              }
            }, $Html5Converter_convert_inline_callout$52.$$arity = 1);
            Opal2.def(self4, "$convert_inline_footnote", $Html5Converter_convert_inline_footnote$53 = function $$convert_inline_footnote(node) {
              var self5 = this, index = nil2, id_attr = nil2;
              if ($truthy2(index = node.$attr("index"))) {
                if (node.$type()["$=="]("xref")) {
                  return '<sup class="footnoteref">[<a class="footnote" href="#_footnotedef_' + index + '" title="View footnote.">' + index + "</a>]</sup>";
                } else {
                  id_attr = function() {
                    if ($truthy2(node.$id())) {
                      return ' id="_footnote_' + node.$id() + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  return '<sup class="footnote"' + id_attr + '>[<a id="_footnoteref_' + index + '" class="footnote" href="#_footnotedef_' + index + '" title="View footnote.">' + index + "</a>]</sup>";
                }
              } else if (node.$type()["$=="]("xref")) {
                return '<sup class="footnoteref red" title="Unresolved footnote reference.">[' + node.$text() + "]</sup>";
              } else {
                return nil2;
              }
            }, $Html5Converter_convert_inline_footnote$53.$$arity = 1);
            Opal2.def(self4, "$convert_inline_image", $Html5Converter_convert_inline_image$54 = function $$convert_inline_image(node) {
              var $a2, $b2, self5 = this, target = nil2, type = nil2, icons = nil2, i_class_attr_val = nil2, attrs = nil2, img = nil2, fallback = nil2, class_attr_val = nil2, role = nil2;
              target = node.$target();
              if ((type = $truthy2($a2 = node.$type()) ? $a2 : "image")["$=="]("icon")) {
                if ((icons = node.$document().$attr("icons"))["$=="]("font")) {
                  i_class_attr_val = "fa fa-" + target;
                  if ($truthy2(node["$attr?"]("size"))) {
                    i_class_attr_val = "" + i_class_attr_val + " fa-" + node.$attr("size");
                  }
                  ;
                  if ($truthy2(node["$attr?"]("flip"))) {
                    i_class_attr_val = "" + i_class_attr_val + " fa-flip-" + node.$attr("flip");
                  } else if ($truthy2(node["$attr?"]("rotate"))) {
                    i_class_attr_val = "" + i_class_attr_val + " fa-rotate-" + node.$attr("rotate");
                  }
                  ;
                  attrs = function() {
                    if ($truthy2(node["$attr?"]("title"))) {
                      return ' title="' + node.$attr("title") + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  img = '<i class="' + i_class_attr_val + '"' + attrs + "></i>";
                } else if ($truthy2(icons)) {
                  attrs = function() {
                    if ($truthy2(node["$attr?"]("width"))) {
                      return ' width="' + node.$attr("width") + '"';
                    } else {
                      return "";
                    }
                    ;
                    return nil2;
                  }();
                  if ($truthy2(node["$attr?"]("height"))) {
                    attrs = "" + attrs + ' height="' + node.$attr("height") + '"';
                  }
                  ;
                  if ($truthy2(node["$attr?"]("title"))) {
                    attrs = "" + attrs + ' title="' + node.$attr("title") + '"';
                  }
                  ;
                  img = '<img src="' + node.$icon_uri(target) + '" alt="' + self5.$encode_attribute_value(node.$alt()) + '"' + attrs + self5.void_element_slash + ">";
                } else {
                  img = "[" + node.$alt() + "&#93;";
                }
              } else {
                attrs = function() {
                  if ($truthy2(node["$attr?"]("width"))) {
                    return ' width="' + node.$attr("width") + '"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                if ($truthy2(node["$attr?"]("height"))) {
                  attrs = "" + attrs + ' height="' + node.$attr("height") + '"';
                }
                ;
                if ($truthy2(node["$attr?"]("title"))) {
                  attrs = "" + attrs + ' title="' + node.$attr("title") + '"';
                }
                ;
                if ($truthy2($truthy2($a2 = $truthy2($b2 = node["$attr?"]("format", "svg")) ? $b2 : target["$include?"](".svg")) ? $rb_lt2(node.$document().$safe(), $$$2($$2($nesting4, "SafeMode"), "SECURE")) : $a2)) {
                  if ($truthy2(node["$option?"]("inline"))) {
                    img = $truthy2($a2 = self5.$read_svg_contents(node, target)) ? $a2 : '<span class="alt">' + node.$alt() + "</span>";
                  } else if ($truthy2(node["$option?"]("interactive"))) {
                    fallback = function() {
                      if ($truthy2(node["$attr?"]("fallback"))) {
                        return '<img src="' + node.$image_uri(node.$attr("fallback")) + '" alt="' + self5.$encode_attribute_value(node.$alt()) + '"' + attrs + self5.void_element_slash + ">";
                      } else {
                        return '<span class="alt">' + node.$alt() + "</span>";
                      }
                      ;
                      return nil2;
                    }();
                    img = '<object type="image/svg+xml" data="' + node.$image_uri(target) + '"' + attrs + ">" + fallback + "</object>";
                  } else {
                    img = '<img src="' + node.$image_uri(target) + '" alt="' + self5.$encode_attribute_value(node.$alt()) + '"' + attrs + self5.void_element_slash + ">";
                  }
                } else {
                  img = '<img src="' + node.$image_uri(target) + '" alt="' + self5.$encode_attribute_value(node.$alt()) + '"' + attrs + self5.void_element_slash + ">";
                }
                ;
              }
              ;
              if ($truthy2(node["$attr?"]("link"))) {
                img = '<a class="image" href="' + node.$attr("link") + '"' + self5.$append_link_constraint_attrs(node).$join() + ">" + img + "</a>";
              }
              ;
              class_attr_val = type;
              if ($truthy2(role = node.$role())) {
                class_attr_val = function() {
                  if ($truthy2(node["$attr?"]("float"))) {
                    return "" + class_attr_val + " " + node.$attr("float") + " " + role;
                  } else {
                    return "" + class_attr_val + " " + role;
                  }
                  ;
                  return nil2;
                }();
              } else if ($truthy2(node["$attr?"]("float"))) {
                class_attr_val = "" + class_attr_val + " " + node.$attr("float");
              }
              ;
              return '<span class="' + class_attr_val + '">' + img + "</span>";
            }, $Html5Converter_convert_inline_image$54.$$arity = 1);
            Opal2.def(self4, "$convert_inline_indexterm", $Html5Converter_convert_inline_indexterm$55 = function $$convert_inline_indexterm(node) {
              var self5 = this;
              if (node.$type()["$=="]("visible")) {
                return node.$text();
              } else {
                return "";
              }
            }, $Html5Converter_convert_inline_indexterm$55.$$arity = 1);
            Opal2.def(self4, "$convert_inline_kbd", $Html5Converter_convert_inline_kbd$56 = function $$convert_inline_kbd(node) {
              var self5 = this, keys = nil2;
              if ((keys = node.$attr("keys")).$size()["$=="](1)) {
                return "<kbd>" + keys["$[]"](0) + "</kbd>";
              } else {
                return '<span class="keyseq"><kbd>' + keys.$join("</kbd>+<kbd>") + "</kbd></span>";
              }
            }, $Html5Converter_convert_inline_kbd$56.$$arity = 1);
            Opal2.def(self4, "$convert_inline_menu", $Html5Converter_convert_inline_menu$57 = function $$convert_inline_menu(node) {
              var self5 = this, caret = nil2, submenu_joiner = nil2, menu = nil2, submenus = nil2, menuitem = nil2;
              caret = function() {
                if ($truthy2(node.$document()["$attr?"]("icons", "font"))) {
                  return '&#160;<i class="fa fa-angle-right caret"></i> ';
                } else {
                  return '&#160;<b class="caret">&#8250;</b> ';
                }
                ;
                return nil2;
              }();
              submenu_joiner = "</b>" + caret + '<b class="submenu">';
              menu = node.$attr("menu");
              if ($truthy2((submenus = node.$attr("submenus"))["$empty?"]())) {
                if ($truthy2(menuitem = node.$attr("menuitem"))) {
                  return '<span class="menuseq"><b class="menu">' + menu + "</b>" + caret + '<b class="menuitem">' + menuitem + "</b></span>";
                } else {
                  return '<b class="menuref">' + menu + "</b>";
                }
              } else {
                return '<span class="menuseq"><b class="menu">' + menu + "</b>" + caret + '<b class="submenu">' + submenus.$join(submenu_joiner) + "</b>" + caret + '<b class="menuitem">' + node.$attr("menuitem") + "</b></span>";
              }
              ;
            }, $Html5Converter_convert_inline_menu$57.$$arity = 1);
            Opal2.def(self4, "$convert_inline_quoted", $Html5Converter_convert_inline_quoted$58 = function $$convert_inline_quoted(node) {
              var $a2, $b2, self5 = this, open = nil2, close = nil2, tag = nil2, class_attr = nil2;
              $b2 = $$2($nesting4, "QUOTE_TAGS")["$[]"](node.$type()), $a2 = Opal2.to_ary($b2), open = $a2[0] == null ? nil2 : $a2[0], close = $a2[1] == null ? nil2 : $a2[1], tag = $a2[2] == null ? nil2 : $a2[2], $b2;
              if ($truthy2(node.$id())) {
                class_attr = function() {
                  if ($truthy2(node.$role())) {
                    return ' class="' + node.$role() + '"';
                  } else {
                    return "";
                  }
                  ;
                  return nil2;
                }();
                if ($truthy2(tag)) {
                  return "" + open.$chop() + ' id="' + node.$id() + '"' + class_attr + ">" + node.$text() + close;
                } else {
                  return '<span id="' + node.$id() + '"' + class_attr + ">" + open + node.$text() + close + "</span>";
                }
                ;
              } else if ($truthy2(node.$role())) {
                if ($truthy2(tag)) {
                  return "" + open.$chop() + ' class="' + node.$role() + '">' + node.$text() + close;
                } else {
                  return '<span class="' + node.$role() + '">' + open + node.$text() + close + "</span>";
                }
              } else {
                return "" + open + node.$text() + close;
              }
              ;
            }, $Html5Converter_convert_inline_quoted$58.$$arity = 1);
            Opal2.def(self4, "$read_svg_contents", $Html5Converter_read_svg_contents$59 = function $$read_svg_contents(node, target) {
              var $$60, self5 = this, svg = nil2, old_start_tag = nil2, new_start_tag = nil2, start_tag_match = nil2;
              if ($truthy2(svg = node.$read_contents(target, $hash22(["start", "normalize", "label", "warn_if_empty"], { "start": node.$document().$attr("imagesdir"), "normalize": true, "label": "SVG", "warn_if_empty": true })))) {
                if ($truthy2(svg["$empty?"]())) {
                  return nil2;
                }
                ;
                if ($truthy2(svg["$start_with?"]("<svg"))) {
                } else {
                  svg = svg.$sub($$2($nesting4, "SvgPreambleRx"), "");
                }
                ;
                old_start_tag = new_start_tag = start_tag_match = nil2;
                $send2(["width", "height"], "each", [], ($$60 = function(dim) {
                  var self6 = $$60.$$s || this, $a2, $b2;
                  if (dim == null) {
                    dim = nil2;
                  }
                  ;
                  if ($truthy2(node["$attr?"](dim))) {
                  } else {
                    return nil2;
                  }
                  ;
                  if ($truthy2(new_start_tag)) {
                  } else {
                    if ((start_tag_match = $truthy2($a2 = start_tag_match) ? $a2 : $truthy2($b2 = svg.$match($$2($nesting4, "SvgStartTagRx"))) ? $b2 : "no_match")["$=="]("no_match")) {
                      return nil2;
                    }
                    ;
                    new_start_tag = (old_start_tag = start_tag_match["$[]"](0)).$gsub($$2($nesting4, "DimensionAttributeRx"), "");
                  }
                  ;
                  return new_start_tag = "" + new_start_tag.$chop() + " " + dim + '="' + node.$attr(dim) + '">';
                }, $$60.$$s = self5, $$60.$$arity = 1, $$60));
                if ($truthy2(new_start_tag)) {
                  svg = "" + new_start_tag + svg["$[]"](Opal2.Range.$new(old_start_tag.$length(), -1, false));
                }
                ;
              }
              ;
              return svg;
            }, $Html5Converter_read_svg_contents$59.$$arity = 2);
            self4.$private();
            Opal2.def(self4, "$append_boolean_attribute", $Html5Converter_append_boolean_attribute$61 = function $$append_boolean_attribute(name, xml) {
              var self5 = this;
              if ($truthy2(xml)) {
                return " " + name + '="' + name + '"';
              } else {
                return " " + name;
              }
            }, $Html5Converter_append_boolean_attribute$61.$$arity = 2);
            Opal2.def(self4, "$append_link_constraint_attrs", $Html5Converter_append_link_constraint_attrs$62 = function $$append_link_constraint_attrs(node, attrs) {
              var $a2, self5 = this, rel = nil2, window2 = nil2;
              if (attrs == null) {
                attrs = [];
              }
              ;
              if ($truthy2(node["$option?"]("nofollow"))) {
                rel = "nofollow";
              }
              ;
              if ($truthy2(window2 = node.$attributes()["$[]"]("window"))) {
                attrs["$<<"](' target="' + window2 + '"');
                if ($truthy2($truthy2($a2 = window2["$=="]("_blank")) ? $a2 : node["$option?"]("noopener"))) {
                  attrs["$<<"](function() {
                    if ($truthy2(rel)) {
                      return ' rel="' + rel + ' noopener"';
                    } else {
                      return ' rel="noopener"';
                    }
                    ;
                    return nil2;
                  }());
                }
                ;
              } else if ($truthy2(rel)) {
                attrs["$<<"](' rel="' + rel + '"');
              }
              ;
              return attrs;
            }, $Html5Converter_append_link_constraint_attrs$62.$$arity = -2);
            Opal2.def(self4, "$encode_attribute_value", $Html5Converter_encode_attribute_value$63 = function $$encode_attribute_value(val) {
              var self5 = this;
              if ($truthy2(val["$include?"]('"'))) {
                return val.$gsub('"', "&quot;");
              } else {
                return val;
              }
            }, $Html5Converter_encode_attribute_value$63.$$arity = 1);
            Opal2.def(self4, "$generate_manname_section", $Html5Converter_generate_manname_section$64 = function $$generate_manname_section(node) {
              var $a2, self5 = this, manname_title = nil2, next_section = nil2, next_section_title = nil2, manname_id_attr = nil2, manname_id = nil2;
              manname_title = node.$attr("manname-title", "Name");
              if ($truthy2($truthy2($a2 = next_section = node.$sections()["$[]"](0)) ? (next_section_title = next_section.$title())["$=="](next_section_title.$upcase()) : $a2)) {
                manname_title = manname_title.$upcase();
              }
              ;
              manname_id_attr = function() {
                if ($truthy2(manname_id = node.$attr("manname-id"))) {
                  return ' id="' + manname_id + '"';
                } else {
                  return "";
                }
                ;
                return nil2;
              }();
              return "<h2" + manname_id_attr + ">" + manname_title + '</h2>\n<div class="sectionbody">\n<p>' + node.$attr("mannames").$join(", ") + " - " + node.$attr("manpurpose") + "</p>\n</div>";
            }, $Html5Converter_generate_manname_section$64.$$arity = 1);
            Opal2.def(self4, "$get_root_document", $Html5Converter_get_root_document$65 = function $$get_root_document(node) {
              var $a2, self5 = this;
              while ($truthy2((node = node.$document())["$nested?"]())) {
                node = node.$parent_document();
              }
              ;
              return node;
            }, $Html5Converter_get_root_document$65.$$arity = 1);
            Opal2.def(self4, "$method_missing", $Html5Converter_method_missing$66 = function $$method_missing(id, $a2) {
              var $post_args2, args2, $b2, $iter2 = $Html5Converter_method_missing$66.$$p, $yield = $iter2 || nil2, self5 = this, name = nil2, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
              if ($iter2)
                $Html5Converter_method_missing$66.$$p = null;
              for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                $zuper[$zuper_i] = arguments[$zuper_i];
              }
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              args2 = $post_args2;
              ;
              if ($truthy2($truthy2($b2 = (name = id.$to_s())["$start_with?"]("convert_")["$!"]()) ? self5["$handles?"](name) : $b2)) {
                return $send2(self5, "send", ["convert_" + name].concat(Opal2.to_a(args2)));
              } else {
                return $send2(self5, Opal2.find_super_dispatcher(self5, "method_missing", $Html5Converter_method_missing$66, false), $zuper, $iter2);
              }
              ;
            }, $Html5Converter_method_missing$66.$$arity = -2);
            return (Opal2.def(self4, "$respond_to_missing?", $Html5Converter_respond_to_missing$ques$67 = function(id, $a2) {
              var $post_args2, options, $b2, self5 = this, name = nil2;
              $post_args2 = Opal2.slice.call(arguments, 1, arguments.length);
              options = $post_args2;
              ;
              return $truthy2($b2 = (name = id.$to_s())["$start_with?"]("convert_")["$!"]()) ? self5["$handles?"](name) : $b2;
            }, $Html5Converter_respond_to_missing$ques$67.$$arity = -2), nil2) && "respond_to_missing?";
          })($$2($nesting3, "Converter"), $$$2($$2($nesting3, "Converter"), "Base"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/extensions"] = function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        function $rb_plus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs + rhs : lhs["$+"](rhs);
        }
        function $rb_gt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs > rhs : lhs["$>"](rhs);
        }
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2, $send2 = Opal2.send, $hash = Opal2.hash;
        Opal2.add_stubs(["$==", "$[]=", "$config", "$-", "$const_defined?", "$singleton_class?", "$include", "$const_get", "$extend", "$attr_reader", "$merge", "$class", "$update", "$raise", "$document", "$doctype", "$[]", "$+", "$level", "$delete", "$>", "$casecmp", "$new", "$title=", "$sectname=", "$special=", "$fetch", "$numbered=", "$!", "$key?", "$attr?", "$special", "$numbered", "$generate_id", "$title", "$id=", "$update_attributes", "$tr", "$basename", "$create_block", "$assign_caption", "$===", "$parse_blocks", "$empty?", "$include?", "$sub_attributes", "$parse", "$each", "$define_method", "$unshift", "$shift", "$send", "$size", "$binding", "$receiver", "$define_singleton_method", "$instance_exec", "$to_proc", "$call", "$option", "$flatten", "$respond_to?", "$to_s", "$partition", "$to_i", "$<<", "$compact", "$inspect", "$attr_accessor", "$to_set", "$match?", "$resolve_regexp", "$method", "$register", "$values", "$groups", "$arity", "$activate", "$add_document_processor", "$any?", "$select", "$add_syntax_processor", "$to_sym", "$instance_variable_get", "$kind", "$private", "$join", "$map", "$split", "$capitalize", "$instance_variable_set", "$resolve_args", "$enable_dsl", "$singleton_class", "$process_block_given?", "$source_location", "$freeze", "$resolve_class", "$<", "$update_config", "$as_symbol", "$name", "$name=", "$pop", "$-@", "$next_auto_id", "$generate_name"]);
        if ($$2($nesting2, "RUBY_ENGINE")["$=="]("opal")) {
        } else {
          nil2;
        }
        ;
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Extensions");
            var $nesting4 = [self4].concat($parent_nesting3);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Processor");
              var $nesting5 = [self5].concat($parent_nesting4), $Processor_initialize$4, $Processor_update_config$5, $Processor_process$6, $Processor_create_section$7, $Processor_create_block$8, $Processor_create_list$9, $Processor_create_list_item$10, $Processor_create_image_block$11, $Processor_create_inline$12, $Processor_parse_content$13, $Processor_parse_attributes$14, $Processor$15;
              self5.$$prototype.config = nil2;
              (function(self6, $parent_nesting5) {
                var $nesting6 = [self6].concat($parent_nesting5), $config$1, $option$2, $enable_dsl$3;
                Opal2.def(self6, "$config", $config$1 = function $$config() {
                  var $a2, self7 = this;
                  if (self7.config == null)
                    self7.config = nil2;
                  return self7.config = $truthy2($a2 = self7.config) ? $a2 : $hash22([], {});
                }, $config$1.$$arity = 0);
                Opal2.def(self6, "$option", $option$2 = function $$option(key, default_value) {
                  var self7 = this, $writer = nil2;
                  $writer = [key, default_value];
                  $send2(self7.$config(), "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                }, $option$2.$$arity = 2);
                Opal2.def(self6, "$enable_dsl", $enable_dsl$3 = function $$enable_dsl() {
                  var self7 = this;
                  if ($truthy2(self7["$const_defined?"]("DSL"))) {
                    if ($truthy2(self7["$singleton_class?"]())) {
                      return self7.$include(self7.$const_get("DSL"));
                    } else {
                      return self7.$extend(self7.$const_get("DSL"));
                    }
                  } else {
                    return nil2;
                  }
                }, $enable_dsl$3.$$arity = 0);
                return Opal2.alias(self6, "use_dsl", "enable_dsl");
              })(Opal2.get_singleton_class(self5), $nesting5);
              self5.$attr_reader("config");
              Opal2.def(self5, "$initialize", $Processor_initialize$4 = function $$initialize(config) {
                var self6 = this;
                if (config == null) {
                  config = $hash22([], {});
                }
                ;
                return self6.config = self6.$class().$config().$merge(config);
              }, $Processor_initialize$4.$$arity = -1);
              Opal2.def(self5, "$update_config", $Processor_update_config$5 = function $$update_config(config) {
                var self6 = this;
                return self6.config.$update(config);
              }, $Processor_update_config$5.$$arity = 1);
              Opal2.def(self5, "$process", $Processor_process$6 = function $$process($a2) {
                var $post_args2, args2, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "Processor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $Processor_process$6.$$arity = -1);
              Opal2.def(self5, "$create_section", $Processor_create_section$7 = function $$create_section(parent, title, attrs, opts) {
                var $a2, self6 = this, doc = nil2, book = nil2, doctype = nil2, level = nil2, style = nil2, sectname = nil2, special = nil2, sect = nil2, $writer = nil2, id = nil2;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                doc = parent.$document();
                book = (doctype = doc.$doctype())["$=="]("book");
                level = $truthy2($a2 = opts["$[]"]("level")) ? $a2 : $rb_plus(parent.$level(), 1);
                if ($truthy2(style = attrs.$delete("style"))) {
                  if ($truthy2($truthy2($a2 = book) ? style["$=="]("abstract") : $a2)) {
                    $a2 = ["chapter", 1], sectname = $a2[0], level = $a2[1], $a2;
                  } else {
                    $a2 = [style, true], sectname = $a2[0], special = $a2[1], $a2;
                    if (level["$=="](0)) {
                      level = 1;
                    }
                    ;
                  }
                } else if ($truthy2(book)) {
                  sectname = function() {
                    if (level["$=="](0)) {
                      return "part";
                    } else {
                      if ($truthy2($rb_gt2(level, 1))) {
                        return "section";
                      } else {
                        return "chapter";
                      }
                      ;
                    }
                    ;
                    return nil2;
                  }();
                } else if ($truthy2(($a2 = doctype["$=="]("manpage")) ? title.$casecmp("synopsis")["$=="](0) : doctype["$=="]("manpage"))) {
                  $a2 = ["synopsis", true], sectname = $a2[0], special = $a2[1], $a2;
                } else {
                  sectname = "section";
                }
                ;
                sect = $$2($nesting5, "Section").$new(parent, level);
                $a2 = [title, sectname], sect["$title="]($a2[0]), sect["$sectname="]($a2[1]), $a2;
                if ($truthy2(special)) {
                  $writer = [true];
                  $send2(sect, "special=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  if ($truthy2(opts.$fetch("numbered", style["$=="]("appendix")))) {
                    $writer = [true];
                    $send2(sect, "numbered=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else if ($truthy2($truthy2($a2 = opts["$key?"]("numbered")["$!"]()) ? doc["$attr?"]("sectnums", "all") : $a2)) {
                    $writer = [function() {
                      if ($truthy2($truthy2($a2 = book) ? level["$=="](1) : $a2)) {
                        return "chapter";
                      } else {
                        return true;
                      }
                      ;
                      return nil2;
                    }()];
                    $send2(sect, "numbered=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                  ;
                } else if ($truthy2($rb_gt2(level, 0))) {
                  if ($truthy2(opts.$fetch("numbered", doc["$attr?"]("sectnums")))) {
                    $writer = [function() {
                      if ($truthy2(sect.$special())) {
                        return $truthy2($a2 = parent.$numbered()) ? true : $a2;
                      } else {
                        return true;
                      }
                      ;
                      return nil2;
                    }()];
                    $send2(sect, "numbered=", Opal2.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else if ($truthy2(opts.$fetch("numbered", $truthy2($a2 = book) ? doc["$attr?"]("partnums") : $a2))) {
                  $writer = [true];
                  $send2(sect, "numbered=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                if ((id = attrs["$[]"]("id"))["$=="](false)) {
                  attrs.$delete("id");
                } else {
                  $writer = [($writer = ["id", $truthy2($a2 = id) ? $a2 : function() {
                    if ($truthy2(doc["$attr?"]("sectids"))) {
                      return $$2($nesting5, "Section").$generate_id(sect.$title(), doc);
                    } else {
                      return nil2;
                    }
                    ;
                    return nil2;
                  }()], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
                  $send2(sect, "id=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                sect.$update_attributes(attrs);
                return sect;
              }, $Processor_create_section$7.$$arity = -4);
              Opal2.def(self5, "$create_block", $Processor_create_block$8 = function $$create_block(parent, context, source, attrs, opts) {
                var self6 = this;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                return $$2($nesting5, "Block").$new(parent, context, $hash22(["source", "attributes"], { "source": source, "attributes": attrs }).$merge(opts));
              }, $Processor_create_block$8.$$arity = -5);
              Opal2.def(self5, "$create_list", $Processor_create_list$9 = function $$create_list(parent, context, attrs) {
                var self6 = this, list = nil2;
                if (attrs == null) {
                  attrs = nil2;
                }
                ;
                list = $$2($nesting5, "List").$new(parent, context);
                if ($truthy2(attrs)) {
                  list.$update_attributes(attrs);
                }
                ;
                return list;
              }, $Processor_create_list$9.$$arity = -3);
              Opal2.def(self5, "$create_list_item", $Processor_create_list_item$10 = function $$create_list_item(parent, text) {
                var self6 = this;
                if (text == null) {
                  text = nil2;
                }
                ;
                return $$2($nesting5, "ListItem").$new(parent, text);
              }, $Processor_create_list_item$10.$$arity = -2);
              Opal2.def(self5, "$create_image_block", $Processor_create_image_block$11 = function $$create_image_block(parent, attrs, opts) {
                var $a2, self6 = this, target = nil2, $writer = nil2, title = nil2, block2 = nil2;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                if ($truthy2(target = attrs["$[]"]("target"))) {
                } else {
                  self6.$raise($$$2("::", "ArgumentError"), "Unable to create an image block, target attribute is required");
                }
                ;
                $truthy2($a2 = attrs["$[]"]("alt")) ? $a2 : ($writer = ["alt", ($writer = ["default-alt", $$2($nesting5, "Helpers").$basename(target, true).$tr("_-", " ")], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])], $send2(attrs, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                title = function() {
                  if ($truthy2(attrs["$key?"]("title"))) {
                    return attrs.$delete("title");
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }();
                block2 = self6.$create_block(parent, "image", nil2, attrs, opts);
                if ($truthy2(title)) {
                  $writer = [title];
                  $send2(block2, "title=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  ;
                  block2.$assign_caption(attrs.$delete("caption"), "figure");
                }
                ;
                return block2;
              }, $Processor_create_image_block$11.$$arity = -3);
              Opal2.def(self5, "$create_inline", $Processor_create_inline$12 = function $$create_inline(parent, context, text, opts) {
                var self6 = this;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                return $$2($nesting5, "Inline").$new(parent, context, text, function() {
                  if (context["$=="]("quoted")) {
                    return $hash22(["type"], { "type": "unquoted" }).$merge(opts);
                  } else {
                    return opts;
                  }
                  ;
                  return nil2;
                }());
              }, $Processor_create_inline$12.$$arity = -4);
              Opal2.def(self5, "$parse_content", $Processor_parse_content$13 = function $$parse_content(parent, content, attributes) {
                var self6 = this, reader = nil2;
                if (attributes == null) {
                  attributes = nil2;
                }
                ;
                reader = function() {
                  if ($truthy2($$2($nesting5, "Reader")["$==="](content))) {
                    return content;
                  } else {
                    return $$2($nesting5, "Reader").$new(content);
                  }
                  ;
                  return nil2;
                }();
                $$2($nesting5, "Parser").$parse_blocks(reader, parent, attributes);
                return parent;
              }, $Processor_parse_content$13.$$arity = -3);
              Opal2.def(self5, "$parse_attributes", $Processor_parse_attributes$14 = function $$parse_attributes(block2, attrlist, opts) {
                var $a2, self6 = this;
                if (opts == null) {
                  opts = $hash22([], {});
                }
                ;
                if ($truthy2(function() {
                  if ($truthy2(attrlist)) {
                    return attrlist["$empty?"]();
                  } else {
                    return true;
                  }
                  ;
                  return nil2;
                }())) {
                  return $hash22([], {});
                }
                ;
                if ($truthy2($truthy2($a2 = opts["$[]"]("sub_attributes")) ? attrlist["$include?"]($$2($nesting5, "ATTR_REF_HEAD")) : $a2)) {
                  attrlist = block2.$sub_attributes(attrlist);
                }
                ;
                return $$2($nesting5, "AttributeList").$new(attrlist).$parse($truthy2($a2 = opts["$[]"]("positional_attributes")) ? $a2 : []);
              }, $Processor_parse_attributes$14.$$arity = -3);
              return $send2([["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"], ["create_inline_pass", "create_inline", "quoted"]], "each", [], ($Processor$15 = function(method_name, delegate_method_name, context) {
                var self6 = $Processor$15.$$s || this, $$16;
                if (method_name == null) {
                  method_name = nil2;
                }
                ;
                if (delegate_method_name == null) {
                  delegate_method_name = nil2;
                }
                ;
                if (context == null) {
                  context = nil2;
                }
                ;
                return $send2(self6, "define_method", [method_name], ($$16 = function($a2) {
                  var self7 = $$16.$$s || this, $post_args2, args2;
                  $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                  args2 = $post_args2;
                  ;
                  args2.$unshift(args2.$shift(), context);
                  return $send2(self7, "send", [delegate_method_name].concat(Opal2.to_a(args2)));
                }, $$16.$$s = self6, $$16.$$arity = -1, $$16));
              }, $Processor$15.$$s = self5, $Processor$15.$$arity = 3, $Processor$15));
            })($nesting4[0], null, $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "ProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $ProcessorDsl_option$17, $ProcessorDsl_process$18, $ProcessorDsl_process_block_given$ques$20;
              Opal2.def(self5, "$option", $ProcessorDsl_option$17 = function $$option(key, value) {
                var self6 = this, $writer = nil2;
                $writer = [key, value];
                $send2(self6.$config(), "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }, $ProcessorDsl_option$17.$$arity = 2);
              Opal2.def(self5, "$process", $ProcessorDsl_process$18 = function $$process($a2) {
                var $iter2 = $ProcessorDsl_process$18.$$p, block2 = $iter2 || nil2, $post_args2, args2, $b2, $$19, self6 = this, context = nil2;
                if (self6.process_block == null)
                  self6.process_block = nil2;
                if ($iter2)
                  $ProcessorDsl_process$18.$$p = null;
                if ($iter2)
                  $ProcessorDsl_process$18.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                if (block2 !== nil2) {
                  if ($truthy2(args2["$empty?"]())) {
                  } else {
                    self6.$raise($$$2("::", "ArgumentError"), "wrong number of arguments (given " + args2.$size() + ", expected 0)");
                  }
                  ;
                  if ($truthy2($truthy2($b2 = block2.$binding()) ? self6["$=="](block2.$binding().$receiver()) : $b2)) {
                  } else {
                    context = self6;
                    $send2(block2, "define_singleton_method", ["call"], ($$19 = function($c) {
                      var self7 = $$19.$$s || this, $post_args3, m_args;
                      $post_args3 = Opal2.slice.call(arguments, 0, arguments.length);
                      m_args = $post_args3;
                      ;
                      return $send2(context, "instance_exec", Opal2.to_a(m_args), block2.$to_proc());
                    }, $$19.$$s = self6, $$19.$$arity = -1, $$19));
                  }
                  ;
                  return self6.process_block = block2;
                } else if ($truthy2(($b2 = self6["process_block"], $b2 != null && $b2 !== nil2) ? "instance-variable" : nil2)) {
                  return $send2(self6.process_block, "call", Opal2.to_a(args2));
                } else {
                  return self6.$raise($$$2("::", "NotImplementedError"), "" + self6.$class() + " #process method called before being registered");
                }
                ;
              }, $ProcessorDsl_process$18.$$arity = -1);
              Opal2.def(self5, "$process_block_given?", $ProcessorDsl_process_block_given$ques$20 = function() {
                var $a2, self6 = this;
                return ($a2 = self6["process_block"], $a2 != null && $a2 !== nil2) ? "instance-variable" : nil2;
              }, $ProcessorDsl_process_block_given$ques$20.$$arity = 0);
            })($nesting4[0], $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "DocumentProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $DocumentProcessorDsl_prefer$21;
              self5.$include($$2($nesting5, "ProcessorDsl"));
              Opal2.def(self5, "$prefer", $DocumentProcessorDsl_prefer$21 = function $$prefer() {
                var self6 = this;
                return self6.$option("position", ">>");
              }, $DocumentProcessorDsl_prefer$21.$$arity = 0);
            })($nesting4[0], $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "SyntaxProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $SyntaxProcessorDsl_named$22, $SyntaxProcessorDsl_content_model$23, $SyntaxProcessorDsl_positional_attributes$24, $SyntaxProcessorDsl_default_attributes$25, $SyntaxProcessorDsl_resolve_attributes$26;
              self5.$include($$2($nesting5, "ProcessorDsl"));
              Opal2.def(self5, "$named", $SyntaxProcessorDsl_named$22 = function $$named(value) {
                var self6 = this;
                if ($truthy2($$2($nesting5, "Processor")["$==="](self6))) {
                  return self6.name = value;
                } else {
                  return self6.$option("name", value);
                }
              }, $SyntaxProcessorDsl_named$22.$$arity = 1);
              Opal2.def(self5, "$content_model", $SyntaxProcessorDsl_content_model$23 = function $$content_model(value) {
                var self6 = this;
                return self6.$option("content_model", value);
              }, $SyntaxProcessorDsl_content_model$23.$$arity = 1);
              Opal2.alias(self5, "parse_content_as", "content_model");
              Opal2.def(self5, "$positional_attributes", $SyntaxProcessorDsl_positional_attributes$24 = function $$positional_attributes($a2) {
                var $post_args2, value, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                return self6.$option("positional_attrs", value.$flatten());
              }, $SyntaxProcessorDsl_positional_attributes$24.$$arity = -1);
              Opal2.alias(self5, "name_positional_attributes", "positional_attributes");
              Opal2.alias(self5, "positional_attrs", "positional_attributes");
              Opal2.def(self5, "$default_attributes", $SyntaxProcessorDsl_default_attributes$25 = function $$default_attributes(value) {
                var self6 = this;
                return self6.$option("default_attrs", value);
              }, $SyntaxProcessorDsl_default_attributes$25.$$arity = 1);
              Opal2.alias(self5, "default_attrs", "default_attributes");
              Opal2.def(self5, "$resolve_attributes", $SyntaxProcessorDsl_resolve_attributes$26 = function $$resolve_attributes($a2) {
                var $post_args2, args2, $b2, $$27, $$28, self6 = this, $case = nil2, names = nil2, defaults = nil2;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                if ($truthy2($rb_gt2(args2.$size(), 1))) {
                } else if ($truthy2((args2 = args2.$fetch(0, true))["$respond_to?"]("to_sym"))) {
                  args2 = [args2];
                }
                ;
                return function() {
                  $case = args2;
                  if (true["$==="]($case)) {
                    self6.$option("positional_attrs", []);
                    return self6.$option("default_attrs", $hash22([], {}));
                  } else if ($$$2("::", "Array")["$==="]($case)) {
                    $b2 = [[], $hash22([], {})], names = $b2[0], defaults = $b2[1], $b2;
                    $send2(args2, "each", [], ($$27 = function(arg) {
                      var self7 = $$27.$$s || this, $c, $d, name = nil2, _ = nil2, value = nil2, idx = nil2, $writer = nil2;
                      if (arg == null) {
                        arg = nil2;
                      }
                      ;
                      if ($truthy2((arg = arg.$to_s())["$include?"]("="))) {
                        $d = arg.$partition("="), $c = Opal2.to_ary($d), name = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], value = $c[2] == null ? nil2 : $c[2], $d;
                        if ($truthy2(name["$include?"](":"))) {
                          $d = name.$partition(":"), $c = Opal2.to_ary($d), idx = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], name = $c[2] == null ? nil2 : $c[2], $d;
                          idx = function() {
                            if (idx["$=="]("@")) {
                              return names.$size();
                            } else {
                              return idx.$to_i();
                            }
                            ;
                            return nil2;
                          }();
                          $writer = [idx, name];
                          $send2(names, "[]=", Opal2.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                          ;
                        }
                        ;
                        $writer = [name, value];
                        $send2(defaults, "[]=", Opal2.to_a($writer));
                        return $writer[$rb_minus($writer["length"], 1)];
                        ;
                      } else if ($truthy2(arg["$include?"](":"))) {
                        $d = arg.$partition(":"), $c = Opal2.to_ary($d), idx = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], name = $c[2] == null ? nil2 : $c[2], $d;
                        idx = function() {
                          if (idx["$=="]("@")) {
                            return names.$size();
                          } else {
                            return idx.$to_i();
                          }
                          ;
                          return nil2;
                        }();
                        $writer = [idx, name];
                        $send2(names, "[]=", Opal2.to_a($writer));
                        return $writer[$rb_minus($writer["length"], 1)];
                        ;
                      } else {
                        return names["$<<"](arg);
                      }
                      ;
                    }, $$27.$$s = self6, $$27.$$arity = 1, $$27));
                    self6.$option("positional_attrs", names.$compact());
                    return self6.$option("default_attrs", defaults);
                  } else if ($$$2("::", "Hash")["$==="]($case)) {
                    $b2 = [[], $hash22([], {})], names = $b2[0], defaults = $b2[1], $b2;
                    $send2(args2, "each", [], ($$28 = function(key, val) {
                      var self7 = $$28.$$s || this, $c, $d, name = nil2, idx = nil2, _ = nil2, $writer = nil2;
                      if (key == null) {
                        key = nil2;
                      }
                      ;
                      if (val == null) {
                        val = nil2;
                      }
                      ;
                      if ($truthy2((name = key.$to_s())["$include?"](":"))) {
                        $d = name.$partition(":"), $c = Opal2.to_ary($d), idx = $c[0] == null ? nil2 : $c[0], _ = $c[1] == null ? nil2 : $c[1], name = $c[2] == null ? nil2 : $c[2], $d;
                        idx = function() {
                          if (idx["$=="]("@")) {
                            return names.$size();
                          } else {
                            return idx.$to_i();
                          }
                          ;
                          return nil2;
                        }();
                        $writer = [idx, name];
                        $send2(names, "[]=", Opal2.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                        ;
                      }
                      ;
                      if ($truthy2(val)) {
                        $writer = [name, val];
                        $send2(defaults, "[]=", Opal2.to_a($writer));
                        return $writer[$rb_minus($writer["length"], 1)];
                      } else {
                        return nil2;
                      }
                      ;
                    }, $$28.$$s = self6, $$28.$$arity = 2, $$28));
                    self6.$option("positional_attrs", names.$compact());
                    return self6.$option("default_attrs", defaults);
                  } else {
                    return self6.$raise($$$2("::", "ArgumentError"), "unsupported attributes specification for macro: " + args2.$inspect());
                  }
                }();
              }, $SyntaxProcessorDsl_resolve_attributes$26.$$arity = -1);
              Opal2.alias(self5, "resolves_attributes", "resolve_attributes");
            })($nesting4[0], $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Preprocessor");
              var $nesting5 = [self5].concat($parent_nesting4), $Preprocessor_process$29;
              return (Opal2.def(self5, "$process", $Preprocessor_process$29 = function $$process(document, reader) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "Preprocessor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $Preprocessor_process$29.$$arity = 2), nil2) && "process";
            })($nesting4[0], $$2($nesting4, "Processor"), $nesting4);
            Opal2.const_set($$2($nesting4, "Preprocessor"), "DSL", $$2($nesting4, "DocumentProcessorDsl"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "TreeProcessor");
              var $nesting5 = [self5].concat($parent_nesting4), $TreeProcessor_process$30;
              return (Opal2.def(self5, "$process", $TreeProcessor_process$30 = function $$process(document) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "TreeProcessor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $TreeProcessor_process$30.$$arity = 1), nil2) && "process";
            })($nesting4[0], $$2($nesting4, "Processor"), $nesting4);
            Opal2.const_set($$2($nesting4, "TreeProcessor"), "DSL", $$2($nesting4, "DocumentProcessorDsl"));
            Opal2.const_set($nesting4[0], "Treeprocessor", $$2($nesting4, "TreeProcessor"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Postprocessor");
              var $nesting5 = [self5].concat($parent_nesting4), $Postprocessor_process$31;
              return (Opal2.def(self5, "$process", $Postprocessor_process$31 = function $$process(document, output) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "Postprocessor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $Postprocessor_process$31.$$arity = 2), nil2) && "process";
            })($nesting4[0], $$2($nesting4, "Processor"), $nesting4);
            Opal2.const_set($$2($nesting4, "Postprocessor"), "DSL", $$2($nesting4, "DocumentProcessorDsl"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "IncludeProcessor");
              var $nesting5 = [self5].concat($parent_nesting4), $IncludeProcessor_process$32, $IncludeProcessor_handles$ques$33;
              Opal2.def(self5, "$process", $IncludeProcessor_process$32 = function $$process(document, reader, target, attributes) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "IncludeProcessor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $IncludeProcessor_process$32.$$arity = 4);
              return (Opal2.def(self5, "$handles?", $IncludeProcessor_handles$ques$33 = function(target) {
                var self6 = this;
                return true;
              }, $IncludeProcessor_handles$ques$33.$$arity = 1), nil2) && "handles?";
            })($nesting4[0], $$2($nesting4, "Processor"), $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "IncludeProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $IncludeProcessorDsl_handles$ques$34;
              self5.$include($$2($nesting5, "DocumentProcessorDsl"));
              Opal2.def(self5, "$handles?", $IncludeProcessorDsl_handles$ques$34 = function($a2) {
                var $iter2 = $IncludeProcessorDsl_handles$ques$34.$$p, block2 = $iter2 || nil2, $post_args2, args2, $b2, self6 = this;
                if (self6.handles_block == null)
                  self6.handles_block = nil2;
                if ($iter2)
                  $IncludeProcessorDsl_handles$ques$34.$$p = null;
                if ($iter2)
                  $IncludeProcessorDsl_handles$ques$34.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                if (block2 !== nil2) {
                  if ($truthy2(args2["$empty?"]())) {
                  } else {
                    self6.$raise($$$2("::", "ArgumentError"), "wrong number of arguments (given " + args2.$size() + ", expected 0)");
                  }
                  ;
                  return self6.handles_block = block2;
                } else if ($truthy2(($b2 = self6["handles_block"], $b2 != null && $b2 !== nil2) ? "instance-variable" : nil2)) {
                  return self6.handles_block.$call(args2["$[]"](0));
                } else {
                  return true;
                }
                ;
              }, $IncludeProcessorDsl_handles$ques$34.$$arity = -1);
            })($nesting4[0], $nesting4);
            Opal2.const_set($$2($nesting4, "IncludeProcessor"), "DSL", $$2($nesting4, "IncludeProcessorDsl"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "DocinfoProcessor");
              var $nesting5 = [self5].concat($parent_nesting4), $DocinfoProcessor_initialize$35, $DocinfoProcessor_process$36;
              self5.$$prototype.config = nil2;
              Opal2.def(self5, "$initialize", $DocinfoProcessor_initialize$35 = function $$initialize(config) {
                var $a2, $iter2 = $DocinfoProcessor_initialize$35.$$p, $yield = $iter2 || nil2, self6 = this, $writer = nil2;
                if ($iter2)
                  $DocinfoProcessor_initialize$35.$$p = null;
                if (config == null) {
                  config = $hash22([], {});
                }
                ;
                $send2(self6, Opal2.find_super_dispatcher(self6, "initialize", $DocinfoProcessor_initialize$35, false), [config], null);
                return $truthy2($a2 = self6.config["$[]"]("location")) ? $a2 : ($writer = ["location", "head"], $send2(self6.config, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }, $DocinfoProcessor_initialize$35.$$arity = -1);
              return (Opal2.def(self5, "$process", $DocinfoProcessor_process$36 = function $$process(document) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "DocinfoProcessor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $DocinfoProcessor_process$36.$$arity = 1), nil2) && "process";
            })($nesting4[0], $$2($nesting4, "Processor"), $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "DocinfoProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $DocinfoProcessorDsl_at_location$37;
              self5.$include($$2($nesting5, "DocumentProcessorDsl"));
              Opal2.def(self5, "$at_location", $DocinfoProcessorDsl_at_location$37 = function $$at_location(value) {
                var self6 = this;
                return self6.$option("location", value);
              }, $DocinfoProcessorDsl_at_location$37.$$arity = 1);
            })($nesting4[0], $nesting4);
            Opal2.const_set($$2($nesting4, "DocinfoProcessor"), "DSL", $$2($nesting4, "DocinfoProcessorDsl"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "BlockProcessor");
              var $nesting5 = [self5].concat($parent_nesting4), $BlockProcessor_initialize$38, $BlockProcessor_process$39;
              self5.$$prototype.config = nil2;
              self5.$attr_accessor("name");
              Opal2.def(self5, "$initialize", $BlockProcessor_initialize$38 = function $$initialize(name, config) {
                var $a2, $iter2 = $BlockProcessor_initialize$38.$$p, $yield = $iter2 || nil2, self6 = this, $case = nil2, $writer = nil2;
                if ($iter2)
                  $BlockProcessor_initialize$38.$$p = null;
                if (name == null) {
                  name = nil2;
                }
                ;
                if (config == null) {
                  config = $hash22([], {});
                }
                ;
                $send2(self6, Opal2.find_super_dispatcher(self6, "initialize", $BlockProcessor_initialize$38, false), [config], null);
                self6.name = $truthy2($a2 = name) ? $a2 : self6.config["$[]"]("name");
                $case = self6.config["$[]"]("contexts");
                if ($$$2("::", "NilClass")["$==="]($case)) {
                  $truthy2($a2 = self6.config["$[]"]("contexts")) ? $a2 : ($writer = ["contexts", ["open", "paragraph"].$to_set()], $send2(self6.config, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                } else if ($$$2("::", "Symbol")["$==="]($case)) {
                  $writer = ["contexts", [self6.config["$[]"]("contexts")].$to_set()];
                  $send2(self6.config, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  $writer = ["contexts", self6.config["$[]"]("contexts").$to_set()];
                  $send2(self6.config, "[]=", Opal2.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                ;
                return $truthy2($a2 = self6.config["$[]"]("content_model")) ? $a2 : ($writer = ["content_model", "compound"], $send2(self6.config, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }, $BlockProcessor_initialize$38.$$arity = -1);
              return (Opal2.def(self5, "$process", $BlockProcessor_process$39 = function $$process(parent, reader, attributes) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "BlockProcessor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $BlockProcessor_process$39.$$arity = 3), nil2) && "process";
            })($nesting4[0], $$2($nesting4, "Processor"), $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "BlockProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $BlockProcessorDsl_contexts$40;
              self5.$include($$2($nesting5, "SyntaxProcessorDsl"));
              Opal2.def(self5, "$contexts", $BlockProcessorDsl_contexts$40 = function $$contexts($a2) {
                var $post_args2, value, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                value = $post_args2;
                ;
                return self6.$option("contexts", value.$flatten().$to_set());
              }, $BlockProcessorDsl_contexts$40.$$arity = -1);
              Opal2.alias(self5, "on_contexts", "contexts");
              Opal2.alias(self5, "on_context", "contexts");
              Opal2.alias(self5, "bind_to", "contexts");
            })($nesting4[0], $nesting4);
            Opal2.const_set($$2($nesting4, "BlockProcessor"), "DSL", $$2($nesting4, "BlockProcessorDsl"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "MacroProcessor");
              var $nesting5 = [self5].concat($parent_nesting4), $MacroProcessor_initialize$41, $MacroProcessor_process$42;
              self5.$$prototype.config = nil2;
              self5.$attr_accessor("name");
              Opal2.def(self5, "$initialize", $MacroProcessor_initialize$41 = function $$initialize(name, config) {
                var $a2, $iter2 = $MacroProcessor_initialize$41.$$p, $yield = $iter2 || nil2, self6 = this, $writer = nil2;
                if ($iter2)
                  $MacroProcessor_initialize$41.$$p = null;
                if (name == null) {
                  name = nil2;
                }
                ;
                if (config == null) {
                  config = $hash22([], {});
                }
                ;
                $send2(self6, Opal2.find_super_dispatcher(self6, "initialize", $MacroProcessor_initialize$41, false), [config], null);
                self6.name = $truthy2($a2 = name) ? $a2 : self6.config["$[]"]("name");
                return $truthy2($a2 = self6.config["$[]"]("content_model")) ? $a2 : ($writer = ["content_model", "attributes"], $send2(self6.config, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }, $MacroProcessor_initialize$41.$$arity = -1);
              return (Opal2.def(self5, "$process", $MacroProcessor_process$42 = function $$process(parent, target, attributes) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"), "" + $$2($nesting5, "MacroProcessor") + " subclass " + self6.$class() + " must implement the #process method");
              }, $MacroProcessor_process$42.$$arity = 3), nil2) && "process";
            })($nesting4[0], $$2($nesting4, "Processor"), $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "MacroProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $MacroProcessorDsl_resolve_attributes$43;
              self5.$include($$2($nesting5, "SyntaxProcessorDsl"));
              Opal2.def(self5, "$resolve_attributes", $MacroProcessorDsl_resolve_attributes$43 = function $$resolve_attributes($a2) {
                var $post_args2, args2, $b2, $iter2 = $MacroProcessorDsl_resolve_attributes$43.$$p, $yield = $iter2 || nil2, self6 = this, $zuper = nil2, $zuper_i = nil2, $zuper_ii = nil2;
                if ($iter2)
                  $MacroProcessorDsl_resolve_attributes$43.$$p = null;
                for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
                  $zuper[$zuper_i] = arguments[$zuper_i];
                }
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                if ($truthy2(($b2 = args2.$size()["$=="](1)) ? args2["$[]"](0)["$!"]() : args2.$size()["$=="](1))) {
                  return self6.$option("content_model", "text");
                } else {
                  $send2(self6, Opal2.find_super_dispatcher(self6, "resolve_attributes", $MacroProcessorDsl_resolve_attributes$43, false), $zuper, $iter2);
                  return self6.$option("content_model", "attributes");
                }
                ;
              }, $MacroProcessorDsl_resolve_attributes$43.$$arity = -1);
              Opal2.alias(self5, "resolves_attributes", "resolve_attributes");
            })($nesting4[0], $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "BlockMacroProcessor");
              var $nesting5 = [self5].concat($parent_nesting4), $BlockMacroProcessor_name$44;
              self5.$$prototype.name = nil2;
              return (Opal2.def(self5, "$name", $BlockMacroProcessor_name$44 = function $$name() {
                var self6 = this;
                if ($truthy2($$2($nesting5, "MacroNameRx")["$match?"](self6.name.$to_s()))) {
                } else {
                  self6.$raise($$$2("::", "ArgumentError"), "invalid name for block macro: " + self6.name);
                }
                ;
                return self6.name;
              }, $BlockMacroProcessor_name$44.$$arity = 0), nil2) && "name";
            })($nesting4[0], $$2($nesting4, "MacroProcessor"), $nesting4);
            Opal2.const_set($$2($nesting4, "BlockMacroProcessor"), "DSL", $$2($nesting4, "MacroProcessorDsl"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "InlineMacroProcessor");
              var $nesting5 = [self5].concat($parent_nesting4), $InlineMacroProcessor_regexp$45, $InlineMacroProcessor_resolve_regexp$46;
              self5.$$prototype.config = self5.$$prototype.name = nil2;
              Opal2.class_variable_set($nesting5[0], "@@rx_cache", $hash22([], {}));
              Opal2.def(self5, "$regexp", $InlineMacroProcessor_regexp$45 = function $$regexp() {
                var $a2, self6 = this, $writer = nil2;
                return $truthy2($a2 = self6.config["$[]"]("regexp")) ? $a2 : ($writer = ["regexp", self6.$resolve_regexp(self6.name.$to_s(), self6.config["$[]"]("format"))], $send2(self6.config, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }, $InlineMacroProcessor_regexp$45.$$arity = 0);
              return (Opal2.def(self5, "$resolve_regexp", $InlineMacroProcessor_resolve_regexp$46 = function $$resolve_regexp(name, format) {
                var $a2, $b2, self6 = this, $writer = nil2;
                if ($truthy2($$2($nesting5, "MacroNameRx")["$match?"](name))) {
                } else {
                  self6.$raise($$$2("::", "ArgumentError"), "invalid name for inline macro: " + name);
                }
                ;
                return $truthy2($a2 = (($b2 = $nesting5[0].$$cvars["@@rx_cache"]) == null ? nil2 : $b2)["$[]"]([name, format])) ? $a2 : ($writer = [[name, format], new RegExp("\\\\?" + name + ":" + function() {
                  if (format["$=="]("short")) {
                    return "(){0}";
                  } else {
                    return "(\\S+?)";
                  }
                  ;
                  return nil2;
                }() + "\\[(|" + $$2($nesting5, "CC_ANY") + "*?[^\\\\])\\]")], $send2(($b2 = $nesting5[0].$$cvars["@@rx_cache"]) == null ? nil2 : $b2, "[]=", Opal2.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }, $InlineMacroProcessor_resolve_regexp$46.$$arity = 2), nil2) && "resolve_regexp";
            })($nesting4[0], $$2($nesting4, "MacroProcessor"), $nesting4);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "InlineMacroProcessorDsl");
              var $nesting5 = [self5].concat($parent_nesting4), $InlineMacroProcessorDsl_format$47, $InlineMacroProcessorDsl_match$48;
              self5.$include($$2($nesting5, "MacroProcessorDsl"));
              Opal2.def(self5, "$format", $InlineMacroProcessorDsl_format$47 = function $$format(value) {
                var self6 = this;
                return self6.$option("format", value);
              }, $InlineMacroProcessorDsl_format$47.$$arity = 1);
              Opal2.alias(self5, "match_format", "format");
              Opal2.alias(self5, "using_format", "format");
              Opal2.def(self5, "$match", $InlineMacroProcessorDsl_match$48 = function $$match(value) {
                var self6 = this;
                return self6.$option("regexp", value);
              }, $InlineMacroProcessorDsl_match$48.$$arity = 1);
            })($nesting4[0], $nesting4);
            Opal2.const_set($$2($nesting4, "InlineMacroProcessor"), "DSL", $$2($nesting4, "InlineMacroProcessorDsl"));
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Extension");
              var $nesting5 = [self5].concat($parent_nesting4), $Extension_initialize$49;
              self5.$attr_reader("kind");
              self5.$attr_reader("config");
              self5.$attr_reader("instance");
              return (Opal2.def(self5, "$initialize", $Extension_initialize$49 = function $$initialize(kind, instance, config) {
                var self6 = this;
                self6.kind = kind;
                self6.instance = instance;
                return self6.config = config;
              }, $Extension_initialize$49.$$arity = 3), nil2) && "initialize";
            })($nesting4[0], null, $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "ProcessorExtension");
              var $nesting5 = [self5].concat($parent_nesting4), $ProcessorExtension_initialize$50;
              self5.$attr_reader("process_method");
              return (Opal2.def(self5, "$initialize", $ProcessorExtension_initialize$50 = function $$initialize(kind, instance, process_method) {
                var $a2, $iter2 = $ProcessorExtension_initialize$50.$$p, $yield = $iter2 || nil2, self6 = this;
                if ($iter2)
                  $ProcessorExtension_initialize$50.$$p = null;
                if (process_method == null) {
                  process_method = nil2;
                }
                ;
                $send2(self6, Opal2.find_super_dispatcher(self6, "initialize", $ProcessorExtension_initialize$50, false), [kind, instance, instance.$config()], null);
                return self6.process_method = $truthy2($a2 = process_method) ? $a2 : instance.$method("process");
              }, $ProcessorExtension_initialize$50.$$arity = -3), nil2) && "initialize";
            })($nesting4[0], $$2($nesting4, "Extension"), $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Group");
              var $nesting5 = [self5].concat($parent_nesting4), $Group_activate$52;
              (function(self6, $parent_nesting5) {
                var $nesting6 = [self6].concat($parent_nesting5), $register$51;
                return (Opal2.def(self6, "$register", $register$51 = function $$register(name) {
                  var self7 = this;
                  if (name == null) {
                    name = nil2;
                  }
                  ;
                  return $$2($nesting6, "Extensions").$register(name, self7);
                }, $register$51.$$arity = -1), nil2) && "register";
              })(Opal2.get_singleton_class(self5), $nesting5);
              return (Opal2.def(self5, "$activate", $Group_activate$52 = function $$activate(registry) {
                var self6 = this;
                return self6.$raise($$$2("::", "NotImplementedError"));
              }, $Group_activate$52.$$arity = 1), nil2) && "activate";
            })($nesting4[0], null, $nesting4);
            (function($base4, $super2, $parent_nesting4) {
              var self5 = $klass2($base4, $super2, "Registry");
              var $nesting5 = [self5].concat($parent_nesting4), $Registry_initialize$53, $Registry_activate$54, $Registry_preprocessor$56, $Registry_preprocessors$ques$57, $Registry_preprocessors$58, $Registry_tree_processor$59, $Registry_tree_processors$ques$60, $Registry_tree_processors$61, $Registry_postprocessor$62, $Registry_postprocessors$ques$63, $Registry_postprocessors$64, $Registry_include_processor$65, $Registry_include_processors$ques$66, $Registry_include_processors$67, $Registry_docinfo_processor$68, $Registry_docinfo_processors$ques$69, $Registry_docinfo_processors$71, $Registry_block$73, $Registry_blocks$ques$74, $Registry_registered_for_block$ques$75, $Registry_find_block_extension$76, $Registry_block_macro$77, $Registry_block_macros$ques$78, $Registry_registered_for_block_macro$ques$79, $Registry_find_block_macro_extension$80, $Registry_inline_macro$81, $Registry_inline_macros$ques$82, $Registry_registered_for_inline_macro$ques$83, $Registry_find_inline_macro_extension$84, $Registry_inline_macros$85, $Registry_prefer$86, $Registry_add_document_processor$87, $Registry_add_syntax_processor$89, $Registry_resolve_args$91, $Registry_as_symbol$92;
              self5.$$prototype.groups = self5.$$prototype.preprocessor_extensions = self5.$$prototype.tree_processor_extensions = self5.$$prototype.postprocessor_extensions = self5.$$prototype.include_processor_extensions = self5.$$prototype.docinfo_processor_extensions = self5.$$prototype.block_extensions = self5.$$prototype.block_macro_extensions = self5.$$prototype.inline_macro_extensions = nil2;
              self5.$attr_reader("document");
              self5.$attr_reader("groups");
              Opal2.def(self5, "$initialize", $Registry_initialize$53 = function $$initialize(groups) {
                var self6 = this;
                if (groups == null) {
                  groups = $hash22([], {});
                }
                ;
                self6.groups = groups;
                self6.preprocessor_extensions = self6.tree_processor_extensions = self6.postprocessor_extensions = self6.include_processor_extensions = self6.docinfo_processor_extensions = self6.block_extensions = self6.block_macro_extensions = self6.inline_macro_extensions = nil2;
                return self6.document = nil2;
              }, $Registry_initialize$53.$$arity = -1);
              Opal2.def(self5, "$activate", $Registry_activate$54 = function $$activate(document) {
                var $$55, self6 = this, ext_groups = nil2;
                self6.document = document;
                if ($truthy2((ext_groups = $rb_plus($$2($nesting5, "Extensions").$groups().$values(), self6.groups.$values()))["$empty?"]())) {
                } else {
                  $send2(ext_groups, "each", [], ($$55 = function(group) {
                    var self7 = $$55.$$s || this, $case = nil2;
                    if (group == null) {
                      group = nil2;
                    }
                    ;
                    return function() {
                      $case = group;
                      if ($$$2("::", "Proc")["$==="]($case)) {
                        return function() {
                          $case = group.$arity();
                          if (0["$==="]($case) || (-1)["$==="]($case)) {
                            return $send2(self7, "instance_exec", [], group.$to_proc());
                          } else if (1["$==="]($case)) {
                            return group.$call(self7);
                          } else {
                            return nil2;
                          }
                        }();
                      } else if ($$$2("::", "Class")["$==="]($case)) {
                        return group.$new().$activate(self7);
                      } else {
                        return group.$activate(self7);
                      }
                    }();
                  }, $$55.$$s = self6, $$55.$$arity = 1, $$55));
                }
                ;
                return self6;
              }, $Registry_activate$54.$$arity = 1);
              Opal2.def(self5, "$preprocessor", $Registry_preprocessor$56 = function $$preprocessor($a2) {
                var $iter2 = $Registry_preprocessor$56.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_preprocessor$56.$$p = null;
                if ($iter2)
                  $Registry_preprocessor$56.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_document_processor", ["preprocessor", args2], block2.$to_proc());
              }, $Registry_preprocessor$56.$$arity = -1);
              Opal2.def(self5, "$preprocessors?", $Registry_preprocessors$ques$57 = function() {
                var self6 = this;
                return self6.preprocessor_extensions["$!"]()["$!"]();
              }, $Registry_preprocessors$ques$57.$$arity = 0);
              Opal2.def(self5, "$preprocessors", $Registry_preprocessors$58 = function $$preprocessors() {
                var self6 = this;
                return self6.preprocessor_extensions;
              }, $Registry_preprocessors$58.$$arity = 0);
              Opal2.def(self5, "$tree_processor", $Registry_tree_processor$59 = function $$tree_processor($a2) {
                var $iter2 = $Registry_tree_processor$59.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_tree_processor$59.$$p = null;
                if ($iter2)
                  $Registry_tree_processor$59.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_document_processor", ["tree_processor", args2], block2.$to_proc());
              }, $Registry_tree_processor$59.$$arity = -1);
              Opal2.def(self5, "$tree_processors?", $Registry_tree_processors$ques$60 = function() {
                var self6 = this;
                return self6.tree_processor_extensions["$!"]()["$!"]();
              }, $Registry_tree_processors$ques$60.$$arity = 0);
              Opal2.def(self5, "$tree_processors", $Registry_tree_processors$61 = function $$tree_processors() {
                var self6 = this;
                return self6.tree_processor_extensions;
              }, $Registry_tree_processors$61.$$arity = 0);
              Opal2.alias(self5, "treeprocessor", "tree_processor");
              Opal2.alias(self5, "treeprocessors?", "tree_processors?");
              Opal2.alias(self5, "treeprocessors", "tree_processors");
              Opal2.def(self5, "$postprocessor", $Registry_postprocessor$62 = function $$postprocessor($a2) {
                var $iter2 = $Registry_postprocessor$62.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_postprocessor$62.$$p = null;
                if ($iter2)
                  $Registry_postprocessor$62.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_document_processor", ["postprocessor", args2], block2.$to_proc());
              }, $Registry_postprocessor$62.$$arity = -1);
              Opal2.def(self5, "$postprocessors?", $Registry_postprocessors$ques$63 = function() {
                var self6 = this;
                return self6.postprocessor_extensions["$!"]()["$!"]();
              }, $Registry_postprocessors$ques$63.$$arity = 0);
              Opal2.def(self5, "$postprocessors", $Registry_postprocessors$64 = function $$postprocessors() {
                var self6 = this;
                return self6.postprocessor_extensions;
              }, $Registry_postprocessors$64.$$arity = 0);
              Opal2.def(self5, "$include_processor", $Registry_include_processor$65 = function $$include_processor($a2) {
                var $iter2 = $Registry_include_processor$65.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_include_processor$65.$$p = null;
                if ($iter2)
                  $Registry_include_processor$65.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_document_processor", ["include_processor", args2], block2.$to_proc());
              }, $Registry_include_processor$65.$$arity = -1);
              Opal2.def(self5, "$include_processors?", $Registry_include_processors$ques$66 = function() {
                var self6 = this;
                return self6.include_processor_extensions["$!"]()["$!"]();
              }, $Registry_include_processors$ques$66.$$arity = 0);
              Opal2.def(self5, "$include_processors", $Registry_include_processors$67 = function $$include_processors() {
                var self6 = this;
                return self6.include_processor_extensions;
              }, $Registry_include_processors$67.$$arity = 0);
              Opal2.def(self5, "$docinfo_processor", $Registry_docinfo_processor$68 = function $$docinfo_processor($a2) {
                var $iter2 = $Registry_docinfo_processor$68.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_docinfo_processor$68.$$p = null;
                if ($iter2)
                  $Registry_docinfo_processor$68.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_document_processor", ["docinfo_processor", args2], block2.$to_proc());
              }, $Registry_docinfo_processor$68.$$arity = -1);
              Opal2.def(self5, "$docinfo_processors?", $Registry_docinfo_processors$ques$69 = function(location) {
                var $$70, self6 = this;
                if (location == null) {
                  location = nil2;
                }
                ;
                if ($truthy2(self6.docinfo_processor_extensions)) {
                  if ($truthy2(location)) {
                    return $send2(self6.docinfo_processor_extensions, "any?", [], ($$70 = function(ext) {
                      var self7 = $$70.$$s || this;
                      if (ext == null) {
                        ext = nil2;
                      }
                      ;
                      return ext.$config()["$[]"]("location")["$=="](location);
                    }, $$70.$$s = self6, $$70.$$arity = 1, $$70));
                  } else {
                    return true;
                  }
                } else {
                  return false;
                }
                ;
              }, $Registry_docinfo_processors$ques$69.$$arity = -1);
              Opal2.def(self5, "$docinfo_processors", $Registry_docinfo_processors$71 = function $$docinfo_processors(location) {
                var $$72, self6 = this;
                if (location == null) {
                  location = nil2;
                }
                ;
                if ($truthy2(self6.docinfo_processor_extensions)) {
                  if ($truthy2(location)) {
                    return $send2(self6.docinfo_processor_extensions, "select", [], ($$72 = function(ext) {
                      var self7 = $$72.$$s || this;
                      if (ext == null) {
                        ext = nil2;
                      }
                      ;
                      return ext.$config()["$[]"]("location")["$=="](location);
                    }, $$72.$$s = self6, $$72.$$arity = 1, $$72));
                  } else {
                    return self6.docinfo_processor_extensions;
                  }
                } else {
                  return nil2;
                }
                ;
              }, $Registry_docinfo_processors$71.$$arity = -1);
              Opal2.def(self5, "$block", $Registry_block$73 = function $$block($a2) {
                var $iter2 = $Registry_block$73.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_block$73.$$p = null;
                if ($iter2)
                  $Registry_block$73.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_syntax_processor", ["block", args2], block2.$to_proc());
              }, $Registry_block$73.$$arity = -1);
              Opal2.def(self5, "$blocks?", $Registry_blocks$ques$74 = function() {
                var self6 = this;
                return self6.block_extensions["$!"]()["$!"]();
              }, $Registry_blocks$ques$74.$$arity = 0);
              Opal2.def(self5, "$registered_for_block?", $Registry_registered_for_block$ques$75 = function(name, context) {
                var self6 = this, ext = nil2;
                if ($truthy2(ext = self6.block_extensions["$[]"](name.$to_sym()))) {
                  if ($truthy2(ext.$config()["$[]"]("contexts")["$include?"](context))) {
                    return ext;
                  } else {
                    return false;
                  }
                } else {
                  return false;
                }
              }, $Registry_registered_for_block$ques$75.$$arity = 2);
              Opal2.def(self5, "$find_block_extension", $Registry_find_block_extension$76 = function $$find_block_extension(name) {
                var self6 = this;
                return self6.block_extensions["$[]"](name.$to_sym());
              }, $Registry_find_block_extension$76.$$arity = 1);
              Opal2.def(self5, "$block_macro", $Registry_block_macro$77 = function $$block_macro($a2) {
                var $iter2 = $Registry_block_macro$77.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_block_macro$77.$$p = null;
                if ($iter2)
                  $Registry_block_macro$77.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_syntax_processor", ["block_macro", args2], block2.$to_proc());
              }, $Registry_block_macro$77.$$arity = -1);
              Opal2.def(self5, "$block_macros?", $Registry_block_macros$ques$78 = function() {
                var self6 = this;
                return self6.block_macro_extensions["$!"]()["$!"]();
              }, $Registry_block_macros$ques$78.$$arity = 0);
              Opal2.def(self5, "$registered_for_block_macro?", $Registry_registered_for_block_macro$ques$79 = function(name) {
                var self6 = this, ext = nil2;
                if ($truthy2(ext = self6.block_macro_extensions["$[]"](name.$to_sym()))) {
                  return ext;
                } else {
                  return false;
                }
              }, $Registry_registered_for_block_macro$ques$79.$$arity = 1);
              Opal2.def(self5, "$find_block_macro_extension", $Registry_find_block_macro_extension$80 = function $$find_block_macro_extension(name) {
                var self6 = this;
                return self6.block_macro_extensions["$[]"](name.$to_sym());
              }, $Registry_find_block_macro_extension$80.$$arity = 1);
              Opal2.def(self5, "$inline_macro", $Registry_inline_macro$81 = function $$inline_macro($a2) {
                var $iter2 = $Registry_inline_macro$81.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this;
                if ($iter2)
                  $Registry_inline_macro$81.$$p = null;
                if ($iter2)
                  $Registry_inline_macro$81.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                return $send2(self6, "add_syntax_processor", ["inline_macro", args2], block2.$to_proc());
              }, $Registry_inline_macro$81.$$arity = -1);
              Opal2.def(self5, "$inline_macros?", $Registry_inline_macros$ques$82 = function() {
                var self6 = this;
                return self6.inline_macro_extensions["$!"]()["$!"]();
              }, $Registry_inline_macros$ques$82.$$arity = 0);
              Opal2.def(self5, "$registered_for_inline_macro?", $Registry_registered_for_inline_macro$ques$83 = function(name) {
                var self6 = this, ext = nil2;
                if ($truthy2(ext = self6.inline_macro_extensions["$[]"](name.$to_sym()))) {
                  return ext;
                } else {
                  return false;
                }
              }, $Registry_registered_for_inline_macro$ques$83.$$arity = 1);
              Opal2.def(self5, "$find_inline_macro_extension", $Registry_find_inline_macro_extension$84 = function $$find_inline_macro_extension(name) {
                var self6 = this;
                return self6.inline_macro_extensions["$[]"](name.$to_sym());
              }, $Registry_find_inline_macro_extension$84.$$arity = 1);
              Opal2.def(self5, "$inline_macros", $Registry_inline_macros$85 = function $$inline_macros() {
                var self6 = this;
                return self6.inline_macro_extensions.$values();
              }, $Registry_inline_macros$85.$$arity = 0);
              Opal2.def(self5, "$prefer", $Registry_prefer$86 = function $$prefer($a2) {
                var $iter2 = $Registry_prefer$86.$$p, block2 = $iter2 || nil2, $post_args2, args2, self6 = this, extension = nil2, arg0 = nil2, extensions_store = nil2;
                if ($iter2)
                  $Registry_prefer$86.$$p = null;
                if ($iter2)
                  $Registry_prefer$86.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                extension = function() {
                  if ($truthy2($$2($nesting5, "ProcessorExtension")["$==="](arg0 = args2.$shift()))) {
                    return arg0;
                  } else {
                    return $send2(self6, "send", [arg0].concat(Opal2.to_a(args2)), block2.$to_proc());
                  }
                  ;
                  return nil2;
                }();
                extensions_store = self6.$instance_variable_get(("@" + extension.$kind() + "_extensions").$to_sym());
                extensions_store.$unshift(extensions_store.$delete(extension));
                return extension;
              }, $Registry_prefer$86.$$arity = -1);
              self5.$private();
              Opal2.def(self5, "$add_document_processor", $Registry_add_document_processor$87 = function $$add_document_processor(kind, args2) {
                var $iter2 = $Registry_add_document_processor$87.$$p, block2 = $iter2 || nil2, $$88, $a2, $b2, $c, self6 = this, kind_name = nil2, kind_class_symbol = nil2, kind_class = nil2, kind_java_class = nil2, kind_store = nil2, config = nil2, processor = nil2, extension = nil2, processor_class = nil2, processor_instance = nil2;
                if ($iter2)
                  $Registry_add_document_processor$87.$$p = null;
                if ($iter2)
                  $Registry_add_document_processor$87.$$p = null;
                ;
                kind_name = kind.$to_s().$tr("_", " ");
                kind_class_symbol = $send2(kind_name.$split(), "map", [], ($$88 = function(it) {
                  var self7 = $$88.$$s || this;
                  if (it == null) {
                    it = nil2;
                  }
                  ;
                  return it.$capitalize();
                }, $$88.$$s = self6, $$88.$$arity = 1, $$88)).$join().$to_sym();
                kind_class = $$2($nesting5, "Extensions").$const_get(kind_class_symbol, false);
                kind_java_class = function() {
                  if ($truthy2(($a2 = $$$2("::", "AsciidoctorJ", "skip_raise")) ? "constant" : nil2)) {
                    return $$$2($$$2("::", "AsciidoctorJ"), "Extensions").$const_get(kind_class_symbol, false);
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }();
                kind_store = $truthy2($b2 = self6.$instance_variable_get(("@" + kind + "_extensions").$to_sym())) ? $b2 : self6.$instance_variable_set(("@" + kind + "_extensions").$to_sym(), []);
                if (block2 !== nil2) {
                  config = self6.$resolve_args(args2, 1);
                  (processor = kind_class.$new(config)).$singleton_class().$enable_dsl();
                  if (block2.$arity()["$=="](0)) {
                    $send2(processor, "instance_exec", [], block2.$to_proc());
                  } else {
                    Opal2.yield1(block2, processor);
                  }
                  ;
                  if ($truthy2(processor["$process_block_given?"]())) {
                  } else {
                    self6.$raise($$$2("::", "ArgumentError"), "No block specified to process " + kind_name + " extension at " + block2.$source_location());
                  }
                  ;
                  processor.$freeze();
                  extension = $$2($nesting5, "ProcessorExtension").$new(kind, processor);
                } else {
                  $c = self6.$resolve_args(args2, 2), $b2 = Opal2.to_ary($c), processor = $b2[0] == null ? nil2 : $b2[0], config = $b2[1] == null ? nil2 : $b2[1], $c;
                  if ($truthy2(processor_class = $$2($nesting5, "Helpers").$resolve_class(processor))) {
                    if ($truthy2($truthy2($b2 = $rb_lt2(processor_class, kind_class)) ? $b2 : $truthy2($c = kind_java_class) ? $rb_lt2(processor_class, kind_java_class) : $c)) {
                    } else {
                      self6.$raise($$$2("::", "ArgumentError"), "Invalid type for " + kind_name + " extension: " + processor);
                    }
                    ;
                    processor_instance = processor_class.$new(config);
                    processor_instance.$freeze();
                    extension = $$2($nesting5, "ProcessorExtension").$new(kind, processor_instance);
                  } else if ($truthy2($truthy2($b2 = kind_class["$==="](processor)) ? $b2 : $truthy2($c = kind_java_class) ? kind_java_class["$==="](processor) : $c)) {
                    processor.$update_config(config);
                    processor.$freeze();
                    extension = $$2($nesting5, "ProcessorExtension").$new(kind, processor);
                  } else {
                    self6.$raise($$$2("::", "ArgumentError"), "Invalid arguments specified for registering " + kind_name + " extension: " + args2);
                  }
                  ;
                }
                ;
                if (extension.$config()["$[]"]("position")["$=="](">>")) {
                  kind_store.$unshift(extension);
                } else {
                  kind_store["$<<"](extension);
                }
                ;
                return extension;
              }, $Registry_add_document_processor$87.$$arity = 2);
              Opal2.def(self5, "$add_syntax_processor", $Registry_add_syntax_processor$89 = function $$add_syntax_processor(kind, args2) {
                var $iter2 = $Registry_add_syntax_processor$89.$$p, block2 = $iter2 || nil2, $$90, $a2, $b2, $c, self6 = this, kind_name = nil2, kind_class_symbol = nil2, kind_class = nil2, kind_java_class = nil2, kind_store = nil2, name = nil2, config = nil2, processor = nil2, $writer = nil2, processor_class = nil2, processor_instance = nil2;
                if ($iter2)
                  $Registry_add_syntax_processor$89.$$p = null;
                if ($iter2)
                  $Registry_add_syntax_processor$89.$$p = null;
                ;
                kind_name = kind.$to_s().$tr("_", " ");
                kind_class_symbol = $send2(kind_name.$split(), "map", [], ($$90 = function(it) {
                  var self7 = $$90.$$s || this;
                  if (it == null) {
                    it = nil2;
                  }
                  ;
                  return it.$capitalize();
                }, $$90.$$s = self6, $$90.$$arity = 1, $$90))["$<<"]("Processor").$join().$to_sym();
                kind_class = $$2($nesting5, "Extensions").$const_get(kind_class_symbol, false);
                kind_java_class = function() {
                  if ($truthy2(($a2 = $$$2("::", "AsciidoctorJ", "skip_raise")) ? "constant" : nil2)) {
                    return $$$2($$$2("::", "AsciidoctorJ"), "Extensions").$const_get(kind_class_symbol, false);
                  } else {
                    return nil2;
                  }
                  ;
                  return nil2;
                }();
                kind_store = $truthy2($b2 = self6.$instance_variable_get(("@" + kind + "_extensions").$to_sym())) ? $b2 : self6.$instance_variable_set(("@" + kind + "_extensions").$to_sym(), $hash22([], {}));
                if (block2 !== nil2) {
                  $c = self6.$resolve_args(args2, 2), $b2 = Opal2.to_ary($c), name = $b2[0] == null ? nil2 : $b2[0], config = $b2[1] == null ? nil2 : $b2[1], $c;
                  (processor = kind_class.$new(self6.$as_symbol(name), config)).$singleton_class().$enable_dsl();
                  if (block2.$arity()["$=="](0)) {
                    $send2(processor, "instance_exec", [], block2.$to_proc());
                  } else {
                    Opal2.yield1(block2, processor);
                  }
                  ;
                  if ($truthy2(name = self6.$as_symbol(processor.$name()))) {
                  } else {
                    self6.$raise($$$2("::", "ArgumentError"), "No name specified for " + kind_name + " extension at " + block2.$source_location());
                  }
                  ;
                  if ($truthy2(processor["$process_block_given?"]())) {
                  } else {
                    self6.$raise($$$2("::", "NoMethodError"), "No block specified to process " + kind_name + " extension at " + block2.$source_location());
                  }
                  ;
                  processor.$freeze();
                  $writer = [name, $$2($nesting5, "ProcessorExtension").$new(kind, processor)];
                  $send2(kind_store, "[]=", Opal2.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                  ;
                } else {
                  $c = self6.$resolve_args(args2, 3), $b2 = Opal2.to_ary($c), processor = $b2[0] == null ? nil2 : $b2[0], name = $b2[1] == null ? nil2 : $b2[1], config = $b2[2] == null ? nil2 : $b2[2], $c;
                  if ($truthy2(processor_class = $$2($nesting5, "Helpers").$resolve_class(processor))) {
                    if ($truthy2($truthy2($b2 = $rb_lt2(processor_class, kind_class)) ? $b2 : $truthy2($c = kind_java_class) ? $rb_lt2(processor_class, kind_java_class) : $c)) {
                    } else {
                      self6.$raise($$$2("::", "ArgumentError"), "Class specified for " + kind_name + " extension does not inherit from " + kind_class + ": " + processor);
                    }
                    ;
                    processor_instance = processor_class.$new(self6.$as_symbol(name), config);
                    if ($truthy2(name = self6.$as_symbol(processor_instance.$name()))) {
                    } else {
                      self6.$raise($$$2("::", "ArgumentError"), "No name specified for " + kind_name + " extension: " + processor);
                    }
                    ;
                    processor_instance.$freeze();
                    $writer = [name, $$2($nesting5, "ProcessorExtension").$new(kind, processor_instance)];
                    $send2(kind_store, "[]=", Opal2.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                    ;
                  } else if ($truthy2($truthy2($b2 = kind_class["$==="](processor)) ? $b2 : $truthy2($c = kind_java_class) ? kind_java_class["$==="](processor) : $c)) {
                    processor.$update_config(config);
                    if ($truthy2(name = function() {
                      if ($truthy2(name)) {
                        $writer = [self6.$as_symbol(name)];
                        $send2(processor, "name=", Opal2.to_a($writer));
                        return $writer[$rb_minus($writer["length"], 1)];
                        ;
                      } else {
                        return self6.$as_symbol(processor.$name());
                      }
                      ;
                      return nil2;
                    }())) {
                    } else {
                      self6.$raise($$$2("::", "ArgumentError"), "No name specified for " + kind_name + " extension: " + processor);
                    }
                    ;
                    processor.$freeze();
                    $writer = [name, $$2($nesting5, "ProcessorExtension").$new(kind, processor)];
                    $send2(kind_store, "[]=", Opal2.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                    ;
                  } else {
                    return self6.$raise($$$2("::", "ArgumentError"), "Invalid arguments specified for registering " + kind_name + " extension: " + args2);
                  }
                  ;
                }
                ;
              }, $Registry_add_syntax_processor$89.$$arity = 2);
              Opal2.def(self5, "$resolve_args", $Registry_resolve_args$91 = function $$resolve_args(args2, expect) {
                var self6 = this, opts = nil2, missing = nil2;
                opts = function() {
                  if ($truthy2($$$2("::", "Hash")["$==="](args2["$[]"](-1)))) {
                    return args2.$pop();
                  } else {
                    return $hash22([], {});
                  }
                  ;
                  return nil2;
                }();
                if (expect["$=="](1)) {
                  return opts;
                }
                ;
                if ($truthy2($rb_gt2(missing = $rb_minus($rb_minus(expect, 1), args2.$size()), 0))) {
                  args2 = $rb_plus(args2, $$$2("::", "Array").$new(missing));
                } else if ($truthy2($rb_lt2(missing, 0))) {
                  args2.$pop(missing["$-@"]());
                }
                ;
                args2["$<<"](opts);
                return args2;
              }, $Registry_resolve_args$91.$$arity = 2);
              return (Opal2.def(self5, "$as_symbol", $Registry_as_symbol$92 = function $$as_symbol(name) {
                var self6 = this;
                if ($truthy2(name)) {
                  return name.$to_sym();
                } else {
                  return nil2;
                }
              }, $Registry_as_symbol$92.$$arity = 1), nil2) && "as_symbol";
            })($nesting4[0], null, $nesting4);
            (function(self5, $parent_nesting4) {
              var $nesting5 = [self5].concat($parent_nesting4), $generate_name$93, $next_auto_id$94, $groups$95, $create$96, $register$97, $unregister_all$98, $unregister$99;
              Opal2.def(self5, "$generate_name", $generate_name$93 = function $$generate_name() {
                var self6 = this;
                return "extgrp" + self6.$next_auto_id();
              }, $generate_name$93.$$arity = 0);
              Opal2.def(self5, "$next_auto_id", $next_auto_id$94 = function $$next_auto_id() {
                var $a2, self6 = this;
                if (self6.auto_id == null)
                  self6.auto_id = nil2;
                self6.auto_id = $truthy2($a2 = self6.auto_id) ? $a2 : -1;
                return self6.auto_id = $rb_plus(self6.auto_id, 1);
              }, $next_auto_id$94.$$arity = 0);
              Opal2.def(self5, "$groups", $groups$95 = function $$groups() {
                var $a2, self6 = this;
                if (self6.groups == null)
                  self6.groups = nil2;
                return self6.groups = $truthy2($a2 = self6.groups) ? $a2 : $hash22([], {});
              }, $groups$95.$$arity = 0);
              Opal2.def(self5, "$create", $create$96 = function $$create(name) {
                var $iter2 = $create$96.$$p, block2 = $iter2 || nil2, $a2, self6 = this;
                if ($iter2)
                  $create$96.$$p = null;
                if ($iter2)
                  $create$96.$$p = null;
                ;
                if (name == null) {
                  name = nil2;
                }
                ;
                if (block2 !== nil2) {
                  return $$2($nesting5, "Registry").$new($hash($truthy2($a2 = name) ? $a2 : self6.$generate_name(), block2));
                } else {
                  return $$2($nesting5, "Registry").$new();
                }
                ;
              }, $create$96.$$arity = -1);
              Opal2.def(self5, "$register", $register$97 = function $$register($a2) {
                var $iter2 = $register$97.$$p, block2 = $iter2 || nil2, $post_args2, args2, $b2, self6 = this, argc = nil2, resolved_group = nil2, group = nil2, name = nil2, $writer = nil2;
                if ($iter2)
                  $register$97.$$p = null;
                if ($iter2)
                  $register$97.$$p = null;
                ;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                args2 = $post_args2;
                ;
                argc = args2.$size();
                if (block2 !== nil2) {
                  resolved_group = block2;
                } else if ($truthy2(group = args2.$pop())) {
                  resolved_group = $truthy2($b2 = $$2($nesting5, "Helpers").$resolve_class(group)) ? $b2 : group;
                } else {
                  self6.$raise($$$2("::", "ArgumentError"), "Extension group to register not specified");
                }
                ;
                name = $truthy2($b2 = args2.$pop()) ? $b2 : self6.$generate_name();
                if ($truthy2(args2["$empty?"]())) {
                } else {
                  self6.$raise($$$2("::", "ArgumentError"), "Wrong number of arguments (" + argc + " for 1..2)");
                }
                ;
                $writer = [name.$to_sym(), resolved_group];
                $send2(self6.$groups(), "[]=", Opal2.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                ;
              }, $register$97.$$arity = -1);
              Opal2.def(self5, "$unregister_all", $unregister_all$98 = function $$unregister_all() {
                var self6 = this;
                self6.groups = $hash22([], {});
                return nil2;
              }, $unregister_all$98.$$arity = 0);
              return (Opal2.def(self5, "$unregister", $unregister$99 = function $$unregister($a2) {
                var $post_args2, names, $$100, self6 = this;
                $post_args2 = Opal2.slice.call(arguments, 0, arguments.length);
                names = $post_args2;
                ;
                $send2(names, "each", [], ($$100 = function(group) {
                  var self7 = $$100.$$s || this;
                  if (self7.groups == null)
                    self7.groups = nil2;
                  if (group == null) {
                    group = nil2;
                  }
                  ;
                  return self7.groups.$delete(group.$to_sym());
                }, $$100.$$s = self6, $$100.$$arity = 1, $$100));
                return nil2;
              }, $unregister$99.$$arity = -1), nil2) && "unregister";
            })(Opal2.get_singleton_class(self4), $nesting4);
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/stylesheet"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$rstrip", "$read", "$join"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Stylesheets");
            var $nesting4 = [self4].concat($parent_nesting3), $Stylesheets_primary_stylesheet_data$1;
            self4.$$prototype.primary_stylesheet_data = nil2;
            return (Opal2.def(self4, "$primary_stylesheet_data", $Stylesheets_primary_stylesheet_data$1 = function $$primary_stylesheet_data() {
              var $a2, self5 = this;
              return self5.primary_stylesheet_data = $truthy2($a2 = self5.primary_stylesheet_data) ? $a2 : $$$2("::", "IO").$read($$$2("::", "File").$join("css", "asciidoctor.css")).$rstrip();
            }, $Stylesheets_primary_stylesheet_data$1.$$arity = 0), nil2) && "primary_stylesheet_data";
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/document"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass;
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Document");
            var $nesting4 = [self4].concat($parent_nesting3), $Document_fill_datetime_attributes$1;
            return (Opal2.def(self4, "$fill_datetime_attributes", $Document_fill_datetime_attributes$1 = function $$fill_datetime_attributes(attrs, input_mtime) {
              var self5 = this;
              var $truthy2 = Opal2.truthy;
              var $falsy = Opal2.falsy;
              var nil3 = Opal2.nil;
              var utc_offset;
              var source_date_epoch;
              var localdate;
              var localyear;
              var localtime;
              var localdatetime;
              var docdate;
              var doctime;
              var getYear = function(time, utc_offset2) {
                return utc_offset2 === 0 ? time.getUTCFullYear() : time.getFullYear();
              };
              var getMonth = function(time, utc_offset2) {
                return utc_offset2 === 0 ? time.getUTCMonth() : time.getMonth();
              };
              var getDay = function(time, utc_offset2) {
                return utc_offset2 === 0 ? time.getUTCDate() : time.getDate();
              };
              var getHours = function(time, utc_offset2) {
                return utc_offset2 === 0 ? time.getUTCHours() : time.getHours();
              };
              var now = new Date();
              if (Opal2.const_get_qualified("::", "ENV")["$key?"]("SOURCE_DATE_EPOCH")) {
                now.setTime(parseInt(Opal2.const_get_qualified("::", "ENV")["$[]"]("SOURCE_DATE_EPOCH")) * 1e3);
                source_date_epoch = now;
                utc_offset = 0;
              } else {
                utc_offset = -now.getTimezoneOffset() / 60;
              }
              if ($truthy2(localdate = attrs["$[]"]("localdate"))) {
                if ($falsy(localyear = attrs["$[]"]("localyear"))) {
                  localyear = localdate.indexOf("-") === 4 ? localdate.substring(0, 4) : nil3;
                  attrs["$[]="]("localyear", localyear);
                }
              } else {
                var now_year = getYear(now, utc_offset).toString();
                var now_month = ("0" + (getMonth(now, utc_offset) + 1)).slice(-2);
                var now_day = ("0" + getDay(now, utc_offset)).slice(-2);
                localdate = now_year + "-" + now_month + "-" + now_day;
                attrs["$[]="]("localdate", localdate);
                localyear = now_year;
                attrs["$[]="]("localyear", now_year);
              }
              if ($falsy(localtime = attrs["$[]"]("localtime"))) {
                var hours = ("0" + getHours(now, utc_offset)).slice(-2);
                var minutes = ("0" + now.getMinutes()).slice(-2);
                var seconds = ("0" + now.getSeconds()).slice(-2);
                var utc_offset_format;
                if (utc_offset === 0) {
                  utc_offset_format = "UTC";
                } else if (utc_offset > 0) {
                  utc_offset_format = ("+0" + utc_offset * 100).slice(-5);
                } else {
                  utc_offset_format = ("-0" + -utc_offset * 100).slice(-5);
                }
                localtime = hours + ":" + minutes + ":" + seconds + " " + utc_offset_format;
                attrs["$[]="]("localtime", localtime);
              }
              if ($falsy(localdatetime = attrs["$[]"]("localdatetime"))) {
                localdatetime = localdate + " " + localtime;
                attrs["$[]="]("localdatetime", localdatetime);
              }
              if ($truthy2(source_date_epoch)) {
                input_mtime = source_date_epoch;
              } else if ($truthy2(input_mtime)) {
                utc_offset = -input_mtime.getTimezoneOffset() / 60;
              } else {
                input_mtime = now;
              }
              if ($truthy2(docdate = attrs["$[]"]("docdate"))) {
                attrs["$[]="]("docyear", docdate.indexOf("-") === 4 ? docdate.substring(0, 4) : nil3);
              } else {
                var mtime_year = getYear(input_mtime, utc_offset).toString();
                var mtime_month = ("0" + (getMonth(input_mtime, utc_offset) + 1)).slice(-2);
                var mtime_day = ("0" + getDay(input_mtime, utc_offset)).slice(-2);
                docdate = mtime_year + "-" + mtime_month + "-" + mtime_day;
                attrs["$[]="]("docdate", docdate);
                if ($falsy(attrs["$[]"]("docyear"))) {
                  attrs["$[]="]("docyear", mtime_year);
                }
              }
              if ($falsy(doctime = attrs["$[]"]("doctime"))) {
                var mtime_hours = ("0" + getHours(input_mtime, utc_offset)).slice(-2);
                var mtime_minutes = ("0" + input_mtime.getMinutes()).slice(-2);
                var mtime_seconds = ("0" + input_mtime.getSeconds()).slice(-2);
                var utc_offset_format;
                if (utc_offset === 0) {
                  utc_offset_format = "UTC";
                } else if (utc_offset > 0) {
                  utc_offset_format = ("+0" + utc_offset * 100).slice(-5);
                } else {
                  utc_offset_format = ("-0" + -utc_offset * 100).slice(-5);
                }
                doctime = mtime_hours + ":" + mtime_minutes + ":" + mtime_seconds + " " + utc_offset_format;
                attrs["$[]="]("doctime", doctime);
              }
              if ($falsy(attrs["$[]"]("docdatetime"))) {
                attrs["$[]="]("docdatetime", docdate + " " + doctime);
              }
              return nil3;
            }, $Document_fill_datetime_attributes$1.$$arity = 2), nil2) && "fill_datetime_attributes";
          })($nesting3[0], $$2($nesting3, "AbstractBlock"), $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/substitutors"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module;
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Substitutors");
            var $nesting4 = [self4].concat($parent_nesting3), $Substitutors_sub_placeholder$1;
            Opal2.def(self4, "$sub_placeholder", $Substitutors_sub_placeholder$1 = function $$sub_placeholder(format_string, replacement) {
              var self5 = this;
              return format_string.replace("%s", replacement);
            }, $Substitutors_sub_placeholder$1.$$arity = 2);
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/parser"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $super2, $parent_nesting3) {
            var self4 = $klass2($base3, $super2, "Parser");
            var $nesting4 = [self4].concat($parent_nesting3), $Parser_uniform$ques$1, $Parser_uniform$ques$2;
            if ($truthy2(String.prototype.repeat)) {
              return (Opal2.defs(self4, "$uniform?", $Parser_uniform$ques$1 = function(str, chr, len) {
                var self5 = this;
                return chr.repeat(len) === str;
              }, $Parser_uniform$ques$1.$$arity = 3), nil2) && "uniform?";
            } else {
              return (Opal2.defs(self4, "$uniform?", $Parser_uniform$ques$2 = function(str, chr, len) {
                var self5 = this;
                return Array.apply(null, { length: len }).map(function() {
                  return chr;
                }).join("") === str;
              }, $Parser_uniform$ques$2.$$arity = 3), nil2) && "uniform?";
            }
          })($nesting3[0], null, $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext/syntax_highlighter"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$key?", "$registry", "$[]", "$include?", "$include", "$empty?", "$debug", "$logger", "$join", "$keys"]);
        return function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "SyntaxHighlighter");
            var $nesting4 = [self4].concat($parent_nesting3);
            (function($base4, $parent_nesting4) {
              var self5 = $module($base4, "Factory");
              var $nesting5 = [self5].concat($parent_nesting4), $Factory_for$1;
              Opal2.def(self5, "$for", $Factory_for$1 = function(name) {
                var self6 = this;
                if ($truthy2(self6.$registry()["$key?"](name))) {
                  return self6.$registry()["$[]"](name);
                } else {
                  if ($truthy2(self6["$include?"]($$2($nesting5, "Logging")))) {
                  } else {
                    self6.$include($$2($nesting5, "Logging"));
                  }
                  ;
                  if ($truthy2(self6.$registry()["$empty?"]())) {
                    self6.$logger().$debug("no syntax highlighter available, functionality disabled.");
                  } else {
                    self6.$logger().$debug("syntax highlighter named '" + name + "' is not available, must be one of: '" + self6.$registry().$keys().$join("', '") + "'.");
                  }
                  ;
                  return nil2;
                }
              }, $Factory_for$1.$$arity = 1);
            })($nesting4[0], $nesting4);
          })($nesting3[0], $nesting3);
        }($nesting2[0], $nesting2);
      };
      Opal.modules["asciidoctor/js/asciidoctor_ext"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
        Opal2.add_stubs(["$require"]);
        self2.$require("asciidoctor/js/asciidoctor_ext/stylesheet");
        self2.$require("asciidoctor/js/asciidoctor_ext/document");
        self2.$require("asciidoctor/js/asciidoctor_ext/substitutors");
        self2.$require("asciidoctor/js/asciidoctor_ext/parser");
        self2.$require("asciidoctor/js/asciidoctor_ext/syntax_highlighter");
        self2.$require("asciidoctor/js/asciidoctor_ext/browser");
        ;
      };
      Opal.modules["asciidoctor/js/opal_ext/logger"] = function(Opal2) {
        function $rb_lt2(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs < rhs : lhs["$<"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $klass2 = Opal2.klass, $truthy2 = Opal2.truthy;
        Opal2.add_stubs(["$chr", "$rjust", "$message_as_string", "$<", "$write", "$call", "$[]"]);
        return function($base2, $super2, $parent_nesting2) {
          var self3 = $klass2($base2, $super2, "Logger");
          var $nesting3 = [self3].concat($parent_nesting2), $Logger_add$2;
          self3.$$prototype.level = self3.$$prototype.progname = self3.$$prototype.pipe = self3.$$prototype.formatter = nil2;
          (function($base3, $super3, $parent_nesting3) {
            var self4 = $klass2($base3, $super3, "Formatter");
            var $nesting4 = [self4].concat($parent_nesting3), $Formatter_call$1;
            return (Opal2.def(self4, "$call", $Formatter_call$1 = function $$call(severity, time, progname, msg) {
              var self5 = this, time_format = nil2;
              time_format = time.getFullYear() + "-" + ("0" + (time.getMonth() + 1)).slice(-2) + "-" + ("0" + time.getDate()).slice(-2) + "T" + ("0" + time.getHours()).slice(-2) + ":" + ("0" + time.getMinutes()).slice(-2) + ":" + ("0" + time.getSeconds()).slice(-2) + "." + ("00" + new Date().getMilliseconds() * 1e3).slice(-6);
              return "" + severity.$chr() + ", [" + time_format + "] " + severity.$rjust(5) + " -- " + progname + ": " + self5.$message_as_string(msg);
            }, $Formatter_call$1.$$arity = 4), nil2) && "call";
          })($nesting3[0], null, $nesting3);
          return (Opal2.def(self3, "$add", $Logger_add$2 = function $$add(severity, message, progname) {
            var $iter2 = $Logger_add$2.$$p, block2 = $iter2 || nil2, $a2, self4 = this;
            if ($iter2)
              $Logger_add$2.$$p = null;
            if ($iter2)
              $Logger_add$2.$$p = null;
            ;
            if (message == null) {
              message = nil2;
            }
            ;
            if (progname == null) {
              progname = nil2;
            }
            ;
            if ($truthy2($rb_lt2(severity = $truthy2($a2 = severity) ? $a2 : $$2($nesting3, "UNKNOWN"), self4.level))) {
              return true;
            }
            ;
            progname = $truthy2($a2 = progname) ? $a2 : self4.progname;
            if ($truthy2(message)) {
            } else if (block2 !== nil2) {
              message = Opal2.yieldX(block2, []);
            } else {
              message = progname;
              progname = self4.progname;
            }
            ;
            self4.pipe.$write(self4.formatter.$call($truthy2($a2 = $$2($nesting3, "SEVERITY_LABELS")["$[]"](severity)) ? $a2 : "ANY", new Date(), progname, message));
            return true;
          }, $Logger_add$2.$$arity = -2), nil2) && "add";
        }($nesting2[0], null, $nesting2);
      };
      Opal.modules["asciidoctor/js/postscript"] = function(Opal2) {
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice;
        Opal2.add_stubs(["$require"]);
        self2.$require("asciidoctor/converter/composite");
        self2.$require("asciidoctor/converter/html5");
        self2.$require("asciidoctor/extensions");
        self2.$require("asciidoctor/js/asciidoctor_ext");
        return self2.$require("asciidoctor/js/opal_ext/logger");
      };
      (function(Opal2) {
        function $rb_minus(lhs, rhs) {
          return typeof lhs === "number" && typeof rhs === "number" ? lhs - rhs : lhs["$-"](rhs);
        }
        var self2 = Opal2.top, $nesting2 = [], nil2 = Opal2.nil, $$$2 = Opal2.const_get_qualified, $$2 = Opal2.const_get_relative, $breaker2 = Opal2.breaker, $slice2 = Opal2.slice, $module = Opal2.module, $send2 = Opal2.send, $truthy2 = Opal2.truthy, $hash22 = Opal2.hash2;
        Opal2.add_stubs(["$require", "$==", "$to_h", "$sort", "$map", "$constants", "$const_get", "$downcase", "$to_s", "$<=>", "$upcase", "$[]", "$values", "$new", "$attr_reader", "$instance_variable_set", "$send", "$singleton_class", "$<<", "$define", "$dirname", "$absolute_path", "$__dir__", "$join", "$home", "$pwd", "$to_set", "$tap", "$each", "$chr", "$each_key", "$slice", "$[]=", "$-", "$length", "$merge", "$default=", "$drop", "$insert"]);
        self2.$require("set");
        if ($$2($nesting2, "RUBY_ENGINE")["$=="]("opal")) {
          self2.$require("asciidoctor/js");
        } else {
          nil2;
        }
        ;
        (function($base2, $parent_nesting2) {
          var self3 = $module($base2, "Asciidoctor");
          var $nesting3 = [self3].concat($parent_nesting2), $a2, $b2, $Asciidoctor$7, $Asciidoctor$9, $Asciidoctor$11, $Asciidoctor$13, $writer = nil2;
          Opal2.const_set($nesting3[0], "RUBY_ENGINE_OPAL", Opal2.const_set($nesting3[0], "RUBY_ENGINE", $$$2("::", "RUBY_ENGINE"))["$=="]("opal"));
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "SafeMode");
            var $nesting4 = [self4].concat($parent_nesting3), $SafeMode$1, $SafeMode$2, $SafeMode_value_for_name$3, $SafeMode_name_for_value$4, $SafeMode_names$5;
            Opal2.const_set($nesting4[0], "UNSAFE", 0);
            Opal2.const_set($nesting4[0], "SAFE", 1);
            Opal2.const_set($nesting4[0], "SERVER", 10);
            Opal2.const_set($nesting4[0], "SECURE", 20);
            self4.names_by_value = $send2($send2(self4.$constants(false), "map", [], ($SafeMode$1 = function(sym) {
              var self5 = $SafeMode$1.$$s || this;
              if (sym == null) {
                sym = nil2;
              }
              ;
              return [self5.$const_get(sym), sym.$to_s().$downcase()];
            }, $SafeMode$1.$$s = self4, $SafeMode$1.$$arity = 1, $SafeMode$1)), "sort", [], ($SafeMode$2 = function($mlhs_tmp1, $mlhs_tmp2) {
              var self5 = $SafeMode$2.$$s || this, $a3, $b3, a = nil2, b = nil2;
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil2;
              }
              ;
              if ($mlhs_tmp2 == null) {
                $mlhs_tmp2 = nil2;
              }
              ;
              $b3 = $mlhs_tmp1, $a3 = Opal2.to_ary($b3), a = $a3[0] == null ? nil2 : $a3[0], $b3;
              $b3 = $mlhs_tmp2, $a3 = Opal2.to_ary($b3), b = $a3[0] == null ? nil2 : $a3[0], $b3;
              return a["$<=>"](b);
            }, $SafeMode$2.$$s = self4, $SafeMode$2.$$arity = 2, $SafeMode$2.$$has_top_level_mlhs_arg = true, $SafeMode$2)).$to_h();
            Opal2.defs(self4, "$value_for_name", $SafeMode_value_for_name$3 = function $$value_for_name(name) {
              var self5 = this;
              return self5.$const_get(name.$upcase(), false);
            }, $SafeMode_value_for_name$3.$$arity = 1);
            Opal2.defs(self4, "$name_for_value", $SafeMode_name_for_value$4 = function $$name_for_value(value) {
              var self5 = this;
              if (self5.names_by_value == null)
                self5.names_by_value = nil2;
              return self5.names_by_value["$[]"](value);
            }, $SafeMode_name_for_value$4.$$arity = 1);
            Opal2.defs(self4, "$names", $SafeMode_names$5 = function $$names() {
              var self5 = this;
              if (self5.names_by_value == null)
                self5.names_by_value = nil2;
              return self5.names_by_value.$values();
            }, $SafeMode_names$5.$$arity = 0);
          })($nesting3[0], $nesting3);
          (function($base3, $parent_nesting3) {
            var self4 = $module($base3, "Compliance");
            var $nesting4 = [self4].concat($parent_nesting3);
            self4.keys = $$$2("::", "Set").$new();
            (function(self5, $parent_nesting4) {
              var $nesting5 = [self5].concat($parent_nesting4), $define$6;
              self5.$attr_reader("keys");
              return (Opal2.def(self5, "$define", $define$6 = function $$define(key, value) {
                var self6 = this;
                if (self6.keys == null)
                  self6.keys = nil2;
                self6.$instance_variable_set("@" + key, value);
                self6.$singleton_class().$send("attr_accessor", key);
                self6.keys["$<<"](key);
                return nil2;
              }, $define$6.$$arity = 2), nil2) && "define";
            })(Opal2.get_singleton_class(self4), $nesting4);
            self4.$define("block_terminates_paragraph", true);
            self4.$define("strict_verbatim_paragraphs", true);
            self4.$define("underline_style_section_titles", true);
            self4.$define("unwrap_standalone_preamble", true);
            self4.$define("attribute_missing", "skip");
            self4.$define("attribute_undefined", "drop-line");
            self4.$define("shorthand_property_syntax", true);
            self4.$define("natural_xrefs", true);
            self4.$define("unique_id_start_index", 2);
            self4.$define("markdown_syntax", true);
          })($nesting3[0], $nesting3);
          if ($truthy2(($a2 = $$2($nesting3, "ROOT_DIR", "skip_raise")) ? "constant" : nil2)) {
          } else {
            Opal2.const_set($nesting3[0], "ROOT_DIR", $$$2("::", "File").$dirname($$$2("::", "File").$absolute_path(self3.$__dir__())));
          }
          ;
          Opal2.const_set($nesting3[0], "LIB_DIR", $$$2("::", "File").$join($$2($nesting3, "ROOT_DIR"), "lib"));
          Opal2.const_set($nesting3[0], "DATA_DIR", $$$2("::", "File").$join($$2($nesting3, "ROOT_DIR"), "data"));
          Opal2.const_set($nesting3[0], "USER_HOME", function() {
            try {
              return $$$2("::", "Dir").$home();
            } catch ($err) {
              if (Opal2.rescue($err, [$$2($nesting3, "StandardError")])) {
                try {
                  return $truthy2($b2 = $$$2("::", "ENV")["$[]"]("HOME")) ? $b2 : $$$2("::", "Dir").$pwd();
                } finally {
                  Opal2.pop_exception();
                }
              } else {
                throw $err;
              }
            }
          }());
          Opal2.const_set($nesting3[0], "LF", "\n");
          Opal2.const_set($nesting3[0], "NULL", "\0");
          Opal2.const_set($nesting3[0], "TAB", "	");
          Opal2.const_set($nesting3[0], "MAX_INT", 9007199254740991);
          Opal2.const_set($nesting3[0], "UTF_8", $$$2($$$2("::", "Encoding"), "UTF_8"));
          Opal2.const_set($nesting3[0], "BOM_BYTES_UTF_8", [239, 187, 191]);
          Opal2.const_set($nesting3[0], "BOM_BYTES_UTF_16LE", [255, 254]);
          Opal2.const_set($nesting3[0], "BOM_BYTES_UTF_16BE", [254, 255]);
          Opal2.const_set($nesting3[0], "FILE_READ_MODE", function() {
            if ($truthy2($$2($nesting3, "RUBY_ENGINE_OPAL"))) {
              return "r";
            } else {
              return "rb:utf-8:utf-8";
            }
            ;
            return nil2;
          }());
          Opal2.const_set($nesting3[0], "URI_READ_MODE", $$2($nesting3, "FILE_READ_MODE"));
          Opal2.const_set($nesting3[0], "FILE_WRITE_MODE", function() {
            if ($truthy2($$2($nesting3, "RUBY_ENGINE_OPAL"))) {
              return "w";
            } else {
              return "w:utf-8";
            }
            ;
            return nil2;
          }());
          Opal2.const_set($nesting3[0], "DEFAULT_DOCTYPE", "article");
          Opal2.const_set($nesting3[0], "DEFAULT_BACKEND", "html5");
          Opal2.const_set($nesting3[0], "DEFAULT_STYLESHEET_KEYS", ["", "DEFAULT"].$to_set());
          Opal2.const_set($nesting3[0], "DEFAULT_STYLESHEET_NAME", "asciidoctor.css");
          Opal2.const_set($nesting3[0], "BACKEND_ALIASES", $hash22(["html", "docbook"], { "html": "html5", "docbook": "docbook5" }));
          Opal2.const_set($nesting3[0], "DEFAULT_PAGE_WIDTHS", $hash22(["docbook"], { "docbook": 425 }));
          Opal2.const_set($nesting3[0], "DEFAULT_EXTENSIONS", $hash22(["html", "docbook", "pdf", "epub", "manpage", "asciidoc"], { "html": ".html", "docbook": ".xml", "pdf": ".pdf", "epub": ".epub", "manpage": ".man", "asciidoc": ".adoc" }));
          Opal2.const_set($nesting3[0], "ASCIIDOC_EXTENSIONS", $hash22([".adoc", ".asciidoc", ".asc", ".ad", ".txt"], { ".adoc": true, ".asciidoc": true, ".asc": true, ".ad": true, ".txt": true }));
          Opal2.const_set($nesting3[0], "SETEXT_SECTION_LEVELS", $hash22(["=", "-", "~", "^", "+"], { "=": 0, "-": 1, "~": 2, "^": 3, "+": 4 }));
          Opal2.const_set($nesting3[0], "ADMONITION_STYLES", ["NOTE", "TIP", "IMPORTANT", "WARNING", "CAUTION"].$to_set());
          Opal2.const_set($nesting3[0], "ADMONITION_STYLE_HEADS", $send2($$$2("::", "Set").$new(), "tap", [], ($Asciidoctor$7 = function(accum) {
            var self4 = $Asciidoctor$7.$$s || this, $$8;
            if (accum == null) {
              accum = nil2;
            }
            ;
            return $send2($$2($nesting3, "ADMONITION_STYLES"), "each", [], ($$8 = function(s) {
              var self5 = $$8.$$s || this;
              if (s == null) {
                s = nil2;
              }
              ;
              return accum["$<<"](s.$chr());
            }, $$8.$$s = self4, $$8.$$arity = 1, $$8));
          }, $Asciidoctor$7.$$s = self3, $Asciidoctor$7.$$arity = 1, $Asciidoctor$7)));
          Opal2.const_set($nesting3[0], "PARAGRAPH_STYLES", ["comment", "example", "literal", "listing", "normal", "open", "pass", "quote", "sidebar", "source", "verse", "abstract", "partintro"].$to_set());
          Opal2.const_set($nesting3[0], "VERBATIM_STYLES", ["literal", "listing", "source", "verse"].$to_set());
          Opal2.const_set($nesting3[0], "DELIMITED_BLOCKS", $hash22(["--", "----", "....", "====", "****", "____", "++++", "|===", ",===", ":===", "!===", "////", "```"], { "--": ["open", ["comment", "example", "literal", "listing", "pass", "quote", "sidebar", "source", "verse", "admonition", "abstract", "partintro"].$to_set()], "----": ["listing", ["literal", "source"].$to_set()], "....": ["literal", ["listing", "source"].$to_set()], "====": ["example", ["admonition"].$to_set()], "****": ["sidebar", $$$2("::", "Set").$new()], "____": ["quote", ["verse"].$to_set()], "++++": ["pass", ["stem", "latexmath", "asciimath"].$to_set()], "|===": ["table", $$$2("::", "Set").$new()], ",===": ["table", $$$2("::", "Set").$new()], ":===": ["table", $$$2("::", "Set").$new()], "!===": ["table", $$$2("::", "Set").$new()], "////": ["comment", $$$2("::", "Set").$new()], "```": ["fenced_code", $$$2("::", "Set").$new()] }));
          Opal2.const_set($nesting3[0], "DELIMITED_BLOCK_HEADS", $send2($hash22([], {}), "tap", [], ($Asciidoctor$9 = function(accum) {
            var self4 = $Asciidoctor$9.$$s || this, $$10;
            if (accum == null) {
              accum = nil2;
            }
            ;
            return $send2($$2($nesting3, "DELIMITED_BLOCKS"), "each_key", [], ($$10 = function(k) {
              var self5 = $$10.$$s || this, $writer2 = nil2;
              if (k == null) {
                k = nil2;
              }
              ;
              $writer2 = [k.$slice(0, 2), true];
              $send2(accum, "[]=", Opal2.to_a($writer2));
              return $writer2[$rb_minus($writer2["length"], 1)];
            }, $$10.$$s = self4, $$10.$$arity = 1, $$10));
          }, $Asciidoctor$9.$$s = self3, $Asciidoctor$9.$$arity = 1, $Asciidoctor$9)));
          Opal2.const_set($nesting3[0], "DELIMITED_BLOCK_TAILS", $send2($hash22([], {}), "tap", [], ($Asciidoctor$11 = function(accum) {
            var self4 = $Asciidoctor$11.$$s || this, $$12;
            if (accum == null) {
              accum = nil2;
            }
            ;
            return $send2($$2($nesting3, "DELIMITED_BLOCKS"), "each_key", [], ($$12 = function(k) {
              var self5 = $$12.$$s || this, $writer2 = nil2;
              if (k == null) {
                k = nil2;
              }
              ;
              if (k.$length()["$=="](4)) {
                $writer2 = [k, k["$[]"]($rb_minus(k.$length(), 1))];
                $send2(accum, "[]=", Opal2.to_a($writer2));
                return $writer2[$rb_minus($writer2["length"], 1)];
              } else {
                return nil2;
              }
              ;
            }, $$12.$$s = self4, $$12.$$arity = 1, $$12));
          }, $Asciidoctor$11.$$s = self3, $Asciidoctor$11.$$arity = 1, $Asciidoctor$11)));
          Opal2.const_set($nesting3[0], "CAPTION_ATTRIBUTE_NAMES", $hash22(["example", "figure", "listing", "table"], { "example": "example-caption", "figure": "figure-caption", "listing": "listing-caption", "table": "table-caption" }));
          Opal2.const_set($nesting3[0], "LAYOUT_BREAK_CHARS", $hash22(["'", "<"], { "'": "thematic_break", "<": "page_break" }));
          Opal2.const_set($nesting3[0], "MARKDOWN_THEMATIC_BREAK_CHARS", $hash22(["-", "*", "_"], { "-": "thematic_break", "*": "thematic_break", "_": "thematic_break" }));
          Opal2.const_set($nesting3[0], "HYBRID_LAYOUT_BREAK_CHARS", $$2($nesting3, "LAYOUT_BREAK_CHARS").$merge($$2($nesting3, "MARKDOWN_THEMATIC_BREAK_CHARS")));
          Opal2.const_set($nesting3[0], "NESTABLE_LIST_CONTEXTS", ["ulist", "olist", "dlist"]);
          Opal2.const_set($nesting3[0], "ORDERED_LIST_STYLES", ["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"]);
          Opal2.const_set($nesting3[0], "ORDERED_LIST_KEYWORDS", $hash22(["loweralpha", "lowerroman", "upperalpha", "upperroman"], { "loweralpha": "a", "lowerroman": "i", "upperalpha": "A", "upperroman": "I" }));
          Opal2.const_set($nesting3[0], "ATTR_REF_HEAD", "{");
          Opal2.const_set($nesting3[0], "LIST_CONTINUATION", "+");
          Opal2.const_set($nesting3[0], "HARD_LINE_BREAK", " +");
          Opal2.const_set($nesting3[0], "LINE_CONTINUATION", " \\");
          Opal2.const_set($nesting3[0], "LINE_CONTINUATION_LEGACY", " +");
          Opal2.const_set($nesting3[0], "BLOCK_MATH_DELIMITERS", $hash22(["asciimath", "latexmath"], { "asciimath": ["\\$", "\\$"], "latexmath": ["\\[", "\\]"] }));
          Opal2.const_set($nesting3[0], "INLINE_MATH_DELIMITERS", $hash22(["asciimath", "latexmath"], { "asciimath": ["\\$", "\\$"], "latexmath": ["\\(", "\\)"] }));
          $writer = ["asciimath"];
          $send2(Opal2.const_set($nesting3[0], "STEM_TYPE_ALIASES", $hash22(["latexmath", "latex", "tex"], { "latexmath": "latexmath", "latex": "latexmath", "tex": "latexmath" })), "default=", Opal2.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          Opal2.const_set($nesting3[0], "FONT_AWESOME_VERSION", "4.7.0");
          Opal2.const_set($nesting3[0], "HIGHLIGHT_JS_VERSION", "9.18.3");
          Opal2.const_set($nesting3[0], "MATHJAX_VERSION", "2.7.9");
          Opal2.const_set($nesting3[0], "DEFAULT_ATTRIBUTES", $hash22(["appendix-caption", "appendix-refsig", "caution-caption", "chapter-refsig", "example-caption", "figure-caption", "important-caption", "last-update-label", "note-caption", "part-refsig", "prewrap", "sectids", "section-refsig", "table-caption", "tip-caption", "toc-placement", "toc-title", "untitled-label", "version-label", "warning-caption"], { "appendix-caption": "Appendix", "appendix-refsig": "Appendix", "caution-caption": "Caution", "chapter-refsig": "Chapter", "example-caption": "Example", "figure-caption": "Figure", "important-caption": "Important", "last-update-label": "Last updated", "note-caption": "Note", "part-refsig": "Part", "prewrap": "", "sectids": "", "section-refsig": "Section", "table-caption": "Table", "tip-caption": "Tip", "toc-placement": "auto", "toc-title": "Table of Contents", "untitled-label": "Untitled", "version-label": "Version", "warning-caption": "Warning" }));
          Opal2.const_set($nesting3[0], "FLEXIBLE_ATTRIBUTES", ["sectnums"]);
          Opal2.const_set($nesting3[0], "INTRINSIC_ATTRIBUTES", $hash22(["startsb", "endsb", "vbar", "caret", "asterisk", "tilde", "plus", "backslash", "backtick", "blank", "empty", "sp", "two-colons", "two-semicolons", "nbsp", "deg", "zwsp", "quot", "apos", "lsquo", "rsquo", "ldquo", "rdquo", "wj", "brvbar", "pp", "cpp", "amp", "lt", "gt"], { "startsb": "[", "endsb": "]", "vbar": "|", "caret": "^", "asterisk": "*", "tilde": "~", "plus": "&#43;", "backslash": "\\", "backtick": "`", "blank": "", "empty": "", "sp": " ", "two-colons": "::", "two-semicolons": ";;", "nbsp": "&#160;", "deg": "&#176;", "zwsp": "&#8203;", "quot": "&#34;", "apos": "&#39;", "lsquo": "&#8216;", "rsquo": "&#8217;", "ldquo": "&#8220;", "rdquo": "&#8221;", "wj": "&#8288;", "brvbar": "&#166;", "pp": "&#43;&#43;", "cpp": "C&#43;&#43;", "amp": "&", "lt": "<", "gt": ">" }));
          if ($$2($nesting3, "RUBY_ENGINE")["$=="]("opal")) {
          } else {
            nil2;
          }
          ;
          Opal2.const_set($nesting3[0], "QUOTE_SUBS", $send2($hash22([], {}), "tap", [], ($Asciidoctor$13 = function(accum) {
            var self4 = $Asciidoctor$13.$$s || this, normal = nil2, compat = nil2;
            if (accum == null) {
              accum = nil2;
            }
            ;
            $writer = [false, normal = [["strong", "unconstrained", new RegExp("\\\\?(?:\\[([^\\]]+)\\])?\\*\\*(" + $$2($nesting3, "CC_ALL") + "+?)\\*\\*", "m")], ["strong", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:}])(?:\\[([^\\]]+)\\])?\\*(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)\\*(?!" + $$2($nesting3, "CG_WORD") + ")", "m")], ["double", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ';:}])(?:\\[([^\\]]+)\\])?"`(\\S|\\S' + $$2($nesting3, "CC_ALL") + '*?\\S)`"(?!' + $$2($nesting3, "CG_WORD") + ")", "m")], ["single", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:`}])(?:\\[([^\\]]+)\\])?'`(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)`'(?!" + $$2($nesting3, "CG_WORD") + ")", "m")], ["monospaced", "unconstrained", new RegExp("\\\\?(?:\\[([^\\]]+)\\])?``(" + $$2($nesting3, "CC_ALL") + "+?)``", "m")], ["monospaced", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:\"'`}])(?:\\[([^\\]]+)\\])?`(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)`(?![" + $$2($nesting3, "CC_WORD") + "\"'`])", "m")], ["emphasis", "unconstrained", new RegExp("\\\\?(?:\\[([^\\]]+)\\])?__(" + $$2($nesting3, "CC_ALL") + "+?)__", "m")], ["emphasis", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:}])(?:\\[([^\\]]+)\\])?_(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)_(?!" + $$2($nesting3, "CG_WORD") + ")", "m")], ["mark", "unconstrained", new RegExp("\\\\?(?:\\[([^\\]]+)\\])?##(" + $$2($nesting3, "CC_ALL") + "+?)##", "m")], ["mark", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + "&;:}])(?:\\[([^\\]]+)\\])?#(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)#(?!" + $$2($nesting3, "CG_WORD") + ")", "m")], ["superscript", "unconstrained", /\\?(?:\[([^\]]+)\])?\^(\S+?)\^/], ["subscript", "unconstrained", /\\?(?:\[([^\]]+)\])?~(\S+?)~/]]];
            $send2(accum, "[]=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true, compat = normal.$drop(0)];
            $send2(accum, "[]=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [2, ["double", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:}])(?:\\[([^\\]]+)\\])?``(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)''(?!" + $$2($nesting3, "CG_WORD") + ")", "m")]];
            $send2(compat, "[]=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [3, ["single", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:}])(?:\\[([^\\]]+)\\])?`(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)'(?!" + $$2($nesting3, "CG_WORD") + ")", "m")]];
            $send2(compat, "[]=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [4, ["monospaced", "unconstrained", new RegExp("\\\\?(?:\\[([^\\]]+)\\])?\\+\\+(" + $$2($nesting3, "CC_ALL") + "+?)\\+\\+", "m")]];
            $send2(compat, "[]=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [5, ["monospaced", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:}])(?:\\[([^\\]]+)\\])?\\+(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)\\+(?!" + $$2($nesting3, "CG_WORD") + ")", "m")]];
            $send2(compat, "[]=", Opal2.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            return compat.$insert(3, ["emphasis", "constrained", new RegExp("(^|[^" + $$2($nesting3, "CC_WORD") + ";:}])(?:\\[([^\\]]+)\\])?'(\\S|\\S" + $$2($nesting3, "CC_ALL") + "*?\\S)'(?!" + $$2($nesting3, "CG_WORD") + ")", "m")]);
          }, $Asciidoctor$13.$$s = self3, $Asciidoctor$13.$$arity = 1, $Asciidoctor$13)));
          Opal2.const_set($nesting3[0], "REPLACEMENTS", [[/\\?\(C\)/, "&#169;", "none"], [/\\?\(R\)/, "&#174;", "none"], [/\\?\(TM\)/, "&#8482;", "none"], [/(?: |\n|^|\\)--(?: |\n|$)/, "&#8201;&#8212;&#8201;", "none"], [new RegExp("(" + $$2($nesting3, "CG_WORD") + ")\\\\?--(?=" + $$2($nesting3, "CG_WORD") + ")"), "&#8212;&#8203;", "leading"], [/\\?\.\.\./, "&#8230;&#8203;", "none"], [/\\?`'/, "&#8217;", "none"], [new RegExp("(" + $$2($nesting3, "CG_ALNUM") + ")\\\\?'(?=" + $$2($nesting3, "CG_ALPHA") + ")"), "&#8217;", "leading"], [/\\?-&gt;/, "&#8594;", "none"], [/\\?=&gt;/, "&#8658;", "none"], [/\\?&lt;-/, "&#8592;", "none"], [/\\?&lt;=/, "&#8656;", "none"], [/\\?(&)amp;((?:[a-zA-Z][a-zA-Z]+\d{0,2}|#\d\d\d{0,4}|#x[\da-fA-F][\da-fA-F][\da-fA-F]{0,3});)/, "", "bounding"]]);
          if ($$2($nesting3, "RUBY_ENGINE")["$=="]("opal")) {
          } else {
            nil2;
          }
          ;
          if ($$2($nesting3, "RUBY_ENGINE")["$=="]("opal")) {
          } else {
            nil2;
          }
          ;
        })($nesting2[0], $nesting2);
        self2.$require("asciidoctor.rb/../asciidoctor/core_ext");
        self2.$require("asciidoctor.rb/../asciidoctor/helpers");
        self2.$require("asciidoctor.rb/../asciidoctor/logging");
        self2.$require("asciidoctor.rb/../asciidoctor/rx");
        self2.$require("asciidoctor.rb/../asciidoctor/substitutors");
        self2.$require("asciidoctor.rb/../asciidoctor/version");
        self2.$require("asciidoctor.rb/../asciidoctor/abstract_node");
        self2.$require("asciidoctor.rb/../asciidoctor/abstract_block");
        self2.$require("asciidoctor.rb/../asciidoctor/attribute_list");
        self2.$require("asciidoctor.rb/../asciidoctor/block");
        self2.$require("asciidoctor.rb/../asciidoctor/callouts");
        self2.$require("asciidoctor.rb/../asciidoctor/converter");
        self2.$require("asciidoctor.rb/../asciidoctor/document");
        self2.$require("asciidoctor.rb/../asciidoctor/inline");
        self2.$require("asciidoctor.rb/../asciidoctor/list");
        self2.$require("asciidoctor.rb/../asciidoctor/parser");
        self2.$require("asciidoctor.rb/../asciidoctor/path_resolver");
        self2.$require("asciidoctor.rb/../asciidoctor/reader");
        self2.$require("asciidoctor.rb/../asciidoctor/section");
        self2.$require("asciidoctor.rb/../asciidoctor/stylesheets");
        self2.$require("asciidoctor.rb/../asciidoctor/table");
        self2.$require("asciidoctor.rb/../asciidoctor/writer");
        self2.$require("asciidoctor.rb/../asciidoctor/load");
        self2.$require("asciidoctor.rb/../asciidoctor/convert");
        if ($$2($nesting2, "RUBY_ENGINE")["$=="]("opal")) {
          self2.$require("asciidoctor.rb/../asciidoctor/syntax_highlighter");
          self2.$require("asciidoctor.rb/../asciidoctor/timings");
          return self2.$require("asciidoctor/js/postscript");
        } else {
          return nil2;
        }
        ;
      })(Opal);
      var toHash = function(object) {
        return object && !object.$$is_hash ? Opal.hash2(Object.keys(object), object) : object;
      };
      var fromHash = function(hash) {
        var object = {};
        if (hash) {
          var stringMap = hash.$$smap;
          for (var stringMapKey in stringMap) {
            var stringMapValue = stringMap[stringMapKey];
            object[stringMapKey] = stringMapValue === Opal.nil ? void 0 : stringMapValue;
          }
          var numericMap = hash.$$map;
          if (numericMap) {
            var positional = [];
            for (var numericMapKey in numericMap) {
              var entry = numericMap[numericMapKey];
              var numericMapValue = entry.value;
              var index = entry.key - 1;
              positional[index] = numericMapValue === Opal.nil ? void 0 : numericMapValue;
            }
            if (positional.length > 0) {
              object.$positional = positional;
            }
          }
        }
        return object;
      };
      var fromHashKeys = function(hash) {
        var object = {};
        if (hash) {
          var data = hash.$$keys;
          for (var key in data) {
            var value = data[key].value;
            object[key.toString()] = value === Opal.nil ? void 0 : value;
          }
        }
        return object;
      };
      var prepareOptions = function(options) {
        options = toHash(options);
        if (options) {
          var attrs = options["$[]"]("attributes");
          if (attrs && typeof attrs === "object" && attrs.constructor.name === "Object") {
            options = options.$dup();
            options["$[]="]("attributes", toHash(attrs));
          }
        }
        return options;
      };
      function initializeClass(superClass, className, functions, defaultFunctions, argProxyFunctions) {
        var scope = Opal.klass(Opal.Object, superClass, className, function() {
        });
        var postConstructFunction;
        var initializeFunction;
        var constructorFunction;
        var defaultFunctionsOverridden = {};
        for (var functionName in functions) {
          if (Object.prototype.hasOwnProperty.call(functions, functionName)) {
            (function(functionName2) {
              var userFunction = functions[functionName2];
              if (functionName2 === "postConstruct") {
                postConstructFunction = userFunction;
              } else if (functionName2 === "initialize") {
                initializeFunction = userFunction;
              } else if (functionName2 === "constructor") {
                constructorFunction = userFunction;
              } else {
                if (defaultFunctions && Object.prototype.hasOwnProperty.call(defaultFunctions, functionName2)) {
                  defaultFunctionsOverridden[functionName2] = true;
                }
                Opal.def(scope, "$" + functionName2, function() {
                  var args2;
                  if (argProxyFunctions && Object.prototype.hasOwnProperty.call(argProxyFunctions, functionName2)) {
                    args2 = argProxyFunctions[functionName2](arguments);
                  } else {
                    args2 = arguments;
                  }
                  return userFunction.apply(this, args2);
                });
              }
            })(functionName);
          }
        }
        var initialize;
        if (typeof constructorFunction === "function") {
          initialize = function() {
            var args2 = Array.from(arguments);
            for (var i = 0; i < args2.length; i++) {
              if (typeof args2[i] === "object" && "$$smap" in args2[i]) {
                args2[i] = fromHash(args2[i]);
              }
            }
            args2.unshift(null);
            var result2 = new (Function.prototype.bind.apply(constructorFunction, args2))();
            Object.assign(this, result2);
            if (typeof postConstructFunction === "function") {
              postConstructFunction.bind(this)();
            }
          };
        } else if (typeof initializeFunction === "function") {
          initialize = function() {
            var args2 = Array.from(arguments);
            for (var i = 0; i < args2.length; i++) {
              if (typeof args2[i] === "object" && "$$smap" in args2[i]) {
                args2[i] = fromHash(args2[i]);
              }
            }
            initializeFunction.apply(this, args2);
            if (typeof postConstructFunction === "function") {
              postConstructFunction.bind(this)();
            }
          };
        } else {
          initialize = function() {
            Opal.send(this, Opal.find_super_dispatcher(this, "initialize", initialize));
            if (typeof postConstructFunction === "function") {
              postConstructFunction.bind(this)();
            }
          };
        }
        Opal.def(scope, "$initialize", initialize);
        Opal.def(scope, "super", function(func) {
          if (typeof func === "function") {
            Opal.send(this, Opal.find_super_dispatcher(this, func.name, func));
          } else {
            var argumentsList = Array.from(arguments);
            for (var i = 0; i < argumentsList.length; i++) {
              if (typeof argumentsList[i] === "object") {
                argumentsList[i] = toHash(argumentsList[i]);
              }
            }
            Opal.send(this, Opal.find_super_dispatcher(this, "initialize", initialize), argumentsList);
          }
        });
        if (defaultFunctions) {
          for (var defaultFunctionName in defaultFunctions) {
            if (Object.prototype.hasOwnProperty.call(defaultFunctions, defaultFunctionName) && !Object.prototype.hasOwnProperty.call(defaultFunctionsOverridden, defaultFunctionName)) {
              (function(defaultFunctionName2) {
                var defaultFunction = defaultFunctions[defaultFunctionName2];
                Opal.def(scope, "$" + defaultFunctionName2, function() {
                  return defaultFunction.apply(this, arguments);
                });
              })(defaultFunctionName);
            }
          }
        }
        return scope;
      }
      var Asciidoctor = Opal.Asciidoctor.$$class;
      Asciidoctor.prototype.getCoreVersion = function() {
        return this.$$const.VERSION;
      };
      Asciidoctor.prototype.getRuntime = function() {
        return {
          ioModule: Opal.const_get_qualified("::", "JAVASCRIPT_IO_MODULE"),
          platform: Opal.const_get_qualified("::", "JAVASCRIPT_PLATFORM"),
          engine: Opal.const_get_qualified("::", "JAVASCRIPT_ENGINE"),
          framework: Opal.const_get_qualified("::", "JAVASCRIPT_FRAMEWORK")
        };
      };
      Asciidoctor.prototype.convert = function(input, options) {
        if (typeof input === "object" && input.constructor.name === "Buffer") {
          input = input.toString("utf8");
        }
        var result2 = this.$convert(input, prepareOptions(options));
        return result2 === Opal.nil ? "" : result2;
      };
      Asciidoctor.prototype.convertFile = function(filename, options) {
        return this.$convert_file(filename, prepareOptions(options));
      };
      Asciidoctor.prototype.load = function(input, options) {
        if (typeof input === "object" && input.constructor.name === "Buffer") {
          input = input.toString("utf8");
        }
        return this.$load(input, prepareOptions(options));
      };
      Asciidoctor.prototype.loadFile = function(filename, options) {
        return this.$load_file(filename, prepareOptions(options));
      };
      var AbstractBlock = Opal.Asciidoctor.AbstractBlock;
      AbstractBlock.prototype.append = function(block2) {
        this.$append(block2);
        return this;
      };
      AbstractBlock.prototype.getTitle = function() {
        var title = this.$title();
        return title === Opal.nil ? void 0 : title;
      };
      AbstractBlock.prototype.setTitle = function(title) {
        title = typeof title === "undefined" ? Opal.nil : title;
        return this["$title="](title);
      };
      AbstractBlock.prototype.assignCaption = function(value, captionContext) {
        value = typeof value === "undefined" ? Opal.nil : value;
        captionContext = typeof captionContext === "undefined" ? null : captionContext;
        this.$assign_caption(value, captionContext);
      };
      AbstractBlock.prototype.getCaptionedTitle = function() {
        return this.$captioned_title();
      };
      AbstractBlock.prototype.getStyle = function() {
        var style = this.style;
        return style === Opal.nil ? void 0 : style;
      };
      AbstractBlock.prototype.setStyle = function(style) {
        this.style = style;
      };
      AbstractBlock.prototype.getSourceLocation = function() {
        var sourceLocation = this.source_location;
        if (sourceLocation === Opal.nil) {
          return void 0;
        }
        sourceLocation.getFile = function() {
          var file2 = this.file;
          return file2 === Opal.nil ? void 0 : file2;
        };
        sourceLocation.getDirectory = function() {
          var dir = this.dir;
          return dir === Opal.nil ? void 0 : dir;
        };
        sourceLocation.getPath = function() {
          var path = this.path;
          return path === Opal.nil ? void 0 : path;
        };
        sourceLocation.getLineNumber = function() {
          var lineno = this.lineno;
          return lineno === Opal.nil ? void 0 : lineno;
        };
        return sourceLocation;
      };
      AbstractBlock.prototype.getCaption = function() {
        var caption = this.$caption();
        return caption === Opal.nil ? void 0 : caption;
      };
      AbstractBlock.prototype.setCaption = function(caption) {
        this.caption = typeof caption === "undefined" ? Opal.nil : caption;
      };
      AbstractBlock.prototype.getLevel = function() {
        var level = this.level;
        return level === Opal.nil ? void 0 : level;
      };
      AbstractBlock.prototype.getSubstitutions = function() {
        return this.subs;
      };
      AbstractBlock.prototype.hasSubstitution = function(substitution) {
        return this["$sub?"](substitution);
      };
      AbstractBlock.prototype.removeSubstitution = function(substitution) {
        this.$remove_sub(substitution);
      };
      AbstractBlock.prototype.hasBlocks = function() {
        return this.blocks.length > 0;
      };
      AbstractBlock.prototype.getBlocks = function() {
        return this.blocks;
      };
      AbstractBlock.prototype.getContent = function() {
        return this.$content();
      };
      AbstractBlock.prototype.convert = function() {
        return this.$convert();
      };
      AbstractBlock.prototype.findBy = function(selector, block2) {
        if (typeof block2 === "undefined" && typeof selector === "function") {
          return Opal.send(this, "find_by", null, selector);
        } else if (typeof block2 === "function") {
          return Opal.send(this, "find_by", [toHash(selector)], block2);
        } else {
          return this.$find_by(toHash(selector));
        }
      };
      AbstractBlock.prototype.getLineNumber = function() {
        var lineno = this.$lineno();
        return lineno === Opal.nil ? void 0 : lineno;
      };
      AbstractBlock.prototype.hasSections = function() {
        return this.next_section_index !== Opal.nil && this.next_section_index > 0;
      };
      AbstractBlock.prototype.getSections = function() {
        return this.$sections();
      };
      AbstractBlock.prototype.getNumeral = function() {
        return this.$numeral();
      };
      AbstractBlock.prototype.setNumeral = function(value) {
        this["$numeral="](value);
      };
      AbstractBlock.prototype.hasTitle = function() {
        return this["$title?"]();
      };
      AbstractBlock.prototype.getAlt = function() {
        return this.$alt();
      };
      var Section = Opal.Asciidoctor.Section;
      Section.create = function(parent, level, numbered, opts) {
        if (opts && opts.attributes) {
          opts.attributes = toHash(opts.attributes);
        }
        return this.$new(parent, level, numbered, toHash(opts));
      };
      Section.prototype.setLevel = function(level) {
        this.level = level;
      };
      Section.prototype.getIndex = function() {
        return this.index;
      };
      Section.prototype.setIndex = function(index) {
        this.index = index;
      };
      Section.prototype.getSectionName = function() {
        var sectname = this.sectname;
        return sectname === Opal.nil ? void 0 : sectname;
      };
      Section.prototype.setSectionName = function(value) {
        this.sectname = value;
      };
      Section.prototype.isSpecial = function() {
        return this.special;
      };
      Section.prototype.setSpecial = function(value) {
        this.special = value;
      };
      Section.prototype.isNumbered = function() {
        return this.numbered;
      };
      Section.prototype.getCaption = function() {
        var value = this.caption;
        return value === Opal.nil ? void 0 : value;
      };
      Section.prototype.getName = function() {
        return this.getTitle();
      };
      var Block = Opal.Asciidoctor.Block;
      Block.create = function(parent, context, opts) {
        if (opts && opts.attributes) {
          opts.attributes = toHash(opts.attributes);
        }
        return this.$new(parent, context, toHash(opts));
      };
      Block.prototype.getSource = function() {
        return this.$source();
      };
      Block.prototype.getSourceLines = function() {
        return this.lines;
      };
      var AbstractNode = Opal.Asciidoctor.AbstractNode;
      AbstractNode.prototype.applySubstitutions = function(text, subs) {
        return this.$apply_subs(text, subs);
      };
      AbstractNode.prototype.resolveSubstitutions = function(subs, type, defaults, subject) {
        if (typeof type === "undefined") {
          type = "block";
        }
        if (typeof defaults === "undefined") {
          defaults = Opal.nil;
        }
        if (typeof subject === "undefined") {
          subject = Opal.nil;
        }
        const value = this.$resolve_subs(subs, type, defaults, subject);
        return value === Opal.nil ? void 0 : value;
      };
      AbstractNode.prototype.resolveBlockSubstitutions = function(subs, defaults, subject) {
        return this.resolveSubstitutions(subs, "block", defaults, subject);
      };
      AbstractNode.prototype.resolvePassSubstitutions = function(subs) {
        return this.resolveSubstitutions(subs, "inline", void 0, "passthrough macro");
      };
      AbstractNode.prototype.getNodeName = function() {
        return this.node_name;
      };
      AbstractNode.prototype.getAttributes = function() {
        return fromHash(this.attributes);
      };
      AbstractNode.prototype.getAttribute = function(name, defaultValue, fallbackName) {
        var value = this.$attr(name, defaultValue, fallbackName);
        return value === Opal.nil ? void 0 : value;
      };
      AbstractNode.prototype.hasAttribute = function(name) {
        return name in this.attributes.$$smap;
      };
      AbstractNode.prototype.isAttribute = function(name, expectedValue, fallbackName) {
        var result2 = this["$attr?"](name, expectedValue, fallbackName);
        return result2 === Opal.nil ? false : result2;
      };
      AbstractNode.prototype.setAttribute = function(name, value, overwrite) {
        if (typeof overwrite === "undefined")
          overwrite = true;
        return this.$set_attr(name, value, overwrite);
      };
      AbstractNode.prototype.removeAttribute = function(name) {
        var value = this.$remove_attr(name);
        return value === Opal.nil ? void 0 : value;
      };
      AbstractNode.prototype.getDocument = function() {
        return this.document;
      };
      AbstractNode.prototype.getParent = function() {
        var parent = this.parent;
        return parent === Opal.nil ? void 0 : parent;
      };
      AbstractNode.prototype.isInline = function() {
        return this["$inline?"]();
      };
      AbstractNode.prototype.isBlock = function() {
        return this["$block?"]();
      };
      AbstractNode.prototype.isRole = function(expectedValue) {
        return this["$role?"](expectedValue);
      };
      AbstractNode.prototype.getRole = function() {
        return this.$role();
      };
      AbstractNode.prototype.hasRole = function(name) {
        return this["$has_role?"](name);
      };
      AbstractNode.prototype.getRoles = function() {
        return this.$roles();
      };
      AbstractNode.prototype.addRole = function(name) {
        return this.$add_role(name);
      };
      AbstractNode.prototype.removeRole = function(name) {
        return this.$remove_role(name);
      };
      AbstractNode.prototype.isReftext = function() {
        return this["$reftext?"]();
      };
      AbstractNode.prototype.getReftext = function() {
        var reftext = this.$reftext();
        return reftext === Opal.nil ? void 0 : reftext;
      };
      AbstractNode.prototype.getContext = function() {
        var context = this.context;
        return typeof context === "string" ? context : context.toString();
      };
      AbstractNode.prototype.getId = function() {
        var id = this.id;
        return id === Opal.nil ? void 0 : id;
      };
      AbstractNode.prototype.setId = function(id) {
        this.id = id;
      };
      AbstractNode.prototype.isOption = function(name) {
        return this["$option?"](name);
      };
      AbstractNode.prototype.setOption = function(name) {
        return this.$set_option(name);
      };
      AbstractNode.prototype.getIconUri = function(name) {
        return this.$icon_uri(name);
      };
      AbstractNode.prototype.getMediaUri = function(target, assetDirKey) {
        return this.$media_uri(target, assetDirKey);
      };
      AbstractNode.prototype.getImageUri = function(targetImage, assetDirKey) {
        return this.$image_uri(targetImage, assetDirKey);
      };
      AbstractNode.prototype.getConverter = function() {
        return this.$converter();
      };
      AbstractNode.prototype.readContents = function(target, options) {
        return this.$read_contents(target, toHash(options));
      };
      AbstractNode.prototype.readAsset = function(path, options) {
        var result2 = this.$read_asset(path, toHash(options));
        return result2 === Opal.nil ? void 0 : result2;
      };
      AbstractNode.prototype.normalizeWebPath = function(target, start, preserveTargetUri) {
        return this.$normalize_web_path(target, start, preserveTargetUri);
      };
      AbstractNode.prototype.normalizeSystemPath = function(target, start, jail, options) {
        return this.$normalize_system_path(target, start, jail, toHash(options));
      };
      AbstractNode.prototype.normalizeAssetPath = function(assetRef, assetName, autoCorrect) {
        return this.$normalize_asset_path(assetRef, assetName, autoCorrect);
      };
      var Document = Opal.Asciidoctor.Document;
      Document.prototype.getRefs = function() {
        return fromHash(this.catalog.$$smap.refs);
      };
      Document.prototype.getImages = function() {
        return this.catalog.$$smap.images;
      };
      Document.prototype.getLinks = function() {
        return this.catalog.$$smap.links;
      };
      Document.prototype.hasFootnotes = function() {
        return this["$footnotes?"]();
      };
      Document.prototype.getFootnotes = function() {
        return this.$footnotes();
      };
      Document.prototype.getHeader = function() {
        return this.header;
      };
      Document.prototype.setAttribute = function(name, value) {
        return this.$set_attribute(name, value);
      };
      Document.prototype.removeAttribute = function(name) {
        this.attributes.$delete(name);
        this.attribute_overrides.$delete(name);
      };
      Document.prototype.convert = function(options) {
        var result2 = this.$convert(toHash(options));
        return result2 === Opal.nil ? "" : result2;
      };
      Document.prototype.write = function(output, target) {
        return this.$write(output, target);
      };
      Document.prototype.getAuthor = function() {
        return this.$author();
      };
      Document.prototype.getSource = function() {
        return this.$source();
      };
      Document.prototype.getSourceLines = function() {
        return this.$source_lines();
      };
      Document.prototype.isNested = function() {
        return this["$nested?"]();
      };
      Document.prototype.isEmbedded = function() {
        return this["$embedded?"]();
      };
      Document.prototype.hasExtensions = function() {
        return this["$extensions?"]();
      };
      Document.prototype.getDoctype = function() {
        return this.doctype;
      };
      Document.prototype.getBackend = function() {
        return this.backend;
      };
      Document.prototype.isBasebackend = function(base) {
        return this["$basebackend?"](base);
      };
      Document.prototype.getTitle = function() {
        var title = this.$title();
        return title === Opal.nil ? void 0 : title;
      };
      Document.prototype.setTitle = function(title) {
        return this["$title="](title);
      };
      Document.prototype.getDocumentTitle = function(options) {
        var doctitle = this.$doctitle(toHash(options));
        return doctitle === Opal.nil ? void 0 : doctitle;
      };
      Document.prototype.getDoctitle = Document.prototype.getDocumentTitle;
      Document.prototype.getCatalog = function() {
        return fromHash(this.catalog);
      };
      Document.prototype.getReferences = Document.prototype.getCatalog;
      Document.prototype.getRevisionDate = function() {
        return this.getAttribute("revdate");
      };
      Document.prototype.getRevdate = function() {
        return this.getRevisionDate();
      };
      Document.prototype.getRevisionNumber = function() {
        return this.getAttribute("revnumber");
      };
      Document.prototype.getRevisionRemark = function() {
        return this.getAttribute("revremark");
      };
      Document.prototype.setHeaderAttribute = function(name, value, overwrite) {
        if (typeof overwrite === "undefined")
          overwrite = true;
        if (typeof value === "undefined")
          value = "";
        return this.$set_header_attribute(name, value, overwrite);
      };
      Document.prototype.getAuthors = function() {
        return this.$authors();
      };
      var Footnote = Document.Footnote;
      Footnote.prototype.getIndex = function() {
        var index = this.$$data.index;
        return index === Opal.nil ? void 0 : index;
      };
      Footnote.prototype.getId = function() {
        var id = this.$$data.id;
        return id === Opal.nil ? void 0 : id;
      };
      Footnote.prototype.getText = function() {
        var text = this.$$data.text;
        return text === Opal.nil ? void 0 : text;
      };
      var ImageReference = Document.ImageReference;
      ImageReference.prototype.getTarget = function() {
        return this.$$data.target;
      };
      ImageReference.prototype.getImagesDirectory = function() {
        var value = this.$$data.imagesdir;
        return value === Opal.nil ? void 0 : value;
      };
      var Author = Document.Author;
      Author.prototype.getName = function() {
        var name = this.$$data.name;
        return name === Opal.nil ? void 0 : name;
      };
      Author.prototype.getFirstName = function() {
        var firstName = this.$$data.firstname;
        return firstName === Opal.nil ? void 0 : firstName;
      };
      Author.prototype.getMiddleName = function() {
        var middleName = this.$$data.middlename;
        return middleName === Opal.nil ? void 0 : middleName;
      };
      Author.prototype.getLastName = function() {
        var lastName = this.$$data.lastname;
        return lastName === Opal.nil ? void 0 : lastName;
      };
      Author.prototype.getInitials = function() {
        var initials = this.$$data.initials;
        return initials === Opal.nil ? void 0 : initials;
      };
      Author.prototype.getEmail = function() {
        var email = this.$$data.email;
        return email === Opal.nil ? void 0 : email;
      };
      Document.RevisionInfo = function(date, number, remark) {
        this.date = date;
        this.number = number;
        this.remark = remark;
      };
      var RevisionInfo = Document.RevisionInfo;
      RevisionInfo.prototype.getDate = function() {
        return this.date;
      };
      RevisionInfo.prototype.getNumber = function() {
        return this.number;
      };
      RevisionInfo.prototype.getRemark = function() {
        return this.remark;
      };
      RevisionInfo.prototype.isEmpty = function() {
        return this.date === void 0 && this.number === void 0 && this.remark === void 0;
      };
      var SafeMode = Opal.Asciidoctor.SafeMode;
      SafeMode.getValueForName = function(name) {
        return this.$value_for_name(name);
      };
      SafeMode.getNameForValue = function(value) {
        var name = this.$name_for_value(value);
        return name === Opal.nil ? void 0 : name;
      };
      SafeMode.getNames = function() {
        return this.$names();
      };
      var Callouts = Opal.Asciidoctor.Callouts;
      Callouts.create = function() {
        return this.$new();
      };
      Callouts.prototype.register = function(ordinal) {
        return this.$register(ordinal);
      };
      Callouts.prototype.readNextId = function() {
        return this.$read_next_id();
      };
      Callouts.prototype.getCalloutIds = function(ordinal) {
        return this.$callout_ids(ordinal);
      };
      Callouts.prototype.getLists = function() {
        var lists = this.lists;
        if (lists && lists.length > 0) {
          for (var i = 0; i < lists.length; i++) {
            var list = lists[i];
            if (list && list.length > 0) {
              for (var j = 0; j < list.length; j++) {
                if (typeof list[j] === "object" && "$$smap" in list[j]) {
                  list[j] = fromHash(list[j]);
                }
              }
            }
          }
        }
        return lists;
      };
      Callouts.prototype.getListIndex = function() {
        return this.list_index;
      };
      Callouts.prototype.getCurrentList = function() {
        var currentList = this.$current_list();
        if (currentList && currentList.length > 0) {
          for (var i = 0; i < currentList.length; i++) {
            if (typeof currentList[i] === "object" && "$$smap" in currentList[i]) {
              currentList[i] = fromHash(currentList[i]);
            }
          }
        }
        return currentList;
      };
      Callouts.prototype.nextList = function() {
        return this.$nextList();
      };
      Callouts.prototype.rewind = function() {
        return this.$rewind();
      };
      Document.prototype.getRevisionInfo = function() {
        return new Document.RevisionInfo(this.getRevisionDate(), this.getRevisionNumber(), this.getRevisionRemark());
      };
      Document.prototype.hasRevisionInfo = function() {
        var revisionInfo = this.getRevisionInfo();
        return !revisionInfo.isEmpty();
      };
      Document.prototype.getNotitle = function() {
        return this.$notitle();
      };
      Document.prototype.getNoheader = function() {
        return this.$noheader();
      };
      Document.prototype.getNofooter = function() {
        return this.$nofooter();
      };
      Document.prototype.hasHeader = function() {
        return this["$header?"]();
      };
      Document.prototype.playbackAttributes = function(blockAttributes) {
        blockAttributes = toHash(blockAttributes);
        if (blockAttributes) {
          var attrEntries = blockAttributes["$[]"]("attribute_entries");
          if (attrEntries && Array.isArray(attrEntries)) {
            var result2 = [];
            for (var i = 0; i < attrEntries.length; i++) {
              var attrEntryObject = attrEntries[i];
              if (attrEntryObject && typeof attrEntryObject === "object" && attrEntryObject.constructor.name === "Object") {
                attrEntryObject.$name = function() {
                  return this.name;
                };
                attrEntryObject.$value = function() {
                  return this.value;
                };
                attrEntryObject.$negate = function() {
                  return this.negate;
                };
              }
              result2.push(attrEntryObject);
            }
            blockAttributes["$[]="]("attribute_entries", result2);
          }
        }
        this.$playback_attributes(blockAttributes);
      };
      Document.prototype.deleteAttribute = function(name) {
        return this.$delete_attribute(name);
      };
      Document.prototype.isAttributeLocked = function(key) {
        return this["$attribute_locked?"](key);
      };
      Document.prototype.restoreAttributes = function() {
        return this.$restore_attributes();
      };
      Document.prototype.parse = function(data) {
        return this.$parse(data);
      };
      Document.prototype.getDocinfo = function(docinfoLocation, suffix) {
        return this.$docinfo(docinfoLocation, suffix);
      };
      Document.prototype.hasDocinfoProcessors = function(docinfoLocation) {
        return this["$docinfo_processors?"](docinfoLocation);
      };
      Document.prototype.incrementAndStoreCounter = function(counterName, block2) {
        return this.$increment_and_store_counter(counterName, block2);
      };
      Document.prototype.counterIncrement = Document.prototype.incrementAndStoreCounter;
      Document.prototype.counter = function(name, seed) {
        return this.$counter(name, seed);
      };
      Document.prototype.getSafe = function() {
        return this.safe;
      };
      Document.prototype.getCompatMode = function() {
        return this.compat_mode;
      };
      Document.prototype.getSourcemap = function() {
        var sourcemap = this.sourcemap;
        return sourcemap === Opal.nil ? false : sourcemap;
      };
      Document.prototype.setSourcemap = function(value) {
        this.sourcemap = value;
      };
      Document.prototype.getCounters = function() {
        return fromHash(this.counters);
      };
      Document.prototype.getCallouts = function() {
        return this.$callouts();
      };
      Document.prototype.getBaseDir = function() {
        return this.base_dir;
      };
      Document.prototype.getOptions = function() {
        return fromHash(this.options);
      };
      Document.prototype.getOutfilesuffix = function() {
        return this.outfilesuffix;
      };
      Document.prototype.getParentDocument = function() {
        var parentDocument = this.parent_document;
        return parentDocument === Opal.nil ? void 0 : parentDocument;
      };
      Document.prototype.getReader = function() {
        return this.reader;
      };
      Document.prototype.getConverter = function() {
        return this.converter;
      };
      Document.prototype.getExtensions = function() {
        var extensions = this.extensions;
        return extensions === Opal.nil ? void 0 : extensions;
      };
      var Title = Document.Title;
      Title.prototype.getMain = function() {
        return this.main;
      };
      Title.prototype.getCombined = function() {
        return this.combined;
      };
      Title.prototype.getSubtitle = function() {
        var subtitle = this.subtitle;
        return subtitle === Opal.nil ? void 0 : subtitle;
      };
      Title.prototype.isSanitized = function() {
        var sanitized = this["$sanitized?"]();
        return sanitized === Opal.nil ? false : sanitized;
      };
      Title.prototype.hasSubtitle = function() {
        return this["$subtitle?"]();
      };
      var Inline = Opal.Asciidoctor.Inline;
      Inline.create = function(parent, context, text, opts) {
        return this.$new(parent, context, text, prepareOptions(opts));
      };
      Inline.prototype.convert = function() {
        return this.$convert();
      };
      Inline.prototype.getText = function() {
        var text = this.$text();
        return text === Opal.nil ? void 0 : text;
      };
      Inline.prototype.getType = function() {
        return this.$type();
      };
      Inline.prototype.getTarget = function() {
        var target = this.$target();
        return target === Opal.nil ? void 0 : target;
      };
      Inline.prototype.getAlt = function() {
        return this.$alt();
      };
      var List = Opal.Asciidoctor.List;
      List.prototype.hasItems = function() {
        return this["$items?"]();
      };
      List.prototype.getItems = function() {
        return this.blocks;
      };
      var ListItem = Opal.Asciidoctor.ListItem;
      ListItem.prototype.getText = function() {
        return this.$text();
      };
      ListItem.prototype.setText = function(text) {
        return this["$text="](text);
      };
      ListItem.prototype.hasText = function() {
        return this["$text?"]();
      };
      ListItem.prototype.getMarker = function() {
        return this.marker;
      };
      ListItem.prototype.setMarker = function(marker) {
        this.marker = marker;
      };
      ListItem.prototype.getList = function() {
        return this.$list();
      };
      ListItem.prototype.getParent = ListItem.prototype.getList;
      var Reader = Opal.Asciidoctor.Reader;
      Reader.prototype.pushInclude = function(data, file2, path, lineno, attributes) {
        return this.$push_include(data, file2, path, lineno, toHash(attributes));
      };
      Reader.prototype.getCursor = function() {
        return this.$cursor();
      };
      Reader.prototype.getLines = function() {
        return this.$lines();
      };
      Reader.prototype.getString = function() {
        return this.$string();
      };
      Reader.prototype.hasMoreLines = function() {
        return this["$has_more_lines?"]();
      };
      Reader.prototype.isEmpty = function() {
        return this["$empty?"]();
      };
      Reader.prototype.peekLine = function(direct) {
        direct = direct || false;
        var line = this.$peek_line(direct);
        return line === Opal.nil ? void 0 : line;
      };
      Reader.prototype.readLine = function() {
        var line = this.$read_line();
        return line === Opal.nil ? void 0 : line;
      };
      Reader.prototype.readLines = function() {
        return this.$read_lines();
      };
      Reader.prototype.read = function() {
        return this.$read();
      };
      Reader.prototype.advance = function() {
        return this.$advance();
      };
      var Cursor = Opal.Asciidoctor.Reader.Cursor;
      Cursor.prototype.getFile = function() {
        var file2 = this.file;
        return file2 === Opal.nil ? void 0 : file2;
      };
      Cursor.prototype.getDirectory = function() {
        var dir = this.dir;
        return dir === Opal.nil ? void 0 : dir;
      };
      Cursor.prototype.getPath = function() {
        var path = this.path;
        return path === Opal.nil ? void 0 : path;
      };
      Cursor.prototype.getLineNumber = function() {
        return this.lineno;
      };
      function initializeLoggerFormatterClass(className, functions) {
        var superclass = Opal.const_get_qualified(Opal.Logger, "Formatter");
        return initializeClass(superclass, className, functions, {}, {
          call: function(args2) {
            for (var i = 0; i < args2.length; i++) {
              if (typeof args2[i] === "object" && "$$smap" in args2[i]) {
                args2[i] = fromHash(args2[i]);
              }
            }
            return args2;
          }
        });
      }
      function initializeLoggerClass(className, functions) {
        var superClass = Opal.const_get_qualified(Opal.Asciidoctor, "Logger");
        return initializeClass(superClass, className, functions, {}, {
          add: function(args2) {
            if (args2.length >= 2 && typeof args2[2] === "object" && "$$smap" in args2[2]) {
              var message = args2[2];
              var messageObject = fromHash(message);
              messageObject.getText = function() {
                return this.text;
              };
              messageObject.getSourceLocation = function() {
                return this.source_location;
              };
              messageObject.$inspect = function() {
                var sourceLocation = this.getSourceLocation();
                if (sourceLocation) {
                  return sourceLocation.getPath() + ": line " + sourceLocation.getLineNumber() + ": " + this.getText();
                } else {
                  return this.getText();
                }
              };
              args2[2] = messageObject;
            }
            if (args2.length >= 1) {
              args2[1] = args2[1] === Opal.nil ? void 0 : args2[1];
            }
            return args2;
          }
        });
      }
      var LoggerManager = Opal.const_get_qualified(Opal.Asciidoctor, "LoggerManager", true);
      Opal.Asciidoctor.LoggerManager = LoggerManager;
      LoggerManager.getLogger = function() {
        return this.$logger();
      };
      LoggerManager.setLogger = function(logger) {
        this["$logger="](logger);
      };
      LoggerManager.newLogger = function(name, functions) {
        return initializeLoggerClass(name, functions).$new();
      };
      LoggerManager.newFormatter = function(name, functions) {
        return initializeLoggerFormatterClass(name, functions).$new();
      };
      var LoggerSeverity = Opal.const_get_qualified(Opal.Logger, "Severity", true);
      Opal.Asciidoctor.LoggerSeverity = LoggerSeverity;
      LoggerSeverity.get = function(severity) {
        return LoggerSeverity.$constants()[severity];
      };
      var LoggerFormatter = Opal.const_get_qualified(Opal.Logger, "Formatter", true);
      Opal.Asciidoctor.LoggerFormatter = LoggerFormatter;
      LoggerFormatter.prototype.call = function(severity, time, programName, message) {
        return this.$call(LoggerSeverity.get(severity), time, programName, message);
      };
      var MemoryLogger = Opal.const_get_qualified(Opal.Asciidoctor, "MemoryLogger", true);
      Opal.Asciidoctor.MemoryLogger = MemoryLogger;
      MemoryLogger.create = function() {
        return this.$new();
      };
      MemoryLogger.prototype.getMessages = function() {
        var messages = this.messages;
        var result2 = [];
        for (var i = 0; i < messages.length; i++) {
          var message = messages[i];
          var messageObject = fromHash(message);
          if (typeof messageObject.message === "string") {
            messageObject.getText = function() {
              return this.message;
            };
          } else {
            messageObject.message = fromHash(messageObject.message);
            messageObject.getText = function() {
              return this.message.text;
            };
          }
          messageObject.getSeverity = function() {
            return this.severity.toString();
          };
          messageObject.getSourceLocation = function() {
            return this.message.source_location;
          };
          result2.push(messageObject);
        }
        return result2;
      };
      var Logging = Opal.const_get_qualified(Opal.Asciidoctor, "Logging", true);
      Opal.Asciidoctor.Logging = Logging;
      Logging.getLogger = function() {
        return LoggerManager.$logger();
      };
      Logging.createLogMessage = function(text, context) {
        return Logging.prototype.$message_with_context(text, toHash(context));
      };
      Reader.prototype.getLogger = Logging.getLogger;
      Reader.prototype.createLogMessage = Logging.createLogMessage;
      AbstractNode.prototype.getLogger = Logging.getLogger;
      AbstractNode.prototype.createLogMessage = Logging.createLogMessage;
      var Logger = Opal.const_get_qualified(Opal.Asciidoctor, "Logger", true);
      Opal.Asciidoctor.Logger = Logger;
      Logger.prototype.getMaxSeverity = function() {
        var result2 = this.max_severity;
        return result2 === Opal.nil ? void 0 : result2;
      };
      Logger.prototype.getFormatter = function() {
        return this.formatter;
      };
      Logger.prototype.setFormatter = function(formatter) {
        this.formatter = formatter;
      };
      Logger.prototype.getLevel = function() {
        return this.level;
      };
      Logger.prototype.setLevel = function(level) {
        this.level = level;
      };
      Logger.prototype.getProgramName = function() {
        return this.progname;
      };
      Logger.prototype.setProgramName = function(programName) {
        this.progname = programName;
      };
      var RubyLogger = Opal.const_get_qualified("::", "Logger");
      var log = function(logger, level, message) {
        logger["$" + level](message);
      };
      RubyLogger.prototype.add = function(severity, message, programName) {
        var severityValue = typeof severity === "string" ? LoggerSeverity[severity.toUpperCase()] : severity;
        this.$add(severityValue, message, programName);
      };
      RubyLogger.prototype.log = RubyLogger.prototype.add;
      RubyLogger.prototype.debug = function(message) {
        log(this, "debug", message);
      };
      RubyLogger.prototype.info = function(message) {
        log(this, "info", message);
      };
      RubyLogger.prototype.warn = function(message) {
        log(this, "warn", message);
      };
      RubyLogger.prototype.error = function(message) {
        log(this, "error", message);
      };
      RubyLogger.prototype.fatal = function(message) {
        log(this, "fatal", message);
      };
      RubyLogger.prototype.isDebugEnabled = function() {
        return this["$debug?"]();
      };
      RubyLogger.prototype.isInfoEnabled = function() {
        return this["$info?"]();
      };
      RubyLogger.prototype.isWarnEnabled = function() {
        return this["$warn?"]();
      };
      RubyLogger.prototype.isErrorEnabled = function() {
        return this["$error?"]();
      };
      RubyLogger.prototype.isFatalEnabled = function() {
        return this["$fatal?"]();
      };
      var NullLogger = Opal.const_get_qualified(Opal.Asciidoctor, "NullLogger", true);
      Opal.Asciidoctor.NullLogger = NullLogger;
      NullLogger.create = function() {
        return this.$new();
      };
      NullLogger.prototype.getMaxSeverity = function() {
        return this.max_severity;
      };
      Opal.Asciidoctor.StopIteration = Opal.StopIteration;
      var Timings = Opal.const_get_qualified(Opal.Asciidoctor, "Timings", true);
      Opal.Asciidoctor.Timings = Timings;
      Timings.create = function() {
        return this.$new();
      };
      Timings.prototype.printReport = function(to, subject) {
        var outputFunction;
        if (to) {
          if (typeof to.$add === "function") {
            outputFunction = function(message) {
              to.$add(1, message);
            };
          } else if (typeof to.log === "function") {
            outputFunction = to.log;
          } else if (typeof to.write === "function") {
            outputFunction = function(message) {
              to.write(message, "utf-8");
            };
          } else {
            throw new Error("The output should be a Stream (with a write function), an object with a log function or a Ruby Logger (with a add function)");
          }
        } else {
          outputFunction = function(message) {
            Opal.gvars.stdout.$write(message);
          };
        }
        if (subject) {
          outputFunction("Input file: " + subject);
        }
        outputFunction(" Time to read and parse source: " + this.$read_parse().toFixed(2));
        outputFunction(" Time to convert document: " + this.$convert().toFixed(2));
        outputFunction(" Total time (read, parse and convert): " + this.$read_parse_convert().toFixed(2));
      };
      var SyntaxHighlighter = Opal.const_get_qualified(Opal.Asciidoctor, "SyntaxHighlighter", true);
      Opal.Asciidoctor.SyntaxHighlighter = SyntaxHighlighter;
      SyntaxHighlighter.register = function(names, functions) {
        var name = typeof names === "string" ? names : names[0];
        if (typeof functions === "function") {
          var classObject = functions;
          var prototype = classObject.prototype;
          var properties = Object.getOwnPropertyNames(prototype);
          functions = {};
          for (var propertyIdx in properties) {
            var propertyName = properties[propertyIdx];
            functions[propertyName] = prototype[propertyName];
          }
        }
        var scope = initializeClass(SyntaxHighlighterBase, name, functions, {}, {
          format: function(args2) {
            if (args2.length >= 2 && typeof args2[2] === "object" && "$$smap" in args2[2]) {
              args2[2] = fromHash(args2[2]);
            }
            if (args2.length >= 1) {
              args2[1] = args2[1] === Opal.nil ? void 0 : args2[1];
            }
            return args2;
          },
          highlight: function(args2) {
            if (args2.length >= 3 && typeof args2[3] === "object" && "$$smap" in args2[3]) {
              var opts = args2[3];
              opts = fromHash(opts);
              for (var key in opts) {
                var value = opts[key];
                if (key === "callouts") {
                  var callouts = fromHashKeys(value);
                  for (var idx in callouts) {
                    var callout = callouts[idx];
                    for (var i = 0; i < callout.length; i++) {
                      var items = callout[i];
                      for (var j = 0; j < items.length; j++) {
                        items[j] = items[j] === Opal.nil ? void 0 : items[j];
                      }
                    }
                  }
                  opts[key] = callouts;
                } else {
                  opts[key] = value === Opal.nil ? void 0 : value;
                }
              }
              args2[3] = opts;
            }
            if (args2.length >= 2) {
              args2[2] = args2[2] === Opal.nil ? void 0 : args2[2];
            }
            return args2;
          }
        });
        for (var functionName in functions) {
          if (Object.prototype.hasOwnProperty.call(functions, functionName)) {
            (function(functionName2) {
              var userFunction = functions[functionName2];
              if (functionName2 === "handlesHighlighting") {
                Opal.def(scope, "$highlight?", function() {
                  return userFunction.call();
                });
              } else if (functionName2 === "hasDocinfo") {
                Opal.def(scope, "$docinfo?", function(location) {
                  return userFunction.apply(this, [location]);
                });
              }
            })(functionName);
          }
        }
        Opal.def(scope, "$name", function() {
          return name;
        });
        SyntaxHighlighter.$register(scope, names);
        return scope;
      };
      SyntaxHighlighter.get = function(name) {
        var result2 = SyntaxHighlighter.$for(name);
        return result2 === Opal.nil ? void 0 : result2;
      };
      SyntaxHighlighter.for = SyntaxHighlighter.get;
      var SyntaxHighlighterBase = Opal.const_get_qualified(SyntaxHighlighter, "Base", true);
      Opal.Asciidoctor.SyntaxHighlighterBase = SyntaxHighlighterBase;
      SyntaxHighlighterBase.prototype.registerFor = function(names) {
        SyntaxHighlighter.$register(this, names);
      };
      var Table = Opal.Asciidoctor.Table;
      Table.create = function(parent, attributes) {
        return this.$new(parent, toHash(attributes));
      };
      Table.prototype.getCaption = function() {
        return this.caption;
      };
      Table.prototype.getRows = function() {
        return this.rows;
      };
      Table.prototype.getColumns = function() {
        return this.columns;
      };
      Table.prototype.getHeadRows = function() {
        return this.rows.head;
      };
      Table.prototype.hasHeadRows = function() {
        return this.rows !== Opal.nil && this.rows.head.length > 0;
      };
      Table.prototype.getBodyRows = function() {
        return this.rows.body;
      };
      Table.prototype.hasBodyRows = function() {
        return this.rows !== Opal.nil && this.rows.body.length > 0;
      };
      Table.prototype.getFootRows = function() {
        return this.rows.foot;
      };
      Table.prototype.hasFootRows = function() {
        return this.rows !== Opal.nil && this.rows.foot.length > 0;
      };
      Table.prototype.hasHeaderOption = function() {
        return this.has_header_option;
      };
      Table.prototype.hasFooterOption = function() {
        var footerOption = this.getAttributes()["footer-option"];
        return footerOption === "";
      };
      Table.prototype.hasAutowidthOption = function() {
        var autowidthOption = this.getAttributes()["autowidth-option"];
        return autowidthOption === "";
      };
      Table.prototype.getRowCount = function() {
        return this.getAttribute("rowcount");
      };
      Table.prototype.setRowCount = function(value) {
        this.setAttribute("rowcount", value);
      };
      Table.prototype.getColumnCount = function() {
        return this.getAttribute("colcount");
      };
      Table.prototype.setColumnCount = function(value) {
        this.setAttribute("colcount", value);
      };
      var Rows = Opal.Asciidoctor.Table.Rows;
      Rows.create = function(head, foot, body) {
        return this.$new(head, foot, body);
      };
      Rows.prototype.getHead = function() {
        return this.head;
      };
      Rows.prototype.getFoot = function() {
        return this.foot;
      };
      Rows.prototype.getBody = function() {
        return this.body;
      };
      Rows.prototype.bySection = function() {
        return [["head", this.head], ["body", this.body], ["foot", this.foot]];
      };
      var Column = Opal.Asciidoctor.Table.Column;
      Column.create = function(table, index, attributes) {
        return this.$new(table, index, toHash(attributes));
      };
      Column.prototype.getColumnNumber = function() {
        return this.getAttribute("colnumber");
      };
      Column.prototype.getWidth = function() {
        return this.getAttribute("width");
      };
      Column.prototype.getHorizontalAlign = function() {
        return this.getAttribute("halign");
      };
      Column.prototype.getVerticalAlign = function() {
        return this.getAttribute("valign");
      };
      Column.prototype.getStyle = function() {
        var style = this.style;
        return style === Opal.nil ? void 0 : style;
      };
      var Cell = Opal.Asciidoctor.Table.Cell;
      Cell.create = function(column, cellText, attributes, opts) {
        return this.$new(column, cellText, toHash(attributes), toHash(opts));
      };
      Cell.prototype.getColumnSpan = function() {
        var colspan = this.colspan;
        return colspan === Opal.nil ? void 0 : colspan;
      };
      Cell.prototype.setColumnSpan = function(value) {
        return this["$colspan="](value);
      };
      Cell.prototype.getRowSpan = function() {
        var rowspan = this.rowspan;
        return rowspan === Opal.nil ? void 0 : rowspan;
      };
      Cell.prototype.setRowSpan = function(value) {
        return this["$rowspan="](value);
      };
      Cell.prototype.getContent = function() {
        return this.$content();
      };
      Cell.prototype.getText = function() {
        return this.$text();
      };
      Cell.prototype.getSource = function() {
        return this.$source();
      };
      Cell.prototype.getLines = function() {
        return this.$lines();
      };
      Cell.prototype.getLineNumber = function() {
        var lineno = this.$lineno();
        return lineno === Opal.nil ? void 0 : lineno;
      };
      Cell.prototype.getFile = function() {
        var file2 = this.$file();
        return file2 === Opal.nil ? void 0 : file2;
      };
      Cell.prototype.getStyle = function() {
        var style = this.$style();
        return style === Opal.nil ? void 0 : style;
      };
      Cell.prototype.getColumn = function() {
        var column = this.$column();
        return column === Opal.nil ? void 0 : column;
      };
      Cell.prototype.getWidth = function() {
        return this.getAttribute("width");
      };
      Cell.prototype.getColumnPercentageWidth = function() {
        return this.getAttribute("colpcwidth");
      };
      Cell.prototype.getInnerDocument = function() {
        var innerDocument = this.inner_document;
        return innerDocument === Opal.nil ? void 0 : innerDocument;
      };
      var TemplateConverter = Opal.Asciidoctor.Converter.TemplateConverter;
      if (TemplateConverter) {
        Opal.Asciidoctor.TemplateConverter = TemplateConverter;
        TemplateConverter.create = function(backend, templateDirectories, opts) {
          if (opts && opts.template_cache) {
            opts.template_cache = toHash(opts.template_cache);
          }
          this.$new(backend, templateDirectories, toHash(opts));
        };
        TemplateConverter.getCache = function() {
          var caches = fromHash(this.caches);
          if (caches) {
            if (caches.scans) {
              caches.scans = fromHash(caches.scans);
              for (var key in caches.scans) {
                caches.scans[key] = fromHash(caches.scans[key]);
              }
            }
            if (caches.templates) {
              caches.templates = fromHash(caches.templates);
            }
          }
          return caches;
        };
        TemplateConverter.clearCache = function() {
          this.$clear_caches();
        };
        TemplateConverter.prototype.convert = function(node, templateName, opts) {
          return this.$convert(node, templateName, toHash(opts));
        };
        TemplateConverter.prototype.handles = function(name) {
          return this["$handles?"](name);
        };
        TemplateConverter.prototype.getTemplates = function() {
          return fromHash(this.$templates());
        };
        TemplateConverter.prototype.register = function(name, template) {
          return this.$register(name, template);
        };
        var TemplateEngine = {};
        TemplateEngine.registry = {};
        Opal.Asciidoctor.TemplateEngine = TemplateEngine;
        TemplateEngine.register = function(names, templateEngineAdapter) {
          if (typeof names === "string") {
            this.registry[names] = templateEngineAdapter;
          } else {
            for (var i = 0; i < names.length; i++) {
              var name = names[i];
              this.registry[name] = templateEngineAdapter;
            }
          }
        };
      }
      var toBlock = function(block2) {
        block2.$$arity = block2.length;
        return block2;
      };
      var registerExtension = function(registry, type, processor, name) {
        if (typeof processor === "object" || processor.$$is_class) {
          return registry["$" + type](processor, name);
        } else {
          return Opal.send(registry, type, name && [name], toBlock(processor));
        }
      };
      var Extensions = Opal.const_get_qualified(Opal.Asciidoctor, "Extensions");
      Opal.Asciidoctor.Extensions = Extensions;
      Extensions.create = function(name, block2) {
        if (typeof name === "function" && typeof block2 === "undefined") {
          return Opal.send(this, "create", null, toBlock(name));
        } else if (typeof block2 === "function") {
          return Opal.send(this, "create", [name], toBlock(block2));
        } else {
          return this.$create();
        }
      };
      Extensions.register = function(name, block2) {
        if (typeof name === "function" && typeof block2 === "undefined") {
          return Opal.send(this, "register", null, toBlock(name));
        } else {
          return Opal.send(this, "register", [name], toBlock(block2));
        }
      };
      Extensions.getGroups = function() {
        return fromHash(this.$groups());
      };
      Extensions.unregisterAll = function() {
        this.$unregister_all();
      };
      Extensions.unregister = function() {
        var names = Array.prototype.concat.apply([], arguments);
        var groups = this.$groups();
        var groupNameIdx = {};
        for (var i = 0, groupSymbolNames = groups.$$keys; i < groupSymbolNames.length; i++) {
          var groupSymbolName = groupSymbolNames[i];
          groupNameIdx[groupSymbolName.toString()] = groupSymbolName;
        }
        for (var j = 0; j < names.length; j++) {
          var groupStringName = names[j];
          if (groupStringName in groupNameIdx)
            Opal.hash_delete(groups, groupNameIdx[groupStringName]);
        }
      };
      var Registry = Extensions.Registry;
      Registry.prototype.getGroups = Extensions.getGroups;
      Registry.prototype.unregisterAll = function() {
        this.groups = Opal.hash();
      };
      Registry.prototype.unregister = Extensions.unregister;
      Registry.prototype.prefer = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        if (typeof processor === "object" || processor.$$is_class) {
          return this.$prefer(name, processor);
        } else {
          return Opal.send(this, "prefer", name && [name], toBlock(processor));
        }
      };
      Registry.prototype.block = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "block", processor, name);
      };
      Registry.prototype.inlineMacro = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "inline_macro", processor, name);
      };
      Registry.prototype.includeProcessor = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "include_processor", processor, name);
      };
      Registry.prototype.blockMacro = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "block_macro", processor, name);
      };
      Registry.prototype.treeProcessor = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "tree_processor", processor, name);
      };
      Registry.prototype.postprocessor = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "postprocessor", processor, name);
      };
      Registry.prototype.preprocessor = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "preprocessor", processor, name);
      };
      Registry.prototype.docinfoProcessor = function(name, processor) {
        if (arguments.length === 1) {
          processor = name;
          name = null;
        }
        return registerExtension(this, "docinfo_processor", processor, name);
      };
      Registry.prototype.hasPreprocessors = function() {
        return this["$preprocessors?"]();
      };
      Registry.prototype.hasTreeProcessors = function() {
        return this["$tree_processors?"]();
      };
      Registry.prototype.hasIncludeProcessors = function() {
        return this["$include_processors?"]();
      };
      Registry.prototype.hasPostprocessors = function() {
        return this["$postprocessors?"]();
      };
      Registry.prototype.hasDocinfoProcessors = function(location) {
        return this["$docinfo_processors?"](location);
      };
      Registry.prototype.hasBlocks = function() {
        return this["$blocks?"]();
      };
      Registry.prototype.hasBlockMacros = function() {
        return this["$block_macros?"]();
      };
      Registry.prototype.hasInlineMacros = function() {
        return this["$inline_macros?"]();
      };
      Registry.prototype.getPreprocessors = function() {
        return this.$preprocessors();
      };
      Registry.prototype.getTreeProcessors = function() {
        return this.$tree_processors();
      };
      Registry.prototype.getIncludeProcessors = function() {
        return this.$include_processors();
      };
      Registry.prototype.getPostprocessors = function() {
        return this.$postprocessors();
      };
      Registry.prototype.getDocinfoProcessors = function(location) {
        return this.$docinfo_processors(location);
      };
      Registry.prototype.getBlocks = function() {
        return this.block_extensions.$values();
      };
      Registry.prototype.getBlockMacros = function() {
        return this.block_macro_extensions.$values();
      };
      Registry.prototype.getInlineMacros = function() {
        return this.$inline_macros();
      };
      Registry.prototype.getInlineMacroFor = function(name) {
        var result2 = this["$registered_for_inline_macro?"](name);
        return result2 === false ? void 0 : result2;
      };
      Registry.prototype.getBlockFor = function(name, context) {
        if (typeof context === "undefined") {
          var ext = this.$find_block_extension(name);
          return ext === Opal.nil ? void 0 : ext;
        }
        var result2 = this["$registered_for_block?"](name, context);
        return result2 === false ? void 0 : result2;
      };
      Registry.prototype.getBlockMacroFor = function(name) {
        var result2 = this["$registered_for_block_macro?"](name);
        return result2 === false ? void 0 : result2;
      };
      var Processor = Extensions.Processor;
      Processor.prototype.prepend = function() {
        this.$option("position", ">>");
      };
      Processor.prototype.process = function(block2) {
        var handler = {
          apply: function(target, thisArg, argumentsList) {
            for (var i = 0; i < argumentsList.length; i++) {
              if (typeof argumentsList[i] === "object" && "$$smap" in argumentsList[i]) {
                argumentsList[i] = fromHash(argumentsList[i]);
              }
            }
            return target.apply(thisArg, argumentsList);
          }
        };
        var blockProxy = new Proxy(block2, handler);
        return Opal.send(this, "process", null, toBlock(blockProxy));
      };
      Processor.prototype.named = function(name) {
        return this.$named(name);
      };
      Processor.prototype.createBlock = function(parent, context, source, attrs, opts) {
        return this.$create_block(parent, context, source, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createList = function(parent, context, attrs) {
        return this.$create_list(parent, context, toHash(attrs));
      };
      Processor.prototype.createListItem = function(parent, text) {
        return this.$create_list_item(parent, text);
      };
      Processor.prototype.createImageBlock = function(parent, attrs, opts) {
        return this.$create_image_block(parent, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createParagraph = function(parent, source, attrs, opts) {
        return this.$create_paragraph(parent, source, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createOpenBlock = function(parent, source, attrs, opts) {
        return this.$create_open_block(parent, source, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createExampleBlock = function(parent, source, attrs, opts) {
        return this.$create_example_block(parent, source, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createPassBlock = function(parent, source, attrs, opts) {
        return this.$create_pass_block(parent, source, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createListingBlock = function(parent, source, attrs, opts) {
        return this.$create_listing_block(parent, source, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createLiteralBlock = function(parent, source, attrs, opts) {
        return this.$create_literal_block(parent, source, toHash(attrs), toHash(opts));
      };
      Processor.prototype.createAnchor = function(parent, text, opts) {
        if (opts && opts.attributes) {
          opts.attributes = toHash(opts.attributes);
        }
        return this.$create_anchor(parent, text, toHash(opts));
      };
      Processor.prototype.createInlinePass = function(parent, text, opts) {
        if (opts && opts.attributes) {
          opts.attributes = toHash(opts.attributes);
        }
        return this.$create_inline_pass(parent, text, toHash(opts));
      };
      Processor.prototype.createInline = function(parent, context, text, opts) {
        if (opts && opts.attributes) {
          opts.attributes = toHash(opts.attributes);
        }
        return this.$create_inline(parent, context, text, toHash(opts));
      };
      Processor.prototype.parseContent = function(parent, content, attrs) {
        return this.$parse_content(parent, content, attrs);
      };
      Processor.prototype.parseAttributes = function(block2, attrlist, opts) {
        if (opts && opts.attributes) {
          opts.attributes = toHash(opts.attributes);
        }
        return fromHash(this.$parse_attributes(block2, attrlist, toHash(opts)));
      };
      Processor.prototype.positionalAttributes = function(value) {
        return this.$positional_attrs(value);
      };
      Processor.prototype.resolveAttributes = function(value) {
        if (typeof value === "object" && !Array.isArray(value)) {
          return this.$resolves_attributes(toHash(value));
        }
        if (arguments.length > 1) {
          return this.$resolves_attributes(Array.prototype.slice.call(arguments));
        }
        if (typeof value === "undefined") {
          return this.$resolves_attributes(Opal.nil);
        }
        return this.$resolves_attributes(value);
      };
      Processor.prototype.resolvesAttributes = Processor.prototype.resolveAttributes;
      Processor.prototype.getConfig = function() {
        return fromHash(this.config);
      };
      Processor.prototype.option = function(key, value) {
        this.$option(key, value);
      };
      var BlockProcessor = Extensions.BlockProcessor;
      BlockProcessor.prototype.defaultAttributes = function(value) {
        this.$default_attributes(toHash(value));
      };
      BlockProcessor.prototype.onContext = function(context) {
        return this.$on_context(context);
      };
      BlockProcessor.prototype.onContexts = function(contexts) {
        return this.$on_contexts(Array.prototype.slice.call(arguments));
      };
      BlockProcessor.prototype.getName = function() {
        var name = this.name;
        return name === Opal.nil ? void 0 : name;
      };
      BlockProcessor.prototype.parseContentAs = function(value) {
        this.$parse_content_as(value);
      };
      var BlockMacroProcessor = Extensions.BlockMacroProcessor;
      BlockMacroProcessor.prototype.defaultAttributes = function(value) {
        this.$default_attributes(toHash(value));
      };
      BlockMacroProcessor.prototype.getName = function() {
        var name = this.name;
        return name === Opal.nil ? void 0 : name;
      };
      BlockMacroProcessor.prototype.parseContentAs = function(value) {
        this.$parse_content_as(value);
      };
      var InlineMacroProcessor = Extensions.InlineMacroProcessor;
      InlineMacroProcessor.prototype.defaultAttributes = function(value) {
        this.$default_attributes(toHash(value));
      };
      InlineMacroProcessor.prototype.getName = function() {
        var name = this.name;
        return name === Opal.nil ? void 0 : name;
      };
      InlineMacroProcessor.prototype.parseContentAs = function(value) {
        this.$parse_content_as(value);
      };
      InlineMacroProcessor.prototype.matchFormat = function(value) {
        this.$match_format(value);
      };
      InlineMacroProcessor.prototype.match = function(value) {
        this.$match(value);
      };
      var IncludeProcessor = Extensions.IncludeProcessor;
      IncludeProcessor.prototype.handles = function(block2) {
        return Opal.send(this, "handles?", null, toBlock(block2));
      };
      IncludeProcessor.prototype.prefer = function() {
        this.$prefer();
      };
      var TreeProcessor = Extensions.TreeProcessor;
      TreeProcessor.prototype.prefer = function() {
        this.$prefer();
      };
      var Postprocessor = Extensions.Postprocessor;
      Postprocessor.prototype.prefer = function() {
        this.$prefer();
      };
      var Preprocessor = Extensions.Preprocessor;
      Preprocessor.prototype.prefer = function() {
        this.$prefer();
      };
      var DocinfoProcessor = Extensions.DocinfoProcessor;
      DocinfoProcessor.prototype.prefer = function() {
        this.$prefer();
      };
      DocinfoProcessor.prototype.atLocation = function(value) {
        this.$at_location(value);
      };
      function initializeProcessorClass(superclassName, className, functions) {
        var superClass = Opal.const_get_qualified(Extensions, superclassName);
        return initializeClass(superClass, className, functions, {
          "handles?": function() {
            return true;
          }
        });
      }
      Extensions.createPostprocessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("Postprocessor", name, functions);
      };
      Extensions.newPostprocessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createPostprocessor(name, functions).$new();
      };
      Extensions.createPreprocessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("Preprocessor", name, functions);
      };
      Extensions.newPreprocessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createPreprocessor(name, functions).$new();
      };
      Extensions.createTreeProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("TreeProcessor", name, functions);
      };
      Extensions.newTreeProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createTreeProcessor(name, functions).$new();
      };
      Extensions.createIncludeProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("IncludeProcessor", name, functions);
      };
      Extensions.newIncludeProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createIncludeProcessor(name, functions).$new();
      };
      Extensions.createDocinfoProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("DocinfoProcessor", name, functions);
      };
      Extensions.newDocinfoProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createDocinfoProcessor(name, functions).$new();
      };
      Extensions.createBlockProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("BlockProcessor", name, functions);
      };
      Extensions.newBlockProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createBlockProcessor(name, functions).$new();
      };
      Extensions.createInlineMacroProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("InlineMacroProcessor", name, functions);
      };
      Extensions.newInlineMacroProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createInlineMacroProcessor(name, functions).$new();
      };
      Extensions.createBlockMacroProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return initializeProcessorClass("BlockMacroProcessor", name, functions);
      };
      Extensions.newBlockMacroProcessor = function(name, functions) {
        if (arguments.length === 1) {
          functions = name;
          name = null;
        }
        return this.createBlockMacroProcessor(name, functions).$new();
      };
      var Converter = Opal.const_get_qualified(Opal.Asciidoctor, "Converter");
      Opal.Asciidoctor.Converter = Converter;
      Converter.prototype.convert = function(node, transform, opts) {
        return this.$convert(node, transform, toHash(opts));
      };
      Converter.create = function(backend, opts) {
        return this.$create(backend, toHash(opts));
      };
      var ConverterFactory = Opal.Asciidoctor.Converter.Factory;
      var ConverterBase = Opal.Asciidoctor.Converter.Base;
      Opal.Asciidoctor.ConverterFactory = ConverterFactory;
      var ConverterBackendTraits = Opal.Asciidoctor.Converter.BackendTraits;
      Opal.Asciidoctor.ConverterBackendTraits = ConverterBackendTraits;
      ConverterFactory.register = function(converter, backends) {
        var object;
        var buildBackendTraitsFromObject = function(obj) {
          return Object.assign({}, obj.basebackend ? { basebackend: obj.basebackend } : {}, obj.outfilesuffix ? { outfilesuffix: obj.outfilesuffix } : {}, obj.filetype ? { filetype: obj.filetype } : {}, obj.htmlsyntax ? { htmlsyntax: obj.htmlsyntax } : {}, obj.supports_templates ? { supports_templates: obj.supports_templates } : {});
        };
        var assignBackendTraitsToInstance = function(obj, instance) {
          if (obj.backend_traits) {
            instance.backend_traits = toHash(obj.backend_traits);
          } else if (obj.backendTraits) {
            instance.backend_traits = toHash(obj.backendTraits);
          } else if (obj.basebackend || obj.outfilesuffix || obj.filetype || obj.htmlsyntax || obj.supports_templates) {
            instance.backend_traits = toHash(buildBackendTraitsFromObject(obj));
          }
        };
        var bridgeHandlesMethodToInstance = function(obj, instance) {
          bridgeMethodToInstance(obj, instance, "$handles?", "handles", function() {
            return true;
          });
        };
        var bridgeComposedMethodToInstance = function(obj, instance) {
          bridgeMethodToInstance(obj, instance, "$composed", "composed");
        };
        var bridgeEqEqMethodToInstance = function(obj, instance) {
          bridgeMethodToInstance(obj, instance, "$==", "==", function(other) {
            return instance === other;
          });
        };
        var bridgeSendMethodToInstance = function(obj, instance) {
          bridgeMethodToInstance(obj, instance, "$send", "send", function(symbol) {
            var args3 = Array.prototype.slice.call(arguments, 1);
            var func = instance["$" + symbol];
            if (func) {
              return func.apply(instance, args3);
            }
            throw new Error(`undefined method \`${symbol}\` for \`${instance.toString()}\``);
          });
        };
        var bridgeMethodToInstance = function(obj, instance, methodName, functionName2, defaultImplementation) {
          if (typeof obj[methodName] === "undefined") {
            if (typeof obj[functionName2] === "function") {
              instance[methodName] = obj[functionName2];
            } else if (defaultImplementation) {
              instance[methodName] = defaultImplementation;
            }
          }
        };
        var addRespondToMethod = function(instance) {
          if (typeof instance["$respond_to?"] !== "function") {
            instance["$respond_to?"] = function(name) {
              return typeof this[name] === "function";
            };
          }
        };
        if (typeof converter === "function") {
          object = initializeClass(ConverterBase, converter.constructor.name, {
            initialize: function(backend, opts) {
              var self2 = this;
              var result2 = new converter(backend, opts);
              Object.assign(this, result2);
              assignBackendTraitsToInstance(result2, self2);
              var propertyNames = Object.getOwnPropertyNames(converter.prototype);
              for (var i = 0; i < propertyNames.length; i++) {
                var propertyName = propertyNames[i];
                if (propertyName !== "constructor") {
                  self2[propertyName] = result2[propertyName];
                }
              }
              if (typeof result2.$convert === "undefined" && typeof result2.convert === "function") {
                self2.$convert = result2.convert;
              }
              bridgeHandlesMethodToInstance(result2, self2);
              bridgeComposedMethodToInstance(result2, self2);
              addRespondToMethod(self2);
              self2.super(backend, opts);
            }
          });
          object.$extend(ConverterBackendTraits);
        } else if (typeof converter === "object") {
          if (typeof converter.$convert === "undefined" && typeof converter.convert === "function") {
            converter.$convert = converter.convert;
          }
          assignBackendTraitsToInstance(converter, converter);
          if (converter.backend_traits) {
            var converterBackendTraitsFunctionNames = [
              "basebackend",
              "filetype",
              "htmlsyntax",
              "outfilesuffix",
              "supports_templates",
              "supports_templates?",
              "init_backend_traits",
              "backend_traits"
            ];
            for (var functionName of converterBackendTraitsFunctionNames) {
              converter["$" + functionName] = ConverterBackendTraits.prototype["$" + functionName];
            }
            converter.$$meta = ConverterBackendTraits;
          }
          bridgeHandlesMethodToInstance(converter, converter);
          bridgeComposedMethodToInstance(converter, converter);
          bridgeEqEqMethodToInstance(converter, converter);
          bridgeSendMethodToInstance(converter, converter);
          addRespondToMethod(converter);
          object = converter;
        }
        var args2 = [object].concat(backends);
        return Converter.$register.apply(Converter, args2);
      };
      ConverterFactory.getDefault = function(initialize) {
        return this.$default(initialize);
      };
      ConverterFactory.prototype.create = function(backend, opts) {
        return this.$create(backend, toHash(opts));
      };
      ConverterFactory.getRegistry = function() {
        return fromHash(Converter.$registry());
      };
      ConverterFactory.for = function(backend) {
        const converter = Converter.$for(backend);
        return converter === Opal.nil ? void 0 : converter;
      };
      ConverterFactory.unregisterAll = function() {
        var internalRegistry = Converter.DefaultFactory.$$cvars["@@registry"];
        Converter.DefaultFactory.$$cvars["@@registry"] = toHash({ html5: internalRegistry["$[]"]("html5") });
      };
      var Html5Converter = Opal.Asciidoctor.Converter.Html5Converter;
      Opal.Asciidoctor.Html5Converter = Html5Converter;
      Html5Converter.create = function() {
        return this.$new();
      };
      Html5Converter.prototype.convert = function(node, transform, opts) {
        return this.$convert(node, transform, opts);
      };
      var ASCIIDOCTOR_JS_VERSION = "2.2.6";
      Opal.Asciidoctor.prototype.getVersion = function() {
        return ASCIIDOCTOR_JS_VERSION;
      };
      return Opal.Asciidoctor;
    });
  }
});

// main.ts
__export(exports, {
  default: () => AsciiDocBlocks
});
var import_core = __toModule(require_asciidoctor());
var import_obsidian = __toModule(require("obsidian"));
var AsciiDocBlocks = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.postprocessors = new Map();
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Obsidian AsciiDoc Blocks loaded");
      this.converter = (0, import_core.default)();
      const processor = this.registerMarkdownCodeBlockProcessor("asciidoc-table", (src, el, ctx) => this.postprocessor("asciidoc-table", src, el, ctx));
      this.postprocessors.set("asciidoc-table", processor);
    });
  }
  postprocessor(type, src, el, ctx) {
    return __async(this, null, function* () {
      console.log(`Obsidian AsciiDoc Blocks: ${type}`);
      try {
        const html = createEl("div");
        const output = this.converter.convert(src);
        html.appendChild((0, import_obsidian.sanitizeHTMLToDom)(output.toString()));
        const parent = el.parentElement;
        if (parent) {
          parent.addClass("asciidoc-blocks-parent", `asciidoc-blocks-${type.replace("asciidoc-", "")}-parent`);
        }
        el.replaceWith(html);
        return html;
      } catch (e) {
        console.error(e);
        const pre = createEl("pre");
        pre.createEl("code", {
          attr: {
            style: `color: var(--text-error) !important`
          }
        }).createSpan({
          text: "There was an error rendering the asciidoc-block:\n\n" + src
        });
        el.replaceWith(pre);
      }
    });
  }
  onunload() {
  }
};
/**
 * @license Asciidoctor.js 2.2.6 | MIT | https://github.com/asciidoctor/asciidoctor.js
 */
